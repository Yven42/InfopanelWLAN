
Infopanel_Solar_Beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003de60  08010480  08010480  00020480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804e2e0  0804e2e0  000602e8  2**0
                  CONTENTS
  4 .ARM          00000008  0804e2e0  0804e2e0  0005e2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804e2e8  0804e2e8  000602e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804e2e8  0804e2e8  0005e2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804e2ec  0804e2ec  0005e2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0804e2f0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  200002e8  0804e5d8  000602e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e0c  0804e5d8  00061e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000602e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00060318  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa30  00000000  00000000  0006035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fa6  00000000  00000000  0007fd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00084d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014a3  00000000  00000000  00086888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da12  00000000  00000000  00087d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002369a  00000000  00000000  000b573d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001102ff  00000000  00000000  000d8dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008504  00000000  00000000  001e90d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001f15dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010468 	.word	0x08010468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	08010468 	.word	0x08010468

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <vApplicationGetIdleTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000304 	.word	0x20000304
 8000f14:	20000358 	.word	0x20000358

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f002 ffd3 	bl	8003ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f84f 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f9a7 	bl	8001278 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f2a:	f000 f937 	bl	800119c <MX_SPI2_Init>
  MX_RTC_Init();
 8000f2e:	f000 f901 	bl	8001134 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000f32:	f000 f971 	bl	8001218 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000f36:	f000 f899 	bl	800106c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(WLAN_POWER_GPIO_Port, WLAN_POWER_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f004 fd2f 	bl	80059a4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4a:	f003 f839 	bl	8003fc0 <HAL_Delay>
  //HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
  //HAL_GPIO_WritePin(ENABLE_POLOLU_GPIO_Port, ENABLE_POLOLU_Pin, GPIO_PIN_SET);
  HAL_Delay(1000);
 8000f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f52:	f003 f835 	bl	8003fc0 <HAL_Delay>
  HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f004 fd20 	bl	80059a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f004 fd19 	bl	80059a4 <HAL_GPIO_WritePin>
  osDelay(1000);
 8000f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f76:	f009 fb72 	bl	800a65e <osDelay>
  //HAL_Delay(1000);
  for (int i=0; i<4000000;i++);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	e002      	b.n	8000f86 <main+0x6e>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <main+0xa8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	ddf8      	ble.n	8000f80 <main+0x68>
  HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f004 fd04 	bl	80059a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f004 fcfd 	bl	80059a4 <HAL_GPIO_WritePin>

  osDelay(500);
 8000faa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fae:	f009 fb56 	bl	800a65e <osDelay>

  Wifi_Init(osPriorityNormal);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f008 fcb8 	bl	8009928 <Wifi_Init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fb8:	f009 fafe 	bl	800a5b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <main+0xa4>
 8000fbe:	bf00      	nop
 8000fc0:	003d08ff 	.word	0x003d08ff

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00c fd4f 	bl	800da76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f004 fd33 	bl	8005a54 <HAL_PWREx_ControlVoltageScaling>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff4:	f000 faa0 	bl	8001538 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001002:	2310      	movs	r3, #16
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100e:	2302      	movs	r3, #2
 8001010:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001016:	230a      	movs	r3, #10
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800101a:	2307      	movs	r3, #7
 800101c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101e:	2302      	movs	r3, #2
 8001020:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fd68 	bl	8005b00 <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001036:	f000 fa7f 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2303      	movs	r3, #3
 8001040:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	2104      	movs	r1, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f005 f930 	bl	80062b8 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800105e:	f000 fa6b 	bl	8001538 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3758      	adds	r7, #88	; 0x58
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_ADC3_Init+0xbc>)
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <MX_ADC3_Init+0xc0>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_ADC3_Init+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_ADC3_Init+0xbc>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_ADC3_Init+0xbc>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_ADC3_Init+0xbc>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_ADC3_Init+0xbc>)
 80010e4:	f003 f9a0 	bl	8004428 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80010ee:	f000 fa23 	bl	8001538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC3_Init+0xc4>)
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2306      	movs	r3, #6
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fe:	237f      	movs	r3, #127	; 0x7f
 8001100:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001102:	2304      	movs	r3, #4
 8001104:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_ADC3_Init+0xbc>)
 8001110:	f003 fc80 	bl	8004a14 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800111a:	f000 fa0d 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000558 	.word	0x20000558
 800112c:	50040200 	.word	0x50040200
 8001130:	04300002 	.word	0x04300002

08001134 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_RTC_Init+0x60>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_RTC_Init+0x64>)
 800113c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_RTC_Init+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_RTC_Init+0x60>)
 8001146:	227f      	movs	r2, #127	; 0x7f
 8001148:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_RTC_Init+0x60>)
 800114c:	22ff      	movs	r2, #255	; 0xff
 800114e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_RTC_Init+0x60>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_RTC_Init+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <MX_RTC_Init+0x60>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_RTC_Init+0x60>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <MX_RTC_Init+0x60>)
 800116a:	f005 ff85 	bl	8007078 <HAL_RTC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001174:	f000 f9e0 	bl	8001538 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001178:	2204      	movs	r2, #4
 800117a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_RTC_Init+0x60>)
 8001180:	f006 f88c 	bl	800729c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800118a:	f000 f9d5 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200005bc 	.word	0x200005bc
 8001198:	40002800 	.word	0x40002800

0800119c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_SPI2_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_SPI2_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_SPI2_Init+0x74>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_SPI2_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SPI2_Init+0x74>)
 80011b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI2_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_SPI2_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI2_Init+0x74>)
 80011ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SPI2_Init+0x74>)
 80011d2:	2228      	movs	r2, #40	; 0x28
 80011d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SPI2_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SPI2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_SPI2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SPI2_Init+0x74>)
 80011ea:	2207      	movs	r2, #7
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_SPI2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_SPI2_Init+0x74>)
 80011f6:	2208      	movs	r2, #8
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_SPI2_Init+0x74>)
 80011fc:	f006 f908 	bl	8007410 <HAL_SPI_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 f997 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200005e0 	.word	0x200005e0
 8001214:	40003800 	.word	0x40003800

08001218 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART3_UART_Init+0x58>)
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <MX_USART3_UART_Init+0x5c>)
 8001220:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_USART3_UART_Init+0x58>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART3_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USART3_UART_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART3_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART3_UART_Init+0x58>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART3_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART3_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART3_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART3_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART3_UART_Init+0x58>)
 800125c:	f006 fc4e 	bl	8007afc <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001266:	f000 f967 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000644 	.word	0x20000644
 8001274:	40004800 	.word	0x40004800

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <MX_GPIO_Init+0x17c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <MX_GPIO_Init+0x17c>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <MX_GPIO_Init+0x17c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <MX_GPIO_Init+0x17c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WLAN_POWER_GPIO_Port, WLAN_POWER_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f004 fb55 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_EN_Battery_Pin|ENABLE_POLOLU_Pin|PWR_Display_Pin|RST_Pin
 80012fa:	2200      	movs	r2, #0
 80012fc:	f242 0173 	movw	r1, #8307	; 0x2073
 8001300:	483d      	ldr	r0, [pc, #244]	; (80013f8 <MX_GPIO_Init+0x180>)
 8001302:	f004 fb4f 	bl	80059a4 <HAL_GPIO_WritePin>
                          |DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2104      	movs	r1, #4
 800130a:	483b      	ldr	r0, [pc, #236]	; (80013f8 <MX_GPIO_Init+0x180>)
 800130c:	f004 fb4a 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_Pin_GPIO_Port, Debug_Pin_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001316:	4839      	ldr	r0, [pc, #228]	; (80013fc <MX_GPIO_Init+0x184>)
 8001318:	f004 fb44 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_WLAN_Pin|RST_WLAN_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f004 fb3d 	bl	80059a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	482e      	ldr	r0, [pc, #184]	; (80013fc <MX_GPIO_Init+0x184>)
 8001342:	f004 f96d 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001346:	230c      	movs	r3, #12
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001356:	2307      	movs	r3, #7
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f004 f95c 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : WLAN_POWER_Pin EN_WLAN_Pin RST_WLAN_Pin */
  GPIO_InitStruct.Pin = WLAN_POWER_Pin|EN_WLAN_Pin|RST_WLAN_Pin;
 8001368:	f44f 7350 	mov.w	r3, #832	; 0x340
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f004 f94c 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_EN_Battery_Pin ENABLE_POLOLU_Pin DISPLAY_POWER_Pin PWR_Display_Pin
                           RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = ADC_EN_Battery_Pin|ENABLE_POLOLU_Pin|DISPLAY_POWER_Pin|PWR_Display_Pin
 8001388:	f242 0377 	movw	r3, #8311	; 0x2077
 800138c:	617b      	str	r3, [r7, #20]
                          |RST_Pin|DC_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4815      	ldr	r0, [pc, #84]	; (80013f8 <MX_GPIO_Init+0x180>)
 80013a2:	f004 f93d 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_Pin_Pin */
  GPIO_InitStruct.Pin = Debug_Pin_Pin;
 80013a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Debug_Pin_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <MX_GPIO_Init+0x184>)
 80013c0:	f004 f92e 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <MX_GPIO_Init+0x180>)
 80013d8:	f004 f922 	bl	8005620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2105      	movs	r1, #5
 80013e0:	2028      	movs	r0, #40	; 0x28
 80013e2:	f004 f868 	bl	80054b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e6:	2028      	movs	r0, #40	; 0x28
 80013e8:	f004 f881 	bl	80054ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800

08001400 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_Pin)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001410:	d102      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x18>
	{
		u8Button = 1;
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_GPIO_EXTI_Callback+0x24>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	}
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	200006c8 	.word	0x200006c8

08001428 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001430:	f7ff fdc8 	bl	8000fc4 <SystemClock_Config>
	HAL_ResumeTick();
 8001434:	f002 fdf8 	bl	8004028 <HAL_ResumeTick>
	MX_SPI2_Init();
 8001438:	f7ff feb0 	bl	800119c <MX_SPI2_Init>
	DEV_Module_Init();
 800143c:	f001 fde2 	bl	8003004 <DEV_Module_Init>
	EPD_7IN5_V2_Init();
 8001440:	f001 ff00 	bl	8003244 <EPD_7IN5_V2_Init>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0000      	movs	r0, r0
	...

08001450 <u16BatteryVoltage>:

uint16_t u16BatteryVoltage()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADC_EN_Battery_GPIO_Port, ADC_EN_Battery_Pin, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2101      	movs	r1, #1
 800145a:	4833      	ldr	r0, [pc, #204]	; (8001528 <u16BatteryVoltage+0xd8>)
 800145c:	f004 faa2 	bl	80059a4 <HAL_GPIO_WritePin>
	for (int i=0; i<400000;i++);
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e002      	b.n	800146c <u16BatteryVoltage+0x1c>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <u16BatteryVoltage+0xdc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	ddf8      	ble.n	8001466 <u16BatteryVoltage+0x16>
	uint16_t u16Return = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	80fb      	strh	r3, [r7, #6]
	uint32_t u16ADC_Cache = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
	for (int iCounter = 0;iCounter<100;iCounter++)
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e01b      	b.n	80014ba <u16BatteryVoltage+0x6a>
	{
		HAL_ADC_Start(&hadc3);
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <u16BatteryVoltage+0xe0>)
 8001484:	f003 f926 	bl	80046d4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1);
 8001488:	2101      	movs	r1, #1
 800148a:	4829      	ldr	r0, [pc, #164]	; (8001530 <u16BatteryVoltage+0xe0>)
 800148c:	f003 f9dc 	bl	8004848 <HAL_ADC_PollForConversion>
		u16ADC_Cache += HAL_ADC_GetValue(&hadc3);
 8001490:	4827      	ldr	r0, [pc, #156]	; (8001530 <u16BatteryVoltage+0xe0>)
 8001492:	f003 fab1 	bl	80049f8 <HAL_ADC_GetValue>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
		for (int i=0; i<40000;i++);
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	e002      	b.n	80014aa <u16BatteryVoltage+0x5a>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80014b0:	4293      	cmp	r3, r2
 80014b2:	ddf7      	ble.n	80014a4 <u16BatteryVoltage+0x54>
	for (int iCounter = 0;iCounter<100;iCounter++)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b63      	cmp	r3, #99	; 0x63
 80014be:	dde0      	ble.n	8001482 <u16BatteryVoltage+0x32>
	}

	HAL_GPIO_WritePin(ADC_EN_Battery_GPIO_Port, ADC_EN_Battery_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <u16BatteryVoltage+0xd8>)
 80014c6:	f004 fa6d 	bl	80059a4 <HAL_GPIO_WritePin>

	u16Return = 1.836*(u16ADC_Cache/100.0)+162.179;
 80014ca:	6938      	ldr	r0, [r7, #16]
 80014cc:	f7ff f81a 	bl	8000504 <__aeabi_ui2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <u16BatteryVoltage+0xe4>)
 80014d6:	f7ff f9b9 	bl	800084c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001518 <u16BatteryVoltage+0xc8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f886 	bl	80005f8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	a30a      	add	r3, pc, #40	; (adr r3, 8001520 <u16BatteryVoltage+0xd0>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe fec7 	bl	800028c <__adddf3>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb4f 	bl	8000ba8 <__aeabi_d2uiz>
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]

	return u16Return;
 800150e:	88fb      	ldrh	r3, [r7, #6]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	89374bc7 	.word	0x89374bc7
 800151c:	3ffd6041 	.word	0x3ffd6041
 8001520:	5e353f7d 	.word	0x5e353f7d
 8001524:	406445ba 	.word	0x406445ba
 8001528:	48000400 	.word	0x48000400
 800152c:	00061a7f 	.word	0x00061a7f
 8001530:	20000558 	.word	0x20000558
 8001534:	40590000 	.word	0x40590000

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_MspInit+0x4c>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_MspInit+0x4c>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_MspInit+0x4c>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	210f      	movs	r1, #15
 800157e:	f06f 0001 	mvn.w	r0, #1
 8001582:	f003 ff98 	bl	80054b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0ac      	sub	sp, #176	; 0xb0
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2288      	movs	r2, #136	; 0x88
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00c fa5e 	bl	800da76 <memset>
  if(hadc->Instance==ADC3)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <HAL_ADC_MspInit+0xc8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d146      	bne.n	8001652 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80015da:	2308      	movs	r3, #8
 80015dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015de:	2307      	movs	r3, #7
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80015ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 f883 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001600:	f7ff ff9a 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_ADC_MspInit+0xcc>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a15      	ldr	r2, [pc, #84]	; (8001660 <HAL_ADC_MspInit+0xcc>)
 800160a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_ADC_MspInit+0xcc>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_ADC_MspInit+0xcc>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_ADC_MspInit+0xcc>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_ADC_MspInit+0xcc>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800163a:	230b      	movs	r3, #11
 800163c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_ADC_MspInit+0xd0>)
 800164e:	f003 ffe7 	bl	8005620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	37b0      	adds	r7, #176	; 0xb0
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50040200 	.word	0x50040200
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800

08001668 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0a4      	sub	sp, #144	; 0x90
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	2288      	movs	r2, #136	; 0x88
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00c f9fc 	bl	800da76 <memset>
  if(hrtc->Instance==RTC)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_RTC_MspInit+0x6c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d120      	bne.n	80016ca <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f005 f830 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80016a6:	f7ff ff47 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RTC_MspInit+0x70>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RTC_MspInit+0x70>)
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	2003      	movs	r0, #3
 80016c0:	f003 fef9 	bl	80054b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f003 ff12 	bl	80054ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3790      	adds	r7, #144	; 0x90
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40002800 	.word	0x40002800
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_SPI_MspInit+0xb4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d144      	bne.n	8001788 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001746:	230c      	movs	r3, #12
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001756:	2305      	movs	r3, #5
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <HAL_SPI_MspInit+0xbc>)
 8001762:	f003 ff5d 	bl	8005620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001778:	2305      	movs	r3, #5
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_SPI_MspInit+0xc0>)
 8001784:	f003 ff4c 	bl	8005620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40003800 	.word	0x40003800
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800
 800179c:	48000400 	.word	0x48000400

080017a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b0ac      	sub	sp, #176	; 0xb0
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2288      	movs	r2, #136	; 0x88
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00c f958 	bl	800da76 <memset>
  if(huart->Instance==USART3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a25      	ldr	r2, [pc, #148]	; (8001860 <HAL_UART_MspInit+0xc0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d142      	bne.n	8001856 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017d0:	2304      	movs	r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 ff8f 	bl	8006700 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e8:	f7ff fea6 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_MspInit+0xc4>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <HAL_UART_MspInit+0xc4>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_UART_MspInit+0xc4>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_UART_MspInit+0xc4>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_UART_MspInit+0xc4>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_UART_MspInit+0xc4>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800181c:	2330      	movs	r3, #48	; 0x30
 800181e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001834:	2307      	movs	r3, #7
 8001836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800183e:	4619      	mov	r1, r3
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <HAL_UART_MspInit+0xc8>)
 8001842:	f003 feed 	bl	8005620 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	2027      	movs	r0, #39	; 0x27
 800184c:	f003 fe33 	bl	80054b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001850:	2027      	movs	r0, #39	; 0x27
 8001852:	f003 fe4c 	bl	80054ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	37b0      	adds	r7, #176	; 0xb0
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40004800 	.word	0x40004800
 8001864:	40021000 	.word	0x40021000
 8001868:	48000800 	.word	0x48000800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189c:	f002 fb70 	bl	8003f80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018a0:	f00a fb9c 	bl	800bfdc <xTaskGetSchedulerState>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018aa:	f00a ff75 	bl	800c798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <RTC_WKUP_IRQHandler+0x10>)
 80018ba:	f005 fd83 	bl	80073c4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200005bc 	.word	0x200005bc

080018c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <USART3_IRQHandler+0x10>)
 80018ce:	f006 fa4d 	bl	8007d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000644 	.word	0x20000644

080018dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80018e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e4:	f004 f876 	bl	80059d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_kill>:

int _kill(int pid, int sig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001906:	f00c f9bd 	bl	800dc84 <__errno>
 800190a:	4603      	mov	r3, r0
 800190c:	2216      	movs	r2, #22
 800190e:	601a      	str	r2, [r3, #0]
  return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800192e:	e7fe      	b.n	800192e <_exit+0x12>

08001930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e00a      	b.n	8001958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001942:	f3af 8000 	nop.w
 8001946:	4601      	mov	r1, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <_read+0x12>
  }

  return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf1      	blt.n	800197c <_write+0x12>
  }
  return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f00c f922 	bl	800dc84 <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20018000 	.word	0x20018000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	200006cc 	.word	0x200006cc
 8001a74:	20001e10 	.word	0x20001e10

08001a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	; (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	; (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f00c f8e1 	bl	800dc90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff fa23 	bl	8000f18 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8001ae0:	0804e2f0 	.word	0x0804e2f0
  ldr r2, =_sbss
 8001ae4:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001ae8:	20001e0c 	.word	0x20001e0c

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>

08001aee <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d801      	bhi.n	8001b08 <jsmn_alloc_token+0x1a>
    return NULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e014      	b.n	8001b32 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6051      	str	r1, [r2, #4]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8001b30:	697b      	ldr	r3, [r7, #20]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	7afa      	ldrb	r2, [r7, #11]
 8001b52:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
  token->end = end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001b88:	e03f      	b.n	8001c0a <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b7d      	cmp	r3, #125	; 0x7d
 8001b96:	d045      	beq.n	8001c24 <jsmn_parse_primitive+0xb0>
 8001b98:	2b7d      	cmp	r3, #125	; 0x7d
 8001b9a:	dc1c      	bgt.n	8001bd6 <jsmn_parse_primitive+0x62>
 8001b9c:	2b5d      	cmp	r3, #93	; 0x5d
 8001b9e:	d041      	beq.n	8001c24 <jsmn_parse_primitive+0xb0>
 8001ba0:	2b5d      	cmp	r3, #93	; 0x5d
 8001ba2:	dc18      	bgt.n	8001bd6 <jsmn_parse_primitive+0x62>
 8001ba4:	2b3a      	cmp	r3, #58	; 0x3a
 8001ba6:	dc16      	bgt.n	8001bd6 <jsmn_parse_primitive+0x62>
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	da04      	bge.n	8001bb6 <jsmn_parse_primitive+0x42>
 8001bac:	2b0a      	cmp	r3, #10
 8001bae:	dc10      	bgt.n	8001bd2 <jsmn_parse_primitive+0x5e>
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	da37      	bge.n	8001c24 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8001bb4:	e00f      	b.n	8001bd6 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001bb6:	3b20      	subs	r3, #32
 8001bb8:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <jsmn_parse_primitive+0x10c>)
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d129      	bne.n	8001c24 <jsmn_parse_primitive+0xb0>
      break;
 8001bd0:	e001      	b.n	8001bd6 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001bd2:	2b0d      	cmp	r3, #13
 8001bd4:	d026      	beq.n	8001c24 <jsmn_parse_primitive+0xb0>
      break;
 8001bd6:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b1f      	cmp	r3, #31
 8001be4:	d906      	bls.n	8001bf4 <jsmn_parse_primitive+0x80>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b7e      	cmp	r3, #126	; 0x7e
 8001bf2:	d905      	bls.n	8001c00 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8001bfa:	f06f 0301 	mvn.w	r3, #1
 8001bfe:	e03a      	b.n	8001c76 <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d909      	bls.n	8001c28 <jsmn_parse_primitive+0xb4>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1b3      	bne.n	8001b8a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8001c22:	e001      	b.n	8001c28 <jsmn_parse_primitive+0xb4>
      goto found;
 8001c24:	bf00      	nop
 8001c26:	e000      	b.n	8001c2a <jsmn_parse_primitive+0xb6>
found:
 8001c28:	bf00      	nop
  if (tokens == NULL) {
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <jsmn_parse_primitive+0xca>
    parser->pos--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1e5a      	subs	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]
    return 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e01b      	b.n	8001c76 <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff ff53 	bl	8001aee <jsmn_alloc_token>
 8001c48:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e00c      	b.n	8001c76 <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	2108      	movs	r1, #8
 8001c64:	6938      	ldr	r0, [r7, #16]
 8001c66:	f7ff ff6a 	bl	8001b3e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1e5a      	subs	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	601a      	str	r2, [r3, #0]
  return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	04001001 	.word	0x04001001

08001c84 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001ca2:	e0ba      	b.n	8001e1a <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b22      	cmp	r3, #34	; 0x22
 8001cb4:	d11d      	bne.n	8001cf2 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <jsmn_parse_string+0x3c>
        return 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e0be      	b.n	8001e3e <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff ff12 	bl	8001aee <jsmn_alloc_token>
 8001cca:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <jsmn_parse_string+0x5a>
        parser->pos = start;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	e0af      	b.n	8001e3e <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	6938      	ldr	r0, [r7, #16]
 8001cea:	f7ff ff28 	bl	8001b3e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e0a5      	b.n	8001e3e <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8001cf6:	f040 808b 	bne.w	8001e10 <jsmn_parse_string+0x18c>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f240 8084 	bls.w	8001e10 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b75      	cmp	r3, #117	; 0x75
 8001d1e:	dc70      	bgt.n	8001e02 <jsmn_parse_string+0x17e>
 8001d20:	2b5c      	cmp	r3, #92	; 0x5c
 8001d22:	da04      	bge.n	8001d2e <jsmn_parse_string+0xaa>
 8001d24:	2b22      	cmp	r3, #34	; 0x22
 8001d26:	d072      	beq.n	8001e0e <jsmn_parse_string+0x18a>
 8001d28:	2b2f      	cmp	r3, #47	; 0x2f
 8001d2a:	d070      	beq.n	8001e0e <jsmn_parse_string+0x18a>
 8001d2c:	e069      	b.n	8001e02 <jsmn_parse_string+0x17e>
 8001d2e:	3b5c      	subs	r3, #92	; 0x5c
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <jsmn_parse_string+0x1c4>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d163      	bne.n	8001e0e <jsmn_parse_string+0x18a>
 8001d46:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d054      	beq.n	8001e02 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e037      	b.n	8001dd8 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b2f      	cmp	r3, #47	; 0x2f
 8001d74:	d906      	bls.n	8001d84 <jsmn_parse_string+0x100>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b39      	cmp	r3, #57	; 0x39
 8001d82:	d921      	bls.n	8001dc8 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d906      	bls.n	8001da0 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b46      	cmp	r3, #70	; 0x46
 8001d9e:	d913      	bls.n	8001dc8 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001daa:	2b60      	cmp	r3, #96	; 0x60
 8001dac:	d906      	bls.n	8001dbc <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b66      	cmp	r3, #102	; 0x66
 8001dba:	d905      	bls.n	8001dc8 <jsmn_parse_string+0x144>
            parser->pos = start;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001dc2:	f06f 0301 	mvn.w	r3, #1
 8001dc6:	e03a      	b.n	8001e3e <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	601a      	str	r2, [r3, #0]
             i++) {
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	dc0b      	bgt.n	8001df6 <jsmn_parse_string+0x172>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d906      	bls.n	8001df6 <jsmn_parse_string+0x172>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	4413      	add	r3, r2
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1b8      	bne.n	8001d68 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]
        break;
 8001e00:	e006      	b.n	8001e10 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001e08:	f06f 0301 	mvn.w	r3, #1
 8001e0c:	e017      	b.n	8001e3e <jsmn_parse_string+0x1ba>
        break;
 8001e0e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d907      	bls.n	8001e34 <jsmn_parse_string+0x1b0>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f47f af38 	bne.w	8001ca4 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8001e3a:	f06f 0302 	mvn.w	r3, #2
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	01440441 	.word	0x01440441

08001e4c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len, jsmntok_t *tokens, const unsigned int num_tokens)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001e60:	e176      	b.n	8002150 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8001e6e:	7ffb      	ldrb	r3, [r7, #31]
 8001e70:	2b7d      	cmp	r3, #125	; 0x7d
 8001e72:	d06c      	beq.n	8001f4e <jsmn_parse+0x102>
 8001e74:	2b7d      	cmp	r3, #125	; 0x7d
 8001e76:	f300 8136 	bgt.w	80020e6 <jsmn_parse+0x29a>
 8001e7a:	2b7b      	cmp	r3, #123	; 0x7b
 8001e7c:	d030      	beq.n	8001ee0 <jsmn_parse+0x94>
 8001e7e:	2b7b      	cmp	r3, #123	; 0x7b
 8001e80:	f300 8131 	bgt.w	80020e6 <jsmn_parse+0x29a>
 8001e84:	2b5d      	cmp	r3, #93	; 0x5d
 8001e86:	d062      	beq.n	8001f4e <jsmn_parse+0x102>
 8001e88:	2b5d      	cmp	r3, #93	; 0x5d
 8001e8a:	f300 812c 	bgt.w	80020e6 <jsmn_parse+0x29a>
 8001e8e:	2b5b      	cmp	r3, #91	; 0x5b
 8001e90:	d026      	beq.n	8001ee0 <jsmn_parse+0x94>
 8001e92:	2b5b      	cmp	r3, #91	; 0x5b
 8001e94:	f300 8127 	bgt.w	80020e6 <jsmn_parse+0x29a>
 8001e98:	2b3a      	cmp	r3, #58	; 0x3a
 8001e9a:	f000 80d6 	beq.w	800204a <jsmn_parse+0x1fe>
 8001e9e:	2b3a      	cmp	r3, #58	; 0x3a
 8001ea0:	f300 8121 	bgt.w	80020e6 <jsmn_parse+0x29a>
 8001ea4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ea6:	f000 80d7 	beq.w	8002058 <jsmn_parse+0x20c>
 8001eaa:	2b2c      	cmp	r3, #44	; 0x2c
 8001eac:	f300 811b 	bgt.w	80020e6 <jsmn_parse+0x29a>
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	dc11      	bgt.n	8001ed8 <jsmn_parse+0x8c>
 8001eb4:	2b09      	cmp	r3, #9
 8001eb6:	f2c0 8116 	blt.w	80020e6 <jsmn_parse+0x29a>
 8001eba:	3b09      	subs	r3, #9
 8001ebc:	4a91      	ldr	r2, [pc, #580]	; (8002104 <jsmn_parse+0x2b8>)
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 812d 	bne.w	8002130 <jsmn_parse+0x2e4>
 8001ed6:	e106      	b.n	80020e6 <jsmn_parse+0x29a>
 8001ed8:	2b22      	cmp	r3, #34	; 0x22
 8001eda:	f000 8092 	beq.w	8002002 <jsmn_parse+0x1b6>
 8001ede:	e102      	b.n	80020e6 <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8123 	beq.w	8002134 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fdfb 	bl	8001aee <jsmn_alloc_token>
 8001ef8:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	e153      	b.n	80021ae <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d00a      	beq.n	8001f26 <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
 8001f28:	2b7b      	cmp	r3, #123	; 0x7b
 8001f2a:	d101      	bne.n	8001f30 <jsmn_parse+0xe4>
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	e000      	b.n	8001f32 <jsmn_parse+0xe6>
 8001f30:	2202      	movs	r2, #2
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]
      break;
 8001f4c:	e0fb      	b.n	8002146 <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80f1 	beq.w	8002138 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8001f56:	7ffb      	ldrb	r3, [r7, #31]
 8001f58:	2b7d      	cmp	r3, #125	; 0x7d
 8001f5a:	d101      	bne.n	8001f60 <jsmn_parse+0x114>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <jsmn_parse+0x116>
 8001f60:	2302      	movs	r3, #2
 8001f62:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e024      	b.n	8001fb8 <jsmn_parse+0x16c>
        token = &tokens[i];
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d017      	beq.n	8001fb2 <jsmn_parse+0x166>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d112      	bne.n	8001fb2 <jsmn_parse+0x166>
          if (token->type != type) {
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	7fba      	ldrb	r2, [r7, #30]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d002      	beq.n	8001f9c <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 8001f96:	f06f 0301 	mvn.w	r3, #1
 8001f9a:	e108      	b.n	80021ae <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa2:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	461a      	mov	r2, r3
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	609a      	str	r2, [r3, #8]
          break;
 8001fb0:	e005      	b.n	8001fbe <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dad7      	bge.n	8001f6e <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d119      	bne.n	8001ffa <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 8001fc6:	f06f 0301 	mvn.w	r3, #1
 8001fca:	e0f0      	b.n	80021ae <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d009      	beq.n	8001ff4 <jsmn_parse+0x1a8>
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d104      	bne.n	8001ff4 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	609a      	str	r2, [r3, #8]
          break;
 8001ff0:	bf00      	nop
        }
      }
#endif
      break;
 8001ff2:	e0a8      	b.n	8002146 <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dae5      	bge.n	8001fcc <jsmn_parse+0x180>
      break;
 8002000:	e0a1      	b.n	8002146 <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff fe39 	bl	8001c84 <jsmn_parse_string>
 8002012:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da01      	bge.n	800201e <jsmn_parse+0x1d2>
        return r;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	e0c7      	b.n	80021ae <jsmn_parse+0x362>
      }
      count++;
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	3301      	adds	r3, #1
 8002022:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	f000 8086 	beq.w	800213c <jsmn_parse+0x2f0>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8082 	beq.w	800213c <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	3201      	adds	r2, #1
 8002046:	60da      	str	r2, [r3, #12]
      }
      break;
 8002048:	e078      	b.n	800213c <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	609a      	str	r2, [r3, #8]
      break;
 8002056:	e076      	b.n	8002146 <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d070      	beq.n	8002140 <jsmn_parse+0x2f4>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d06b      	beq.n	8002140 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002074:	2b02      	cmp	r3, #2
 8002076:	d063      	beq.n	8002140 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002084:	2b01      	cmp	r3, #1
 8002086:	d05b      	beq.n	8002140 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	3b01      	subs	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	e025      	b.n	80020de <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d006      	beq.n	80020ae <jsmn_parse+0x262>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d114      	bne.n	80020d8 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d00c      	beq.n	80020d8 <jsmn_parse+0x28c>
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d104      	bne.n	80020d8 <jsmn_parse+0x28c>
              parser->toksuper = i;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d2:	609a      	str	r2, [r3, #8]
              break;
 80020d4:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80020d6:	e033      	b.n	8002140 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	dad6      	bge.n	8002092 <jsmn_parse+0x246>
      break;
 80020e4:	e02c      	b.n	8002140 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fd3f 	bl	8001b74 <jsmn_parse_primitive>
 80020f6:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da04      	bge.n	8002108 <jsmn_parse+0x2bc>
        return r;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	e055      	b.n	80021ae <jsmn_parse+0x362>
 8002102:	bf00      	nop
 8002104:	00800013 	.word	0x00800013
      }
      count++;
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	3301      	adds	r3, #1
 800210c:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d015      	beq.n	8002144 <jsmn_parse+0x2f8>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	3201      	adds	r2, #1
 800212c:	60da      	str	r2, [r3, #12]
      }
      break;
 800212e:	e009      	b.n	8002144 <jsmn_parse+0x2f8>
      break;
 8002130:	bf00      	nop
 8002132:	e008      	b.n	8002146 <jsmn_parse+0x2fa>
        break;
 8002134:	bf00      	nop
 8002136:	e006      	b.n	8002146 <jsmn_parse+0x2fa>
        break;
 8002138:	bf00      	nop
 800213a:	e004      	b.n	8002146 <jsmn_parse+0x2fa>
      break;
 800213c:	bf00      	nop
 800213e:	e002      	b.n	8002146 <jsmn_parse+0x2fa>
      break;
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <jsmn_parse+0x2fa>
      break;
 8002144:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d907      	bls.n	800216a <jsmn_parse+0x31e>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f ae7c 	bne.w	8001e62 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01d      	beq.n	80021ac <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	3b01      	subs	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e015      	b.n	80021a6 <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d00a      	beq.n	80021a0 <jsmn_parse+0x354>
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4413      	add	r3, r2
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d102      	bne.n	80021a0 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 800219a:	f06f 0302 	mvn.w	r3, #2
 800219e:	e006      	b.n	80021ae <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dae6      	bge.n	800217a <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 80021ac:	6a3b      	ldr	r3, [r7, #32]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop

080021b8 <jsmn_init>:
/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f04f 32ff 	mov.w	r2, #4294967295
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <Wifi_UserProcess>:
//#######################################################################################

//#######################################################################################

void Wifi_UserProcess(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80021e6:	af00      	add	r7, sp, #0
  static uint8_t last=0;
  static WifiConnectionStatus_t TCP_State = WifiConnectionStatus_Disconnected;

  //New Connect
  if((Wifi.TcpIpConnections[0].status == WifiConnectionStatus_Connected) && (TCP_State == WifiConnectionStatus_Disconnected))
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <Wifi_UserProcess+0xf0>)
 80021ea:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d108      	bne.n	8002204 <Wifi_UserProcess+0x24>
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <Wifi_UserProcess+0xf4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d104      	bne.n	8002204 <Wifi_UserProcess+0x24>
  {
	  TCP_State = WifiConnectionStatus_Connected;
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <Wifi_UserProcess+0xf4>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	701a      	strb	r2, [r3, #0]
	  u8Pull_Request();
 8002200:	f000 f8c8 	bl	8002394 <u8Pull_Request>
  }
  if(Wifi.TcpIpConnections[0].status == WifiConnectionStatus_Disconnected)
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <Wifi_UserProcess+0xf0>)
 8002206:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 800220a:	2b04      	cmp	r3, #4
 800220c:	d102      	bne.n	8002214 <Wifi_UserProcess+0x34>
  {
	  TCP_State = WifiConnectionStatus_Disconnected;
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <Wifi_UserProcess+0xf4>)
 8002210:	2204      	movs	r2, #4
 8002212:	701a      	strb	r2, [r3, #0]
  }

  if(strstr(Wifi.MyIP,"0.0.0.0")!=NULL)
 8002214:	4930      	ldr	r1, [pc, #192]	; (80022d8 <Wifi_UserProcess+0xf8>)
 8002216:	4831      	ldr	r0, [pc, #196]	; (80022dc <Wifi_UserProcess+0xfc>)
 8002218:	f00b fcc4 	bl	800dba4 <strstr>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <Wifi_UserProcess+0x4a>
  {
    if(last!=1)
	{

	}
    last=1;
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <Wifi_UserProcess+0x100>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e012      	b.n	8002250 <Wifi_UserProcess+0x70>
  }
  else
  {
    if(last!=2)
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <Wifi_UserProcess+0x100>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d00b      	beq.n	800224a <Wifi_UserProcess+0x6a>
    {
    	Wifi_TcpIp_StartTcpConnection(1,"192.168.0.109" , 1234, 2000);
 8002232:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002236:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800223a:	492a      	ldr	r1, [pc, #168]	; (80022e4 <Wifi_UserProcess+0x104>)
 800223c:	2001      	movs	r0, #1
 800223e:	f007 ffed 	bl	800a21c <Wifi_TcpIp_StartTcpConnection>
    	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
    	osDelay(500);
 8002242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002246:	f008 fa0a 	bl	800a65e <osDelay>
    	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
    	//Wifi_TcpIp_SetEnableTcpServer(1111);
    }
    last=2;
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <Wifi_UserProcess+0x100>)
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
  }

  if(Wifi.TcpIpConnections[0].status == WifiConnectionStatus_Disconnected)
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <Wifi_UserProcess+0xf0>)
 8002252:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8002256:	2b04      	cmp	r3, #4
 8002258:	d10a      	bne.n	8002270 <Wifi_UserProcess+0x90>
  {
		Wifi_TcpIp_StartTcpConnection(1,"192.168.0.109" , 1234, 2000);
 800225a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800225e:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8002262:	4920      	ldr	r1, [pc, #128]	; (80022e4 <Wifi_UserProcess+0x104>)
 8002264:	2001      	movs	r0, #1
 8002266:	f007 ffd9 	bl	800a21c <Wifi_TcpIp_StartTcpConnection>
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
		osDelay(100);
 800226a:	2064      	movs	r0, #100	; 0x64
 800226c:	f008 f9f7 	bl	800a65e <osDelay>
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
  }

  if( Wifi.GotNewData==true)
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <Wifi_UserProcess+0xf0>)
 8002272:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8002276:	2b00      	cmp	r3, #0
 8002278:	d024      	beq.n	80022c4 <Wifi_UserProcess+0xe4>
  {
	  Wifi.GotNewData=false;
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <Wifi_UserProcess+0xf0>)
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
	  HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <Wifi_UserProcess+0x108>)
 8002288:	f003 fb8c 	bl	80059a4 <HAL_GPIO_WritePin>
	  osDelay(1000);
 800228c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002290:	f008 f9e5 	bl	800a65e <osDelay>
	  uint8_t u8Buffer[1024] = {0};
 8002294:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002298:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	3304      	adds	r3, #4
 80022a2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00b fbe4 	bl	800da76 <memset>
	  strncpy((char *)u8Buffer,(const char *)Wifi.RxBufferForData,1024);
 80022ae:	463b      	mov	r3, r7
 80022b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b4:	490d      	ldr	r1, [pc, #52]	; (80022ec <Wifi_UserProcess+0x10c>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00b fc04 	bl	800dac4 <strncpy>
	  u8Use_Data(u8Buffer);
 80022bc:	463b      	mov	r3, r7
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f89c 	bl	80023fc <u8Use_Data>
	  HAL_SuspendTick();
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 100, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	  HAL_PWR_EnterSTANDBYMode();*/
  }
}
 80022c4:	bf00      	nop
 80022c6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200006f8 	.word	0x200006f8
 80022d4:	20000004 	.word	0x20000004
 80022d8:	08010480 	.word	0x08010480
 80022dc:	20000e13 	.word	0x20000e13
 80022e0:	200006d0 	.word	0x200006d0
 80022e4:	08010488 	.word	0x08010488
 80022e8:	48000400 	.word	0x48000400
 80022ec:	200009fc 	.word	0x200009fc

080022f0 <Wifi_UserInit>:
}
//#######################################################################################


void Wifi_UserInit(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
	int i = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  Wifi_SetMode(WifiMode_Station);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f007 fba6 	bl	8009a4c <Wifi_SetMode>
  //Wifi_SetMode(WifiMode_SoftAp);

	while (Wifi_Station_ConnectToAp("TestWLAN","agent0815",NULL) == false)
 8002300:	e002      	b.n	8002308 <Wifi_UserInit+0x18>
	{
		i++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3301      	adds	r3, #1
 8002306:	607b      	str	r3, [r7, #4]
	while (Wifi_Station_ConnectToAp("TestWLAN","agent0815",NULL) == false)
 8002308:	2200      	movs	r2, #0
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <Wifi_UserInit+0x3c>)
 800230c:	4808      	ldr	r0, [pc, #32]	; (8002330 <Wifi_UserInit+0x40>)
 800230e:	f007 fcf3 	bl	8009cf8 <Wifi_Station_ConnectToAp>
 8002312:	4603      	mov	r3, r0
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f1      	bne.n	8002302 <Wifi_UserInit+0x12>
	}
	//Wifi_SoftAp_Create("Test", "test", 0, WifiEncryptionType_Open, 2, 0);
	i++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	607b      	str	r3, [r7, #4]
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	0801049c 	.word	0x0801049c
 8002330:	080104a8 	.word	0x080104a8

08002334 <jsoneq>:
{
	return 0;
}

static int jsoneq(const char* json, jsmntok_t* tok, const char* s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
    if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start && strncmp(json + tok->start, s, tok->end - tok->start) == 0)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d11e      	bne.n	8002386 <jsoneq+0x52>
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fd ff91 	bl	8000270 <strlen>
 800234e:	4603      	mov	r3, r0
 8002350:	4619      	mov	r1, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	4299      	cmp	r1, r3
 800235e:	d112      	bne.n	8002386 <jsoneq+0x52>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	461a      	mov	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1898      	adds	r0, r3, r2
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f00b fb92 	bl	800daa0 <strncmp>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <jsoneq+0x52>
    {
        return 0;
 8002382:	2300      	movs	r3, #0
 8002384:	e001      	b.n	800238a <jsoneq+0x56>
    }
    return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <u8Pull_Request>:
{
	return 0;
}

uint8_t  u8Pull_Request()
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b0c3      	sub	sp, #268	; 0x10c
 8002398:	af02      	add	r7, sp, #8
	uint8_t cSendString [256];
	sprintf ((char *)cSendString, (const char *)"{\n \"version\": 1,\n \"msg_type\": 2,\n \"data\": {\n   \"name\": \"Solar%ld\",\n   \"os_version\": \"0.10\",\n   \"type\": \"Solar\",\n   \"volt\": \"%.2lfV\",\n   \"status\": \"ok\"\n }\n}\n", HAL_GetUIDw0(),(float)u16BatteryVoltage()/1000.0);
 800239a:	f001 fe55 	bl	8004048 <HAL_GetUIDw0>
 800239e:	4604      	mov	r4, r0
 80023a0:	f7ff f856 	bl	8001450 <u16BatteryVoltage>
 80023a4:	4603      	mov	r3, r0
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ae:	ee17 0a90 	vmov	r0, s15
 80023b2:	f7fe f8c9 	bl	8000548 <__aeabi_f2d>
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <u8Pull_Request+0x60>)
 80023bc:	f7fe fa46 	bl	800084c <__aeabi_ddiv>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4638      	mov	r0, r7
 80023c6:	e9cd 2300 	strd	r2, r3, [sp]
 80023ca:	4622      	mov	r2, r4
 80023cc:	490a      	ldr	r1, [pc, #40]	; (80023f8 <u8Pull_Request+0x64>)
 80023ce:	f00b fac1 	bl	800d954 <siprintf>
	Wifi_TcpIp_SendDataTcp(1, strlen((const char *)cSendString), (uint8_t *)cSendString);
 80023d2:	463b      	mov	r3, r7
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fd ff4b 	bl	8000270 <strlen>
 80023da:	4603      	mov	r3, r0
 80023dc:	b29b      	uxth	r3, r3
 80023de:	463a      	mov	r2, r7
 80023e0:	4619      	mov	r1, r3
 80023e2:	2001      	movs	r0, #1
 80023e4:	f008 f820 	bl	800a428 <Wifi_TcpIp_SendDataTcp>
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	408f4000 	.word	0x408f4000
 80023f8:	080104b4 	.word	0x080104b4

080023fc <u8Use_Data>:

uint8_t u8Use_Data(uint8_t* u8Data)
{
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	f5ad 6d25 	sub.w	sp, sp, #2640	; 0xa50
 8002402:	af02      	add	r7, sp, #8
 8002404:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002408:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800240c:	6018      	str	r0, [r3, #0]
	struct sCommunication Com = {0};
 800240e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002412:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002416:	4618      	mov	r0, r3
 8002418:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800241c:	461a      	mov	r2, r3
 800241e:	2100      	movs	r1, #0
 8002420:	f00b fb29 	bl	800da76 <memset>
    int i;
    int r;
    jsmn_parser p;
    jsmntok_t t[128]; /* We expect no more than 128 tokens */
    jsmn_init(&p);
 8002424:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fec5 	bl	80021b8 <jsmn_init>
    r = jsmn_parse(&p, (const char*)u8Data, (const size_t)strlen((const char *)u8Data), t, (const unsigned int)sizeof(t)/sizeof(t[0]));
 800242e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002432:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f7fd ff1a 	bl	8000270 <strlen>
 800243c:	4604      	mov	r4, r0
 800243e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002442:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002446:	f6a2 2144 	subw	r1, r2, #2628	; 0xa44
 800244a:	f607 00c8 	addw	r0, r7, #2248	; 0x8c8
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	9200      	str	r2, [sp, #0]
 8002452:	4622      	mov	r2, r4
 8002454:	6809      	ldr	r1, [r1, #0]
 8002456:	f7ff fcf9 	bl	8001e4c <jsmn_parse>
 800245a:	f8c7 0a40 	str.w	r0, [r7, #2624]	; 0xa40
    for (i = 1; i < r; i++)
 800245e:	2301      	movs	r3, #1
 8002460:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002464:	f000 bd2c 	b.w	8002ec0 <u8Use_Data+0xac4>
    {
        if (jsoneq((const char*)u8Data, &t[i], "msg_type") == 0)
 8002468:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800246c:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	18d1      	adds	r1, r2, r3
 8002474:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002478:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800247c:	4aad      	ldr	r2, [pc, #692]	; (8002734 <u8Use_Data+0x338>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	f7ff ff58 	bl	8002334 <jsoneq>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d150      	bne.n	800252c <u8Use_Data+0x130>
        {
        	uint8_t u8Cache[30] = {0};
 800248a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800248e:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	3304      	adds	r3, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80024a8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80024ac:	3301      	adds	r3, #1
 80024ae:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80024b2:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	3308      	adds	r3, #8
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80024c2:	3301      	adds	r3, #1
 80024c4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80024c8:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	440b      	add	r3, r1
 80024d0:	3304      	adds	r3, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1ad1      	subs	r1, r2, r3
 80024d6:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80024da:	3301      	adds	r3, #1
 80024dc:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80024e0:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80024f2:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80024fe:	460a      	mov	r2, r1
 8002500:	498d      	ldr	r1, [pc, #564]	; (8002738 <u8Use_Data+0x33c>)
 8002502:	f00b fa27 	bl	800d954 <siprintf>
        	Com.u8MSG_Type = atoi((const char *)u8Cache);
 8002506:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800250a:	4618      	mov	r0, r3
 800250c:	f00a fbbe 	bl	800cc8c <atoi>
 8002510:	4603      	mov	r3, r0
 8002512:	b2da      	uxtb	r2, r3
 8002514:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002518:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800251c:	705a      	strb	r2, [r3, #1]
            i++;
 800251e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002522:	3301      	adds	r3, #1
 8002524:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002528:	f000 bcc5 	b.w	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "sleep_time") == 0)
 800252c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002530:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	18d1      	adds	r1, r2, r3
 8002538:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800253c:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002540:	4a7e      	ldr	r2, [pc, #504]	; (800273c <u8Use_Data+0x340>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	f7ff fef6 	bl	8002334 <jsoneq>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 8090 	bne.w	8002670 <u8Use_Data+0x274>
        {
        	uint8_t u8Cache[30] = {0};
 8002550:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002554:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	3304      	adds	r3, #4
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 800256e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002572:	3301      	adds	r3, #1
 8002574:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002578:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	3308      	adds	r3, #8
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002588:	3301      	adds	r3, #1
 800258a:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800258e:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	3304      	adds	r3, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1ad1      	subs	r1, r2, r3
 800259c:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80025a0:	3301      	adds	r3, #1
 80025a2:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80025a6:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	4413      	add	r3, r2
 80025ae:	3304      	adds	r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80025b8:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80025c4:	460a      	mov	r2, r1
 80025c6:	495c      	ldr	r1, [pc, #368]	; (8002738 <u8Use_Data+0x33c>)
 80025c8:	f00b f9c4 	bl	800d954 <siprintf>

			uint8_t u8CacheHou[10] = {0};
 80025cc:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80025d0:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	3304      	adds	r3, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	809a      	strh	r2, [r3, #4]
			uint8_t u8CacheMin[5] = {0};
 80025e0:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80025e4:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	711a      	strb	r2, [r3, #4]
			uint8_t u8CacheSec[5] = {0};
 80025f0:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80025f4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	711a      	strb	r2, [r3, #4]
			sscanf((const char *)u8Cache, "%9[0-9]:%2[0-9]:%2[0-9]", u8CacheHou, u8CacheMin, u8CacheSec);
 8002600:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002604:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002608:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800260c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	460b      	mov	r3, r1
 8002614:	494a      	ldr	r1, [pc, #296]	; (8002740 <u8Use_Data+0x344>)
 8002616:	f00b f9bd 	bl	800d994 <siscanf>
			Com.u32Sleep_Time = (uint32_t)atoi((const char *)u8CacheSec)+(uint32_t)atoi((const char *)u8CacheMin)*60+(uint32_t)atoi((const char *)u8CacheHou)*3600;
 800261a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800261e:	4618      	mov	r0, r3
 8002620:	f00a fb34 	bl	800cc8c <atoi>
 8002624:	4603      	mov	r3, r0
 8002626:	461d      	mov	r5, r3
 8002628:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800262c:	4618      	mov	r0, r3
 800262e:	f00a fb2d 	bl	800cc8c <atoi>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800263a:	fb03 f402 	mul.w	r4, r3, r2
 800263e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002642:	4618      	mov	r0, r3
 8002644:	f00a fb22 	bl	800cc8c <atoi>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4423      	add	r3, r4
 8002656:	18ea      	adds	r2, r5, r3
 8002658:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800265c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002660:	605a      	str	r2, [r3, #4]
			i++;
 8002662:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002666:	3301      	adds	r3, #1
 8002668:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 800266c:	f000 bc23 	b.w	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "version") == 0)
 8002670:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002674:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	18d1      	adds	r1, r2, r3
 800267c:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002680:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <u8Use_Data+0x348>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f7ff fe54 	bl	8002334 <jsoneq>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d15a      	bne.n	8002748 <u8Use_Data+0x34c>
        {
        	uint8_t u8Cache[30] = {0};
 8002692:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002696:	f6a3 13fc 	subw	r3, r3, #2556	; 0x9fc
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	3304      	adds	r3, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	615a      	str	r2, [r3, #20]
 80026ae:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80026b0:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80026b4:	3301      	adds	r3, #1
 80026b6:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80026ba:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	3308      	adds	r3, #8
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80026ca:	3301      	adds	r3, #1
 80026cc:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80026d0:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	440b      	add	r3, r1
 80026d8:	3304      	adds	r3, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1ad1      	subs	r1, r2, r3
 80026de:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80026e2:	3301      	adds	r3, #1
 80026e4:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80026e8:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80026fa:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4413      	add	r3, r2
 8002702:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002706:	460a      	mov	r2, r1
 8002708:	490b      	ldr	r1, [pc, #44]	; (8002738 <u8Use_Data+0x33c>)
 800270a:	f00b f923 	bl	800d954 <siprintf>
        	Com.u8Version = (uint8_t)atoi((const char *)u8Cache);
 800270e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002712:	4618      	mov	r0, r3
 8002714:	f00a faba 	bl	800cc8c <atoi>
 8002718:	4603      	mov	r3, r0
 800271a:	b2da      	uxtb	r2, r3
 800271c:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002720:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002724:	701a      	strb	r2, [r3, #0]
            i++;
 8002726:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 800272a:	3301      	adds	r3, #1
 800272c:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002730:	e3c1      	b.n	8002eb6 <u8Use_Data+0xaba>
 8002732:	bf00      	nop
 8002734:	08010554 	.word	0x08010554
 8002738:	08010560 	.word	0x08010560
 800273c:	08010568 	.word	0x08010568
 8002740:	08010574 	.word	0x08010574
 8002744:	0801058c 	.word	0x0801058c
        }
        else if (jsoneq((const char*)u8Data, &t[i], "type") == 0)
 8002748:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800274c:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	18d1      	adds	r1, r2, r3
 8002754:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002758:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800275c:	4abd      	ldr	r2, [pc, #756]	; (8002a54 <u8Use_Data+0x658>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	f7ff fde8 	bl	8002334 <jsoneq>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d14f      	bne.n	800280a <u8Use_Data+0x40e>
        {
        	uint8_t u8Cache[30] = {0};
 800276a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800276e:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	3304      	adds	r3, #4
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
 8002784:	615a      	str	r2, [r3, #20]
 8002786:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002788:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 800278c:	3301      	adds	r3, #1
 800278e:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002792:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	4413      	add	r3, r2
 800279a:	3308      	adds	r3, #8
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80027a2:	3301      	adds	r3, #1
 80027a4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80027a8:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	440b      	add	r3, r1
 80027b0:	3304      	adds	r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1ad1      	subs	r1, r2, r3
 80027b6:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80027ba:	3301      	adds	r3, #1
 80027bc:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80027c0:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80027d2:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80027de:	460a      	mov	r2, r1
 80027e0:	499d      	ldr	r1, [pc, #628]	; (8002a58 <u8Use_Data+0x65c>)
 80027e2:	f00b f8b7 	bl	800d954 <siprintf>
        	Com.u8Type = (uint8_t)atoi((const char *)u8Cache);
 80027e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00a fa4e 	bl	800cc8c <atoi>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80027f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80027fc:	721a      	strb	r2, [r3, #8]
            i++;
 80027fe:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002802:	3301      	adds	r3, #1
 8002804:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002808:	e355      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l1") == 0)
 800280a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800280e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	18d1      	adds	r1, r2, r3
 8002816:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800281a:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800281e:	4a8f      	ldr	r2, [pc, #572]	; (8002a5c <u8Use_Data+0x660>)
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	f7ff fd87 	bl	8002334 <jsoneq>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d137      	bne.n	800289c <u8Use_Data+0x4a0>
        {
        	sprintf((char*)Com.u8L1,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 800282c:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002830:	3301      	adds	r3, #1
 8002832:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002836:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	3308      	adds	r3, #8
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002846:	3301      	adds	r3, #1
 8002848:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800284c:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	440b      	add	r3, r1
 8002854:	3304      	adds	r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	1ad1      	subs	r1, r2, r3
 800285a:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 800285e:	3301      	adds	r3, #1
 8002860:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002864:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002876:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	441a      	add	r2, r3
 800287e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002882:	f103 001e 	add.w	r0, r3, #30
 8002886:	4613      	mov	r3, r2
 8002888:	460a      	mov	r2, r1
 800288a:	4973      	ldr	r1, [pc, #460]	; (8002a58 <u8Use_Data+0x65c>)
 800288c:	f00b f862 	bl	800d954 <siprintf>
            i++;
 8002890:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002894:	3301      	adds	r3, #1
 8002896:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 800289a:	e30c      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l2") == 0)
 800289c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80028a0:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	18d1      	adds	r1, r2, r3
 80028a8:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80028ac:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 80028b0:	4a6b      	ldr	r2, [pc, #428]	; (8002a60 <u8Use_Data+0x664>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f7ff fd3e 	bl	8002334 <jsoneq>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d137      	bne.n	800292e <u8Use_Data+0x532>
        {
        	sprintf((char*)Com.u8L2,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80028be:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80028c2:	3301      	adds	r3, #1
 80028c4:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80028c8:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	4413      	add	r3, r2
 80028d0:	3308      	adds	r3, #8
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80028d8:	3301      	adds	r3, #1
 80028da:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80028de:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	440b      	add	r3, r1
 80028e6:	3304      	adds	r3, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1ad1      	subs	r1, r2, r3
 80028ec:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80028f0:	3301      	adds	r3, #1
 80028f2:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80028f6:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002908:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	441a      	add	r2, r3
 8002910:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002914:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8002918:	4613      	mov	r3, r2
 800291a:	460a      	mov	r2, r1
 800291c:	494e      	ldr	r1, [pc, #312]	; (8002a58 <u8Use_Data+0x65c>)
 800291e:	f00b f819 	bl	800d954 <siprintf>
            i++;
 8002922:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002926:	3301      	adds	r3, #1
 8002928:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 800292c:	e2c3      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l3") == 0)
 800292e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002932:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	18d1      	adds	r1, r2, r3
 800293a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800293e:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002942:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <u8Use_Data+0x668>)
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	f7ff fcf5 	bl	8002334 <jsoneq>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d137      	bne.n	80029c0 <u8Use_Data+0x5c4>
        {
        	sprintf((char*)Com.u8L3,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002950:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002954:	3301      	adds	r3, #1
 8002956:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 800295a:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	3308      	adds	r3, #8
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 800296a:	3301      	adds	r3, #1
 800296c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002970:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	440b      	add	r3, r1
 8002978:	3304      	adds	r3, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1ad1      	subs	r1, r2, r3
 800297e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002982:	3301      	adds	r3, #1
 8002984:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002988:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800299a:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	441a      	add	r2, r3
 80029a2:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 80029a6:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 80029aa:	4613      	mov	r3, r2
 80029ac:	460a      	mov	r2, r1
 80029ae:	492a      	ldr	r1, [pc, #168]	; (8002a58 <u8Use_Data+0x65c>)
 80029b0:	f00a ffd0 	bl	800d954 <siprintf>
            i++;
 80029b4:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80029b8:	3301      	adds	r3, #1
 80029ba:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 80029be:	e27a      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l4") == 0)
 80029c0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80029c4:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	18d1      	adds	r1, r2, r3
 80029cc:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80029d0:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <u8Use_Data+0x66c>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f7ff fcac 	bl	8002334 <jsoneq>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d144      	bne.n	8002a6c <u8Use_Data+0x670>
        {
        	sprintf((char*)Com.u8L4,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80029e2:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80029e6:	3301      	adds	r3, #1
 80029e8:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 80029ec:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4413      	add	r3, r2
 80029f4:	3308      	adds	r3, #8
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 80029fc:	3301      	adds	r3, #1
 80029fe:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002a02:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1ad1      	subs	r1, r2, r3
 8002a10:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002a14:	3301      	adds	r3, #1
 8002a16:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002a1a:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002a2c:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	441a      	add	r2, r3
 8002a34:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002a38:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	460a      	mov	r2, r1
 8002a40:	4905      	ldr	r1, [pc, #20]	; (8002a58 <u8Use_Data+0x65c>)
 8002a42:	f00a ff87 	bl	800d954 <siprintf>
            i++;
 8002a46:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002a50:	e231      	b.n	8002eb6 <u8Use_Data+0xaba>
 8002a52:	bf00      	nop
 8002a54:	08010594 	.word	0x08010594
 8002a58:	08010560 	.word	0x08010560
 8002a5c:	0801059c 	.word	0x0801059c
 8002a60:	080105a0 	.word	0x080105a0
 8002a64:	080105a4 	.word	0x080105a4
 8002a68:	080105a8 	.word	0x080105a8
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l5") == 0)
 8002a6c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002a70:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	18d1      	adds	r1, r2, r3
 8002a78:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002a7c:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002a80:	4ad5      	ldr	r2, [pc, #852]	; (8002dd8 <u8Use_Data+0x9dc>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	f7ff fc56 	bl	8002334 <jsoneq>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d137      	bne.n	8002afe <u8Use_Data+0x702>
        {
        	sprintf((char*)Com.u8L5,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002a8e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002a92:	3301      	adds	r3, #1
 8002a94:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002a98:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002aae:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1ad1      	subs	r1, r2, r3
 8002abc:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002ac6:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002ad8:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	441a      	add	r2, r3
 8002ae0:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002ae4:	f103 0096 	add.w	r0, r3, #150	; 0x96
 8002ae8:	4613      	mov	r3, r2
 8002aea:	460a      	mov	r2, r1
 8002aec:	49bb      	ldr	r1, [pc, #748]	; (8002ddc <u8Use_Data+0x9e0>)
 8002aee:	f00a ff31 	bl	800d954 <siprintf>
            i++;
 8002af2:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002af6:	3301      	adds	r3, #1
 8002af8:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002afc:	e1db      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l6") == 0)
 8002afe:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002b02:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	18d1      	adds	r1, r2, r3
 8002b0a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002b0e:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002b12:	4ab3      	ldr	r2, [pc, #716]	; (8002de0 <u8Use_Data+0x9e4>)
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	f7ff fc0d 	bl	8002334 <jsoneq>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d137      	bne.n	8002b90 <u8Use_Data+0x794>
        {
        	sprintf((char*)Com.u8L6,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002b20:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002b24:	3301      	adds	r3, #1
 8002b26:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002b2a:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4413      	add	r3, r2
 8002b32:	3308      	adds	r3, #8
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002b40:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	440b      	add	r3, r1
 8002b48:	3304      	adds	r3, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	1ad1      	subs	r1, r2, r3
 8002b4e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002b52:	3301      	adds	r3, #1
 8002b54:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002b58:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	3304      	adds	r3, #4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002b6a:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	441a      	add	r2, r3
 8002b72:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002b76:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	4997      	ldr	r1, [pc, #604]	; (8002ddc <u8Use_Data+0x9e0>)
 8002b80:	f00a fee8 	bl	800d954 <siprintf>
            i++;
 8002b84:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002b8e:	e192      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l7") == 0)
 8002b90:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002b94:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	18d1      	adds	r1, r2, r3
 8002b9c:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002ba0:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002ba4:	4a8f      	ldr	r2, [pc, #572]	; (8002de4 <u8Use_Data+0x9e8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	f7ff fbc4 	bl	8002334 <jsoneq>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d137      	bne.n	8002c22 <u8Use_Data+0x826>
        {
        	sprintf((char*)Com.u8L7,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002bb2:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002bbc:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002bd2:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	440b      	add	r3, r1
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1ad1      	subs	r1, r2, r3
 8002be0:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002be4:	3301      	adds	r3, #1
 8002be6:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002bea:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002bfc:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	441a      	add	r2, r3
 8002c04:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002c08:	f103 00d2 	add.w	r0, r3, #210	; 0xd2
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	460a      	mov	r2, r1
 8002c10:	4972      	ldr	r1, [pc, #456]	; (8002ddc <u8Use_Data+0x9e0>)
 8002c12:	f00a fe9f 	bl	800d954 <siprintf>
            i++;
 8002c16:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002c20:	e149      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l8") == 0)
 8002c22:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002c26:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	18d1      	adds	r1, r2, r3
 8002c2e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002c32:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002c36:	4a6c      	ldr	r2, [pc, #432]	; (8002de8 <u8Use_Data+0x9ec>)
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	f7ff fb7b 	bl	8002334 <jsoneq>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d137      	bne.n	8002cb4 <u8Use_Data+0x8b8>
        {
        	sprintf((char*)Com.u8L8,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002c44:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002c4e:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4413      	add	r3, r2
 8002c56:	3308      	adds	r3, #8
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002c64:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1ad1      	subs	r1, r2, r3
 8002c72:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002c76:	3301      	adds	r3, #1
 8002c78:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002c7c:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002c8e:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	441a      	add	r2, r3
 8002c96:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002c9a:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	494e      	ldr	r1, [pc, #312]	; (8002ddc <u8Use_Data+0x9e0>)
 8002ca4:	f00a fe56 	bl	800d954 <siprintf>
            i++;
 8002ca8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002cac:	3301      	adds	r3, #1
 8002cae:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002cb2:	e100      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l9") == 0)
 8002cb4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002cb8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	18d1      	adds	r1, r2, r3
 8002cc0:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002cc4:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002cc8:	4a48      	ldr	r2, [pc, #288]	; (8002dec <u8Use_Data+0x9f0>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f7ff fb32 	bl	8002334 <jsoneq>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d137      	bne.n	8002d46 <u8Use_Data+0x94a>
        {
        	sprintf((char*)Com.u8L9,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002cd6:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002ce0:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3308      	adds	r3, #8
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002cf6:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3304      	adds	r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1ad1      	subs	r1, r2, r3
 8002d04:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002d0e:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002d20:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	441a      	add	r2, r3
 8002d28:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002d2c:	f503 7087 	add.w	r0, r3, #270	; 0x10e
 8002d30:	4613      	mov	r3, r2
 8002d32:	460a      	mov	r2, r1
 8002d34:	4929      	ldr	r1, [pc, #164]	; (8002ddc <u8Use_Data+0x9e0>)
 8002d36:	f00a fe0d 	bl	800d954 <siprintf>
            i++;
 8002d3a:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002d44:	e0b7      	b.n	8002eb6 <u8Use_Data+0xaba>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l10") == 0)
 8002d46:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002d4a:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	18d1      	adds	r1, r2, r3
 8002d52:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002d56:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002d5a:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <u8Use_Data+0x9f4>)
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	f7ff fae9 	bl	8002334 <jsoneq>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d145      	bne.n	8002df4 <u8Use_Data+0x9f8>
        {
        	sprintf((char*)Com.u8L10,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002d68:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002d72:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002d82:	3301      	adds	r3, #1
 8002d84:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002d88:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	440b      	add	r3, r1
 8002d90:	3304      	adds	r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1ad1      	subs	r1, r2, r3
 8002d96:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002da0:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002db2:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	441a      	add	r2, r3
 8002dba:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002dbe:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	4905      	ldr	r1, [pc, #20]	; (8002ddc <u8Use_Data+0x9e0>)
 8002dc8:	f00a fdc4 	bl	800d954 <siprintf>
            i++;
 8002dcc:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002dd6:	e06e      	b.n	8002eb6 <u8Use_Data+0xaba>
 8002dd8:	080105ac 	.word	0x080105ac
 8002ddc:	08010560 	.word	0x08010560
 8002de0:	080105b0 	.word	0x080105b0
 8002de4:	080105b4 	.word	0x080105b4
 8002de8:	080105b8 	.word	0x080105b8
 8002dec:	080105bc 	.word	0x080105bc
 8002df0:	080105c0 	.word	0x080105c0
        }
        else if (jsoneq((const char*)u8Data, &t[i], "g_id") == 0)
 8002df4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002df8:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	18d1      	adds	r1, r2, r3
 8002e00:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002e04:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002e08:	4a70      	ldr	r2, [pc, #448]	; (8002fcc <u8Use_Data+0xbd0>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f7ff fa92 	bl	8002334 <jsoneq>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d14f      	bne.n	8002eb6 <u8Use_Data+0xaba>
        {
        	uint8_t u8Cache[30] = {0};
 8002e16:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002e1a:	f6a3 233c 	subw	r3, r3, #2620	; 0xa3c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	615a      	str	r2, [r3, #20]
 8002e32:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002e34:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002e3e:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	4413      	add	r3, r2
 8002e46:	3308      	adds	r3, #8
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002e54:	f5a1 6118 	sub.w	r1, r1, #2432	; 0x980
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	1ad1      	subs	r1, r2, r3
 8002e62:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002e66:	3301      	adds	r3, #1
 8002e68:	f607 2248 	addw	r2, r7, #2632	; 0xa48
 8002e6c:	f5a2 6218 	sub.w	r2, r2, #2432	; 0x980
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002e7e:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	f107 000c 	add.w	r0, r7, #12
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	4950      	ldr	r1, [pc, #320]	; (8002fd0 <u8Use_Data+0xbd4>)
 8002e8e:	f00a fd61 	bl	800d954 <siprintf>
        	Com.u8G_ID = (uint8_t)atoi((const char *)u8Cache);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4618      	mov	r0, r3
 8002e98:	f009 fef8 	bl	800cc8c <atoi>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002ea4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ea8:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
            i++;
 8002eac:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
    for (i = 1; i < r; i++)
 8002eb6:	f8d7 3a44 	ldr.w	r3, [r7, #2628]	; 0xa44
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8002ec0:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	; 0xa44
 8002ec4:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	; 0xa40
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	f6ff aacd 	blt.w	8002468 <u8Use_Data+0x6c>
        }
    }
    if((Com.u8MSG_Type == 3) && (Com.u8Type == 1))
 8002ece:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002ed2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d121      	bne.n	8002f20 <u8Use_Data+0xb24>
 8002edc:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002ee0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ee4:	7a1b      	ldrb	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11a      	bne.n	8002f20 <u8Use_Data+0xb24>
    {
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 8002eea:	2201      	movs	r2, #1
 8002eec:	2104      	movs	r1, #4
 8002eee:	4839      	ldr	r0, [pc, #228]	; (8002fd4 <u8Use_Data+0xbd8>)
 8002ef0:	f002 fd58 	bl	80059a4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	f001 f863 	bl	8003fc0 <HAL_Delay>
    	DEV_Module_Init();
 8002efa:	f000 f883 	bl	8003004 <DEV_Module_Init>
    	HAL_Delay(100);
 8002efe:	2064      	movs	r0, #100	; 0x64
 8002f00:	f001 f85e 	bl	8003fc0 <HAL_Delay>
    	EPD_7IN5_V2_Init();
 8002f04:	f000 f99e 	bl	8003244 <EPD_7IN5_V2_Init>
    	vPrint_Skin_Office(&Com);
 8002f08:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fe21 	bl	8003b54 <vPrint_Skin_Office>
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2104      	movs	r1, #4
 8002f16:	482f      	ldr	r0, [pc, #188]	; (8002fd4 <u8Use_Data+0xbd8>)
 8002f18:	f002 fd44 	bl	80059a4 <HAL_GPIO_WritePin>
    	DEV_Module_Exit();
 8002f1c:	f000 f888 	bl	8003030 <DEV_Module_Exit>
    }
    if((Com.u8MSG_Type == 3) && (Com.u8Type == 2))
 8002f20:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002f24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d121      	bne.n	8002f72 <u8Use_Data+0xb76>
 8002f2e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002f32:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f36:	7a1b      	ldrb	r3, [r3, #8]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11a      	bne.n	8002f72 <u8Use_Data+0xb76>
    {
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2104      	movs	r1, #4
 8002f40:	4824      	ldr	r0, [pc, #144]	; (8002fd4 <u8Use_Data+0xbd8>)
 8002f42:	f002 fd2f 	bl	80059a4 <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8002f46:	2064      	movs	r0, #100	; 0x64
 8002f48:	f001 f83a 	bl	8003fc0 <HAL_Delay>
    	DEV_Module_Init();
 8002f4c:	f000 f85a 	bl	8003004 <DEV_Module_Init>
    	HAL_Delay(100);
 8002f50:	2064      	movs	r0, #100	; 0x64
 8002f52:	f001 f835 	bl	8003fc0 <HAL_Delay>
    	EPD_7IN5_V2_Init();
 8002f56:	f000 f975 	bl	8003244 <EPD_7IN5_V2_Init>
    	vPrint_Skin_Lecture_Room(&Com);
 8002f5a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fed2 	bl	8003d08 <vPrint_Skin_Lecture_Room>
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2104      	movs	r1, #4
 8002f68:	481a      	ldr	r0, [pc, #104]	; (8002fd4 <u8Use_Data+0xbd8>)
 8002f6a:	f002 fd1b 	bl	80059a4 <HAL_GPIO_WritePin>
    	DEV_Module_Exit();
 8002f6e:	f000 f85f 	bl	8003030 <DEV_Module_Exit>
    }

    //sleep mode
    if(Com.u8MSG_Type == 3)
 8002f72:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002f76:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d11e      	bne.n	8002fbe <u8Use_Data+0xbc2>
    {
    	HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8a:	f002 fd0b 	bl	80059a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f98:	f002 fd04 	bl	80059a4 <HAL_GPIO_WritePin>
		HAL_SuspendTick();
 8002f9c:	f001 f834 	bl	8004008 <HAL_SuspendTick>
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, Com.u32Sleep_Time, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8002fa0:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002fa4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <u8Use_Data+0xbdc>)
 8002fb0:	f004 f974 	bl	800729c <HAL_RTCEx_SetWakeUpTimer_IT>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <u8Use_Data+0xbe0>)
 8002fb6:	221f      	movs	r2, #31
 8002fb8:	619a      	str	r2, [r3, #24]
		HAL_PWR_EnterSTANDBYMode();
 8002fba:	f002 fd23 	bl	8005a04 <HAL_PWR_EnterSTANDBYMode>
    }

	return 0;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f607 2748 	addw	r7, r7, #2632	; 0xa48
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	080105c4 	.word	0x080105c4
 8002fd0:	08010560 	.word	0x08010560
 8002fd4:	48000400 	.word	0x48000400
 8002fd8:	200005bc 	.word	0x200005bc
 8002fdc:	40007000 	.word	0x40007000

08002fe0 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 8002fea:	1df9      	adds	r1, r7, #7
 8002fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4803      	ldr	r0, [pc, #12]	; (8003000 <DEV_SPI_WriteByte+0x20>)
 8002ff4:	f004 faaf 	bl	8007556 <HAL_SPI_Transmit>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200005e0 	.word	0x200005e0

08003004 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2120      	movs	r1, #32
 800300c:	4807      	ldr	r0, [pc, #28]	; (800302c <DEV_Module_Init+0x28>)
 800300e:	f002 fcc9 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <DEV_Module_Init+0x28>)
 8003018:	f002 fcc4 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800301c:	2201      	movs	r2, #1
 800301e:	2110      	movs	r1, #16
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <DEV_Module_Init+0x28>)
 8003022:	f002 fcbf 	bl	80059a4 <HAL_GPIO_WritePin>
		return 0;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	48000400 	.word	0x48000400

08003030 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003034:	2200      	movs	r2, #0
 8003036:	2120      	movs	r1, #32
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <DEV_Module_Exit+0x28>)
 800303a:	f002 fcb3 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2140      	movs	r1, #64	; 0x40
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <DEV_Module_Exit+0x28>)
 8003044:	f002 fcae 	bl	80059a4 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2110      	movs	r1, #16
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <DEV_Module_Exit+0x28>)
 800304e:	f002 fca9 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	48000400 	.word	0x48000400

0800305c <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003060:	2201      	movs	r2, #1
 8003062:	2110      	movs	r1, #16
 8003064:	480b      	ldr	r0, [pc, #44]	; (8003094 <EPD_Reset+0x38>)
 8003066:	f002 fc9d 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800306a:	20c8      	movs	r0, #200	; 0xc8
 800306c:	f000 ffa8 	bl	8003fc0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2110      	movs	r1, #16
 8003074:	4807      	ldr	r0, [pc, #28]	; (8003094 <EPD_Reset+0x38>)
 8003076:	f002 fc95 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800307a:	2002      	movs	r0, #2
 800307c:	f000 ffa0 	bl	8003fc0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003080:	2201      	movs	r2, #1
 8003082:	2110      	movs	r1, #16
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <EPD_Reset+0x38>)
 8003086:	f002 fc8d 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800308a:	20c8      	movs	r0, #200	; 0xc8
 800308c:	f000 ff98 	bl	8003fc0 <HAL_Delay>
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	48000400 	.word	0x48000400

08003098 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(UBYTE Reg)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2120      	movs	r1, #32
 80030a6:	480a      	ldr	r0, [pc, #40]	; (80030d0 <EPD_SendCommand+0x38>)
 80030a8:	f002 fc7c 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	4807      	ldr	r0, [pc, #28]	; (80030d0 <EPD_SendCommand+0x38>)
 80030b2:	f002 fc77 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff91 	bl	8002fe0 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80030be:	2201      	movs	r2, #1
 80030c0:	2140      	movs	r1, #64	; 0x40
 80030c2:	4803      	ldr	r0, [pc, #12]	; (80030d0 <EPD_SendCommand+0x38>)
 80030c4:	f002 fc6e 	bl	80059a4 <HAL_GPIO_WritePin>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	48000400 	.word	0x48000400

080030d4 <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(UBYTE Data)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80030de:	2201      	movs	r2, #1
 80030e0:	2120      	movs	r1, #32
 80030e2:	480a      	ldr	r0, [pc, #40]	; (800310c <EPD_SendData+0x38>)
 80030e4:	f002 fc5e 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	4807      	ldr	r0, [pc, #28]	; (800310c <EPD_SendData+0x38>)
 80030ee:	f002 fc59 	bl	80059a4 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff73 	bl	8002fe0 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80030fa:	2201      	movs	r2, #1
 80030fc:	2140      	movs	r1, #64	; 0x40
 80030fe:	4803      	ldr	r0, [pc, #12]	; (800310c <EPD_SendData+0x38>)
 8003100:	f002 fc50 	bl	80059a4 <HAL_GPIO_WritePin>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	48000400 	.word	0x48000400

08003110 <EPD_WaitUntilIdle>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_WaitUntilIdle(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
    unsigned char busy;
	do{
		EPD_SendCommand(0x71);
 8003116:	2071      	movs	r0, #113	; 0x71
 8003118:	f7ff ffbe 	bl	8003098 <EPD_SendCommand>
		busy = DEV_Digital_Read(EPD_BUSY_PIN);
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	480c      	ldr	r0, [pc, #48]	; (8003150 <EPD_WaitUntilIdle+0x40>)
 8003120:	f002 fc28 	bl	8005974 <HAL_GPIO_ReadPin>
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
		busy =!(busy & 0x01);        
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	71fb      	strb	r3, [r7, #7]
	}while(busy);   
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ea      	bne.n	8003116 <EPD_WaitUntilIdle+0x6>
	DEV_Delay_ms(200);      
 8003140:	20c8      	movs	r0, #200	; 0xc8
 8003142:	f000 ff3d 	bl	8003fc0 <HAL_Delay>
		
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	48000400 	.word	0x48000400

08003154 <EPD_7IN5_V2_LUT>:

static void EPD_7IN5_V2_LUT(UBYTE* lut_vcom,  UBYTE* lut_ww, UBYTE* lut_bw, UBYTE* lut_wb, UBYTE* lut_bb)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
	UBYTE count;

	EPD_SendCommand(0x20); //VCOM	
 8003162:	2020      	movs	r0, #32
 8003164:	f7ff ff98 	bl	8003098 <EPD_SendCommand>
	for(count=0; count<42; count++)
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
 800316c:	e009      	b.n	8003182 <EPD_7IN5_V2_LUT+0x2e>
		EPD_SendData(lut_vcom[count]);
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ffac 	bl	80030d4 <EPD_SendData>
	for(count=0; count<42; count++)
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	3301      	adds	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	2b29      	cmp	r3, #41	; 0x29
 8003186:	d9f2      	bls.n	800316e <EPD_7IN5_V2_LUT+0x1a>

	EPD_SendCommand(0x21); //LUTBW
 8003188:	2021      	movs	r0, #33	; 0x21
 800318a:	f7ff ff85 	bl	8003098 <EPD_SendCommand>
	for(count=0; count<42; count++)
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
 8003192:	e009      	b.n	80031a8 <EPD_7IN5_V2_LUT+0x54>
		EPD_SendData(lut_ww[count]);
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4413      	add	r3, r2
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff99 	bl	80030d4 <EPD_SendData>
	for(count=0; count<42; count++)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	3301      	adds	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b29      	cmp	r3, #41	; 0x29
 80031ac:	d9f2      	bls.n	8003194 <EPD_7IN5_V2_LUT+0x40>

	EPD_SendCommand(0x22); //LUTBW
 80031ae:	2022      	movs	r0, #34	; 0x22
 80031b0:	f7ff ff72 	bl	8003098 <EPD_SendCommand>
	for(count=0; count<42; count++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]
 80031b8:	e009      	b.n	80031ce <EPD_7IN5_V2_LUT+0x7a>
		EPD_SendData(lut_bw[count]);
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff86 	bl	80030d4 <EPD_SendData>
	for(count=0; count<42; count++)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	3301      	adds	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b29      	cmp	r3, #41	; 0x29
 80031d2:	d9f2      	bls.n	80031ba <EPD_7IN5_V2_LUT+0x66>

	EPD_SendCommand(0x23); //LUTWB
 80031d4:	2023      	movs	r0, #35	; 0x23
 80031d6:	f7ff ff5f 	bl	8003098 <EPD_SendCommand>
	for(count=0; count<42; count++)
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
 80031de:	e009      	b.n	80031f4 <EPD_7IN5_V2_LUT+0xa0>
		EPD_SendData(lut_wb[count]);
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff73 	bl	80030d4 <EPD_SendData>
	for(count=0; count<42; count++)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	3301      	adds	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b29      	cmp	r3, #41	; 0x29
 80031f8:	d9f2      	bls.n	80031e0 <EPD_7IN5_V2_LUT+0x8c>

	EPD_SendCommand(0x24); //LUTBB
 80031fa:	2024      	movs	r0, #36	; 0x24
 80031fc:	f7ff ff4c 	bl	8003098 <EPD_SendCommand>
	for(count=0; count<42; count++)
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
 8003204:	e009      	b.n	800321a <EPD_7IN5_V2_LUT+0xc6>
		EPD_SendData(lut_bb[count]);
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	4413      	add	r3, r2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff60 	bl	80030d4 <EPD_SendData>
	for(count=0; count<42; count++)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	3301      	adds	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b29      	cmp	r3, #41	; 0x29
 800321e:	d9f2      	bls.n	8003206 <EPD_7IN5_V2_LUT+0xb2>
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <EPD_7IN5_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_7IN5_V2_TurnOnDisplay(void)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	af00      	add	r7, sp, #0
    EPD_SendCommand(0x12);			//DISPLAY REFRESH
 800322e:	2012      	movs	r0, #18
 8003230:	f7ff ff32 	bl	8003098 <EPD_SendCommand>
    HAL_Delay(100);//DEV_Delay_ms(100);	        //!!!The delay here is necessary, 200uS at least!!!
 8003234:	2064      	movs	r0, #100	; 0x64
 8003236:	f000 fec3 	bl	8003fc0 <HAL_Delay>
    EPD_WaitUntilIdle();
 800323a:	f7ff ff69 	bl	8003110 <EPD_WaitUntilIdle>
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <EPD_7IN5_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
UBYTE EPD_7IN5_V2_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af02      	add	r7, sp, #8
    EPD_Reset();
 800324a:	f7ff ff07 	bl	800305c <EPD_Reset>
    // EPD_SendData(0x07);

    // EPD_SendCommand(0X60);			//TCON SETTING
    // EPD_SendData(0x22);

	EPD_SendCommand(0x01);  // power setting
 800324e:	2001      	movs	r0, #1
 8003250:	f7ff ff22 	bl	8003098 <EPD_SendCommand>
	EPD_SendData(0x17);  // 1-0=11: internal power
 8003254:	2017      	movs	r0, #23
 8003256:	f7ff ff3d 	bl	80030d4 <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+6));  // VGH&VGL
 800325a:	4b40      	ldr	r3, [pc, #256]	; (800335c <EPD_7IN5_V2_Init+0x118>)
 800325c:	799b      	ldrb	r3, [r3, #6]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff38 	bl	80030d4 <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+1));  // VSH
 8003264:	4b3d      	ldr	r3, [pc, #244]	; (800335c <EPD_7IN5_V2_Init+0x118>)
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff33 	bl	80030d4 <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+2));  //  VSL
 800326e:	4b3b      	ldr	r3, [pc, #236]	; (800335c <EPD_7IN5_V2_Init+0x118>)
 8003270:	789b      	ldrb	r3, [r3, #2]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff2e 	bl	80030d4 <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+3));  //  VSHR
 8003278:	4b38      	ldr	r3, [pc, #224]	; (800335c <EPD_7IN5_V2_Init+0x118>)
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff29 	bl	80030d4 <EPD_SendData>
	
	EPD_SendCommand(0x82);  // VCOM DC Setting
 8003282:	2082      	movs	r0, #130	; 0x82
 8003284:	f7ff ff08 	bl	8003098 <EPD_SendCommand>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+4));  // VCOM
 8003288:	4b34      	ldr	r3, [pc, #208]	; (800335c <EPD_7IN5_V2_Init+0x118>)
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff21 	bl	80030d4 <EPD_SendData>

	EPD_SendCommand(0x06);  // Booster Setting
 8003292:	2006      	movs	r0, #6
 8003294:	f7ff ff00 	bl	8003098 <EPD_SendCommand>
	EPD_SendData(0x27);
 8003298:	2027      	movs	r0, #39	; 0x27
 800329a:	f7ff ff1b 	bl	80030d4 <EPD_SendData>
	EPD_SendData(0x27);
 800329e:	2027      	movs	r0, #39	; 0x27
 80032a0:	f7ff ff18 	bl	80030d4 <EPD_SendData>
	EPD_SendData(0x2F);
 80032a4:	202f      	movs	r0, #47	; 0x2f
 80032a6:	f7ff ff15 	bl	80030d4 <EPD_SendData>
	EPD_SendData(0x17);
 80032aa:	2017      	movs	r0, #23
 80032ac:	f7ff ff12 	bl	80030d4 <EPD_SendData>
	
	EPD_SendCommand(0x30);   // OSC Setting
 80032b0:	2030      	movs	r0, #48	; 0x30
 80032b2:	f7ff fef1 	bl	8003098 <EPD_SendCommand>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+0));  // 2-0=100: N=4  ; 5-3=111: M=7  ;  3C=50Hz     3A=100HZ
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <EPD_7IN5_V2_Init+0x118>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff0a 	bl	80030d4 <EPD_SendData>

    EPD_SendCommand(0x04); //POWER ON
 80032c0:	2004      	movs	r0, #4
 80032c2:	f7ff fee9 	bl	8003098 <EPD_SendCommand>
    DEV_Delay_ms(100);
 80032c6:	2064      	movs	r0, #100	; 0x64
 80032c8:	f000 fe7a 	bl	8003fc0 <HAL_Delay>
    EPD_WaitUntilIdle();
 80032cc:	f7ff ff20 	bl	8003110 <EPD_WaitUntilIdle>

    EPD_SendCommand(0X00);			//PANNEL SETTING
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7ff fee1 	bl	8003098 <EPD_SendCommand>
    EPD_SendData(0x3F);   //KW-3f   KWR-2F	BWROTP 0f	BWOTP 1f
 80032d6:	203f      	movs	r0, #63	; 0x3f
 80032d8:	f7ff fefc 	bl	80030d4 <EPD_SendData>

    EPD_SendCommand(0x61);        	//tres
 80032dc:	2061      	movs	r0, #97	; 0x61
 80032de:	f7ff fedb 	bl	8003098 <EPD_SendCommand>
    EPD_SendData(0x03);		//source 800
 80032e2:	2003      	movs	r0, #3
 80032e4:	f7ff fef6 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0x20);
 80032e8:	2020      	movs	r0, #32
 80032ea:	f7ff fef3 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0x01);		//gate 480
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7ff fef0 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0xE0);
 80032f4:	20e0      	movs	r0, #224	; 0xe0
 80032f6:	f7ff feed 	bl	80030d4 <EPD_SendData>

    EPD_SendCommand(0X15);
 80032fa:	2015      	movs	r0, #21
 80032fc:	f7ff fecc 	bl	8003098 <EPD_SendCommand>
    EPD_SendData(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff fee7 	bl	80030d4 <EPD_SendData>

    EPD_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
 8003306:	2050      	movs	r0, #80	; 0x50
 8003308:	f7ff fec6 	bl	8003098 <EPD_SendCommand>
    EPD_SendData(0x10);
 800330c:	2010      	movs	r0, #16
 800330e:	f7ff fee1 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0x00);
 8003312:	2000      	movs	r0, #0
 8003314:	f7ff fede 	bl	80030d4 <EPD_SendData>

    EPD_SendCommand(0X60);			//TCON SETTING
 8003318:	2060      	movs	r0, #96	; 0x60
 800331a:	f7ff febd 	bl	8003098 <EPD_SendCommand>
    EPD_SendData(0x22);
 800331e:	2022      	movs	r0, #34	; 0x22
 8003320:	f7ff fed8 	bl	80030d4 <EPD_SendData>

    EPD_SendCommand(0x65);  // Resolution setting
 8003324:	2065      	movs	r0, #101	; 0x65
 8003326:	f7ff feb7 	bl	8003098 <EPD_SendCommand>
    EPD_SendData(0x00);
 800332a:	2000      	movs	r0, #0
 800332c:	f7ff fed2 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0x00);//800*480
 8003330:	2000      	movs	r0, #0
 8003332:	f7ff fecf 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0x00);
 8003336:	2000      	movs	r0, #0
 8003338:	f7ff fecc 	bl	80030d4 <EPD_SendData>
    EPD_SendData(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7ff fec9 	bl	80030d4 <EPD_SendData>
	
	EPD_7IN5_V2_LUT(LUT_VCOM_7IN5_V2, LUT_WW_7IN5_V2, LUT_BW_7IN5_V2, LUT_WB_7IN5_V2, LUT_BB_7IN5_V2);
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <EPD_7IN5_V2_Init+0x11c>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <EPD_7IN5_V2_Init+0x120>)
 8003348:	4a07      	ldr	r2, [pc, #28]	; (8003368 <EPD_7IN5_V2_Init+0x124>)
 800334a:	4908      	ldr	r1, [pc, #32]	; (800336c <EPD_7IN5_V2_Init+0x128>)
 800334c:	4808      	ldr	r0, [pc, #32]	; (8003370 <EPD_7IN5_V2_Init+0x12c>)
 800334e:	f7ff ff01 	bl	8003154 <EPD_7IN5_V2_LUT>

    return 0;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000008 	.word	0x20000008
 8003360:	200000c0 	.word	0x200000c0
 8003364:	20000094 	.word	0x20000094
 8003368:	20000068 	.word	0x20000068
 800336c:	2000003c 	.word	0x2000003c
 8003370:	20000010 	.word	0x20000010

08003374 <EPD_7IN5_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_7IN5_V2_Display(const UBYTE *blackimage)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    UDOUBLE Width, Height;
    Width =(EPD_7IN5_V2_WIDTH % 8 == 0)?(EPD_7IN5_V2_WIDTH / 8 ):(EPD_7IN5_V2_WIDTH / 8 + 1);
 800337c:	2364      	movs	r3, #100	; 0x64
 800337e:	60fb      	str	r3, [r7, #12]
    Height = EPD_7IN5_V2_HEIGHT;
 8003380:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003384:	60bb      	str	r3, [r7, #8]
    
	//send black data
    EPD_SendCommand(0x13);
 8003386:	2013      	movs	r0, #19
 8003388:	f7ff fe86 	bl	8003098 <EPD_SendCommand>
    for (UDOUBLE j = 0; j < Height; j++) {
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e01a      	b.n	80033c8 <EPD_7IN5_V2_Display+0x54>
        for (UDOUBLE i = 0; i < Width; i++) {
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e010      	b.n	80033ba <EPD_7IN5_V2_Display+0x46>
            EPD_SendData(~blackimage[i + j * Width]);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	fb03 f202 	mul.w	r2, r3, r2
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe90 	bl	80030d4 <EPD_SendData>
        for (UDOUBLE i = 0; i < Width; i++) {
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	3301      	adds	r3, #1
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d3ea      	bcc.n	8003398 <EPD_7IN5_V2_Display+0x24>
    for (UDOUBLE j = 0; j < Height; j++) {
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d3e0      	bcc.n	8003392 <EPD_7IN5_V2_Display+0x1e>
        }
    }
    EPD_7IN5_V2_TurnOnDisplay();
 80033d0:	f7ff ff2b 	bl	800322a <EPD_7IN5_V2_TurnOnDisplay>
}
 80033d4:	bf00      	nop
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <Paint_NewImage+0xa8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80033fc:	4a21      	ldr	r2, [pc, #132]	; (8003484 <Paint_NewImage+0xa8>)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <Paint_NewImage+0xa8>)
 8003404:	897b      	ldrh	r3, [r7, #10]
 8003406:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <Paint_NewImage+0xa8>)
 800340a:	893b      	ldrh	r3, [r7, #8]
 800340c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <Paint_NewImage+0xa8>)
 8003410:	8b3b      	ldrh	r3, [r7, #24]
 8003412:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <Paint_NewImage+0xa8>)
 8003416:	2202      	movs	r2, #2
 8003418:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <Paint_NewImage+0x52>
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	b29b      	uxth	r3, r3
 800342c:	e004      	b.n	8003438 <Paint_NewImage+0x5c>
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	b29b      	uxth	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <Paint_NewImage+0xa8>)
 800343a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800343c:	4a11      	ldr	r2, [pc, #68]	; (8003484 <Paint_NewImage+0xa8>)
 800343e:	893b      	ldrh	r3, [r7, #8]
 8003440:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <Paint_NewImage+0xa8>)
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <Paint_NewImage+0xa8>)
 800344a:	2200      	movs	r2, #0
 800344c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <Paint_NewImage+0x7e>
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2bb4      	cmp	r3, #180	; 0xb4
 8003458:	d106      	bne.n	8003468 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <Paint_NewImage+0xa8>)
 800345c:	897b      	ldrh	r3, [r7, #10]
 800345e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <Paint_NewImage+0xa8>)
 8003462:	893b      	ldrh	r3, [r7, #8]
 8003464:	80d3      	strh	r3, [r2, #6]
 8003466:	e006      	b.n	8003476 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <Paint_NewImage+0xa8>)
 800346a:	893b      	ldrh	r3, [r7, #8]
 800346c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <Paint_NewImage+0xa8>)
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	80d3      	strh	r3, [r2, #6]
    }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	200006d4 	.word	0x200006d4

08003488 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <Paint_SelectImage+0x1c>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6013      	str	r3, [r2, #0]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	200006d4 	.word	0x200006d4

080034a8 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b08b      	sub	sp, #44	; 0x2c
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
 80034b2:	460b      	mov	r3, r1
 80034b4:	80bb      	strh	r3, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80034ba:	4ba0      	ldr	r3, [pc, #640]	; (800373c <Paint_SetPixel+0x294>)
 80034bc:	889b      	ldrh	r3, [r3, #4]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f200 812f 	bhi.w	8003724 <Paint_SetPixel+0x27c>
 80034c6:	4b9d      	ldr	r3, [pc, #628]	; (800373c <Paint_SetPixel+0x294>)
 80034c8:	88db      	ldrh	r3, [r3, #6]
 80034ca:	88ba      	ldrh	r2, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	f200 8129 	bhi.w	8003724 <Paint_SetPixel+0x27c>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80034d2:	4b9a      	ldr	r3, [pc, #616]	; (800373c <Paint_SetPixel+0x294>)
 80034d4:	89db      	ldrh	r3, [r3, #14]
 80034d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80034da:	d02b      	beq.n	8003534 <Paint_SetPixel+0x8c>
 80034dc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80034e0:	f300 8122 	bgt.w	8003728 <Paint_SetPixel+0x280>
 80034e4:	2bb4      	cmp	r3, #180	; 0xb4
 80034e6:	d016      	beq.n	8003516 <Paint_SetPixel+0x6e>
 80034e8:	2bb4      	cmp	r3, #180	; 0xb4
 80034ea:	f300 811d 	bgt.w	8003728 <Paint_SetPixel+0x280>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <Paint_SetPixel+0x50>
 80034f2:	2b5a      	cmp	r3, #90	; 0x5a
 80034f4:	d005      	beq.n	8003502 <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80034f6:	e117      	b.n	8003728 <Paint_SetPixel+0x280>
        X = Xpoint;
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 80034fc:	88bb      	ldrh	r3, [r7, #4]
 80034fe:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003500:	e022      	b.n	8003548 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 8003502:	4b8e      	ldr	r3, [pc, #568]	; (800373c <Paint_SetPixel+0x294>)
 8003504:	891a      	ldrh	r2, [r3, #8]
 8003506:	88bb      	ldrh	r3, [r7, #4]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003514:	e018      	b.n	8003548 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <Paint_SetPixel+0x294>)
 8003518:	891a      	ldrh	r2, [r3, #8]
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8003524:	4b85      	ldr	r3, [pc, #532]	; (800373c <Paint_SetPixel+0x294>)
 8003526:	895a      	ldrh	r2, [r3, #10]
 8003528:	88bb      	ldrh	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003532:	e009      	b.n	8003548 <Paint_SetPixel+0xa0>
        X = Ypoint;
 8003534:	88bb      	ldrh	r3, [r7, #4]
 8003536:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8003538:	4b80      	ldr	r3, [pc, #512]	; (800373c <Paint_SetPixel+0x294>)
 800353a:	895a      	ldrh	r2, [r3, #10]
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003546:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8003548:	4b7c      	ldr	r3, [pc, #496]	; (800373c <Paint_SetPixel+0x294>)
 800354a:	8a1b      	ldrh	r3, [r3, #16]
 800354c:	2b03      	cmp	r3, #3
 800354e:	f200 80ed 	bhi.w	800372c <Paint_SetPixel+0x284>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <Paint_SetPixel+0xb0>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	080035a7 	.word	0x080035a7
 800355c:	08003569 	.word	0x08003569
 8003560:	08003579 	.word	0x08003579
 8003564:	08003589 	.word	0x08003589
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8003568:	4b74      	ldr	r3, [pc, #464]	; (800373c <Paint_SetPixel+0x294>)
 800356a:	891a      	ldrh	r2, [r3, #8]
 800356c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8003576:	e017      	b.n	80035a8 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8003578:	4b70      	ldr	r3, [pc, #448]	; (800373c <Paint_SetPixel+0x294>)
 800357a:	895a      	ldrh	r2, [r3, #10]
 800357c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003586:	e00f      	b.n	80035a8 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8003588:	4b6c      	ldr	r3, [pc, #432]	; (800373c <Paint_SetPixel+0x294>)
 800358a:	891a      	ldrh	r2, [r3, #8]
 800358c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8003596:	4b69      	ldr	r3, [pc, #420]	; (800373c <Paint_SetPixel+0x294>)
 8003598:	895a      	ldrh	r2, [r3, #10]
 800359a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80035a4:	e000      	b.n	80035a8 <Paint_SetPixel+0x100>
        break;
 80035a6:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80035a8:	4b64      	ldr	r3, [pc, #400]	; (800373c <Paint_SetPixel+0x294>)
 80035aa:	891b      	ldrh	r3, [r3, #8]
 80035ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f200 80be 	bhi.w	8003730 <Paint_SetPixel+0x288>
 80035b4:	4b61      	ldr	r3, [pc, #388]	; (800373c <Paint_SetPixel+0x294>)
 80035b6:	895b      	ldrh	r3, [r3, #10]
 80035b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035ba:	429a      	cmp	r2, r3
 80035bc:	f200 80b8 	bhi.w	8003730 <Paint_SetPixel+0x288>
        return;
    }
    
    if(Paint.Scale == 2){
 80035c0:	4b5e      	ldr	r3, [pc, #376]	; (800373c <Paint_SetPixel+0x294>)
 80035c2:	8adb      	ldrh	r3, [r3, #22]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d139      	bne.n	800363c <Paint_SetPixel+0x194>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80035c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035d2:	4a5a      	ldr	r2, [pc, #360]	; (800373c <Paint_SetPixel+0x294>)
 80035d4:	8a52      	ldrh	r2, [r2, #18]
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	440b      	add	r3, r1
 80035dc:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <Paint_SetPixel+0x294>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d113      	bne.n	8003618 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80035f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	fa42 f303 	asr.w	r3, r2, r3
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	b25a      	sxtb	r2, r3
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	4013      	ands	r3, r2
 8003608:	b259      	sxtb	r1, r3
 800360a:	4b4c      	ldr	r3, [pc, #304]	; (800373c <Paint_SetPixel+0x294>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	b2ca      	uxtb	r2, r1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e08c      	b.n	8003732 <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8003618:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	fa42 f303 	asr.w	r3, r2, r3
 8003624:	b25a      	sxtb	r2, r3
 8003626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362a:	4313      	orrs	r3, r2
 800362c:	b259      	sxtb	r1, r3
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <Paint_SetPixel+0x294>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	b2ca      	uxtb	r2, r1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e07a      	b.n	8003732 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 800363c:	4b3f      	ldr	r3, [pc, #252]	; (800373c <Paint_SetPixel+0x294>)
 800363e:	8adb      	ldrh	r3, [r3, #22]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d137      	bne.n	80036b4 <Paint_SetPixel+0x20c>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8003644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	b29b      	uxth	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800364e:	4a3b      	ldr	r2, [pc, #236]	; (800373c <Paint_SetPixel+0x294>)
 8003650:	8a52      	ldrh	r2, [r2, #18]
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	440b      	add	r3, r1
 8003658:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <Paint_SetPixel+0x294>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800366e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	22c0      	movs	r2, #192	; 0xc0
 8003678:	fa42 f303 	asr.w	r3, r2, r3
 800367c:	b25b      	sxtb	r3, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	b25a      	sxtb	r2, r3
 8003682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003686:	4013      	ands	r3, r2
 8003688:	b25b      	sxtb	r3, r3
 800368a:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	019a      	lsls	r2, r3, #6
 8003690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa42 f303 	asr.w	r3, r2, r3
 800369c:	b25a      	sxtb	r2, r3
 800369e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b259      	sxtb	r1, r3
 80036a6:	4b25      	ldr	r3, [pc, #148]	; (800373c <Paint_SetPixel+0x294>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	b2ca      	uxtb	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e03e      	b.n	8003732 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <Paint_SetPixel+0x294>)
 80036b6:	8adb      	ldrh	r3, [r3, #22]
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	d13a      	bne.n	8003732 <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80036bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <Paint_SetPixel+0x294>)
 80036c8:	8a52      	ldrh	r2, [r2, #18]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	440b      	add	r3, r1
 80036d0:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <Paint_SetPixel+0x294>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	4413      	add	r3, r2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80036de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	22f0      	movs	r2, #240	; 0xf0
 80036e8:	fa42 f303 	asr.w	r3, r2, r3
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	b25a      	sxtb	r2, r3
 80036f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b25b      	sxtb	r3, r3
 80036fa:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	011a      	lsls	r2, r3, #4
 8003700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fa42 f303 	asr.w	r3, r2, r3
 800370c:	b25a      	sxtb	r2, r3
 800370e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003712:	4313      	orrs	r3, r2
 8003714:	b259      	sxtb	r1, r3
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <Paint_SetPixel+0x294>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	4413      	add	r3, r2
 800371e:	b2ca      	uxtb	r2, r1
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e006      	b.n	8003732 <Paint_SetPixel+0x28a>
        return;
 8003724:	bf00      	nop
 8003726:	e004      	b.n	8003732 <Paint_SetPixel+0x28a>
        return;
 8003728:	bf00      	nop
 800372a:	e002      	b.n	8003732 <Paint_SetPixel+0x28a>
        return;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <Paint_SetPixel+0x28a>
        return;
 8003730:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8003732:	372c      	adds	r7, #44	; 0x2c
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	200006d4 	.word	0x200006d4

08003740 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 800374a:	4b4c      	ldr	r3, [pc, #304]	; (800387c <Paint_Clear+0x13c>)
 800374c:	8adb      	ldrh	r3, [r3, #22]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d125      	bne.n	800379e <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003752:	2300      	movs	r3, #0
 8003754:	83fb      	strh	r3, [r7, #30]
 8003756:	e01c      	b.n	8003792 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8003758:	2300      	movs	r3, #0
 800375a:	83bb      	strh	r3, [r7, #28]
 800375c:	e011      	b.n	8003782 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800375e:	8bba      	ldrh	r2, [r7, #28]
 8003760:	8bfb      	ldrh	r3, [r7, #30]
 8003762:	4946      	ldr	r1, [pc, #280]	; (800387c <Paint_Clear+0x13c>)
 8003764:	8a49      	ldrh	r1, [r1, #18]
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800376e:	4b43      	ldr	r3, [pc, #268]	; (800387c <Paint_Clear+0x13c>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4413      	add	r3, r2
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800377c:	8bbb      	ldrh	r3, [r7, #28]
 800377e:	3301      	adds	r3, #1
 8003780:	83bb      	strh	r3, [r7, #28]
 8003782:	4b3e      	ldr	r3, [pc, #248]	; (800387c <Paint_Clear+0x13c>)
 8003784:	8a5b      	ldrh	r3, [r3, #18]
 8003786:	8bba      	ldrh	r2, [r7, #28]
 8003788:	429a      	cmp	r2, r3
 800378a:	d3e8      	bcc.n	800375e <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800378c:	8bfb      	ldrh	r3, [r7, #30]
 800378e:	3301      	adds	r3, #1
 8003790:	83fb      	strh	r3, [r7, #30]
 8003792:	4b3a      	ldr	r3, [pc, #232]	; (800387c <Paint_Clear+0x13c>)
 8003794:	8a9b      	ldrh	r3, [r3, #20]
 8003796:	8bfa      	ldrh	r2, [r7, #30]
 8003798:	429a      	cmp	r2, r3
 800379a:	d3dd      	bcc.n	8003758 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 800379c:	e068      	b.n	8003870 <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <Paint_Clear+0x13c>)
 80037a0:	8adb      	ldrh	r3, [r3, #22]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d135      	bne.n	8003812 <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80037a6:	2300      	movs	r3, #0
 80037a8:	837b      	strh	r3, [r7, #26]
 80037aa:	e02c      	b.n	8003806 <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80037ac:	2300      	movs	r3, #0
 80037ae:	833b      	strh	r3, [r7, #24]
 80037b0:	e021      	b.n	80037f6 <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80037b2:	8b3a      	ldrh	r2, [r7, #24]
 80037b4:	8b7b      	ldrh	r3, [r7, #26]
 80037b6:	4931      	ldr	r1, [pc, #196]	; (800387c <Paint_Clear+0x13c>)
 80037b8:	8a49      	ldrh	r1, [r1, #18]
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	b25a      	sxtb	r2, r3
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b25a      	sxtb	r2, r3
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b25a      	sxtb	r2, r3
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b259      	sxtb	r1, r3
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <Paint_Clear+0x13c>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	b2ca      	uxtb	r2, r1
 80037ee:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80037f0:	8b3b      	ldrh	r3, [r7, #24]
 80037f2:	3301      	adds	r3, #1
 80037f4:	833b      	strh	r3, [r7, #24]
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <Paint_Clear+0x13c>)
 80037f8:	8a5b      	ldrh	r3, [r3, #18]
 80037fa:	8b3a      	ldrh	r2, [r7, #24]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3d8      	bcc.n	80037b2 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003800:	8b7b      	ldrh	r3, [r7, #26]
 8003802:	3301      	adds	r3, #1
 8003804:	837b      	strh	r3, [r7, #26]
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <Paint_Clear+0x13c>)
 8003808:	8a9b      	ldrh	r3, [r3, #20]
 800380a:	8b7a      	ldrh	r2, [r7, #26]
 800380c:	429a      	cmp	r2, r3
 800380e:	d3cd      	bcc.n	80037ac <Paint_Clear+0x6c>
}
 8003810:	e02e      	b.n	8003870 <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <Paint_Clear+0x13c>)
 8003814:	8adb      	ldrh	r3, [r3, #22]
 8003816:	2b07      	cmp	r3, #7
 8003818:	d12a      	bne.n	8003870 <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800381a:	2300      	movs	r3, #0
 800381c:	82fb      	strh	r3, [r7, #22]
 800381e:	e022      	b.n	8003866 <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003820:	2300      	movs	r3, #0
 8003822:	82bb      	strh	r3, [r7, #20]
 8003824:	e017      	b.n	8003856 <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003826:	8aba      	ldrh	r2, [r7, #20]
 8003828:	8afb      	ldrh	r3, [r7, #22]
 800382a:	4914      	ldr	r1, [pc, #80]	; (800387c <Paint_Clear+0x13c>)
 800382c:	8a49      	ldrh	r1, [r1, #18]
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	b25a      	sxtb	r2, r3
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	4313      	orrs	r3, r2
 8003842:	b259      	sxtb	r1, r3
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <Paint_Clear+0x13c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	b2ca      	uxtb	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003850:	8abb      	ldrh	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	82bb      	strh	r3, [r7, #20]
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <Paint_Clear+0x13c>)
 8003858:	8a5b      	ldrh	r3, [r3, #18]
 800385a:	8aba      	ldrh	r2, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	d3e2      	bcc.n	8003826 <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003860:	8afb      	ldrh	r3, [r7, #22]
 8003862:	3301      	adds	r3, #1
 8003864:	82fb      	strh	r3, [r7, #22]
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <Paint_Clear+0x13c>)
 8003868:	8a9b      	ldrh	r3, [r3, #20]
 800386a:	8afa      	ldrh	r2, [r7, #22]
 800386c:	429a      	cmp	r2, r3
 800386e:	d3d7      	bcc.n	8003820 <Paint_Clear+0xe0>
}
 8003870:	bf00      	nop
 8003872:	3724      	adds	r7, #36	; 0x24
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	200006d4 	.word	0x200006d4

08003880 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	4603      	mov	r3, r0
 800388a:	81fb      	strh	r3, [r7, #14]
 800388c:	460b      	mov	r3, r1
 800388e:	81bb      	strh	r3, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <Paint_DrawChar+0x148>)
 8003896:	889b      	ldrh	r3, [r3, #4]
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	429a      	cmp	r2, r3
 800389c:	f200 808f 	bhi.w	80039be <Paint_DrawChar+0x13e>
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <Paint_DrawChar+0x148>)
 80038a2:	88db      	ldrh	r3, [r3, #6]
 80038a4:	89ba      	ldrh	r2, [r7, #12]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	f200 8089 	bhi.w	80039be <Paint_DrawChar+0x13e>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80038ac:	7afb      	ldrb	r3, [r7, #11]
 80038ae:	3b20      	subs	r3, #32
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	88d2      	ldrh	r2, [r2, #6]
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	8892      	ldrh	r2, [r2, #4]
 80038bc:	08d2      	lsrs	r2, r2, #3
 80038be:	b292      	uxth	r2, r2
 80038c0:	4611      	mov	r1, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	8892      	ldrh	r2, [r2, #4]
 80038c6:	f002 0207 	and.w	r2, r2, #7
 80038ca:	b292      	uxth	r2, r2
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	bf14      	ite	ne
 80038d0:	2201      	movne	r2, #1
 80038d2:	2200      	moveq	r2, #0
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440a      	add	r2, r1
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	4413      	add	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80038e8:	2300      	movs	r3, #0
 80038ea:	83fb      	strh	r3, [r7, #30]
 80038ec:	e061      	b.n	80039b2 <Paint_DrawChar+0x132>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80038ee:	2300      	movs	r3, #0
 80038f0:	83bb      	strh	r3, [r7, #28]
 80038f2:	e04c      	b.n	800398e <Paint_DrawChar+0x10e>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80038f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d118      	bne.n	800392c <Paint_DrawChar+0xac>
                if (*ptr & (0x80 >> (Column % 8)))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	8bbb      	ldrh	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	fa42 f303 	asr.w	r3, r2, r3
 800390c:	400b      	ands	r3, r1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d031      	beq.n	8003976 <Paint_DrawChar+0xf6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8003912:	89fa      	ldrh	r2, [r7, #14]
 8003914:	8bbb      	ldrh	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	b298      	uxth	r0, r3
 800391a:	89ba      	ldrh	r2, [r7, #12]
 800391c:	8bfb      	ldrh	r3, [r7, #30]
 800391e:	4413      	add	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003924:	4619      	mov	r1, r3
 8003926:	f7ff fdbf 	bl	80034a8 <Paint_SetPixel>
 800392a:	e024      	b.n	8003976 <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4619      	mov	r1, r3
 8003932:	8bbb      	ldrh	r3, [r7, #28]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	2280      	movs	r2, #128	; 0x80
 800393a:	fa42 f303 	asr.w	r3, r2, r3
 800393e:	400b      	ands	r3, r1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00c      	beq.n	800395e <Paint_DrawChar+0xde>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8003944:	89fa      	ldrh	r2, [r7, #14]
 8003946:	8bbb      	ldrh	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	b298      	uxth	r0, r3
 800394c:	89ba      	ldrh	r2, [r7, #12]
 800394e:	8bfb      	ldrh	r3, [r7, #30]
 8003950:	4413      	add	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003956:	4619      	mov	r1, r3
 8003958:	f7ff fda6 	bl	80034a8 <Paint_SetPixel>
 800395c:	e00b      	b.n	8003976 <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800395e:	89fa      	ldrh	r2, [r7, #14]
 8003960:	8bbb      	ldrh	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	b298      	uxth	r0, r3
 8003966:	89ba      	ldrh	r2, [r7, #12]
 8003968:	8bfb      	ldrh	r3, [r7, #30]
 800396a:	4413      	add	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003970:	4619      	mov	r1, r3
 8003972:	f7ff fd99 	bl	80034a8 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8003976:	8bbb      	ldrh	r3, [r7, #28]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b07      	cmp	r3, #7
 8003980:	d102      	bne.n	8003988 <Paint_DrawChar+0x108>
                ptr++;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	3301      	adds	r3, #1
 8003986:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8003988:	8bbb      	ldrh	r3, [r7, #28]
 800398a:	3301      	adds	r3, #1
 800398c:	83bb      	strh	r3, [r7, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	889b      	ldrh	r3, [r3, #4]
 8003992:	8bba      	ldrh	r2, [r7, #28]
 8003994:	429a      	cmp	r2, r3
 8003996:	d3ad      	bcc.n	80038f4 <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	889b      	ldrh	r3, [r3, #4]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <Paint_DrawChar+0x12c>
            ptr++;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80039ac:	8bfb      	ldrh	r3, [r7, #30]
 80039ae:	3301      	adds	r3, #1
 80039b0:	83fb      	strh	r3, [r7, #30]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	88db      	ldrh	r3, [r3, #6]
 80039b6:	8bfa      	ldrh	r2, [r7, #30]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d398      	bcc.n	80038ee <Paint_DrawChar+0x6e>
 80039bc:	e000      	b.n	80039c0 <Paint_DrawChar+0x140>
        return;
 80039be:	bf00      	nop
    }// Write all
}
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200006d4 	.word	0x200006d4

080039cc <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60ba      	str	r2, [r7, #8]
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	4603      	mov	r3, r0
 80039d8:	81fb      	strh	r3, [r7, #14]
 80039da:	460b      	mov	r3, r1
 80039dc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80039de:	89fb      	ldrh	r3, [r7, #14]
 80039e0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80039e2:	89bb      	ldrh	r3, [r7, #12]
 80039e4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <Paint_DrawString_EN+0xa0>)
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	89fa      	ldrh	r2, [r7, #14]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d838      	bhi.n	8003a62 <Paint_DrawString_EN+0x96>
 80039f0:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <Paint_DrawString_EN+0xa0>)
 80039f2:	88db      	ldrh	r3, [r3, #6]
 80039f4:	89ba      	ldrh	r2, [r7, #12]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d833      	bhi.n	8003a62 <Paint_DrawString_EN+0x96>
        return;
    }

    while (* pString != '\0') {
 80039fa:	e02d      	b.n	8003a58 <Paint_DrawString_EN+0x8c>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80039fc:	8afb      	ldrh	r3, [r7, #22]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	8892      	ldrh	r2, [r2, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <Paint_DrawString_EN+0xa0>)
 8003a06:	8892      	ldrh	r2, [r2, #4]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	dd06      	ble.n	8003a1a <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8003a0c:	89fb      	ldrh	r3, [r7, #14]
 8003a0e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	88da      	ldrh	r2, [r3, #6]
 8003a14:	8abb      	ldrh	r3, [r7, #20]
 8003a16:	4413      	add	r3, r2
 8003a18:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8003a1a:	8abb      	ldrh	r3, [r7, #20]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	88d2      	ldrh	r2, [r2, #6]
 8003a20:	4413      	add	r3, r2
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <Paint_DrawString_EN+0xa0>)
 8003a24:	88d2      	ldrh	r2, [r2, #6]
 8003a26:	4293      	cmp	r3, r2
 8003a28:	dd03      	ble.n	8003a32 <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8003a2a:	89fb      	ldrh	r3, [r7, #14]
 8003a2c:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8003a2e:	89bb      	ldrh	r3, [r7, #12]
 8003a30:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	8ab9      	ldrh	r1, [r7, #20]
 8003a38:	8af8      	ldrh	r0, [r7, #22]
 8003a3a:	8c3b      	ldrh	r3, [r7, #32]
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f7ff ff1c 	bl	8003880 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	889a      	ldrh	r2, [r3, #4]
 8003a52:	8afb      	ldrh	r3, [r7, #22]
 8003a54:	4413      	add	r3, r2
 8003a56:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1cd      	bne.n	80039fc <Paint_DrawString_EN+0x30>
 8003a60:	e000      	b.n	8003a64 <Paint_DrawString_EN+0x98>
        return;
 8003a62:	bf00      	nop
    }
}
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200006d4 	.word	0x200006d4

08003a70 <Paint_DrawBitMap_Paste>:
    flipColor: Whether the color is reversed
info:
    Use this function to paste image data into a buffer
******************************************************************************/
void Paint_DrawBitMap_Paste(const unsigned char* image_buffer, UWORD xStart, UWORD yStart, UWORD imageWidth, UWORD imageHeight, UBYTE flipColor)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	4608      	mov	r0, r1
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	817b      	strh	r3, [r7, #10]
 8003a82:	460b      	mov	r3, r1
 8003a84:	813b      	strh	r3, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
    UBYTE color, srcImage;
    UWORD x, y;
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <Paint_DrawBitMap_Paste+0x2e>
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	e004      	b.n	8003aa8 <Paint_DrawBitMap_Paste+0x38>
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	833b      	strh	r3, [r7, #24]
    
    for (y = 0; y < imageHeight; y++) {
 8003aaa:	2300      	movs	r3, #0
 8003aac:	837b      	strh	r3, [r7, #26]
 8003aae:	e047      	b.n	8003b40 <Paint_DrawBitMap_Paste+0xd0>
        for (x = 0; x < imageWidth; x++) {
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	83bb      	strh	r3, [r7, #28]
 8003ab4:	e03d      	b.n	8003b32 <Paint_DrawBitMap_Paste+0xc2>
            srcImage = image_buffer[y*width + x/8];
 8003ab6:	8b7b      	ldrh	r3, [r7, #26]
 8003ab8:	8b3a      	ldrh	r2, [r7, #24]
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	8bba      	ldrh	r2, [r7, #28]
 8003ac0:	08d2      	lsrs	r2, r2, #3
 8003ac2:	b292      	uxth	r2, r2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	75fb      	strb	r3, [r7, #23]
            if(flipColor)
 8003ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <Paint_DrawBitMap_Paste+0x86>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
 8003ad8:	7dfa      	ldrb	r2, [r7, #23]
 8003ada:	8bbb      	ldrh	r3, [r7, #28]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e00d      	b.n	8003b12 <Paint_DrawBitMap_Paste+0xa2>
            else
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 8003af6:	7dfa      	ldrb	r2, [r7, #23]
 8003af8:	8bbb      	ldrh	r3, [r7, #28]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	77fb      	strb	r3, [r7, #31]
            Paint_SetPixel(x+xStart, y+yStart, color);
 8003b12:	8bba      	ldrh	r2, [r7, #28]
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	4413      	add	r3, r2
 8003b18:	b298      	uxth	r0, r3
 8003b1a:	8b7a      	ldrh	r2, [r7, #26]
 8003b1c:	893b      	ldrh	r3, [r7, #8]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	7ffa      	ldrb	r2, [r7, #31]
 8003b24:	b292      	uxth	r2, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f7ff fcbe 	bl	80034a8 <Paint_SetPixel>
        for (x = 0; x < imageWidth; x++) {
 8003b2c:	8bbb      	ldrh	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	83bb      	strh	r3, [r7, #28]
 8003b32:	8bba      	ldrh	r2, [r7, #28]
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3bd      	bcc.n	8003ab6 <Paint_DrawBitMap_Paste+0x46>
    for (y = 0; y < imageHeight; y++) {
 8003b3a:	8b7b      	ldrh	r3, [r7, #26]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	837b      	strh	r3, [r7, #26]
 8003b40:	8b7a      	ldrh	r2, [r7, #26]
 8003b42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3b3      	bcc.n	8003ab0 <Paint_DrawBitMap_Paste+0x40>
        }
    }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <vPrint_Skin_Office>:
#include <stdlib.h>
#include <stdio.h>


void vPrint_Skin_Office(struct sCommunication* Com)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 8003b5c:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8003b60:	f009 f898 	bl	800cc94 <malloc>
 8003b64:	4603      	mov	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8003b68:	23ff      	movs	r3, #255	; 0xff
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b72:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff fc30 	bl	80033dc <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fc83 	bl	8003488 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8003b82:	20ff      	movs	r0, #255	; 0xff
 8003b84:	f7ff fddc 	bl	8003740 <Paint_Clear>
	////
	Paint_DrawBitMap_Paste(Background_Office, 0, 0, 800, 480, BLACK);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4852      	ldr	r0, [pc, #328]	; (8003ce4 <vPrint_Skin_Office+0x190>)
 8003b9c:	f7ff ff68 	bl	8003a70 <Paint_DrawBitMap_Paste>

	//Room Nr.
	Paint_DrawString_EN(40, 33, (const char *)Com->u8L1, &Font_Lucida_80b, BLACK, WHITE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f103 021e 	add.w	r2, r3, #30
 8003ba6:	23ff      	movs	r3, #255	; 0xff
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4b4e      	ldr	r3, [pc, #312]	; (8003ce8 <vPrint_Skin_Office+0x194>)
 8003bb0:	2121      	movs	r1, #33	; 0x21
 8003bb2:	2028      	movs	r0, #40	; 0x28
 8003bb4:	f7ff ff0a 	bl	80039cc <Paint_DrawString_EN>

	//Name
	Paint_DrawString_EN(40, 180, (const char *)Com->u8L2, &Font_Lucida_30b, WHITE, BLACK);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	23ff      	movs	r3, #255	; 0xff
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <vPrint_Skin_Office+0x198>)
 8003bc8:	21b4      	movs	r1, #180	; 0xb4
 8003bca:	2028      	movs	r0, #40	; 0x28
 8003bcc:	f7ff fefe 	bl	80039cc <Paint_DrawString_EN>

	//Person Point 1
	Paint_DrawString_EN(40, 230, (const char *)Com->u8L3, &Font_Lucida_24, WHITE, BLACK);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	23ff      	movs	r3, #255	; 0xff
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4b44      	ldr	r3, [pc, #272]	; (8003cf0 <vPrint_Skin_Office+0x19c>)
 8003be0:	21e6      	movs	r1, #230	; 0xe6
 8003be2:	2028      	movs	r0, #40	; 0x28
 8003be4:	f7ff fef2 	bl	80039cc <Paint_DrawString_EN>

	//Person Point 2
	Paint_DrawString_EN(40, 270, (const char *)Com->u8L4, &Font_Lucida_24, WHITE, BLACK);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	23ff      	movs	r3, #255	; 0xff
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <vPrint_Skin_Office+0x19c>)
 8003bf8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003bfc:	2028      	movs	r0, #40	; 0x28
 8003bfe:	f7ff fee5 	bl	80039cc <Paint_DrawString_EN>

	//Person Point 3
	Paint_DrawString_EN(40, 310, (const char *)Com->u8L5, &Font_Lucida_24, WHITE, BLACK);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f103 0296 	add.w	r2, r3, #150	; 0x96
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	23ff      	movs	r3, #255	; 0xff
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <vPrint_Skin_Office+0x19c>)
 8003c12:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003c16:	2028      	movs	r0, #40	; 0x28
 8003c18:	f7ff fed8 	bl	80039cc <Paint_DrawString_EN>

	//Info Bar
	Paint_DrawString_EN(40, 360, (const char *)Com->u8L6, &Font_Lucida_24b, BLACK, WHITE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003c22:	23ff      	movs	r3, #255	; 0xff
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <vPrint_Skin_Office+0x1a0>)
 8003c2c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003c30:	2028      	movs	r0, #40	; 0x28
 8003c32:	f7ff fecb 	bl	80039cc <Paint_DrawString_EN>

	//Info
	Paint_DrawString_EN(40, 410, (const char *)Com->u8L7, &Font_Lucida_24, WHITE, BLACK);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	23ff      	movs	r3, #255	; 0xff
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <vPrint_Skin_Office+0x19c>)
 8003c46:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003c4a:	2028      	movs	r0, #40	; 0x28
 8003c4c:	f7ff febe 	bl	80039cc <Paint_DrawString_EN>


	if (Com->u8G_ID == 1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10a      	bne.n	8003c70 <vPrint_Skin_Office+0x11c>
	{
		Paint_DrawBitMap_Paste(piktogramm_buero, 561, 243, 224, 224, BLACK);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	23e0      	movs	r3, #224	; 0xe0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	23e0      	movs	r3, #224	; 0xe0
 8003c64:	22f3      	movs	r2, #243	; 0xf3
 8003c66:	f240 2131 	movw	r1, #561	; 0x231
 8003c6a:	4823      	ldr	r0, [pc, #140]	; (8003cf8 <vPrint_Skin_Office+0x1a4>)
 8003c6c:	f7ff ff00 	bl	8003a70 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d10a      	bne.n	8003c90 <vPrint_Skin_Office+0x13c>
	{
		Paint_DrawBitMap_Paste(piktogramm_chip, 561, 243, 224, 224, BLACK);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	23e0      	movs	r3, #224	; 0xe0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	23e0      	movs	r3, #224	; 0xe0
 8003c84:	22f3      	movs	r2, #243	; 0xf3
 8003c86:	f240 2131 	movw	r1, #561	; 0x231
 8003c8a:	481c      	ldr	r0, [pc, #112]	; (8003cfc <vPrint_Skin_Office+0x1a8>)
 8003c8c:	f7ff fef0 	bl	8003a70 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d10a      	bne.n	8003cb0 <vPrint_Skin_Office+0x15c>
	{
		Paint_DrawBitMap_Paste(piktogramm_leise, 561, 243, 224, 224, BLACK);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	23e0      	movs	r3, #224	; 0xe0
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	23e0      	movs	r3, #224	; 0xe0
 8003ca4:	22f3      	movs	r2, #243	; 0xf3
 8003ca6:	f240 2131 	movw	r1, #561	; 0x231
 8003caa:	4815      	ldr	r0, [pc, #84]	; (8003d00 <vPrint_Skin_Office+0x1ac>)
 8003cac:	f7ff fee0 	bl	8003a70 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 4)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d10a      	bne.n	8003cd0 <vPrint_Skin_Office+0x17c>
	{
		Paint_DrawBitMap_Paste(piktogramm_vorlesung, 561, 243, 224, 224, BLACK);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	23e0      	movs	r3, #224	; 0xe0
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	23e0      	movs	r3, #224	; 0xe0
 8003cc4:	22f3      	movs	r2, #243	; 0xf3
 8003cc6:	f240 2131 	movw	r1, #561	; 0x231
 8003cca:	480e      	ldr	r0, [pc, #56]	; (8003d04 <vPrint_Skin_Office+0x1b0>)
 8003ccc:	f7ff fed0 	bl	8003a70 <Paint_DrawBitMap_Paste>
	}

	//Paint_DrawLine(0, 0, 800, 480, 0x00, DOT_PIXEL_5X5, LINE_STYLE_SOLID);
	////
	EPD_7IN5_V2_Display(BlackImage);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fb4f 	bl	8003374 <EPD_7IN5_V2_Display>
	free(BlackImage);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f008 ffe4 	bl	800cca4 <free>
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08022770 	.word	0x08022770
 8003ce8:	20000114 	.word	0x20000114
 8003cec:	2000010c 	.word	0x2000010c
 8003cf0:	200000fc 	.word	0x200000fc
 8003cf4:	20000104 	.word	0x20000104
 8003cf8:	080109f0 	.word	0x080109f0
 8003cfc:	08013af0 	.word	0x08013af0
 8003d00:	08015370 	.word	0x08015370
 8003d04:	08012270 	.word	0x08012270

08003d08 <vPrint_Skin_Lecture_Room>:

void vPrint_Skin_Lecture_Room(struct sCommunication* Com)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 8003d10:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8003d14:	f008 ffbe 	bl	800cc94 <malloc>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8003d1c:	23ff      	movs	r3, #255	; 0xff
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2300      	movs	r3, #0
 8003d22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d26:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff fb56 	bl	80033dc <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fba9 	bl	8003488 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8003d36:	20ff      	movs	r0, #255	; 0xff
 8003d38:	f7ff fd02 	bl	8003740 <Paint_Clear>
	////

	Paint_DrawBitMap_Paste(Background_Lecture_Room, 0, 0, 800, 480, BLACK);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4859      	ldr	r0, [pc, #356]	; (8003eb4 <vPrint_Skin_Lecture_Room+0x1ac>)
 8003d50:	f7ff fe8e 	bl	8003a70 <Paint_DrawBitMap_Paste>

	//Room Nr.
	Paint_DrawString_EN(40, 33, (const char *)Com->u8L1, &Font_Lucida_80b, BLACK, WHITE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 021e 	add.w	r2, r3, #30
 8003d5a:	23ff      	movs	r3, #255	; 0xff
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	4b55      	ldr	r3, [pc, #340]	; (8003eb8 <vPrint_Skin_Lecture_Room+0x1b0>)
 8003d64:	2121      	movs	r1, #33	; 0x21
 8003d66:	2028      	movs	r0, #40	; 0x28
 8003d68:	f7ff fe30 	bl	80039cc <Paint_DrawString_EN>

	//1. Clock
	Com->u8L2[14] = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Paint_DrawString_EN(40, 175, (const char *)Com->u8L2, &Font_Lucida_24b, WHITE, BLACK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	23ff      	movs	r3, #255	; 0xff
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4b4e      	ldr	r3, [pc, #312]	; (8003ebc <vPrint_Skin_Lecture_Room+0x1b4>)
 8003d84:	21af      	movs	r1, #175	; 0xaf
 8003d86:	2028      	movs	r0, #40	; 0x28
 8003d88:	f7ff fe20 	bl	80039cc <Paint_DrawString_EN>
	//1. Titel
	Com->u8L3[28] = 0;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	Paint_DrawString_EN(40, 217, (const char *)Com->u8L3, &Font_Lucida_30b, WHITE, BLACK);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	23ff      	movs	r3, #255	; 0xff
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <vPrint_Skin_Lecture_Room+0x1b8>)
 8003da4:	21d9      	movs	r1, #217	; 0xd9
 8003da6:	2028      	movs	r0, #40	; 0x28
 8003da8:	f7ff fe10 	bl	80039cc <Paint_DrawString_EN>
	//1. Name
	Com->u8L4[28] = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	Paint_DrawString_EN(330, 182, (const char *)Com->u8L4, &Font_Lucida_18, WHITE, BLACK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	23ff      	movs	r3, #255	; 0xff
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <vPrint_Skin_Lecture_Room+0x1bc>)
 8003dc4:	21b6      	movs	r1, #182	; 0xb6
 8003dc6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003dca:	f7ff fdff 	bl	80039cc <Paint_DrawString_EN>


	//2. Clock
	Com->u8L5[14] = 0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Paint_DrawString_EN(40, 275, (const char *)Com->u8L5, &Font_Lucida_24b, WHITE, BLACK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f103 0296 	add.w	r2, r3, #150	; 0x96
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	23ff      	movs	r3, #255	; 0xff
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <vPrint_Skin_Lecture_Room+0x1b4>)
 8003de6:	f240 1113 	movw	r1, #275	; 0x113
 8003dea:	2028      	movs	r0, #40	; 0x28
 8003dec:	f7ff fdee 	bl	80039cc <Paint_DrawString_EN>
	//2. Titel
	Com->u8L6[28] = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	Paint_DrawString_EN(40, 317, (const char *)Com->u8L6, &Font_Lucida_30b, WHITE, BLACK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	23ff      	movs	r3, #255	; 0xff
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <vPrint_Skin_Lecture_Room+0x1b8>)
 8003e08:	f240 113d 	movw	r1, #317	; 0x13d
 8003e0c:	2028      	movs	r0, #40	; 0x28
 8003e0e:	f7ff fddd 	bl	80039cc <Paint_DrawString_EN>
	//2. Name
	Com->u8L7[28] = 0;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	Paint_DrawString_EN(330, 282, (const char *)Com->u8L7, &Font_Lucida_18, WHITE, BLACK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8003e20:	2300      	movs	r3, #0
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	23ff      	movs	r3, #255	; 0xff
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <vPrint_Skin_Lecture_Room+0x1bc>)
 8003e2a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003e2e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003e32:	f7ff fdcb 	bl	80039cc <Paint_DrawString_EN>


	//3. Clock
	Com->u8L8[14] = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	Paint_DrawString_EN(40, 375, (const char *)Com->u8L8, &Font_Lucida_24b, WHITE, BLACK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8003e44:	2300      	movs	r3, #0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	23ff      	movs	r3, #255	; 0xff
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <vPrint_Skin_Lecture_Room+0x1b4>)
 8003e4e:	f240 1177 	movw	r1, #375	; 0x177
 8003e52:	2028      	movs	r0, #40	; 0x28
 8003e54:	f7ff fdba 	bl	80039cc <Paint_DrawString_EN>
	//3. Titel
	Com->u8L9[28] = 0;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
	Paint_DrawString_EN(40, 417, (const char *)Com->u8L9, &Font_Lucida_30b, WHITE, BLACK);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f503 7287 	add.w	r2, r3, #270	; 0x10e
 8003e66:	2300      	movs	r3, #0
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	23ff      	movs	r3, #255	; 0xff
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <vPrint_Skin_Lecture_Room+0x1b8>)
 8003e70:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003e74:	2028      	movs	r0, #40	; 0x28
 8003e76:	f7ff fda9 	bl	80039cc <Paint_DrawString_EN>
	//3. Name
	Com->u8L10[28] = 0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	Paint_DrawString_EN(330, 382, (const char *)Com->u8L10, &Font_Lucida_18, WHITE, BLACK);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	23ff      	movs	r3, #255	; 0xff
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <vPrint_Skin_Lecture_Room+0x1bc>)
 8003e92:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8003e96:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003e9a:	f7ff fd97 	bl	80039cc <Paint_DrawString_EN>


	//Paint_DrawLine(0, 0, 800, 480, 0x00, DOT_PIXEL_5X5, LINE_STYLE_SOLID);
	////
	EPD_7IN5_V2_Display(BlackImage);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fa68 	bl	8003374 <EPD_7IN5_V2_Display>
	free(BlackImage);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f008 fefd 	bl	800cca4 <free>
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	08016bf0 	.word	0x08016bf0
 8003eb8:	20000114 	.word	0x20000114
 8003ebc:	20000104 	.word	0x20000104
 8003ec0:	2000010c 	.word	0x2000010c
 8003ec4:	200000f4 	.word	0x200000f4

08003ec8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_Init+0x3c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <HAL_Init+0x3c>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ede:	2003      	movs	r0, #3
 8003ee0:	f001 fade 	bl	80054a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ee4:	200f      	movs	r0, #15
 8003ee6:	f000 f80f 	bl	8003f08 <HAL_InitTick>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	71fb      	strb	r3, [r7, #7]
 8003ef4:	e001      	b.n	8003efa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ef6:	f7fd fb25 	bl	8001544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003efa:	79fb      	ldrb	r3, [r7, #7]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_InitTick+0x6c>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d023      	beq.n	8003f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <HAL_InitTick+0x70>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_InitTick+0x6c>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 fae9 	bl	800550a <HAL_SYSTICK_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b0f      	cmp	r3, #15
 8003f42:	d809      	bhi.n	8003f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f44:	2200      	movs	r2, #0
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	f001 fab3 	bl	80054b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_InitTick+0x74>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e007      	b.n	8003f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e004      	b.n	8003f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	e001      	b.n	8003f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200000f0 	.word	0x200000f0
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	200000ec 	.word	0x200000ec

08003f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_IncTick+0x20>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_IncTick+0x24>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_IncTick+0x24>)
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	200000f0 	.word	0x200000f0
 8003fa4:	200006ec 	.word	0x200006ec

08003fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return uwTick;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_GetTick+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200006ec 	.word	0x200006ec

08003fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc8:	f7ff ffee 	bl	8003fa8 <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d005      	beq.n	8003fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_Delay+0x44>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fe6:	bf00      	nop
 8003fe8:	f7ff ffde 	bl	8003fa8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d8f7      	bhi.n	8003fe8 <HAL_Delay+0x28>
  {
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200000f0 	.word	0x200000f0

08004008 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_SuspendTick+0x1c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_SuspendTick+0x1c>)
 8004012:	f023 0302 	bic.w	r3, r3, #2
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_ResumeTick+0x1c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <HAL_ResumeTick+0x1c>)
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000e010 	.word	0xe000e010

08004048 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_GetUIDw0+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	1fff7590 	.word	0x1fff7590

08004060 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3360      	adds	r3, #96	; 0x60
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <LL_ADC_SetOffset+0x44>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	03fff000 	.word	0x03fff000

08004110 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3360      	adds	r3, #96	; 0x60
 800411e:	461a      	mov	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3360      	adds	r3, #96	; 0x60
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	431a      	orrs	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3330      	adds	r3, #48	; 0x30
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	4413      	add	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	211f      	movs	r1, #31
 80041c4:	fa01 f303 	lsl.w	r3, r1, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	401a      	ands	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0e9b      	lsrs	r3, r3, #26
 80041d0:	f003 011f 	and.w	r1, r3, #31
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	fa01 f303 	lsl.w	r3, r1, r3
 80041de:	431a      	orrs	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3314      	adds	r3, #20
 8004200:	461a      	mov	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	0e5b      	lsrs	r3, r3, #25
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	4413      	add	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	0d1b      	lsrs	r3, r3, #20
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2107      	movs	r1, #7
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0d1b      	lsrs	r3, r3, #20
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	431a      	orrs	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0318 	and.w	r3, r3, #24
 800426a:	4908      	ldr	r1, [pc, #32]	; (800428c <LL_ADC_SetChannelSingleDiff+0x44>)
 800426c:	40d9      	lsrs	r1, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	400b      	ands	r3, r1
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	0007ffff 	.word	0x0007ffff

08004290 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 031f 	and.w	r3, r3, #31
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80042d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6093      	str	r3, [r2, #8]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004300:	d101      	bne.n	8004306 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004350:	d101      	bne.n	8004356 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <LL_ADC_IsEnabled+0x18>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <LL_ADC_IsEnabled+0x1a>
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d101      	bne.n	80043f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d101      	bne.n	8004418 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e136      	b.n	80046b0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fd f89f 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ff3f 	bl	80042ec <LL_ADC_IsDeepPowerDownEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff25 	bl	80042c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff5a 	bl	800433c <LL_ADC_IsInternalRegulatorEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d115      	bne.n	80044ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff3e 	bl	8004314 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004498:	4b87      	ldr	r3, [pc, #540]	; (80046b8 <HAL_ADC_Init+0x290>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	4a87      	ldr	r2, [pc, #540]	; (80046bc <HAL_ADC_Init+0x294>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	3301      	adds	r3, #1
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044ac:	e002      	b.n	80044b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f9      	bne.n	80044ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff3c 	bl	800433c <LL_ADC_IsInternalRegulatorEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10d      	bne.n	80044e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f043 0210 	orr.w	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff75 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 80044f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 80cf 	bne.w	800469e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 80cb 	bne.w	800469e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004510:	f043 0202 	orr.w	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff35 	bl	800438c <LL_ADC_IsEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d115      	bne.n	8004554 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004528:	4865      	ldr	r0, [pc, #404]	; (80046c0 <HAL_ADC_Init+0x298>)
 800452a:	f7ff ff2f 	bl	800438c <LL_ADC_IsEnabled>
 800452e:	4604      	mov	r4, r0
 8004530:	4864      	ldr	r0, [pc, #400]	; (80046c4 <HAL_ADC_Init+0x29c>)
 8004532:	f7ff ff2b 	bl	800438c <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	431c      	orrs	r4, r3
 800453a:	4863      	ldr	r0, [pc, #396]	; (80046c8 <HAL_ADC_Init+0x2a0>)
 800453c:	f7ff ff26 	bl	800438c <LL_ADC_IsEnabled>
 8004540:	4603      	mov	r3, r0
 8004542:	4323      	orrs	r3, r4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4619      	mov	r1, r3
 800454e:	485f      	ldr	r0, [pc, #380]	; (80046cc <HAL_ADC_Init+0x2a4>)
 8004550:	f7ff fd86 	bl	8004060 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7e5b      	ldrb	r3, [r3, #25]
 8004558:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800455e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004564:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800456a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004572:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d106      	bne.n	8004590 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	3b01      	subs	r3, #1
 8004588:	045b      	lsls	r3, r3, #17
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <HAL_ADC_Init+0x2a8>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	430b      	orrs	r3, r1
 80045be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff08 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 80045ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff15 	bl	8004400 <LL_ADC_INJ_IsConversionOngoing>
 80045d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d13d      	bne.n	800465a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13a      	bne.n	800465a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004600:	f023 0302 	bic.w	r3, r3, #2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	69b9      	ldr	r1, [r7, #24]
 800460a:	430b      	orrs	r3, r1
 800460c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004614:	2b01      	cmp	r3, #1
 8004616:	d118      	bne.n	800464a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800462e:	4311      	orrs	r1, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800463a:	430a      	orrs	r2, r1
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	611a      	str	r2, [r3, #16]
 8004648:	e007      	b.n	800465a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10c      	bne.n	800467c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f023 010f 	bic.w	r1, r3, #15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	1e5a      	subs	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
 800467a:	e007      	b.n	800468c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 020f 	bic.w	r2, r2, #15
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f023 0303 	bic.w	r3, r3, #3
 8004694:	f043 0201 	orr.w	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
 800469c:	e007      	b.n	80046ae <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f043 0210 	orr.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3724      	adds	r7, #36	; 0x24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd90      	pop	{r4, r7, pc}
 80046b8:	20000000 	.word	0x20000000
 80046bc:	053e2d63 	.word	0x053e2d63
 80046c0:	50040000 	.word	0x50040000
 80046c4:	50040100 	.word	0x50040100
 80046c8:	50040200 	.word	0x50040200
 80046cc:	50040300 	.word	0x50040300
 80046d0:	fff0c007 	.word	0xfff0c007

080046d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046dc:	4857      	ldr	r0, [pc, #348]	; (800483c <HAL_ADC_Start+0x168>)
 80046de:	f7ff fdd7 	bl	8004290 <LL_ADC_GetMultimode>
 80046e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fe76 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 809c 	bne.w	800482e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_Start+0x30>
 8004700:	2302      	movs	r3, #2
 8004702:	e097      	b.n	8004834 <HAL_ADC_Start+0x160>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fd71 	bl	80051f4 <ADC_Enable>
 8004712:	4603      	mov	r3, r0
 8004714:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 8083 	bne.w	8004824 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a42      	ldr	r2, [pc, #264]	; (8004840 <HAL_ADC_Start+0x16c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d002      	beq.n	8004742 <HAL_ADC_Start+0x6e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	e000      	b.n	8004744 <HAL_ADC_Start+0x70>
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_ADC_Start+0x170>)
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	4293      	cmp	r3, r2
 800474a:	d002      	beq.n	8004752 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d106      	bne.n	800477a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	f023 0206 	bic.w	r2, r3, #6
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	659a      	str	r2, [r3, #88]	; 0x58
 8004778:	e002      	b.n	8004780 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	221c      	movs	r2, #28
 8004786:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <HAL_ADC_Start+0x16c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d002      	beq.n	80047a0 <HAL_ADC_Start+0xcc>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	e000      	b.n	80047a2 <HAL_ADC_Start+0xce>
 80047a0:	4b28      	ldr	r3, [pc, #160]	; (8004844 <HAL_ADC_Start+0x170>)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d008      	beq.n	80047bc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d002      	beq.n	80047bc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b09      	cmp	r3, #9
 80047ba:	d114      	bne.n	80047e6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fde7 	bl	80043b2 <LL_ADC_REG_StartConversion>
 80047e4:	e025      	b.n	8004832 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <HAL_ADC_Start+0x16c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d002      	beq.n	8004802 <HAL_ADC_Start+0x12e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	e000      	b.n	8004804 <HAL_ADC_Start+0x130>
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_ADC_Start+0x170>)
 8004804:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00f      	beq.n	8004832 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800481a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
 8004822:	e006      	b.n	8004832 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800482c:	e001      	b.n	8004832 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	50040300 	.word	0x50040300
 8004840:	50040100 	.word	0x50040100
 8004844:	50040000 	.word	0x50040000

08004848 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004852:	4866      	ldr	r0, [pc, #408]	; (80049ec <HAL_ADC_PollForConversion+0x1a4>)
 8004854:	f7ff fd1c 	bl	8004290 <LL_ADC_GetMultimode>
 8004858:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d102      	bne.n	8004868 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004862:	2308      	movs	r3, #8
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	e02a      	b.n	80048be <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b05      	cmp	r3, #5
 8004872:	d002      	beq.n	800487a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b09      	cmp	r3, #9
 8004878:	d111      	bne.n	800489e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0a4      	b.n	80049e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004898:	2304      	movs	r3, #4
 800489a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800489c:	e00f      	b.n	80048be <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800489e:	4853      	ldr	r0, [pc, #332]	; (80049ec <HAL_ADC_PollForConversion+0x1a4>)
 80048a0:	f7ff fd04 	bl	80042ac <LL_ADC_GetMultiDMATransfer>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e093      	b.n	80049e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048ba:	2304      	movs	r3, #4
 80048bc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80048be:	f7ff fb73 	bl	8003fa8 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048c4:	e021      	b.n	800490a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d01d      	beq.n	800490a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80048ce:	f7ff fb6b 	bl	8003fa8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <HAL_ADC_PollForConversion+0x9c>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d112      	bne.n	800490a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0204 	orr.w	r2, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e06b      	b.n	80049e2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0d6      	beq.n	80048c6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fc22 	bl	8004172 <LL_ADC_REG_IsTriggerSourceSWStart>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01c      	beq.n	800496e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7e5b      	ldrb	r3, [r3, #25]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d118      	bne.n	800496e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b08      	cmp	r3, #8
 8004948:	d111      	bne.n	800496e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_ADC_PollForConversion+0x1a8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d002      	beq.n	800497e <HAL_ADC_PollForConversion+0x136>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	e000      	b.n	8004980 <HAL_ADC_PollForConversion+0x138>
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_ADC_PollForConversion+0x1ac>)
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	4293      	cmp	r3, r2
 8004986:	d008      	beq.n	800499a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b05      	cmp	r3, #5
 8004992:	d002      	beq.n	800499a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b09      	cmp	r3, #9
 8004998:	d104      	bne.n	80049a4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e00c      	b.n	80049be <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_ADC_PollForConversion+0x1a8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d002      	beq.n	80049b4 <HAL_ADC_PollForConversion+0x16c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	e000      	b.n	80049b6 <HAL_ADC_PollForConversion+0x16e>
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_ADC_PollForConversion+0x1ac>)
 80049b6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d104      	bne.n	80049ce <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2208      	movs	r2, #8
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e008      	b.n	80049e0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	220c      	movs	r2, #12
 80049de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	50040300 	.word	0x50040300
 80049f0:	50040100 	.word	0x50040100
 80049f4:	50040000 	.word	0x50040000

080049f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b0b6      	sub	sp, #216	; 0xd8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x22>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e3c7      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x7b2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fcc9 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 83a8 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d824      	bhi.n	8004aa2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	3b02      	subs	r3, #2
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d81b      	bhi.n	8004a9a <HAL_ADC_ConfigChannel+0x86>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <HAL_ADC_ConfigChannel+0x54>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a81 	.word	0x08004a81
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a91 	.word	0x08004a91
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	220c      	movs	r2, #12
 8004a7c:	605a      	str	r2, [r3, #4]
          break;
 8004a7e:	e010      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2212      	movs	r2, #18
 8004a84:	605a      	str	r2, [r3, #4]
          break;
 8004a86:	e00c      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2218      	movs	r2, #24
 8004a8c:	605a      	str	r2, [r3, #4]
          break;
 8004a8e:	e008      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a96:	605a      	str	r2, [r3, #4]
          break;
 8004a98:	e003      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2206      	movs	r2, #6
 8004a9e:	605a      	str	r2, [r3, #4]
          break;
 8004aa0:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7ff fb72 	bl	8004198 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fc8e 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 8004abe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fc9a 	bl	8004400 <LL_ADC_INJ_IsConversionOngoing>
 8004acc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ad0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 81a6 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 81a1 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	461a      	mov	r2, r3
 8004af2:	f7ff fb7d 	bl	80041f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	08db      	lsrs	r3, r3, #3
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d00a      	beq.n	8004b2e <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6919      	ldr	r1, [r3, #16]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b28:	f7ff face 	bl	80040c8 <LL_ADC_SetOffset>
 8004b2c:	e17b      	b.n	8004e26 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff faeb 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x146>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fae0 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004b50:	4603      	mov	r3, r0
 8004b52:	0e9b      	lsrs	r3, r3, #26
 8004b54:	f003 021f 	and.w	r2, r3, #31
 8004b58:	e01e      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x184>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fad5 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	e004      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8004b8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x19c>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	e018      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x1ce>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8004bd4:	2320      	movs	r3, #32
 8004bd6:	e004      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8004bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bdc:	fab3 f383 	clz	r3, r3
 8004be0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d106      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff faa4 	bl	800413c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fa88 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x20c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fa7d 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004c16:	4603      	mov	r3, r0
 8004c18:	0e9b      	lsrs	r3, r3, #26
 8004c1a:	f003 021f 	and.w	r2, r3, #31
 8004c1e:	e01e      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x24a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fa72 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004c4e:	2320      	movs	r3, #32
 8004c50:	e004      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8004c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x262>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	0e9b      	lsrs	r3, r3, #26
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	e018      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x294>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8004c9a:	2320      	movs	r3, #32
 8004c9c:	e004      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8004c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ca2:	fab3 f383 	clz	r3, r3
 8004ca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d106      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fa41 	bl	800413c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fa25 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x2d2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fa1a 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	0e9b      	lsrs	r3, r3, #26
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	e01e      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x310>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2102      	movs	r1, #2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fa0f 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e004      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x328>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0e9b      	lsrs	r3, r3, #26
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	e016      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x356>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d48:	fa93 f3a3 	rbit	r3, r3
 8004d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	e004      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d106      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	2102      	movs	r1, #2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f9e0 	bl	800413c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2103      	movs	r1, #3
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff f9c4 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x394>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2103      	movs	r1, #3
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff f9b9 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	0e9b      	lsrs	r3, r3, #26
 8004da2:	f003 021f 	and.w	r2, r3, #31
 8004da6:	e017      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x3c4>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2103      	movs	r1, #3
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff f9ae 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8004dca:	2320      	movs	r3, #32
 8004dcc:	e003      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd0:	fab3 f383 	clz	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x3dc>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0e9b      	lsrs	r3, r3, #26
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	e011      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x400>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004e08:	2320      	movs	r3, #32
 8004e0a:	e003      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d106      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2103      	movs	r1, #3
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff f98b 	bl	800413c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff faae 	bl	800438c <LL_ADC_IsEnabled>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f040 8140 	bne.w	80050b8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	461a      	mov	r2, r3
 8004e46:	f7ff f9ff 	bl	8004248 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	4a8f      	ldr	r2, [pc, #572]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	f040 8131 	bne.w	80050b8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x46a>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	0e9b      	lsrs	r3, r3, #26
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	bf94      	ite	ls
 8004e76:	2301      	movls	r3, #1
 8004e78:	2300      	movhi	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e019      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x49e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8004e96:	2320      	movs	r3, #32
 8004e98:	e003      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2b09      	cmp	r3, #9
 8004eaa:	bf94      	ite	ls
 8004eac:	2301      	movls	r3, #1
 8004eae:	2300      	movhi	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d079      	beq.n	8004faa <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d107      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x4be>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	0e9b      	lsrs	r3, r3, #26
 8004ec8:	3301      	adds	r3, #1
 8004eca:	069b      	lsls	r3, r3, #26
 8004ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ed0:	e015      	b.n	8004efe <HAL_ADC_ConfigChannel+0x4ea>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004eea:	2320      	movs	r3, #32
 8004eec:	e003      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	069b      	lsls	r3, r3, #26
 8004efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x50a>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	0e9b      	lsrs	r3, r3, #26
 8004f10:	3301      	adds	r3, #1
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	e017      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x53a>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8004f36:	2320      	movs	r3, #32
 8004f38:	e003      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	3301      	adds	r3, #1
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4e:	ea42 0103 	orr.w	r1, r2, r3
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x560>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0e9b      	lsrs	r3, r3, #26
 8004f64:	3301      	adds	r3, #1
 8004f66:	f003 021f 	and.w	r2, r3, #31
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	051b      	lsls	r3, r3, #20
 8004f72:	e018      	b.n	8004fa6 <HAL_ADC_ConfigChannel+0x592>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	fa93 f3a3 	rbit	r3, r3
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	e003      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f003 021f 	and.w	r2, r3, #31
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	e081      	b.n	80050ae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d107      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x5b2>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	0e9b      	lsrs	r3, r3, #26
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	069b      	lsls	r3, r3, #26
 8004fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc4:	e015      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x5de>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8004fde:	2320      	movs	r3, #32
 8004fe0:	e003      	b.n	8004fea <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3301      	adds	r3, #1
 8004fec:	069b      	lsls	r3, r3, #26
 8004fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x5fe>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	0e9b      	lsrs	r3, r3, #26
 8005004:	3301      	adds	r3, #1
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2101      	movs	r1, #1
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	e017      	b.n	8005042 <HAL_ADC_ConfigChannel+0x62e>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	61fb      	str	r3, [r7, #28]
  return result;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800502a:	2320      	movs	r3, #32
 800502c:	e003      	b.n	8005036 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3301      	adds	r3, #1
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	ea42 0103 	orr.w	r1, r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <HAL_ADC_ConfigChannel+0x65a>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	0e9b      	lsrs	r3, r3, #26
 8005058:	3301      	adds	r3, #1
 800505a:	f003 021f 	and.w	r2, r3, #31
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	3b1e      	subs	r3, #30
 8005066:	051b      	lsls	r3, r3, #20
 8005068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800506c:	e01e      	b.n	80050ac <HAL_ADC_ConfigChannel+0x698>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	613b      	str	r3, [r7, #16]
  return result;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005086:	2320      	movs	r3, #32
 8005088:	e006      	b.n	8005098 <HAL_ADC_ConfigChannel+0x684>
 800508a:	bf00      	nop
 800508c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	fab3 f383 	clz	r3, r3
 8005096:	b2db      	uxtb	r3, r3
 8005098:	3301      	adds	r3, #1
 800509a:	f003 021f 	and.w	r2, r3, #31
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	3b1e      	subs	r3, #30
 80050a6:	051b      	lsls	r3, r3, #20
 80050a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050ac:	430b      	orrs	r3, r1
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	6892      	ldr	r2, [r2, #8]
 80050b2:	4619      	mov	r1, r3
 80050b4:	f7ff f89c 	bl	80041f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b44      	ldr	r3, [pc, #272]	; (80051d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d07a      	beq.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050c4:	4843      	ldr	r0, [pc, #268]	; (80051d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80050c6:	f7fe fff1 	bl	80040ac <LL_ADC_GetCommonPathInternalCh>
 80050ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a41      	ldr	r2, [pc, #260]	; (80051d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d12c      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d126      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a3c      	ldr	r2, [pc, #240]	; (80051dc <HAL_ADC_ConfigChannel+0x7c8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_ADC_ConfigChannel+0x6e4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d15d      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005100:	4619      	mov	r1, r3
 8005102:	4834      	ldr	r0, [pc, #208]	; (80051d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005104:	f7fe ffbf 	bl	8004086 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005108:	4b36      	ldr	r3, [pc, #216]	; (80051e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	099b      	lsrs	r3, r3, #6
 800510e:	4a36      	ldr	r2, [pc, #216]	; (80051e8 <HAL_ADC_ConfigChannel+0x7d4>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005122:	e002      	b.n	800512a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3b01      	subs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f9      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005130:	e040      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <HAL_ADC_ConfigChannel+0x7d8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d118      	bne.n	800516e <HAL_ADC_ConfigChannel+0x75a>
 800513c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d112      	bne.n	800516e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a23      	ldr	r2, [pc, #140]	; (80051dc <HAL_ADC_ConfigChannel+0x7c8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_ADC_ConfigChannel+0x748>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d12d      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800515c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005164:	4619      	mov	r1, r3
 8005166:	481b      	ldr	r0, [pc, #108]	; (80051d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005168:	f7fe ff8d 	bl	8004086 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800516c:	e024      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d120      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800517c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11a      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <HAL_ADC_ConfigChannel+0x7c8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d115      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800518e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005192:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005196:	4619      	mov	r1, r3
 8005198:	480e      	ldr	r0, [pc, #56]	; (80051d4 <HAL_ADC_ConfigChannel+0x7c0>)
 800519a:	f7fe ff74 	bl	8004086 <LL_ADC_SetCommonPathInternalCh>
 800519e:	e00c      	b.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80051b2:	e002      	b.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	37d8      	adds	r7, #216	; 0xd8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	80080000 	.word	0x80080000
 80051d4:	50040300 	.word	0x50040300
 80051d8:	c7520000 	.word	0xc7520000
 80051dc:	50040000 	.word	0x50040000
 80051e0:	50040200 	.word	0x50040200
 80051e4:	20000000 	.word	0x20000000
 80051e8:	053e2d63 	.word	0x053e2d63
 80051ec:	cb840000 	.word	0xcb840000
 80051f0:	80000001 	.word	0x80000001

080051f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff f8c1 	bl	800438c <LL_ADC_IsEnabled>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d169      	bne.n	80052e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <ADC_Enable+0xfc>)
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f043 0210 	orr.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e055      	b.n	80052e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f890 	bl	8004364 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005244:	482b      	ldr	r0, [pc, #172]	; (80052f4 <ADC_Enable+0x100>)
 8005246:	f7fe ff31 	bl	80040ac <LL_ADC_GetCommonPathInternalCh>
 800524a:	4603      	mov	r3, r0
 800524c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d013      	beq.n	800527c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005254:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <ADC_Enable+0x104>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	099b      	lsrs	r3, r3, #6
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <ADC_Enable+0x108>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	099b      	lsrs	r3, r3, #6
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800526e:	e002      	b.n	8005276 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	3b01      	subs	r3, #1
 8005274:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f9      	bne.n	8005270 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800527c:	f7fe fe94 	bl	8003fa8 <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005282:	e028      	b.n	80052d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff f87f 	bl	800438c <LL_ADC_IsEnabled>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff f863 	bl	8004364 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800529e:	f7fe fe83 	bl	8003fa8 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d914      	bls.n	80052d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d00d      	beq.n	80052d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e007      	b.n	80052e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d1cf      	bne.n	8005284 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	8000003f 	.word	0x8000003f
 80052f4:	50040300 	.word	0x50040300
 80052f8:	20000000 	.word	0x20000000
 80052fc:	053e2d63 	.word	0x053e2d63

08005300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800531c:	4013      	ands	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800532c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005332:	4a04      	ldr	r2, [pc, #16]	; (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	60d3      	str	r3, [r2, #12]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <__NVIC_GetPriorityGrouping+0x18>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	f003 0307 	and.w	r3, r3, #7
}
 8005356:	4618      	mov	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005372:	2b00      	cmp	r3, #0
 8005374:	db0b      	blt.n	800538e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	f003 021f 	and.w	r2, r3, #31
 800537c:	4907      	ldr	r1, [pc, #28]	; (800539c <__NVIC_EnableIRQ+0x38>)
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2001      	movs	r0, #1
 8005386:	fa00 f202 	lsl.w	r2, r0, r2
 800538a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000e100 	.word	0xe000e100

080053a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0a      	blt.n	80053ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	490c      	ldr	r1, [pc, #48]	; (80053ec <__NVIC_SetPriority+0x4c>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	440b      	add	r3, r1
 80053c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053c8:	e00a      	b.n	80053e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4908      	ldr	r1, [pc, #32]	; (80053f0 <__NVIC_SetPriority+0x50>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3b04      	subs	r3, #4
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	440b      	add	r3, r1
 80053de:	761a      	strb	r2, [r3, #24]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000e100 	.word	0xe000e100
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f1c3 0307 	rsb	r3, r3, #7
 800540e:	2b04      	cmp	r3, #4
 8005410:	bf28      	it	cs
 8005412:	2304      	movcs	r3, #4
 8005414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3304      	adds	r3, #4
 800541a:	2b06      	cmp	r3, #6
 800541c:	d902      	bls.n	8005424 <NVIC_EncodePriority+0x30>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3b03      	subs	r3, #3
 8005422:	e000      	b.n	8005426 <NVIC_EncodePriority+0x32>
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005428:	f04f 32ff 	mov.w	r2, #4294967295
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	401a      	ands	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800543c:	f04f 31ff 	mov.w	r1, #4294967295
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	43d9      	mvns	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800544c:	4313      	orrs	r3, r2
         );
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	; 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800546c:	d301      	bcc.n	8005472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800546e:	2301      	movs	r3, #1
 8005470:	e00f      	b.n	8005492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <SysTick_Config+0x40>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3b01      	subs	r3, #1
 8005478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800547a:	210f      	movs	r1, #15
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f7ff ff8e 	bl	80053a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <SysTick_Config+0x40>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800548a:	4b04      	ldr	r3, [pc, #16]	; (800549c <SysTick_Config+0x40>)
 800548c:	2207      	movs	r2, #7
 800548e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	e000e010 	.word	0xe000e010

080054a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff29 	bl	8005300 <__NVIC_SetPriorityGrouping>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054c8:	f7ff ff3e 	bl	8005348 <__NVIC_GetPriorityGrouping>
 80054cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	6978      	ldr	r0, [r7, #20]
 80054d4:	f7ff ff8e 	bl	80053f4 <NVIC_EncodePriority>
 80054d8:	4602      	mov	r2, r0
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff5d 	bl	80053a0 <__NVIC_SetPriority>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff31 	bl	8005364 <__NVIC_EnableIRQ>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ffa2 	bl	800545c <SysTick_Config>
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d008      	beq.n	800554c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2204      	movs	r2, #4
 800553e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e022      	b.n	8005592 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 020e 	bic.w	r2, r2, #14
 800555a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	f003 021c 	and.w	r2, r3, #28
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f202 	lsl.w	r2, r1, r2
 800557e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d005      	beq.n	80055c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2204      	movs	r2, #4
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
 80055c0:	e029      	b.n	8005616 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 020e 	bic.w	r2, r2, #14
 80055d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f003 021c 	and.w	r2, r3, #28
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2101      	movs	r1, #1
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
    }
  }
  return status;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800562e:	e17f      	b.n	8005930 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	2101      	movs	r1, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	fa01 f303 	lsl.w	r3, r1, r3
 800563c:	4013      	ands	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8171 	beq.w	800592a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d005      	beq.n	8005660 <HAL_GPIO_Init+0x40>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d130      	bne.n	80056c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	2203      	movs	r2, #3
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	43db      	mvns	r3, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005696:	2201      	movs	r2, #1
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43db      	mvns	r3, r3
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4013      	ands	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 0201 	and.w	r2, r3, #1
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d118      	bne.n	8005700 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80056d4:	2201      	movs	r2, #1
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4013      	ands	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0201 	and.w	r2, r3, #1
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	2b03      	cmp	r3, #3
 800570a:	d017      	beq.n	800573c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2203      	movs	r2, #3
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d123      	bne.n	8005790 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	08da      	lsrs	r2, r3, #3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3208      	adds	r2, #8
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	220f      	movs	r2, #15
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	08da      	lsrs	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3208      	adds	r2, #8
 800578a:	6939      	ldr	r1, [r7, #16]
 800578c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	2203      	movs	r2, #3
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	43db      	mvns	r3, r3
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4013      	ands	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0203 	and.w	r2, r3, #3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80ac 	beq.w	800592a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057d2:	4b5f      	ldr	r3, [pc, #380]	; (8005950 <HAL_GPIO_Init+0x330>)
 80057d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d6:	4a5e      	ldr	r2, [pc, #376]	; (8005950 <HAL_GPIO_Init+0x330>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6613      	str	r3, [r2, #96]	; 0x60
 80057de:	4b5c      	ldr	r3, [pc, #368]	; (8005950 <HAL_GPIO_Init+0x330>)
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057ea:	4a5a      	ldr	r2, [pc, #360]	; (8005954 <HAL_GPIO_Init+0x334>)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	3302      	adds	r3, #2
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	220f      	movs	r2, #15
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4013      	ands	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005814:	d025      	beq.n	8005862 <HAL_GPIO_Init+0x242>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a4f      	ldr	r2, [pc, #316]	; (8005958 <HAL_GPIO_Init+0x338>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01f      	beq.n	800585e <HAL_GPIO_Init+0x23e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a4e      	ldr	r2, [pc, #312]	; (800595c <HAL_GPIO_Init+0x33c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d019      	beq.n	800585a <HAL_GPIO_Init+0x23a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4d      	ldr	r2, [pc, #308]	; (8005960 <HAL_GPIO_Init+0x340>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_GPIO_Init+0x236>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4c      	ldr	r2, [pc, #304]	; (8005964 <HAL_GPIO_Init+0x344>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00d      	beq.n	8005852 <HAL_GPIO_Init+0x232>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a4b      	ldr	r2, [pc, #300]	; (8005968 <HAL_GPIO_Init+0x348>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <HAL_GPIO_Init+0x22e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a4a      	ldr	r2, [pc, #296]	; (800596c <HAL_GPIO_Init+0x34c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <HAL_GPIO_Init+0x22a>
 8005846:	2306      	movs	r3, #6
 8005848:	e00c      	b.n	8005864 <HAL_GPIO_Init+0x244>
 800584a:	2307      	movs	r3, #7
 800584c:	e00a      	b.n	8005864 <HAL_GPIO_Init+0x244>
 800584e:	2305      	movs	r3, #5
 8005850:	e008      	b.n	8005864 <HAL_GPIO_Init+0x244>
 8005852:	2304      	movs	r3, #4
 8005854:	e006      	b.n	8005864 <HAL_GPIO_Init+0x244>
 8005856:	2303      	movs	r3, #3
 8005858:	e004      	b.n	8005864 <HAL_GPIO_Init+0x244>
 800585a:	2302      	movs	r3, #2
 800585c:	e002      	b.n	8005864 <HAL_GPIO_Init+0x244>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_GPIO_Init+0x244>
 8005862:	2300      	movs	r3, #0
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	f002 0203 	and.w	r2, r2, #3
 800586a:	0092      	lsls	r2, r2, #2
 800586c:	4093      	lsls	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005874:	4937      	ldr	r1, [pc, #220]	; (8005954 <HAL_GPIO_Init+0x334>)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	3302      	adds	r3, #2
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005882:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <HAL_GPIO_Init+0x350>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43db      	mvns	r3, r3
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4013      	ands	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058a6:	4a32      	ldr	r2, [pc, #200]	; (8005970 <HAL_GPIO_Init+0x350>)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058ac:	4b30      	ldr	r3, [pc, #192]	; (8005970 <HAL_GPIO_Init+0x350>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <HAL_GPIO_Init+0x350>)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058d6:	4b26      	ldr	r3, [pc, #152]	; (8005970 <HAL_GPIO_Init+0x350>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43db      	mvns	r3, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_GPIO_Init+0x350>)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <HAL_GPIO_Init+0x350>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	43db      	mvns	r3, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005924:	4a12      	ldr	r2, [pc, #72]	; (8005970 <HAL_GPIO_Init+0x350>)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	3301      	adds	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	f47f ae78 	bne.w	8005630 <HAL_GPIO_Init+0x10>
  }
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40010000 	.word	0x40010000
 8005958:	48000400 	.word	0x48000400
 800595c:	48000800 	.word	0x48000800
 8005960:	48000c00 	.word	0x48000c00
 8005964:	48001000 	.word	0x48001000
 8005968:	48001400 	.word	0x48001400
 800596c:	48001800 	.word	0x48001800
 8005970:	40010400 	.word	0x40010400

08005974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	e001      	b.n	8005996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	807b      	strh	r3, [r7, #2]
 80059b0:	4613      	mov	r3, r2
 80059b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059b4:	787b      	ldrb	r3, [r7, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059ba:	887a      	ldrh	r2, [r7, #2]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059c0:	e002      	b.n	80059c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059de:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fb fd04 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40010400 	.word	0x40010400

08005a04 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8005a08:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 0307 	bic.w	r3, r3, #7
 8005a10:	4a07      	ldr	r2, [pc, #28]	; (8005a30 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005a12:	f043 0303 	orr.w	r3, r3, #3
 8005a16:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005a1e:	f043 0304 	orr.w	r3, r3, #4
 8005a22:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005a24:	bf30      	wfi
}
 8005a26:	bf00      	nop
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40007000 	.word	0x40007000
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40007000 	.word	0x40007000

08005a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a62:	d130      	bne.n	8005ac6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a64:	4b23      	ldr	r3, [pc, #140]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d038      	beq.n	8005ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2232      	movs	r2, #50	; 0x32
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	0c9b      	lsrs	r3, r3, #18
 8005a94:	3301      	adds	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a98:	e002      	b.n	8005aa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aac:	d102      	bne.n	8005ab4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f2      	bne.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	d110      	bne.n	8005ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e00f      	b.n	8005ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad2:	d007      	beq.n	8005ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005adc:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ae2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40007000 	.word	0x40007000
 8005af8:	20000000 	.word	0x20000000
 8005afc:	431bde83 	.word	0x431bde83

08005b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e3ca      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b12:	4b97      	ldr	r3, [pc, #604]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b1c:	4b94      	ldr	r3, [pc, #592]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80e4 	beq.w	8005cfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_RCC_OscConfig+0x4a>
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	f040 808b 	bne.w	8005c58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	f040 8087 	bne.w	8005c58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b4a:	4b89      	ldr	r3, [pc, #548]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_RCC_OscConfig+0x62>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e3a2      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	4b82      	ldr	r3, [pc, #520]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <HAL_RCC_OscConfig+0x7c>
 8005b72:	4b7f      	ldr	r3, [pc, #508]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7a:	e005      	b.n	8005b88 <HAL_RCC_OscConfig+0x88>
 8005b7c:	4b7c      	ldr	r3, [pc, #496]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d223      	bcs.n	8005bd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fd55 	bl	8006640 <RCC_SetFlashLatencyFromMSIRange>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e383      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ba0:	4b73      	ldr	r3, [pc, #460]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a72      	ldr	r2, [pc, #456]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005ba6:	f043 0308 	orr.w	r3, r3, #8
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b70      	ldr	r3, [pc, #448]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	496d      	ldr	r1, [pc, #436]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bbe:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	4968      	ldr	r1, [pc, #416]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
 8005bd2:	e025      	b.n	8005c20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bd4:	4b66      	ldr	r3, [pc, #408]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a65      	ldr	r2, [pc, #404]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bda:	f043 0308 	orr.w	r3, r3, #8
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	4b63      	ldr	r3, [pc, #396]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	4960      	ldr	r1, [pc, #384]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bf2:	4b5f      	ldr	r3, [pc, #380]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	495b      	ldr	r1, [pc, #364]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fd15 	bl	8006640 <RCC_SetFlashLatencyFromMSIRange>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e343      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c20:	f000 fc4a 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b52      	ldr	r3, [pc, #328]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	4950      	ldr	r1, [pc, #320]	; (8005d74 <HAL_RCC_OscConfig+0x274>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	4a4e      	ldr	r2, [pc, #312]	; (8005d78 <HAL_RCC_OscConfig+0x278>)
 8005c3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c40:	4b4e      	ldr	r3, [pc, #312]	; (8005d7c <HAL_RCC_OscConfig+0x27c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe f95f 	bl	8003f08 <HAL_InitTick>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d052      	beq.n	8005cfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	e327      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d032      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c60:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a42      	ldr	r2, [pc, #264]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c6c:	f7fe f99c 	bl	8003fa8 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c74:	f7fe f998 	bl	8003fa8 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e310      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c86:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a36      	ldr	r2, [pc, #216]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c98:	f043 0308 	orr.w	r3, r3, #8
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b34      	ldr	r3, [pc, #208]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	4931      	ldr	r1, [pc, #196]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cb0:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	492c      	ldr	r1, [pc, #176]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	e01a      	b.n	8005cfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a29      	ldr	r2, [pc, #164]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cd2:	f7fe f969 	bl	8003fa8 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cda:	f7fe f965 	bl	8003fa8 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e2dd      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCC_OscConfig+0x1da>
 8005cf8:	e000      	b.n	8005cfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d074      	beq.n	8005df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_OscConfig+0x21a>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d10e      	bne.n	8005d32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d10b      	bne.n	8005d32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d064      	beq.n	8005df0 <HAL_RCC_OscConfig+0x2f0>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d160      	bne.n	8005df0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e2ba      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCC_OscConfig+0x24a>
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e026      	b.n	8005d98 <HAL_RCC_OscConfig+0x298>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d52:	d115      	bne.n	8005d80 <HAL_RCC_OscConfig+0x280>
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a02      	ldr	r2, [pc, #8]	; (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	e014      	b.n	8005d98 <HAL_RCC_OscConfig+0x298>
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	080109a8 	.word	0x080109a8
 8005d78:	20000000 	.word	0x20000000
 8005d7c:	200000ec 	.word	0x200000ec
 8005d80:	4ba0      	ldr	r3, [pc, #640]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a9f      	ldr	r2, [pc, #636]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	4b9d      	ldr	r3, [pc, #628]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a9c      	ldr	r2, [pc, #624]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fe f902 	bl	8003fa8 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005da8:	f7fe f8fe 	bl	8003fa8 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e276      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dba:	4b92      	ldr	r3, [pc, #584]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x2a8>
 8005dc6:	e014      	b.n	8005df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fe f8ee 	bl	8003fa8 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd0:	f7fe f8ea 	bl	8003fa8 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	; 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e262      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005de2:	4b88      	ldr	r3, [pc, #544]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x2d0>
 8005dee:	e000      	b.n	8005df2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d060      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d005      	beq.n	8005e10 <HAL_RCC_OscConfig+0x310>
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b0c      	cmp	r3, #12
 8005e08:	d119      	bne.n	8005e3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d116      	bne.n	8005e3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e10:	4b7c      	ldr	r3, [pc, #496]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_OscConfig+0x328>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e23f      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e28:	4b76      	ldr	r3, [pc, #472]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	4973      	ldr	r1, [pc, #460]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e3c:	e040      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d023      	beq.n	8005e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e46:	4b6f      	ldr	r3, [pc, #444]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6e      	ldr	r2, [pc, #440]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e52:	f7fe f8a9 	bl	8003fa8 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e5a:	f7fe f8a5 	bl	8003fa8 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e21d      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6c:	4b65      	ldr	r3, [pc, #404]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e78:	4b62      	ldr	r3, [pc, #392]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	495f      	ldr	r1, [pc, #380]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	604b      	str	r3, [r1, #4]
 8005e8c:	e018      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e8e:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a5c      	ldr	r2, [pc, #368]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fe f885 	bl	8003fa8 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea2:	f7fe f881 	bl	8003fa8 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e1f9      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb4:	4b53      	ldr	r3, [pc, #332]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01c      	beq.n	8005f0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eda:	4a4a      	ldr	r2, [pc, #296]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fe f860 	bl	8003fa8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eec:	f7fe f85c 	bl	8003fa8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e1d4      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005efe:	4b41      	ldr	r3, [pc, #260]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ef      	beq.n	8005eec <HAL_RCC_OscConfig+0x3ec>
 8005f0c:	e01b      	b.n	8005f46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f0e:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f14:	4a3b      	ldr	r2, [pc, #236]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fe f843 	bl	8003fa8 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f26:	f7fe f83f 	bl	8003fa8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e1b7      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f38:	4b32      	ldr	r3, [pc, #200]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1ef      	bne.n	8005f26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80a6 	beq.w	80060a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f54:	2300      	movs	r3, #0
 8005f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f58:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10d      	bne.n	8005f80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f64:	4b27      	ldr	r3, [pc, #156]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	4a26      	ldr	r2, [pc, #152]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f70:	4b24      	ldr	r3, [pc, #144]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <HAL_RCC_OscConfig+0x508>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d118      	bne.n	8005fbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f8c:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <HAL_RCC_OscConfig+0x508>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_RCC_OscConfig+0x508>)
 8005f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f98:	f7fe f806 	bl	8003fa8 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa0:	f7fe f802 	bl	8003fa8 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e17a      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HAL_RCC_OscConfig+0x508>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d108      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x4d8>
 8005fc6:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fcc:	4a0d      	ldr	r2, [pc, #52]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fd6:	e029      	b.n	800602c <HAL_RCC_OscConfig+0x52c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d115      	bne.n	800600c <HAL_RCC_OscConfig+0x50c>
 8005fe0:	4b08      	ldr	r3, [pc, #32]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	4a07      	ldr	r2, [pc, #28]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	4a03      	ldr	r2, [pc, #12]	; (8006004 <HAL_RCC_OscConfig+0x504>)
 8005ff8:	f043 0301 	orr.w	r3, r3, #1
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006000:	e014      	b.n	800602c <HAL_RCC_OscConfig+0x52c>
 8006002:	bf00      	nop
 8006004:	40021000 	.word	0x40021000
 8006008:	40007000 	.word	0x40007000
 800600c:	4b9c      	ldr	r3, [pc, #624]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a9b      	ldr	r2, [pc, #620]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800601c:	4b98      	ldr	r3, [pc, #608]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	4a97      	ldr	r2, [pc, #604]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fd ffb8 	bl	8003fa8 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fd ffb4 	bl	8003fa8 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e12a      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006052:	4b8b      	ldr	r3, [pc, #556]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ed      	beq.n	800603c <HAL_RCC_OscConfig+0x53c>
 8006060:	e015      	b.n	800608e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006062:	f7fd ffa1 	bl	8003fa8 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006068:	e00a      	b.n	8006080 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606a:	f7fd ff9d 	bl	8003fa8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f241 3288 	movw	r2, #5000	; 0x1388
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e113      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006080:	4b7f      	ldr	r3, [pc, #508]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ed      	bne.n	800606a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d105      	bne.n	80060a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006094:	4b7a      	ldr	r3, [pc, #488]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	4a79      	ldr	r2, [pc, #484]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800609a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80fe 	beq.w	80062a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	f040 80d0 	bne.w	8006254 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060b4:	4b72      	ldr	r3, [pc, #456]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f003 0203 	and.w	r2, r3, #3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d130      	bne.n	800612a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	3b01      	subs	r3, #1
 80060d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d127      	bne.n	800612a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d11f      	bne.n	800612a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060f4:	2a07      	cmp	r2, #7
 80060f6:	bf14      	ite	ne
 80060f8:	2201      	movne	r2, #1
 80060fa:	2200      	moveq	r2, #0
 80060fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060fe:	4293      	cmp	r3, r2
 8006100:	d113      	bne.n	800612a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d109      	bne.n	800612a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	3b01      	subs	r3, #1
 8006124:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d06e      	beq.n	8006208 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b0c      	cmp	r3, #12
 800612e:	d069      	beq.n	8006204 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006130:	4b53      	ldr	r3, [pc, #332]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800613c:	4b50      	ldr	r3, [pc, #320]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0ad      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800614c:	4b4c      	ldr	r3, [pc, #304]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4b      	ldr	r2, [pc, #300]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006156:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006158:	f7fd ff26 	bl	8003fa8 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006160:	f7fd ff22 	bl	8003fa8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e09a      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006172:	4b43      	ldr	r3, [pc, #268]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800617e:	4b40      	ldr	r3, [pc, #256]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	4b40      	ldr	r3, [pc, #256]	; (8006284 <HAL_RCC_OscConfig+0x784>)
 8006184:	4013      	ands	r3, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800618e:	3a01      	subs	r2, #1
 8006190:	0112      	lsls	r2, r2, #4
 8006192:	4311      	orrs	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006198:	0212      	lsls	r2, r2, #8
 800619a:	4311      	orrs	r1, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061a0:	0852      	lsrs	r2, r2, #1
 80061a2:	3a01      	subs	r2, #1
 80061a4:	0552      	lsls	r2, r2, #21
 80061a6:	4311      	orrs	r1, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061ac:	0852      	lsrs	r2, r2, #1
 80061ae:	3a01      	subs	r2, #1
 80061b0:	0652      	lsls	r2, r2, #25
 80061b2:	4311      	orrs	r1, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061b8:	0912      	lsrs	r2, r2, #4
 80061ba:	0452      	lsls	r2, r2, #17
 80061bc:	430a      	orrs	r2, r1
 80061be:	4930      	ldr	r1, [pc, #192]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061c4:	4b2e      	ldr	r3, [pc, #184]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2d      	ldr	r2, [pc, #180]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80061ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80061d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061dc:	f7fd fee4 	bl	8003fa8 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fd fee0 	bl	8003fa8 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e058      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f6:	4b22      	ldr	r3, [pc, #136]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006202:	e050      	b.n	80062a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e04f      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d148      	bne.n	80062a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800621a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800621e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006220:	4b17      	ldr	r3, [pc, #92]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	4a16      	ldr	r2, [pc, #88]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800622a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800622c:	f7fd febc 	bl	8003fa8 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fd feb8 	bl	8003fa8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e030      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x734>
 8006252:	e028      	b.n	80062a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b0c      	cmp	r3, #12
 8006258:	d023      	beq.n	80062a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a08      	ldr	r2, [pc, #32]	; (8006280 <HAL_RCC_OscConfig+0x780>)
 8006260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006266:	f7fd fe9f 	bl	8003fa8 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800626c:	e00c      	b.n	8006288 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626e:	f7fd fe9b 	bl	8003fa8 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d905      	bls.n	8006288 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e013      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
 8006280:	40021000 	.word	0x40021000
 8006284:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <HAL_RCC_OscConfig+0x7b0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ec      	bne.n	800626e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <HAL_RCC_OscConfig+0x7b0>)
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	4905      	ldr	r1, [pc, #20]	; (80062b0 <HAL_RCC_OscConfig+0x7b0>)
 800629a:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_RCC_OscConfig+0x7b4>)
 800629c:	4013      	ands	r3, r2
 800629e:	60cb      	str	r3, [r1, #12]
 80062a0:	e001      	b.n	80062a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40021000 	.word	0x40021000
 80062b4:	feeefffc 	.word	0xfeeefffc

080062b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0e7      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b75      	ldr	r3, [pc, #468]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b72      	ldr	r3, [pc, #456]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 0207 	bic.w	r2, r3, #7
 80062e2:	4970      	ldr	r1, [pc, #448]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b6e      	ldr	r3, [pc, #440]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0cf      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d010      	beq.n	800632a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	4b66      	ldr	r3, [pc, #408]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006314:	429a      	cmp	r2, r3
 8006316:	d908      	bls.n	800632a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006318:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4960      	ldr	r1, [pc, #384]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006326:	4313      	orrs	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d04c      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800633e:	4b5a      	ldr	r3, [pc, #360]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d121      	bne.n	800638e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e0a6      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d107      	bne.n	8006366 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006356:	4b54      	ldr	r3, [pc, #336]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d115      	bne.n	800638e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e09a      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d107      	bne.n	800637e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800636e:	4b4e      	ldr	r3, [pc, #312]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e08e      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800637e:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e086      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800638e:	4b46      	ldr	r3, [pc, #280]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 0203 	bic.w	r2, r3, #3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4943      	ldr	r1, [pc, #268]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 800639c:	4313      	orrs	r3, r2
 800639e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a0:	f7fd fe02 	bl	8003fa8 <HAL_GetTick>
 80063a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a6:	e00a      	b.n	80063be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a8:	f7fd fdfe 	bl	8003fa8 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e06e      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063be:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 020c 	and.w	r2, r3, #12
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d1eb      	bne.n	80063a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d010      	beq.n	80063fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	4b31      	ldr	r3, [pc, #196]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d208      	bcs.n	80063fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ec:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	492b      	ldr	r1, [pc, #172]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063fe:	4b29      	ldr	r3, [pc, #164]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d210      	bcs.n	800642e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f023 0207 	bic.w	r2, r3, #7
 8006414:	4923      	ldr	r1, [pc, #140]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	4313      	orrs	r3, r2
 800641a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800641c:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <HAL_RCC_ClockConfig+0x1ec>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d001      	beq.n	800642e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e036      	b.n	800649c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	4918      	ldr	r1, [pc, #96]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006448:	4313      	orrs	r3, r2
 800644a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d009      	beq.n	800646c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006458:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4910      	ldr	r1, [pc, #64]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006468:	4313      	orrs	r3, r2
 800646a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800646c:	f000 f824 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	490b      	ldr	r1, [pc, #44]	; (80064ac <HAL_RCC_ClockConfig+0x1f4>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <HAL_RCC_ClockConfig+0x1f8>)
 800648a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x1fc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7fd fd39 	bl	8003f08 <HAL_InitTick>
 8006496:	4603      	mov	r3, r0
 8006498:	72fb      	strb	r3, [r7, #11]

  return status;
 800649a:	7afb      	ldrb	r3, [r7, #11]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40022000 	.word	0x40022000
 80064a8:	40021000 	.word	0x40021000
 80064ac:	080109a8 	.word	0x080109a8
 80064b0:	20000000 	.word	0x20000000
 80064b4:	200000ec 	.word	0x200000ec

080064b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	2300      	movs	r3, #0
 80064c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 030c 	and.w	r3, r3, #12
 80064ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCC_GetSysClockFreq+0x34>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d121      	bne.n	800652a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11e      	bne.n	800652a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064ec:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d107      	bne.n	8006508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064f8:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80064fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	e005      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006508:	4b2d      	ldr	r3, [pc, #180]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006514:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10d      	bne.n	8006540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006528:	e00a      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b04      	cmp	r3, #4
 800652e:	d102      	bne.n	8006536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e004      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d101      	bne.n	8006540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800653c:	4b23      	ldr	r3, [pc, #140]	; (80065cc <HAL_RCC_GetSysClockFreq+0x114>)
 800653e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0c      	cmp	r3, #12
 8006544:	d134      	bne.n	80065b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006546:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d003      	beq.n	800655e <HAL_RCC_GetSysClockFreq+0xa6>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b03      	cmp	r3, #3
 800655a:	d003      	beq.n	8006564 <HAL_RCC_GetSysClockFreq+0xac>
 800655c:	e005      	b.n	800656a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006560:	617b      	str	r3, [r7, #20]
      break;
 8006562:	e005      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006564:	4b19      	ldr	r3, [pc, #100]	; (80065cc <HAL_RCC_GetSysClockFreq+0x114>)
 8006566:	617b      	str	r3, [r7, #20]
      break;
 8006568:	e002      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	617b      	str	r3, [r7, #20]
      break;
 800656e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006570:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	3301      	adds	r3, #1
 800657c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	fb03 f202 	mul.w	r2, r3, r2
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006596:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	0e5b      	lsrs	r3, r3, #25
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	3301      	adds	r3, #1
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065b0:	69bb      	ldr	r3, [r7, #24]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3724      	adds	r7, #36	; 0x24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	080109c0 	.word	0x080109c0
 80065c8:	00f42400 	.word	0x00f42400
 80065cc:	007a1200 	.word	0x007a1200

080065d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000000 	.word	0x20000000

080065e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065ec:	f7ff fff0 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_RCC_GetPCLK1Freq+0x24>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	4904      	ldr	r1, [pc, #16]	; (8006610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40021000 	.word	0x40021000
 8006610:	080109b8 	.word	0x080109b8

08006614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006618:	f7ff ffda 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	0adb      	lsrs	r3, r3, #11
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4904      	ldr	r1, [pc, #16]	; (800663c <HAL_RCC_GetPCLK2Freq+0x28>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000
 800663c:	080109b8 	.word	0x080109b8

08006640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800664c:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006658:	f7ff f9ee 	bl	8005a38 <HAL_PWREx_GetVoltageRange>
 800665c:	6178      	str	r0, [r7, #20]
 800665e:	e014      	b.n	800668a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006664:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800666a:	6593      	str	r3, [r2, #88]	; 0x58
 800666c:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006678:	f7ff f9de 	bl	8005a38 <HAL_PWREx_GetVoltageRange>
 800667c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800667e:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006682:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006688:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006690:	d10b      	bne.n	80066aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b80      	cmp	r3, #128	; 0x80
 8006696:	d919      	bls.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2ba0      	cmp	r3, #160	; 0xa0
 800669c:	d902      	bls.n	80066a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800669e:	2302      	movs	r3, #2
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	e013      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066a4:	2301      	movs	r3, #1
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e010      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b80      	cmp	r3, #128	; 0x80
 80066ae:	d902      	bls.n	80066b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80066b0:	2303      	movs	r3, #3
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	e00a      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b80      	cmp	r3, #128	; 0x80
 80066ba:	d102      	bne.n	80066c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066bc:	2302      	movs	r3, #2
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	e004      	b.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b70      	cmp	r3, #112	; 0x70
 80066c6:	d101      	bne.n	80066cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066c8:	2301      	movs	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f023 0207 	bic.w	r2, r3, #7
 80066d4:	4909      	ldr	r1, [pc, #36]	; (80066fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d001      	beq.n	80066ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40021000 	.word	0x40021000
 80066fc:	40022000 	.word	0x40022000

08006700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006708:	2300      	movs	r3, #0
 800670a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800670c:	2300      	movs	r3, #0
 800670e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006718:	2b00      	cmp	r3, #0
 800671a:	d041      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006720:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006724:	d02a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006726:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800672a:	d824      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800672c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006730:	d008      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006736:	d81e      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800673c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006740:	d010      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006742:	e018      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006744:	4b86      	ldr	r3, [pc, #536]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	4a85      	ldr	r2, [pc, #532]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800674a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006750:	e015      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	2100      	movs	r1, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fabb 	bl	8006cd4 <RCCEx_PLLSAI1_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006762:	e00c      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3320      	adds	r3, #32
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fba6 	bl	8006ebc <RCCEx_PLLSAI2_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006774:	e003      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	74fb      	strb	r3, [r7, #19]
      break;
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800677c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677e:	7cfb      	ldrb	r3, [r7, #19]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006784:	4b76      	ldr	r3, [pc, #472]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006792:	4973      	ldr	r1, [pc, #460]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800679a:	e001      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	7cfb      	ldrb	r3, [r7, #19]
 800679e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d041      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067b4:	d02a      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80067b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067ba:	d824      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c0:	d008      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c6:	d81e      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80067cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067d0:	d010      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067d2:	e018      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067d4:	4b62      	ldr	r3, [pc, #392]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a61      	ldr	r2, [pc, #388]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067e0:	e015      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fa73 	bl	8006cd4 <RCCEx_PLLSAI1_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067f2:	e00c      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3320      	adds	r3, #32
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fb5e 	bl	8006ebc <RCCEx_PLLSAI2_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006804:	e003      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	74fb      	strb	r3, [r7, #19]
      break;
 800680a:	e000      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800680c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680e:	7cfb      	ldrb	r3, [r7, #19]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006814:	4b52      	ldr	r3, [pc, #328]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006822:	494f      	ldr	r1, [pc, #316]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800682a:	e001      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 80a0 	beq.w	800697e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800683e:	2300      	movs	r3, #0
 8006840:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006842:	4b47      	ldr	r3, [pc, #284]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006858:	4b41      	ldr	r3, [pc, #260]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	4a40      	ldr	r2, [pc, #256]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800685e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006862:	6593      	str	r3, [r2, #88]	; 0x58
 8006864:	4b3e      	ldr	r3, [pc, #248]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006870:	2301      	movs	r3, #1
 8006872:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006874:	4b3b      	ldr	r3, [pc, #236]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3a      	ldr	r2, [pc, #232]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800687a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006880:	f7fd fb92 	bl	8003fa8 <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006886:	e009      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006888:	f7fd fb8e 	bl	8003fa8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d902      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	74fb      	strb	r3, [r7, #19]
        break;
 800689a:	e005      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800689c:	4b31      	ldr	r3, [pc, #196]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0ef      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80068a8:	7cfb      	ldrb	r3, [r7, #19]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d15c      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068ae:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01f      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d019      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068cc:	4b24      	ldr	r3, [pc, #144]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068d8:	4b21      	ldr	r3, [pc, #132]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	4a20      	ldr	r2, [pc, #128]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068e8:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068f8:	4a19      	ldr	r2, [pc, #100]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690a:	f7fd fb4d 	bl	8003fa8 <HAL_GetTick>
 800690e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006910:	e00b      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fd fb49 	bl	8003fa8 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d902      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	74fb      	strb	r3, [r7, #19]
            break;
 8006928:	e006      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800692a:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ec      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694e:	4904      	ldr	r1, [pc, #16]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006956:	e009      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	74bb      	strb	r3, [r7, #18]
 800695c:	e006      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800695e:	bf00      	nop
 8006960:	40021000 	.word	0x40021000
 8006964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	7cfb      	ldrb	r3, [r7, #19]
 800696a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800696c:	7c7b      	ldrb	r3, [r7, #17]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006972:	4b9e      	ldr	r3, [pc, #632]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	4a9d      	ldr	r2, [pc, #628]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800698a:	4b98      	ldr	r3, [pc, #608]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006990:	f023 0203 	bic.w	r2, r3, #3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	4994      	ldr	r1, [pc, #592]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069ac:	4b8f      	ldr	r3, [pc, #572]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b2:	f023 020c 	bic.w	r2, r3, #12
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	498c      	ldr	r1, [pc, #560]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069ce:	4b87      	ldr	r3, [pc, #540]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	4983      	ldr	r1, [pc, #524]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069f0:	4b7e      	ldr	r3, [pc, #504]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	497b      	ldr	r1, [pc, #492]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a12:	4b76      	ldr	r3, [pc, #472]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a20:	4972      	ldr	r1, [pc, #456]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a34:	4b6d      	ldr	r3, [pc, #436]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a42:	496a      	ldr	r1, [pc, #424]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a56:	4b65      	ldr	r3, [pc, #404]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a64:	4961      	ldr	r1, [pc, #388]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a78:	4b5c      	ldr	r3, [pc, #368]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	4959      	ldr	r1, [pc, #356]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a9a:	4b54      	ldr	r3, [pc, #336]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa8:	4950      	ldr	r1, [pc, #320]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006abc:	4b4b      	ldr	r3, [pc, #300]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	4948      	ldr	r1, [pc, #288]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ade:	4b43      	ldr	r3, [pc, #268]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	493f      	ldr	r1, [pc, #252]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d028      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b00:	4b3a      	ldr	r3, [pc, #232]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0e:	4937      	ldr	r1, [pc, #220]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b20:	4b32      	ldr	r3, [pc, #200]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4a31      	ldr	r2, [pc, #196]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b2a:	60d3      	str	r3, [r2, #12]
 8006b2c:	e011      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b36:	d10c      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 f8c8 	bl	8006cd4 <RCCEx_PLLSAI1_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b48:	7cfb      	ldrb	r3, [r7, #19]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d028      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b5e:	4b23      	ldr	r3, [pc, #140]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	491f      	ldr	r1, [pc, #124]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b7c:	d106      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b88:	60d3      	str	r3, [r2, #12]
 8006b8a:	e011      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f899 	bl	8006cd4 <RCCEx_PLLSAI1_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ba6:	7cfb      	ldrb	r3, [r7, #19]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006bac:	7cfb      	ldrb	r3, [r7, #19]
 8006bae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02b      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bca:	4908      	ldr	r1, [pc, #32]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bda:	d109      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a02      	ldr	r2, [pc, #8]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be6:	60d3      	str	r3, [r2, #12]
 8006be8:	e014      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf8:	d10c      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f867 	bl	8006cd4 <RCCEx_PLLSAI1_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c0a:	7cfb      	ldrb	r3, [r7, #19]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c10:	7cfb      	ldrb	r3, [r7, #19]
 8006c12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d02f      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c20:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c2e:	4928      	ldr	r1, [pc, #160]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c3e:	d10d      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3304      	adds	r3, #4
 8006c44:	2102      	movs	r1, #2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f844 	bl	8006cd4 <RCCEx_PLLSAI1_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c50:	7cfb      	ldrb	r3, [r7, #19]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d014      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c56:	7cfb      	ldrb	r3, [r7, #19]
 8006c58:	74bb      	strb	r3, [r7, #18]
 8006c5a:	e011      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c64:	d10c      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3320      	adds	r3, #32
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f925 	bl	8006ebc <RCCEx_PLLSAI2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c76:	7cfb      	ldrb	r3, [r7, #19]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c7c:	7cfb      	ldrb	r3, [r7, #19]
 8006c7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c8c:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9a:	490d      	ldr	r1, [pc, #52]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbe:	4904      	ldr	r1, [pc, #16]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006cc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40021000 	.word	0x40021000

08006cd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ce2:	4b75      	ldr	r3, [pc, #468]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006cee:	4b72      	ldr	r3, [pc, #456]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0203 	and.w	r2, r3, #3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d10d      	bne.n	8006d1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
       ||
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d06:	4b6c      	ldr	r3, [pc, #432]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	091b      	lsrs	r3, r3, #4
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
       ||
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d047      	beq.n	8006daa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	e044      	b.n	8006daa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d018      	beq.n	8006d5a <RCCEx_PLLSAI1_Config+0x86>
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d825      	bhi.n	8006d78 <RCCEx_PLLSAI1_Config+0xa4>
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d002      	beq.n	8006d36 <RCCEx_PLLSAI1_Config+0x62>
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d009      	beq.n	8006d48 <RCCEx_PLLSAI1_Config+0x74>
 8006d34:	e020      	b.n	8006d78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d36:	4b60      	ldr	r3, [pc, #384]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d11d      	bne.n	8006d7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d46:	e01a      	b.n	8006d7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d48:	4b5b      	ldr	r3, [pc, #364]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d116      	bne.n	8006d82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d58:	e013      	b.n	8006d82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d5a:	4b57      	ldr	r3, [pc, #348]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10f      	bne.n	8006d86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d66:	4b54      	ldr	r3, [pc, #336]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d76:	e006      	b.n	8006d86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7c:	e004      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10d      	bne.n	8006daa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d8e:	4b4a      	ldr	r3, [pc, #296]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6819      	ldr	r1, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	430b      	orrs	r3, r1
 8006da4:	4944      	ldr	r1, [pc, #272]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d17d      	bne.n	8006eac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a40      	ldr	r2, [pc, #256]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dbc:	f7fd f8f4 	bl	8003fa8 <HAL_GetTick>
 8006dc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dc2:	e009      	b.n	8006dd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dc4:	f7fd f8f0 	bl	8003fa8 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d902      	bls.n	8006dd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	73fb      	strb	r3, [r7, #15]
        break;
 8006dd6:	e005      	b.n	8006de4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dd8:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1ef      	bne.n	8006dc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d160      	bne.n	8006eac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d111      	bne.n	8006e14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006df0:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6892      	ldr	r2, [r2, #8]
 8006e00:	0211      	lsls	r1, r2, #8
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68d2      	ldr	r2, [r2, #12]
 8006e06:	0912      	lsrs	r2, r2, #4
 8006e08:	0452      	lsls	r2, r2, #17
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	492a      	ldr	r1, [pc, #168]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	610b      	str	r3, [r1, #16]
 8006e12:	e027      	b.n	8006e64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d112      	bne.n	8006e40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006e22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6892      	ldr	r2, [r2, #8]
 8006e2a:	0211      	lsls	r1, r2, #8
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6912      	ldr	r2, [r2, #16]
 8006e30:	0852      	lsrs	r2, r2, #1
 8006e32:	3a01      	subs	r2, #1
 8006e34:	0552      	lsls	r2, r2, #21
 8006e36:	430a      	orrs	r2, r1
 8006e38:	491f      	ldr	r1, [pc, #124]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	610b      	str	r3, [r1, #16]
 8006e3e:	e011      	b.n	8006e64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6892      	ldr	r2, [r2, #8]
 8006e50:	0211      	lsls	r1, r2, #8
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6952      	ldr	r2, [r2, #20]
 8006e56:	0852      	lsrs	r2, r2, #1
 8006e58:	3a01      	subs	r2, #1
 8006e5a:	0652      	lsls	r2, r2, #25
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	4916      	ldr	r1, [pc, #88]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fd f89a 	bl	8003fa8 <HAL_GetTick>
 8006e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e76:	e009      	b.n	8006e8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e78:	f7fd f896 	bl	8003fa8 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d902      	bls.n	8006e8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	73fb      	strb	r3, [r7, #15]
          break;
 8006e8a:	e005      	b.n	8006e98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ef      	beq.n	8006e78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	4904      	ldr	r1, [pc, #16]	; (8006eb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40021000 	.word	0x40021000

08006ebc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006eca:	4b6a      	ldr	r3, [pc, #424]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d018      	beq.n	8006f08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006ed6:	4b67      	ldr	r3, [pc, #412]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0203 	and.w	r2, r3, #3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d10d      	bne.n	8006f02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006eee:	4b61      	ldr	r3, [pc, #388]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
       ||
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d047      	beq.n	8006f92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	73fb      	strb	r3, [r7, #15]
 8006f06:	e044      	b.n	8006f92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d018      	beq.n	8006f42 <RCCEx_PLLSAI2_Config+0x86>
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d825      	bhi.n	8006f60 <RCCEx_PLLSAI2_Config+0xa4>
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d002      	beq.n	8006f1e <RCCEx_PLLSAI2_Config+0x62>
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d009      	beq.n	8006f30 <RCCEx_PLLSAI2_Config+0x74>
 8006f1c:	e020      	b.n	8006f60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f1e:	4b55      	ldr	r3, [pc, #340]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d11d      	bne.n	8006f66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f2e:	e01a      	b.n	8006f66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f30:	4b50      	ldr	r3, [pc, #320]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d116      	bne.n	8006f6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f40:	e013      	b.n	8006f6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f42:	4b4c      	ldr	r3, [pc, #304]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10f      	bne.n	8006f6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f4e:	4b49      	ldr	r3, [pc, #292]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f5e:	e006      	b.n	8006f6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e004      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f66:	bf00      	nop
 8006f68:	e002      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e000      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f76:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	4939      	ldr	r1, [pc, #228]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d167      	bne.n	8007068 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f98:	4b36      	ldr	r3, [pc, #216]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a35      	ldr	r2, [pc, #212]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa4:	f7fd f800 	bl	8003fa8 <HAL_GetTick>
 8006fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006faa:	e009      	b.n	8006fc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fac:	f7fc fffc 	bl	8003fa8 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d902      	bls.n	8006fc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8006fbe:	e005      	b.n	8006fcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fc0:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1ef      	bne.n	8006fac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d14a      	bne.n	8007068 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d111      	bne.n	8006ffc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fd8:	4b26      	ldr	r3, [pc, #152]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6892      	ldr	r2, [r2, #8]
 8006fe8:	0211      	lsls	r1, r2, #8
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68d2      	ldr	r2, [r2, #12]
 8006fee:	0912      	lsrs	r2, r2, #4
 8006ff0:	0452      	lsls	r2, r2, #17
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	491f      	ldr	r1, [pc, #124]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	614b      	str	r3, [r1, #20]
 8006ffa:	e011      	b.n	8007020 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6892      	ldr	r2, [r2, #8]
 800700c:	0211      	lsls	r1, r2, #8
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6912      	ldr	r2, [r2, #16]
 8007012:	0852      	lsrs	r2, r2, #1
 8007014:	3a01      	subs	r2, #1
 8007016:	0652      	lsls	r2, r2, #25
 8007018:	430a      	orrs	r2, r1
 800701a:	4916      	ldr	r1, [pc, #88]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 800701c:	4313      	orrs	r3, r2
 800701e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007020:	4b14      	ldr	r3, [pc, #80]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a13      	ldr	r2, [pc, #76]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702c:	f7fc ffbc 	bl	8003fa8 <HAL_GetTick>
 8007030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007032:	e009      	b.n	8007048 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007034:	f7fc ffb8 	bl	8003fa8 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d902      	bls.n	8007048 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	73fb      	strb	r3, [r7, #15]
          break;
 8007046:	e005      	b.n	8007054 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0ef      	beq.n	8007034 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800705a:	4b06      	ldr	r3, [pc, #24]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4904      	ldr	r1, [pc, #16]	; (8007074 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007064:	4313      	orrs	r3, r2
 8007066:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000

08007078 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d06c      	beq.n	8007164 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fa fae2 	bl	8001668 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	22ca      	movs	r2, #202	; 0xca
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2253      	movs	r2, #83	; 0x53
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f87c 	bl	80071ba <RTC_EnterInitMode>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d14b      	bne.n	8007164 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070de:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6899      	ldr	r1, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68d2      	ldr	r2, [r2, #12]
 8007106:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6919      	ldr	r1, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	041a      	lsls	r2, r3, #16
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f87f 	bl	8007220 <RTC_ExitInitMode>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11b      	bne.n	8007164 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0203 	bic.w	r2, r2, #3
 800713a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69da      	ldr	r2, [r3, #28]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	22ff      	movs	r2, #255	; 0xff
 800715a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007184:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007186:	f7fc ff0f 	bl	8003fa8 <HAL_GetTick>
 800718a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800718c:	e009      	b.n	80071a2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800718e:	f7fc ff0b 	bl	8003fa8 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800719c:	d901      	bls.n	80071a2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e007      	b.n	80071b2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0ee      	beq.n	800718e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d120      	bne.n	8007216 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071de:	f7fc fee3 	bl	8003fa8 <HAL_GetTick>
 80071e2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071e4:	e00d      	b.n	8007202 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071e6:	f7fc fedf 	bl	8003fa8 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071f4:	d905      	bls.n	8007202 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2203      	movs	r2, #3
 80071fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <RTC_EnterInitMode+0x5c>
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d1e7      	bne.n	80071e6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800722c:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <RTC_ExitInitMode+0x78>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a19      	ldr	r2, [pc, #100]	; (8007298 <RTC_ExitInitMode+0x78>)
 8007232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007236:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007238:	4b17      	ldr	r3, [pc, #92]	; (8007298 <RTC_ExitInitMode+0x78>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10c      	bne.n	800725e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff92 	bl	800716e <HAL_RTC_WaitForSynchro>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e017      	b.n	800728e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <RTC_ExitInitMode+0x78>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <RTC_ExitInitMode+0x78>)
 8007264:	f023 0320 	bic.w	r3, r3, #32
 8007268:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff ff7f 	bl	800716e <HAL_RTC_WaitForSynchro>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2203      	movs	r2, #3
 800727a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007282:	4b05      	ldr	r3, [pc, #20]	; (8007298 <RTC_ExitInitMode+0x78>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	4a04      	ldr	r2, [pc, #16]	; (8007298 <RTC_ExitInitMode+0x78>)
 8007288:	f043 0320 	orr.w	r3, r3, #32
 800728c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40002800 	.word	0x40002800

0800729c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e07f      	b.n	80073b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	22ca      	movs	r2, #202	; 0xca
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2253      	movs	r2, #83	; 0x53
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80072f6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d120      	bne.n	8007348 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007306:	f7fc fe4f 	bl	8003fa8 <HAL_GetTick>
 800730a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800730c:	e015      	b.n	800733a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800730e:	f7fc fe4b 	bl	8003fa8 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800731c:	d90d      	bls.n	800733a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2203      	movs	r2, #3
 800732a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e03d      	b.n	80073b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0e2      	beq.n	800730e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f023 0107 	bic.w	r1, r3, #7
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	430a      	orrs	r2, r1
 8007362:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007364:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a15      	ldr	r2, [pc, #84]	; (80073c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800736a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800736e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800737a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800738a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800739a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40010400 	.word	0x40010400

080073c4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80073ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073d2:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80073f2:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fa f817 	bl	8001428 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40010400 	.word	0x40010400

08007410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e095      	b.n	800754e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d108      	bne.n	800743c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007432:	d009      	beq.n	8007448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	61da      	str	r2, [r3, #28]
 800743a:	e005      	b.n	8007448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fa f93a 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007488:	d902      	bls.n	8007490 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e002      	b.n	8007496 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007494:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800749e:	d007      	beq.n	80074b0 <HAL_SPI_Init+0xa0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074a8:	d002      	beq.n	80074b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f2:	ea42 0103 	orr.w	r1, r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	f003 0204 	and.w	r2, r3, #4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800752c:	ea42 0103 	orr.w	r1, r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b088      	sub	sp, #32
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	4613      	mov	r3, r2
 8007564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_SPI_Transmit+0x22>
 8007574:	2302      	movs	r3, #2
 8007576:	e158      	b.n	800782a <HAL_SPI_Transmit+0x2d4>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007580:	f7fc fd12 	bl	8003fa8 <HAL_GetTick>
 8007584:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	d002      	beq.n	800759c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007596:	2302      	movs	r3, #2
 8007598:	77fb      	strb	r3, [r7, #31]
    goto error;
 800759a:	e13d      	b.n	8007818 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_Transmit+0x52>
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d102      	bne.n	80075ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075ac:	e134      	b.n	8007818 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2203      	movs	r2, #3
 80075b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	88fa      	ldrh	r2, [r7, #6]
 80075cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f8:	d10f      	bne.n	800761a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	d007      	beq.n	8007638 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007640:	d94b      	bls.n	80076da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_SPI_Transmit+0xfa>
 800764a:	8afb      	ldrh	r3, [r7, #22]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d13e      	bne.n	80076ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	881a      	ldrh	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	1c9a      	adds	r2, r3, #2
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007674:	e02b      	b.n	80076ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d112      	bne.n	80076aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	881a      	ldrh	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	1c9a      	adds	r2, r3, #2
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076a8:	e011      	b.n	80076ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076aa:	f7fc fc7d 	bl	8003fa8 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d803      	bhi.n	80076c2 <HAL_SPI_Transmit+0x16c>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d102      	bne.n	80076c8 <HAL_SPI_Transmit+0x172>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d102      	bne.n	80076ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076cc:	e0a4      	b.n	8007818 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1ce      	bne.n	8007676 <HAL_SPI_Transmit+0x120>
 80076d8:	e07c      	b.n	80077d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_SPI_Transmit+0x192>
 80076e2:	8afb      	ldrh	r3, [r7, #22]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d170      	bne.n	80077ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d912      	bls.n	8007718 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	881a      	ldrh	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	1c9a      	adds	r2, r3, #2
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b02      	subs	r3, #2
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007716:	e058      	b.n	80077ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800773e:	e044      	b.n	80077ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b02      	cmp	r3, #2
 800774c:	d12b      	bne.n	80077a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	d912      	bls.n	800777e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	881a      	ldrh	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	1c9a      	adds	r2, r3, #2
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b02      	subs	r3, #2
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800777c:	e025      	b.n	80077ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330c      	adds	r3, #12
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077a4:	e011      	b.n	80077ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a6:	f7fc fbff 	bl	8003fa8 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d803      	bhi.n	80077be <HAL_SPI_Transmit+0x268>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d102      	bne.n	80077c4 <HAL_SPI_Transmit+0x26e>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077c8:	e026      	b.n	8007818 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1b5      	bne.n	8007740 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f949 	bl	8007a70 <SPI_EndRxTxTransaction>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e000      	b.n	8007818 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007828:	7ffb      	ldrb	r3, [r7, #31]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007844:	f7fc fbb0 	bl	8003fa8 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4413      	add	r3, r2
 8007852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007854:	f7fc fba8 	bl	8003fa8 <HAL_GetTick>
 8007858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800785a:	4b39      	ldr	r3, [pc, #228]	; (8007940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	015b      	lsls	r3, r3, #5
 8007860:	0d1b      	lsrs	r3, r3, #20
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800786a:	e054      	b.n	8007916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d050      	beq.n	8007916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007874:	f7fc fb98 	bl	8003fa8 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	429a      	cmp	r2, r3
 8007882:	d902      	bls.n	800788a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d13d      	bne.n	8007906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078a2:	d111      	bne.n	80078c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ac:	d004      	beq.n	80078b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b6:	d107      	bne.n	80078c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d0:	d10f      	bne.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e017      	b.n	8007936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	3b01      	subs	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d19b      	bne.n	800786c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000000 	.word	0x20000000

08007944 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007956:	f7fc fb27 	bl	8003fa8 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	4413      	add	r3, r2
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007966:	f7fc fb1f 	bl	8003fa8 <HAL_GetTick>
 800796a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007974:	4b3d      	ldr	r3, [pc, #244]	; (8007a6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	00da      	lsls	r2, r3, #3
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	0d1b      	lsrs	r3, r3, #20
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800798c:	e060      	b.n	8007a50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007994:	d107      	bne.n	80079a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ac:	d050      	beq.n	8007a50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079ae:	f7fc fafb 	bl	8003fa8 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d902      	bls.n	80079c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d13d      	bne.n	8007a40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079dc:	d111      	bne.n	8007a02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e6:	d004      	beq.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f0:	d107      	bne.n	8007a02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0a:	d10f      	bne.n	8007a2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e010      	b.n	8007a62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d196      	bne.n	800798e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3728      	adds	r7, #40	; 0x28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000000 	.word	0x20000000

08007a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff ff5b 	bl	8007944 <SPI_WaitFifoStateUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e027      	b.n	8007af4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7ff fec0 	bl	8007834 <SPI_WaitFlagStateUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e014      	b.n	8007af4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff ff34 	bl	8007944 <SPI_WaitFifoStateUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e000      	b.n	8007af4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e040      	b.n	8007b90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7f9 fe3e 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2224      	movs	r2, #36	; 0x24
 8007b28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fc18 	bl	8008370 <UART_SetConfig>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e022      	b.n	8007b90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fec4 	bl	80088e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 ff4b 	bl	8008a24 <UART_CheckIdleState>
 8007b8e:	4603      	mov	r3, r0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	f040 8082 	bne.w	8007cb6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <HAL_UART_Transmit+0x26>
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e07a      	b.n	8007cb8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_UART_Transmit+0x38>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e073      	b.n	8007cb8 <HAL_UART_Transmit+0x120>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2221      	movs	r2, #33	; 0x21
 8007be4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007be6:	f7fc f9df 	bl	8003fa8 <HAL_GetTick>
 8007bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	88fa      	ldrh	r2, [r7, #6]
 8007bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	88fa      	ldrh	r2, [r7, #6]
 8007bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c04:	d108      	bne.n	8007c18 <HAL_UART_Transmit+0x80>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e003      	b.n	8007c20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007c28:	e02d      	b.n	8007c86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2200      	movs	r2, #0
 8007c32:	2180      	movs	r1, #128	; 0x80
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 ff3e 	bl	8008ab6 <UART_WaitOnFlagUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e039      	b.n	8007cb8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	881a      	ldrh	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c56:	b292      	uxth	r2, r2
 8007c58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	e008      	b.n	8007c74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	781a      	ldrb	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	3301      	adds	r3, #1
 8007c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1cb      	bne.n	8007c2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2140      	movs	r1, #64	; 0x40
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 ff0a 	bl	8008ab6 <UART_WaitOnFlagUntilTimeout>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e005      	b.n	8007cb8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
  }
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d142      	bne.n	8007d5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_UART_Receive_IT+0x22>
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e03b      	b.n	8007d5e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_UART_Receive_IT+0x34>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e034      	b.n	8007d5e <HAL_UART_Receive_IT+0x9e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <HAL_UART_Receive_IT+0xa8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01f      	beq.n	8007d4c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	613b      	str	r3, [r7, #16]
   return(result);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	623b      	str	r3, [r7, #32]
 8007d3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e6      	bne.n	8007d1a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 ff74 	bl	8008c40 <UART_Start_Receive_IT>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	e000      	b.n	8007d5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3728      	adds	r7, #40	; 0x28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40008000 	.word	0x40008000

08007d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b0ba      	sub	sp, #232	; 0xe8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d115      	bne.n	8007dd4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00f      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 82a6 	beq.w	8008316 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
      }
      return;
 8007dd2:	e2a0      	b.n	8008316 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8117 	beq.w	800800c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007dea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007dee:	4b85      	ldr	r3, [pc, #532]	; (8008004 <HAL_UART_IRQHandler+0x298>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 810a 	beq.w	800800c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d011      	beq.n	8007e28 <HAL_UART_IRQHandler+0xbc>
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e1e:	f043 0201 	orr.w	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d011      	beq.n	8007e58 <HAL_UART_IRQHandler+0xec>
 8007e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2202      	movs	r2, #2
 8007e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e4e:	f043 0204 	orr.w	r2, r3, #4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d011      	beq.n	8007e88 <HAL_UART_IRQHandler+0x11c>
 8007e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2204      	movs	r2, #4
 8007e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7e:	f043 0202 	orr.w	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d017      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d105      	bne.n	8007eac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eba:	f043 0208 	orr.w	r2, r3, #8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d012      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x18a>
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00c      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eec:	f043 0220 	orr.w	r2, r3, #32
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 820c 	beq.w	800831a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00d      	beq.n	8007f2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d005      	beq.n	8007f4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d04f      	beq.n	8007fee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 ff40 	bl	8008dd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d141      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3308      	adds	r3, #8
 8007f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1d9      	bne.n	8007f62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d013      	beq.n	8007fde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	4a13      	ldr	r2, [pc, #76]	; (8008008 <HAL_UART_IRQHandler+0x29c>)
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fd faeb 	bl	800559e <HAL_DMA_Abort_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d017      	beq.n	8007ffe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	e00f      	b.n	8007ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f9b0 	bl	8008344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	e00b      	b.n	8007ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f9ac 	bl	8008344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	e007      	b.n	8007ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9a8 	bl	8008344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007ffc:	e18d      	b.n	800831a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffe:	bf00      	nop
    return;
 8008000:	e18b      	b.n	800831a <HAL_UART_IRQHandler+0x5ae>
 8008002:	bf00      	nop
 8008004:	04000120 	.word	0x04000120
 8008008:	08008e9b 	.word	0x08008e9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008010:	2b01      	cmp	r3, #1
 8008012:	f040 8146 	bne.w	80082a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 813f 	beq.w	80082a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8138 	beq.w	80082a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2210      	movs	r2, #16
 8008038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008044:	2b40      	cmp	r3, #64	; 0x40
 8008046:	f040 80b4 	bne.w	80081b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008056:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 815f 	beq.w	800831e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800806a:	429a      	cmp	r2, r3
 800806c:	f080 8157 	bcs.w	800831e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 8085 	bne.w	8008196 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1da      	bne.n	800808c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e8:	f023 0301 	bic.w	r3, r3, #1
 80080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008102:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800810c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e1      	bne.n	80080d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3308      	adds	r3, #8
 8008132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008138:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800813c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e3      	bne.n	8008112 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008166:	f023 0310 	bic.w	r3, r3, #16
 800816a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008178:	65bb      	str	r3, [r7, #88]	; 0x58
 800817a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800817e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e4      	bne.n	8008156 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	4618      	mov	r0, r3
 8008192:	f7fd f9c6 	bl	8005522 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8d4 	bl	8008358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081b0:	e0b5      	b.n	800831e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081be:	b29b      	uxth	r3, r3
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80a7 	beq.w	8008322 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80081d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80a2 	beq.w	8008322 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008200:	647b      	str	r3, [r7, #68]	; 0x44
 8008202:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800820e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e4      	bne.n	80081de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	623b      	str	r3, [r7, #32]
   return(result);
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f023 0301 	bic.w	r3, r3, #1
 800822a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008238:	633a      	str	r2, [r7, #48]	; 0x30
 800823a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800823e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e3      	bne.n	8008214 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	60fb      	str	r3, [r7, #12]
   return(result);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0310 	bic.w	r3, r3, #16
 8008272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008280:	61fb      	str	r3, [r7, #28]
 8008282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	69b9      	ldr	r1, [r7, #24]
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	617b      	str	r3, [r7, #20]
   return(result);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e4      	bne.n	800825e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f85c 	bl	8008358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082a0:	e03f      	b.n	8008322 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00e      	beq.n	80082cc <HAL_UART_IRQHandler+0x560>
 80082ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 ff88 	bl	80091da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082ca:	e02d      	b.n	8008328 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00e      	beq.n	80082f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01c      	beq.n	8008326 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
    }
    return;
 80082f4:	e017      	b.n	8008326 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d012      	beq.n	8008328 <HAL_UART_IRQHandler+0x5bc>
 8008302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fdd9 	bl	8008ec6 <UART_EndTransmit_IT>
    return;
 8008314:	e008      	b.n	8008328 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008316:	bf00      	nop
 8008318:	e006      	b.n	8008328 <HAL_UART_IRQHandler+0x5bc>
    return;
 800831a:	bf00      	nop
 800831c:	e004      	b.n	8008328 <HAL_UART_IRQHandler+0x5bc>
      return;
 800831e:	bf00      	nop
 8008320:	e002      	b.n	8008328 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008322:	bf00      	nop
 8008324:	e000      	b.n	8008328 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008326:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008328:	37e8      	adds	r7, #232	; 0xe8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop

08008330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008374:	b08a      	sub	sp, #40	; 0x28
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	431a      	orrs	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	4313      	orrs	r3, r2
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4ba4      	ldr	r3, [pc, #656]	; (8008630 <UART_SetConfig+0x2c0>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	6812      	ldr	r2, [r2, #0]
 80083a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a99      	ldr	r2, [pc, #612]	; (8008634 <UART_SetConfig+0x2c4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d004      	beq.n	80083dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d8:	4313      	orrs	r3, r2
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ec:	430a      	orrs	r2, r1
 80083ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a90      	ldr	r2, [pc, #576]	; (8008638 <UART_SetConfig+0x2c8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d126      	bne.n	8008448 <UART_SetConfig+0xd8>
 80083fa:	4b90      	ldr	r3, [pc, #576]	; (800863c <UART_SetConfig+0x2cc>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	2b03      	cmp	r3, #3
 8008406:	d81b      	bhi.n	8008440 <UART_SetConfig+0xd0>
 8008408:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0xa0>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	08008421 	.word	0x08008421
 8008414:	08008431 	.word	0x08008431
 8008418:	08008429 	.word	0x08008429
 800841c:	08008439 	.word	0x08008439
 8008420:	2301      	movs	r3, #1
 8008422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008426:	e116      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008428:	2302      	movs	r3, #2
 800842a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800842e:	e112      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008436:	e10e      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800843e:	e10a      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008446:	e106      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a7c      	ldr	r2, [pc, #496]	; (8008640 <UART_SetConfig+0x2d0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d138      	bne.n	80084c4 <UART_SetConfig+0x154>
 8008452:	4b7a      	ldr	r3, [pc, #488]	; (800863c <UART_SetConfig+0x2cc>)
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008458:	f003 030c 	and.w	r3, r3, #12
 800845c:	2b0c      	cmp	r3, #12
 800845e:	d82d      	bhi.n	80084bc <UART_SetConfig+0x14c>
 8008460:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <UART_SetConfig+0xf8>)
 8008462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008466:	bf00      	nop
 8008468:	0800849d 	.word	0x0800849d
 800846c:	080084bd 	.word	0x080084bd
 8008470:	080084bd 	.word	0x080084bd
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080084bd 	.word	0x080084bd
 8008480:	080084bd 	.word	0x080084bd
 8008484:	080084bd 	.word	0x080084bd
 8008488:	080084a5 	.word	0x080084a5
 800848c:	080084bd 	.word	0x080084bd
 8008490:	080084bd 	.word	0x080084bd
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084b5 	.word	0x080084b5
 800849c:	2300      	movs	r3, #0
 800849e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084a2:	e0d8      	b.n	8008656 <UART_SetConfig+0x2e6>
 80084a4:	2302      	movs	r3, #2
 80084a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084aa:	e0d4      	b.n	8008656 <UART_SetConfig+0x2e6>
 80084ac:	2304      	movs	r3, #4
 80084ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b2:	e0d0      	b.n	8008656 <UART_SetConfig+0x2e6>
 80084b4:	2308      	movs	r3, #8
 80084b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ba:	e0cc      	b.n	8008656 <UART_SetConfig+0x2e6>
 80084bc:	2310      	movs	r3, #16
 80084be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c2:	e0c8      	b.n	8008656 <UART_SetConfig+0x2e6>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a5e      	ldr	r2, [pc, #376]	; (8008644 <UART_SetConfig+0x2d4>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d125      	bne.n	800851a <UART_SetConfig+0x1aa>
 80084ce:	4b5b      	ldr	r3, [pc, #364]	; (800863c <UART_SetConfig+0x2cc>)
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084d8:	2b30      	cmp	r3, #48	; 0x30
 80084da:	d016      	beq.n	800850a <UART_SetConfig+0x19a>
 80084dc:	2b30      	cmp	r3, #48	; 0x30
 80084de:	d818      	bhi.n	8008512 <UART_SetConfig+0x1a2>
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d00a      	beq.n	80084fa <UART_SetConfig+0x18a>
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d814      	bhi.n	8008512 <UART_SetConfig+0x1a2>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <UART_SetConfig+0x182>
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d008      	beq.n	8008502 <UART_SetConfig+0x192>
 80084f0:	e00f      	b.n	8008512 <UART_SetConfig+0x1a2>
 80084f2:	2300      	movs	r3, #0
 80084f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084f8:	e0ad      	b.n	8008656 <UART_SetConfig+0x2e6>
 80084fa:	2302      	movs	r3, #2
 80084fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008500:	e0a9      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008502:	2304      	movs	r3, #4
 8008504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008508:	e0a5      	b.n	8008656 <UART_SetConfig+0x2e6>
 800850a:	2308      	movs	r3, #8
 800850c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008510:	e0a1      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008512:	2310      	movs	r3, #16
 8008514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008518:	e09d      	b.n	8008656 <UART_SetConfig+0x2e6>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a4a      	ldr	r2, [pc, #296]	; (8008648 <UART_SetConfig+0x2d8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d125      	bne.n	8008570 <UART_SetConfig+0x200>
 8008524:	4b45      	ldr	r3, [pc, #276]	; (800863c <UART_SetConfig+0x2cc>)
 8008526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800852a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800852e:	2bc0      	cmp	r3, #192	; 0xc0
 8008530:	d016      	beq.n	8008560 <UART_SetConfig+0x1f0>
 8008532:	2bc0      	cmp	r3, #192	; 0xc0
 8008534:	d818      	bhi.n	8008568 <UART_SetConfig+0x1f8>
 8008536:	2b80      	cmp	r3, #128	; 0x80
 8008538:	d00a      	beq.n	8008550 <UART_SetConfig+0x1e0>
 800853a:	2b80      	cmp	r3, #128	; 0x80
 800853c:	d814      	bhi.n	8008568 <UART_SetConfig+0x1f8>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <UART_SetConfig+0x1d8>
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d008      	beq.n	8008558 <UART_SetConfig+0x1e8>
 8008546:	e00f      	b.n	8008568 <UART_SetConfig+0x1f8>
 8008548:	2300      	movs	r3, #0
 800854a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854e:	e082      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008550:	2302      	movs	r3, #2
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008556:	e07e      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008558:	2304      	movs	r3, #4
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855e:	e07a      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008560:	2308      	movs	r3, #8
 8008562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008566:	e076      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008568:	2310      	movs	r3, #16
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800856e:	e072      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a35      	ldr	r2, [pc, #212]	; (800864c <UART_SetConfig+0x2dc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d12a      	bne.n	80085d0 <UART_SetConfig+0x260>
 800857a:	4b30      	ldr	r3, [pc, #192]	; (800863c <UART_SetConfig+0x2cc>)
 800857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008588:	d01a      	beq.n	80085c0 <UART_SetConfig+0x250>
 800858a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800858e:	d81b      	bhi.n	80085c8 <UART_SetConfig+0x258>
 8008590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008594:	d00c      	beq.n	80085b0 <UART_SetConfig+0x240>
 8008596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800859a:	d815      	bhi.n	80085c8 <UART_SetConfig+0x258>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <UART_SetConfig+0x238>
 80085a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a4:	d008      	beq.n	80085b8 <UART_SetConfig+0x248>
 80085a6:	e00f      	b.n	80085c8 <UART_SetConfig+0x258>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ae:	e052      	b.n	8008656 <UART_SetConfig+0x2e6>
 80085b0:	2302      	movs	r3, #2
 80085b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b6:	e04e      	b.n	8008656 <UART_SetConfig+0x2e6>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085be:	e04a      	b.n	8008656 <UART_SetConfig+0x2e6>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085c6:	e046      	b.n	8008656 <UART_SetConfig+0x2e6>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ce:	e042      	b.n	8008656 <UART_SetConfig+0x2e6>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a17      	ldr	r2, [pc, #92]	; (8008634 <UART_SetConfig+0x2c4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d13a      	bne.n	8008650 <UART_SetConfig+0x2e0>
 80085da:	4b18      	ldr	r3, [pc, #96]	; (800863c <UART_SetConfig+0x2cc>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085e8:	d01a      	beq.n	8008620 <UART_SetConfig+0x2b0>
 80085ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085ee:	d81b      	bhi.n	8008628 <UART_SetConfig+0x2b8>
 80085f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f4:	d00c      	beq.n	8008610 <UART_SetConfig+0x2a0>
 80085f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085fa:	d815      	bhi.n	8008628 <UART_SetConfig+0x2b8>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <UART_SetConfig+0x298>
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008604:	d008      	beq.n	8008618 <UART_SetConfig+0x2a8>
 8008606:	e00f      	b.n	8008628 <UART_SetConfig+0x2b8>
 8008608:	2300      	movs	r3, #0
 800860a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800860e:	e022      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008610:	2302      	movs	r3, #2
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008616:	e01e      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800861e:	e01a      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008626:	e016      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800862e:	e012      	b.n	8008656 <UART_SetConfig+0x2e6>
 8008630:	efff69f3 	.word	0xefff69f3
 8008634:	40008000 	.word	0x40008000
 8008638:	40013800 	.word	0x40013800
 800863c:	40021000 	.word	0x40021000
 8008640:	40004400 	.word	0x40004400
 8008644:	40004800 	.word	0x40004800
 8008648:	40004c00 	.word	0x40004c00
 800864c:	40005000 	.word	0x40005000
 8008650:	2310      	movs	r3, #16
 8008652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a9f      	ldr	r2, [pc, #636]	; (80088d8 <UART_SetConfig+0x568>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d17a      	bne.n	8008756 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008664:	2b08      	cmp	r3, #8
 8008666:	d824      	bhi.n	80086b2 <UART_SetConfig+0x342>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <UART_SetConfig+0x300>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	08008695 	.word	0x08008695
 8008674:	080086b3 	.word	0x080086b3
 8008678:	0800869d 	.word	0x0800869d
 800867c:	080086b3 	.word	0x080086b3
 8008680:	080086a3 	.word	0x080086a3
 8008684:	080086b3 	.word	0x080086b3
 8008688:	080086b3 	.word	0x080086b3
 800868c:	080086b3 	.word	0x080086b3
 8008690:	080086ab 	.word	0x080086ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008694:	f7fd ffa8 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8008698:	61f8      	str	r0, [r7, #28]
        break;
 800869a:	e010      	b.n	80086be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800869c:	4b8f      	ldr	r3, [pc, #572]	; (80088dc <UART_SetConfig+0x56c>)
 800869e:	61fb      	str	r3, [r7, #28]
        break;
 80086a0:	e00d      	b.n	80086be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086a2:	f7fd ff09 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 80086a6:	61f8      	str	r0, [r7, #28]
        break;
 80086a8:	e009      	b.n	80086be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ae:	61fb      	str	r3, [r7, #28]
        break;
 80086b0:	e005      	b.n	80086be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80086bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80fb 	beq.w	80088bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d305      	bcc.n	80086e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d903      	bls.n	80086ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086e8:	e0e8      	b.n	80088bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	2200      	movs	r2, #0
 80086ee:	461c      	mov	r4, r3
 80086f0:	4615      	mov	r5, r2
 80086f2:	f04f 0200 	mov.w	r2, #0
 80086f6:	f04f 0300 	mov.w	r3, #0
 80086fa:	022b      	lsls	r3, r5, #8
 80086fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008700:	0222      	lsls	r2, r4, #8
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	6849      	ldr	r1, [r1, #4]
 8008706:	0849      	lsrs	r1, r1, #1
 8008708:	2000      	movs	r0, #0
 800870a:	4688      	mov	r8, r1
 800870c:	4681      	mov	r9, r0
 800870e:	eb12 0a08 	adds.w	sl, r2, r8
 8008712:	eb43 0b09 	adc.w	fp, r3, r9
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008724:	4650      	mov	r0, sl
 8008726:	4659      	mov	r1, fp
 8008728:	f7f8 fa5e 	bl	8000be8 <__aeabi_uldivmod>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4613      	mov	r3, r2
 8008732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873a:	d308      	bcc.n	800874e <UART_SetConfig+0x3de>
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008742:	d204      	bcs.n	800874e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e0b6      	b.n	80088bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008754:	e0b2      	b.n	80088bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800875e:	d15e      	bne.n	800881e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008764:	2b08      	cmp	r3, #8
 8008766:	d828      	bhi.n	80087ba <UART_SetConfig+0x44a>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x400>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	080087bb 	.word	0x080087bb
 8008780:	080087ab 	.word	0x080087ab
 8008784:	080087bb 	.word	0x080087bb
 8008788:	080087bb 	.word	0x080087bb
 800878c:	080087bb 	.word	0x080087bb
 8008790:	080087b3 	.word	0x080087b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008794:	f7fd ff28 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8008798:	61f8      	str	r0, [r7, #28]
        break;
 800879a:	e014      	b.n	80087c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800879c:	f7fd ff3a 	bl	8006614 <HAL_RCC_GetPCLK2Freq>
 80087a0:	61f8      	str	r0, [r7, #28]
        break;
 80087a2:	e010      	b.n	80087c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087a4:	4b4d      	ldr	r3, [pc, #308]	; (80088dc <UART_SetConfig+0x56c>)
 80087a6:	61fb      	str	r3, [r7, #28]
        break;
 80087a8:	e00d      	b.n	80087c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087aa:	f7fd fe85 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 80087ae:	61f8      	str	r0, [r7, #28]
        break;
 80087b0:	e009      	b.n	80087c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b6:	61fb      	str	r3, [r7, #28]
        break;
 80087b8:	e005      	b.n	80087c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80087c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d077      	beq.n	80088bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	005a      	lsls	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	441a      	add	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b0f      	cmp	r3, #15
 80087e6:	d916      	bls.n	8008816 <UART_SetConfig+0x4a6>
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ee:	d212      	bcs.n	8008816 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f023 030f 	bic.w	r3, r3, #15
 80087f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	b29a      	uxth	r2, r3
 8008806:	8afb      	ldrh	r3, [r7, #22]
 8008808:	4313      	orrs	r3, r2
 800880a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	8afa      	ldrh	r2, [r7, #22]
 8008812:	60da      	str	r2, [r3, #12]
 8008814:	e052      	b.n	80088bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800881c:	e04e      	b.n	80088bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800881e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008822:	2b08      	cmp	r3, #8
 8008824:	d827      	bhi.n	8008876 <UART_SetConfig+0x506>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <UART_SetConfig+0x4bc>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008851 	.word	0x08008851
 8008830:	08008859 	.word	0x08008859
 8008834:	08008861 	.word	0x08008861
 8008838:	08008877 	.word	0x08008877
 800883c:	08008867 	.word	0x08008867
 8008840:	08008877 	.word	0x08008877
 8008844:	08008877 	.word	0x08008877
 8008848:	08008877 	.word	0x08008877
 800884c:	0800886f 	.word	0x0800886f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008850:	f7fd feca 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8008854:	61f8      	str	r0, [r7, #28]
        break;
 8008856:	e014      	b.n	8008882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008858:	f7fd fedc 	bl	8006614 <HAL_RCC_GetPCLK2Freq>
 800885c:	61f8      	str	r0, [r7, #28]
        break;
 800885e:	e010      	b.n	8008882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008860:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <UART_SetConfig+0x56c>)
 8008862:	61fb      	str	r3, [r7, #28]
        break;
 8008864:	e00d      	b.n	8008882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008866:	f7fd fe27 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 800886a:	61f8      	str	r0, [r7, #28]
        break;
 800886c:	e009      	b.n	8008882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008872:	61fb      	str	r3, [r7, #28]
        break;
 8008874:	e005      	b.n	8008882 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008880:	bf00      	nop
    }

    if (pclk != 0U)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d019      	beq.n	80088bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	085a      	lsrs	r2, r3, #1
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	441a      	add	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	2b0f      	cmp	r3, #15
 80088a0:	d909      	bls.n	80088b6 <UART_SetConfig+0x546>
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a8:	d205      	bcs.n	80088b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60da      	str	r2, [r3, #12]
 80088b4:	e002      	b.n	80088bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3728      	adds	r7, #40	; 0x28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088d6:	bf00      	nop
 80088d8:	40008000 	.word	0x40008000
 80088dc:	00f42400 	.word	0x00f42400

080088e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01a      	beq.n	80089f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089de:	d10a      	bne.n	80089f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	605a      	str	r2, [r3, #4]
  }
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a34:	f7fb fab8 	bl	8003fa8 <HAL_GetTick>
 8008a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d10e      	bne.n	8008a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f82d 	bl	8008ab6 <UART_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e023      	b.n	8008aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d10e      	bne.n	8008a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f817 	bl	8008ab6 <UART_WaitOnFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e00d      	b.n	8008aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b09c      	sub	sp, #112	; 0x70
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	60b9      	str	r1, [r7, #8]
 8008ac0:	603b      	str	r3, [r7, #0]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac6:	e0a5      	b.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ace:	f000 80a1 	beq.w	8008c14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad2:	f7fb fa69 	bl	8003fa8 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d302      	bcc.n	8008ae8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d13e      	bne.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008afc:	667b      	str	r3, [r7, #100]	; 0x64
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e6      	bne.n	8008ae8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	f023 0301 	bic.w	r3, r3, #1
 8008b30:	663b      	str	r3, [r7, #96]	; 0x60
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3308      	adds	r3, #8
 8008b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e5      	bne.n	8008b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2220      	movs	r2, #32
 8008b52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e067      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d04f      	beq.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b82:	d147      	bne.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34
 8008bae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e6      	bne.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3308      	adds	r3, #8
 8008bde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008be0:	623a      	str	r2, [r7, #32]
 8008be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	69f9      	ldr	r1, [r7, #28]
 8008be6:	6a3a      	ldr	r2, [r7, #32]
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e5      	bne.n	8008bc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e010      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69da      	ldr	r2, [r3, #28]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	bf0c      	ite	eq
 8008c24:	2301      	moveq	r3, #1
 8008c26:	2300      	movne	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	f43f af4a 	beq.w	8008ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3770      	adds	r7, #112	; 0x70
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b097      	sub	sp, #92	; 0x5c
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c72:	d10e      	bne.n	8008c92 <UART_Start_Receive_IT+0x52>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <UART_Start_Receive_IT+0x48>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c86:	e02d      	b.n	8008ce4 <UART_Start_Receive_IT+0xa4>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	22ff      	movs	r2, #255	; 0xff
 8008c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c90:	e028      	b.n	8008ce4 <UART_Start_Receive_IT+0xa4>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <UART_Start_Receive_IT+0x76>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d104      	bne.n	8008cac <UART_Start_Receive_IT+0x6c>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	22ff      	movs	r2, #255	; 0xff
 8008ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008caa:	e01b      	b.n	8008ce4 <UART_Start_Receive_IT+0xa4>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	227f      	movs	r2, #127	; 0x7f
 8008cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cb4:	e016      	b.n	8008ce4 <UART_Start_Receive_IT+0xa4>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cbe:	d10d      	bne.n	8008cdc <UART_Start_Receive_IT+0x9c>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d104      	bne.n	8008cd2 <UART_Start_Receive_IT+0x92>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	227f      	movs	r2, #127	; 0x7f
 8008ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cd0:	e008      	b.n	8008ce4 <UART_Start_Receive_IT+0xa4>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	223f      	movs	r2, #63	; 0x3f
 8008cd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cda:	e003      	b.n	8008ce4 <UART_Start_Receive_IT+0xa4>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2222      	movs	r2, #34	; 0x22
 8008cf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	657b      	str	r3, [r7, #84]	; 0x54
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d107      	bne.n	8008d40 <UART_Start_Receive_IT+0x100>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <UART_Start_Receive_IT+0x18c>)
 8008d3c:	665a      	str	r2, [r3, #100]	; 0x64
 8008d3e:	e002      	b.n	8008d46 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <UART_Start_Receive_IT+0x190>)
 8008d44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d019      	beq.n	8008d8a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
 8008d76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e6      	bne.n	8008d56 <UART_Start_Receive_IT+0x116>
 8008d88:	e018      	b.n	8008dbc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	613b      	str	r3, [r7, #16]
   return(result);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f043 0320 	orr.w	r3, r3, #32
 8008d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e6      	bne.n	8008d8a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	375c      	adds	r7, #92	; 0x5c
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	0800907b 	.word	0x0800907b
 8008dd0:	08008f1b 	.word	0x08008f1b

08008dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b095      	sub	sp, #84	; 0x54
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8008dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e6      	bne.n	8008ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e5      	bne.n	8008e0e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d118      	bne.n	8008e7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f023 0310 	bic.w	r3, r3, #16
 8008e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6979      	ldr	r1, [r7, #20]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	613b      	str	r3, [r7, #16]
   return(result);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e6      	bne.n	8008e4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008e8e:	bf00      	nop
 8008e90:	3754      	adds	r7, #84	; 0x54
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fa43 	bl	8008344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b088      	sub	sp, #32
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee2:	61fb      	str	r3, [r7, #28]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6979      	ldr	r1, [r7, #20]
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e6      	bne.n	8008ece <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff fa0f 	bl	8008330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f12:	bf00      	nop
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b096      	sub	sp, #88	; 0x58
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f30:	2b22      	cmp	r3, #34	; 0x22
 8008f32:	f040 8094 	bne.w	800905e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f40:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008f44:	b2d9      	uxtb	r1, r3
 8008f46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f50:	400a      	ands	r2, r1
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d179      	bne.n	8009072 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f92:	653b      	str	r3, [r7, #80]	; 0x50
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fa4:	e841 2300 	strex	r3, r2, [r1]
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e6      	bne.n	8008f7e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	f023 0301 	bic.w	r3, r3, #1
 8008fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fd0:	633a      	str	r2, [r7, #48]	; 0x30
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e5      	bne.n	8008fb0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d12e      	bne.n	8009056 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	60fb      	str	r3, [r7, #12]
   return(result);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0310 	bic.w	r3, r3, #16
 8009012:	64bb      	str	r3, [r7, #72]	; 0x48
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	69b9      	ldr	r1, [r7, #24]
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	617b      	str	r3, [r7, #20]
   return(result);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e6      	bne.n	8008ffe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b10      	cmp	r3, #16
 800903c:	d103      	bne.n	8009046 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2210      	movs	r2, #16
 8009044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff f982 	bl	8008358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009054:	e00d      	b.n	8009072 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fc4e 	bl	80098f8 <HAL_UART_RxCpltCallback>
}
 800905c:	e009      	b.n	8009072 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	8b1b      	ldrh	r3, [r3, #24]
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0208 	orr.w	r2, r2, #8
 800906e:	b292      	uxth	r2, r2
 8009070:	831a      	strh	r2, [r3, #24]
}
 8009072:	bf00      	nop
 8009074:	3758      	adds	r7, #88	; 0x58
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b096      	sub	sp, #88	; 0x58
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009088:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009090:	2b22      	cmp	r3, #34	; 0x22
 8009092:	f040 8094 	bne.w	80091be <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800909c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80090a6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80090aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80090ae:	4013      	ands	r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ba:	1c9a      	adds	r2, r3, #2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d179      	bne.n	80091d2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	461a      	mov	r2, r3
 80090fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090fc:	643b      	str	r3, [r7, #64]	; 0x40
 80090fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009104:	e841 2300 	strex	r3, r2, [r1]
 8009108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e6      	bne.n	80090de <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3308      	adds	r3, #8
 8009116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f023 0301 	bic.w	r3, r3, #1
 8009126:	64bb      	str	r3, [r7, #72]	; 0x48
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009138:	e841 2300 	strex	r3, r2, [r1]
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1e5      	bne.n	8009110 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009154:	2b01      	cmp	r3, #1
 8009156:	d12e      	bne.n	80091b6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	60bb      	str	r3, [r7, #8]
   return(result);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f023 0310 	bic.w	r3, r3, #16
 8009172:	647b      	str	r3, [r7, #68]	; 0x44
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6979      	ldr	r1, [r7, #20]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	613b      	str	r3, [r7, #16]
   return(result);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e6      	bne.n	800915e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b10      	cmp	r3, #16
 800919c:	d103      	bne.n	80091a6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2210      	movs	r2, #16
 80091a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff f8d2 	bl	8008358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091b4:	e00d      	b.n	80091d2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fb9e 	bl	80098f8 <HAL_UART_RxCpltCallback>
}
 80091bc:	e009      	b.n	80091d2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	8b1b      	ldrh	r3, [r3, #24]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0208 	orr.w	r2, r2, #8
 80091ce:	b292      	uxth	r2, r2
 80091d0:	831a      	strh	r2, [r3, #24]
}
 80091d2:	bf00      	nop
 80091d4:	3758      	adds	r7, #88	; 0x58
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <Wifi_SendRaw>:

int schlecht;

//#########################################################################################################
bool	Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 80091fc:	887b      	ldrh	r3, [r7, #2]
 80091fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009202:	d812      	bhi.n	800922a <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8009204:	887b      	ldrh	r3, [r7, #2]
 8009206:	461a      	mov	r2, r3
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	480a      	ldr	r0, [pc, #40]	; (8009234 <Wifi_SendRaw+0x44>)
 800920c:	f004 fd6e 	bl	800dcec <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 8009210:	887a      	ldrh	r2, [r7, #2]
 8009212:	2364      	movs	r3, #100	; 0x64
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4808      	ldr	r0, [pc, #32]	; (8009238 <Wifi_SendRaw+0x48>)
 8009218:	f7fe fcbe 	bl	8007b98 <HAL_UART_Transmit>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <Wifi_SendRaw+0x36>
			return true;
 8009222:	2301      	movs	r3, #1
 8009224:	e002      	b.n	800922c <Wifi_SendRaw+0x3c>
		else
			return false;
 8009226:	2300      	movs	r3, #0
 8009228:	e000      	b.n	800922c <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	200008f9 	.word	0x200008f9
 8009238:	20000644 	.word	0x20000644

0800923c <Wifi_SendString>:
//#########################################################################################################
bool	Wifi_SendString(char *data)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7f7 f813 	bl	8000270 <strlen>
 800924a:	4603      	mov	r3, r0
 800924c:	b29b      	uxth	r3, r3
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ffcd 	bl	80091f0 <Wifi_SendRaw>
 8009256:	4603      	mov	r3, r0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <Wifi_SendStringAndWait>:
//#########################################################################################################
bool	Wifi_SendStringAndWait(char *data,uint16_t DelayMs)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	807b      	strh	r3, [r7, #2]
	if(Wifi_SendRaw((uint8_t*)data,strlen(data))==false)
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7f6 ffff 	bl	8000270 <strlen>
 8009272:	4603      	mov	r3, r0
 8009274:	b29b      	uxth	r3, r3
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ffb9 	bl	80091f0 <Wifi_SendRaw>
 800927e:	4603      	mov	r3, r0
 8009280:	f083 0301 	eor.w	r3, r3, #1
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <Wifi_SendStringAndWait+0x2e>
		return false;
 800928a:	2300      	movs	r3, #0
 800928c:	e004      	b.n	8009298 <Wifi_SendStringAndWait+0x38>
	osDelay(DelayMs);
 800928e:	887b      	ldrh	r3, [r7, #2]
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f9e4 	bl	800a65e <osDelay>
	return true;
 8009296:	2301      	movs	r3, #1
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <Wifi_WaitForString>:
//#########################################################################################################
bool	Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 80092a0:	b40c      	push	{r2, r3}
 80092a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092a6:	b089      	sub	sp, #36	; 0x24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	466b      	mov	r3, sp
 80092b0:	461e      	mov	r6, r3
	
	if(result == NULL)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <Wifi_WaitForString+0x1c>
		return false;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e074      	b.n	80093a6 <Wifi_WaitForString+0x106>
	if(CountOfParameter == 0)
 80092bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <Wifi_WaitForString+0x28>
		return false;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e06e      	b.n	80093a6 <Wifi_WaitForString+0x106>

	*result=0;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]

	va_list tag;
	va_start (tag,CountOfParameter);
 80092ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092d2:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 80092d4:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80092d8:	460b      	mov	r3, r1
 80092da:	3b01      	subs	r3, #1
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	b2cb      	uxtb	r3, r1
 80092e0:	2200      	movs	r2, #0
 80092e2:	4698      	mov	r8, r3
 80092e4:	4691      	mov	r9, r2
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80092f2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80092f6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80092fa:	b2cb      	uxtb	r3, r1
 80092fc:	2200      	movs	r2, #0
 80092fe:	461c      	mov	r4, r3
 8009300:	4615      	mov	r5, r2
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	016b      	lsls	r3, r5, #5
 800930c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009310:	0162      	lsls	r2, r4, #5
 8009312:	460b      	mov	r3, r1
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	3307      	adds	r3, #7
 8009318:	08db      	lsrs	r3, r3, #3
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	ebad 0d03 	sub.w	sp, sp, r3
 8009320:	466b      	mov	r3, sp
 8009322:	3303      	adds	r3, #3
 8009324:	089b      	lsrs	r3, r3, #2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800932a:	2300      	movs	r3, #0
 800932c:	77fb      	strb	r3, [r7, #31]
 800932e:	e00a      	b.n	8009346 <Wifi_WaitForString+0xa6>
		arg[i] = va_arg (tag, char *);	
 8009330:	7ffa      	ldrb	r2, [r7, #31]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	6819      	ldr	r1, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8009340:	7ffb      	ldrb	r3, [r7, #31]
 8009342:	3301      	adds	r3, #1
 8009344:	77fb      	strb	r3, [r7, #31]
 8009346:	7ffa      	ldrb	r2, [r7, #31]
 8009348:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800934c:	429a      	cmp	r2, r3
 800934e:	d3ef      	bcc.n	8009330 <Wifi_WaitForString+0x90>
	va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8009350:	2300      	movs	r3, #0
 8009352:	61bb      	str	r3, [r7, #24]
 8009354:	e022      	b.n	800939c <Wifi_WaitForString+0xfc>
	{
		osDelay(50);
 8009356:	2032      	movs	r0, #50	; 0x32
 8009358:	f001 f981 	bl	800a65e <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 800935c:	2300      	movs	r3, #0
 800935e:	75fb      	strb	r3, [r7, #23]
 8009360:	e014      	b.n	800938c <Wifi_WaitForString+0xec>
		{			
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 8009362:	7dfa      	ldrb	r2, [r7, #23]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936a:	4619      	mov	r1, r3
 800936c:	4812      	ldr	r0, [pc, #72]	; (80093b8 <Wifi_WaitForString+0x118>)
 800936e:	f004 fc19 	bl	800dba4 <strstr>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d006      	beq.n	8009386 <Wifi_WaitForString+0xe6>
			{
				*result = mx+1;
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	3301      	adds	r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	701a      	strb	r2, [r3, #0]
				return true;
 8009382:	2301      	movs	r3, #1
 8009384:	e00f      	b.n	80093a6 <Wifi_WaitForString+0x106>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8009386:	7dfb      	ldrb	r3, [r7, #23]
 8009388:	3301      	adds	r3, #1
 800938a:	75fb      	strb	r3, [r7, #23]
 800938c:	7dfa      	ldrb	r2, [r7, #23]
 800938e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009392:	429a      	cmp	r2, r3
 8009394:	d3e5      	bcc.n	8009362 <Wifi_WaitForString+0xc2>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	3332      	adds	r3, #50	; 0x32
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d3d8      	bcc.n	8009356 <Wifi_WaitForString+0xb6>
			}				
		}				
	}
	// timeout
	return false;
 80093a4:	2300      	movs	r3, #0
 80093a6:	46b5      	mov	sp, r6
	
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3724      	adds	r7, #36	; 0x24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093b2:	b002      	add	sp, #8
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	200006f9 	.word	0x200006f9

080093bc <Wifi_ReturnString>:
//#########################################################################################################
bool	Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	460b      	mov	r3, r1
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <Wifi_ReturnString+0x18>
		return false;
 80093d0:	2300      	movs	r3, #0
 80093d2:	e02e      	b.n	8009432 <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <Wifi_ReturnString+0x22>
		return false;
 80093da:	2300      	movs	r3, #0
 80093dc:	e029      	b.n	8009432 <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 80093de:	4b17      	ldr	r3, [pc, #92]	; (800943c <Wifi_ReturnString+0x80>)
 80093e0:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	6978      	ldr	r0, [r7, #20]
 80093e6:	f004 fb81 	bl	800daec <strtok>
 80093ea:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d118      	bne.n	8009424 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	701a      	strb	r2, [r3, #0]
		return false;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e01a      	b.n	8009432 <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	2000      	movs	r0, #0
 8009400:	f004 fb74 	bl	800daec <strtok>
 8009404:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <Wifi_ReturnString+0x56>
			WantWhichOne--;
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	3b01      	subs	r3, #1
 8009410:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d105      	bne.n	8009424 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f004 fc5e 	bl	800dcdc <strcpy>
			return true;
 8009420:	2301      	movs	r3, #1
 8009422:	e006      	b.n	8009432 <Wifi_ReturnString+0x76>
	while (str != NULL)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e8      	bne.n	80093fc <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
	return false;	
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	200006f9 	.word	0x200006f9

08009440 <Wifi_ReturnStrings>:

//#########################################################################################################
bool	Wifi_ReturnStrings(char *InputString,char *SplitterChars,uint8_t CountOfParameter,...)
{
 8009440:	b40c      	push	{r2, r3}
 8009442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009446:	b089      	sub	sp, #36	; 0x24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	466b      	mov	r3, sp
 8009450:	461e      	mov	r6, r3
	if(CountOfParameter == 0)
 8009452:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <Wifi_ReturnStrings+0x1e>
		return false;
 800945a:	2300      	movs	r3, #0
 800945c:	e06f      	b.n	800953e <Wifi_ReturnStrings+0xfe>
	va_list tag;
	va_start (tag,CountOfParameter);
 800945e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009462:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8009464:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8009468:	460b      	mov	r3, r1
 800946a:	3b01      	subs	r3, #1
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	b2cb      	uxtb	r3, r1
 8009470:	2200      	movs	r2, #0
 8009472:	4698      	mov	r8, r3
 8009474:	4691      	mov	r9, r2
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	f04f 0300 	mov.w	r3, #0
 800947e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009482:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009486:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800948a:	b2cb      	uxtb	r3, r1
 800948c:	2200      	movs	r2, #0
 800948e:	461c      	mov	r4, r3
 8009490:	4615      	mov	r5, r2
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	f04f 0300 	mov.w	r3, #0
 800949a:	016b      	lsls	r3, r5, #5
 800949c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80094a0:	0162      	lsls	r2, r4, #5
 80094a2:	460b      	mov	r3, r1
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	3307      	adds	r3, #7
 80094a8:	08db      	lsrs	r3, r3, #3
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	ebad 0d03 	sub.w	sp, sp, r3
 80094b0:	466b      	mov	r3, sp
 80094b2:	3303      	adds	r3, #3
 80094b4:	089b      	lsrs	r3, r3, #2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80094ba:	2300      	movs	r3, #0
 80094bc:	77fb      	strb	r3, [r7, #31]
 80094be:	e00a      	b.n	80094d6 <Wifi_ReturnStrings+0x96>
		arg[i] = va_arg (tag, char *);	
 80094c0:	7ffa      	ldrb	r2, [r7, #31]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	1d19      	adds	r1, r3, #4
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	6819      	ldr	r1, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 80094d0:	7ffb      	ldrb	r3, [r7, #31]
 80094d2:	3301      	adds	r3, #1
 80094d4:	77fb      	strb	r3, [r7, #31]
 80094d6:	7ffa      	ldrb	r2, [r7, #31]
 80094d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80094dc:	429a      	cmp	r2, r3
 80094de:	d3ef      	bcc.n	80094c0 <Wifi_ReturnStrings+0x80>
  va_end (tag);
	
	char *str;
	str = strtok (InputString,SplitterChars);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f004 fb02 	bl	800daec <strtok>
 80094e8:	61b8      	str	r0, [r7, #24]
	if(str == NULL)
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <Wifi_ReturnStrings+0xb4>
		return false;
 80094f0:	2300      	movs	r3, #0
 80094f2:	e024      	b.n	800953e <Wifi_ReturnStrings+0xfe>
	uint8_t i=0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	75fb      	strb	r3, [r7, #23]
	while (str != NULL)
 80094f8:	e01d      	b.n	8009536 <Wifi_ReturnStrings+0xf6>
  {
    str = strtok (NULL,SplitterChars);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	2000      	movs	r0, #0
 80094fe:	f004 faf5 	bl	800daec <strtok>
 8009502:	61b8      	str	r0, [r7, #24]
		if(str != NULL)
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <Wifi_ReturnStrings+0xd4>
			CountOfParameter--;
 800950a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800950e:	3b01      	subs	r3, #1
 8009510:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		strcpy(arg[i],str);
 8009514:	7dfa      	ldrb	r2, [r7, #23]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951c:	69b9      	ldr	r1, [r7, #24]
 800951e:	4618      	mov	r0, r3
 8009520:	f004 fbdc 	bl	800dcdc <strcpy>
		i++;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	3301      	adds	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
		if(CountOfParameter==0)
 800952a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <Wifi_ReturnStrings+0xf6>
		{
			return true;
 8009532:	2301      	movs	r3, #1
 8009534:	e003      	b.n	800953e <Wifi_ReturnStrings+0xfe>
	while (str != NULL)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1de      	bne.n	80094fa <Wifi_ReturnStrings+0xba>
		}
  }
	return false;	
 800953c:	2300      	movs	r3, #0
 800953e:	46b5      	mov	sp, r6
	
}
 8009540:	4618      	mov	r0, r3
 8009542:	3724      	adds	r7, #36	; 0x24
 8009544:	46bd      	mov	sp, r7
 8009546:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800954a:	b002      	add	sp, #8
 800954c:	4770      	bx	lr
	...

08009550 <Wifi_ReturnInteger>:
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	460b      	mov	r3, r1
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	4619      	mov	r1, r3
 8009564:	480a      	ldr	r0, [pc, #40]	; (8009590 <Wifi_ReturnInteger+0x40>)
 8009566:	f7ff ff29 	bl	80093bc <Wifi_ReturnString>
 800956a:	4603      	mov	r3, r0
 800956c:	f083 0301 	eor.w	r3, r3, #1
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <Wifi_ReturnInteger+0x2a>
		return false;
 8009576:	2300      	movs	r3, #0
 8009578:	e006      	b.n	8009588 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 800957a:	4805      	ldr	r0, [pc, #20]	; (8009590 <Wifi_ReturnInteger+0x40>)
 800957c:	f003 fb86 	bl	800cc8c <atoi>
 8009580:	4602      	mov	r2, r0
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	601a      	str	r2, [r3, #0]
	return true;
 8009586:	2301      	movs	r3, #1
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	200006f9 	.word	0x200006f9

08009594 <Wifi_RxClear>:
  }
  *dst = '\0';
}
//#########################################################################################################
void	Wifi_RxClear(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 8009598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800959c:	2100      	movs	r1, #0
 800959e:	4807      	ldr	r0, [pc, #28]	; (80095bc <Wifi_RxClear+0x28>)
 80095a0:	f004 fa69 	bl	800da76 <memset>
	Wifi.RxIndex=0;	
 80095a4:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <Wifi_RxClear+0x2c>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80095ac:	2201      	movs	r2, #1
 80095ae:	4904      	ldr	r1, [pc, #16]	; (80095c0 <Wifi_RxClear+0x2c>)
 80095b0:	4804      	ldr	r0, [pc, #16]	; (80095c4 <Wifi_RxClear+0x30>)
 80095b2:	f7fe fb85 	bl	8007cc0 <HAL_UART_Receive_IT>
}
 80095b6:	bf00      	nop
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200006f9 	.word	0x200006f9
 80095c0:	200006f8 	.word	0x200006f8
 80095c4:	20000644 	.word	0x20000644

080095c8 <Wifi_TxClear>:
//#########################################################################################################
void	Wifi_TxClear(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 80095cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095d0:	2100      	movs	r1, #0
 80095d2:	4802      	ldr	r0, [pc, #8]	; (80095dc <Wifi_TxClear+0x14>)
 80095d4:	f004 fa4f 	bl	800da76 <memset>
}
 80095d8:	bf00      	nop
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	200008f9 	.word	0x200008f9

080095e0 <Wifi_RxCallBack>:
int i= 0;
//#########################################################################################################
void	Wifi_RxCallBack(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 80095e4:	4b9d      	ldr	r3, [pc, #628]	; (800985c <Wifi_RxCallBack+0x27c>)
 80095e6:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 80095ea:	f083 0301 	eor.w	r3, r3, #1
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d018      	beq.n	8009626 <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 80095f4:	4b99      	ldr	r3, [pc, #612]	; (800985c <Wifi_RxCallBack+0x27c>)
 80095f6:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80095fa:	4619      	mov	r1, r3
 80095fc:	4b97      	ldr	r3, [pc, #604]	; (800985c <Wifi_RxCallBack+0x27c>)
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	4b96      	ldr	r3, [pc, #600]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009602:	440b      	add	r3, r1
 8009604:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8009606:	4b95      	ldr	r3, [pc, #596]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009608:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800960c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009610:	f080 80ab 	bcs.w	800976a <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 8009614:	4b91      	ldr	r3, [pc, #580]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009616:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800961a:	3301      	adds	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	4b8f      	ldr	r3, [pc, #572]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009620:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8009624:	e0a1      	b.n	800976a <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8009626:	f7fa fcbf 	bl	8003fa8 <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	4b8b      	ldr	r3, [pc, #556]	; (800985c <Wifi_RxCallBack+0x27c>)
 800962e:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b32      	cmp	r3, #50	; 0x32
 8009636:	d903      	bls.n	8009640 <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8009638:	4b88      	ldr	r3, [pc, #544]	; (800985c <Wifi_RxCallBack+0x27c>)
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 8009640:	4b86      	ldr	r3, [pc, #536]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009642:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8009646:	2b00      	cmp	r3, #0
 8009648:	d167      	bne.n	800971a <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 800964a:	4b84      	ldr	r3, [pc, #528]	; (800985c <Wifi_RxCallBack+0x27c>)
 800964c:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8009650:	f083 0301 	eor.w	r3, r3, #1
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d028      	beq.n	80096ac <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 800965a:	4b80      	ldr	r3, [pc, #512]	; (800985c <Wifi_RxCallBack+0x27c>)
 800965c:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8009660:	4619      	mov	r1, r3
 8009662:	4b7e      	ldr	r3, [pc, #504]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	4b7d      	ldr	r3, [pc, #500]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009668:	440b      	add	r3, r1
 800966a:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 800966e:	4b7b      	ldr	r3, [pc, #492]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009670:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8009674:	3301      	adds	r3, #1
 8009676:	b2da      	uxtb	r2, r3
 8009678:	4b78      	ldr	r3, [pc, #480]	; (800985c <Wifi_RxCallBack+0x27c>)
 800967a:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 800967e:	4b77      	ldr	r3, [pc, #476]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009680:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8009684:	3b01      	subs	r3, #1
 8009686:	4a75      	ldr	r2, [pc, #468]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009688:	4413      	add	r3, r2
 800968a:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 800968e:	2b3a      	cmp	r3, #58	; 0x3a
 8009690:	d16b      	bne.n	800976a <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 8009692:	4b72      	ldr	r3, [pc, #456]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 800969a:	4871      	ldr	r0, [pc, #452]	; (8009860 <Wifi_RxCallBack+0x280>)
 800969c:	f003 faf6 	bl	800cc8c <atoi>
 80096a0:	4603      	mov	r3, r0
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	4b6d      	ldr	r3, [pc, #436]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096a6:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 80096aa:	e05e      	b.n	800976a <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 80096ac:	4b6b      	ldr	r3, [pc, #428]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096ae:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80096b2:	4619      	mov	r1, r3
 80096b4:	4b69      	ldr	r3, [pc, #420]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096b6:	781a      	ldrb	r2, [r3, #0]
 80096b8:	4b68      	ldr	r3, [pc, #416]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096ba:	440b      	add	r3, r1
 80096bc:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 80096c0:	4b66      	ldr	r3, [pc, #408]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096c2:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80096c6:	3301      	adds	r3, #1
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	4b64      	ldr	r3, [pc, #400]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096cc:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 80096d0:	4b62      	ldr	r3, [pc, #392]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096d2:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 80096d6:	2b2c      	cmp	r3, #44	; 0x2c
 80096d8:	d107      	bne.n	80096ea <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 80096da:	4b60      	ldr	r3, [pc, #384]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096dc:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 80096e0:	3b30      	subs	r3, #48	; 0x30
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	4b5d      	ldr	r3, [pc, #372]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096e6:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 80096ea:	4b5c      	ldr	r3, [pc, #368]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096ec:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d93a      	bls.n	800976a <Wifi_RxCallBack+0x18a>
 80096f4:	4b59      	ldr	r3, [pc, #356]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096f6:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80096fa:	3b01      	subs	r3, #1
 80096fc:	4a57      	ldr	r2, [pc, #348]	; (800985c <Wifi_RxCallBack+0x27c>)
 80096fe:	4413      	add	r3, r2
 8009700:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8009704:	2b3a      	cmp	r3, #58	; 0x3a
 8009706:	d130      	bne.n	800976a <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8009708:	4856      	ldr	r0, [pc, #344]	; (8009864 <Wifi_RxCallBack+0x284>)
 800970a:	f003 fabf 	bl	800cc8c <atoi>
 800970e:	4603      	mov	r3, r0
 8009710:	b29a      	uxth	r2, r3
 8009712:	4b52      	ldr	r3, [pc, #328]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009714:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8009718:	e027      	b.n	800976a <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 800971a:	4b50      	ldr	r3, [pc, #320]	; (800985c <Wifi_RxCallBack+0x27c>)
 800971c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8009720:	4619      	mov	r1, r3
 8009722:	4b4e      	ldr	r3, [pc, #312]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009724:	781a      	ldrb	r2, [r3, #0]
 8009726:	4b4d      	ldr	r3, [pc, #308]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009728:	440b      	add	r3, r1
 800972a:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 800972e:	4b4b      	ldr	r3, [pc, #300]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009730:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8009734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009738:	d207      	bcs.n	800974a <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 800973a:	4b48      	ldr	r3, [pc, #288]	; (800985c <Wifi_RxCallBack+0x27c>)
 800973c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8009740:	3301      	adds	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	4b45      	ldr	r3, [pc, #276]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009746:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 800974a:	4b44      	ldr	r3, [pc, #272]	; (800985c <Wifi_RxCallBack+0x27c>)
 800974c:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 8009750:	4b42      	ldr	r3, [pc, #264]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009752:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8009756:	429a      	cmp	r2, r3
 8009758:	d307      	bcc.n	800976a <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;         
 800975a:	4b40      	ldr	r3, [pc, #256]	; (800985c <Wifi_RxCallBack+0x27c>)
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 8009762:	4b3e      	ldr	r3, [pc, #248]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 800976a:	2201      	movs	r2, #1
 800976c:	493b      	ldr	r1, [pc, #236]	; (800985c <Wifi_RxCallBack+0x27c>)
 800976e:	483e      	ldr	r0, [pc, #248]	; (8009868 <Wifi_RxCallBack+0x288>)
 8009770:	f7fe faa6 	bl	8007cc0 <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 8009774:	4b39      	ldr	r3, [pc, #228]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009776:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800977a:	2b04      	cmp	r3, #4
 800977c:	d966      	bls.n	800984c <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 800977e:	4b37      	ldr	r3, [pc, #220]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009780:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8009784:	3b04      	subs	r3, #4
 8009786:	4a35      	ldr	r2, [pc, #212]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009788:	4413      	add	r3, r2
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	2b2b      	cmp	r3, #43	; 0x2b
 800978e:	d15d      	bne.n	800984c <Wifi_RxCallBack+0x26c>
 8009790:	4b32      	ldr	r3, [pc, #200]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009792:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8009796:	3b03      	subs	r3, #3
 8009798:	4a30      	ldr	r2, [pc, #192]	; (800985c <Wifi_RxCallBack+0x27c>)
 800979a:	4413      	add	r3, r2
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b49      	cmp	r3, #73	; 0x49
 80097a0:	d154      	bne.n	800984c <Wifi_RxCallBack+0x26c>
 80097a2:	4b2e      	ldr	r3, [pc, #184]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097a4:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80097a8:	3b02      	subs	r3, #2
 80097aa:	4a2c      	ldr	r2, [pc, #176]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097ac:	4413      	add	r3, r2
 80097ae:	785b      	ldrb	r3, [r3, #1]
 80097b0:	2b50      	cmp	r3, #80	; 0x50
 80097b2:	d14b      	bne.n	800984c <Wifi_RxCallBack+0x26c>
 80097b4:	4b29      	ldr	r3, [pc, #164]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097b6:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80097ba:	3b01      	subs	r3, #1
 80097bc:	4a27      	ldr	r2, [pc, #156]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097be:	4413      	add	r3, r2
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	2b44      	cmp	r3, #68	; 0x44
 80097c4:	d142      	bne.n	800984c <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 80097c6:	2208      	movs	r2, #8
 80097c8:	2100      	movs	r1, #0
 80097ca:	4828      	ldr	r0, [pc, #160]	; (800986c <Wifi_RxCallBack+0x28c>)
 80097cc:	f004 f953 	bl	800da76 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 80097d0:	4b22      	ldr	r3, [pc, #136]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097d2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80097d6:	3b04      	subs	r3, #4
 80097d8:	4a20      	ldr	r2, [pc, #128]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097da:	4413      	add	r3, r2
 80097dc:	2200      	movs	r2, #0
 80097de:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 80097e0:	4b1e      	ldr	r3, [pc, #120]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097e2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80097e6:	3b03      	subs	r3, #3
 80097e8:	4a1c      	ldr	r2, [pc, #112]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097ea:	4413      	add	r3, r2
 80097ec:	2200      	movs	r2, #0
 80097ee:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 80097f0:	4b1a      	ldr	r3, [pc, #104]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097f2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80097f6:	3b02      	subs	r3, #2
 80097f8:	4a18      	ldr	r2, [pc, #96]	; (800985c <Wifi_RxCallBack+0x27c>)
 80097fa:	4413      	add	r3, r2
 80097fc:	2200      	movs	r2, #0
 80097fe:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8009800:	4b16      	ldr	r3, [pc, #88]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009802:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8009806:	3b01      	subs	r3, #1
 8009808:	4a14      	ldr	r2, [pc, #80]	; (800985c <Wifi_RxCallBack+0x27c>)
 800980a:	4413      	add	r3, r2
 800980c:	2200      	movs	r2, #0
 800980e:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8009810:	4b12      	ldr	r3, [pc, #72]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009812:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8009816:	3b04      	subs	r3, #4
 8009818:	b29a      	uxth	r2, r3
 800981a:	4b10      	ldr	r3, [pc, #64]	; (800985c <Wifi_RxCallBack+0x27c>)
 800981c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 8009820:	4b0e      	ldr	r3, [pc, #56]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009822:	2200      	movs	r2, #0
 8009824:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <Wifi_RxCallBack+0x27c>)
 800982a:	2200      	movs	r2, #0
 800982c:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 8009838:	4b08      	ldr	r3, [pc, #32]	; (800985c <Wifi_RxCallBack+0x27c>)
 800983a:	2200      	movs	r2, #0
 800983c:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 8009840:	f7fa fbb2 	bl	8003fa8 <HAL_GetTick>
 8009844:	4603      	mov	r3, r0
 8009846:	4a05      	ldr	r2, [pc, #20]	; (800985c <Wifi_RxCallBack+0x27c>)
 8009848:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  i++;
 800984c:	4b08      	ldr	r3, [pc, #32]	; (8009870 <Wifi_RxCallBack+0x290>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	4a07      	ldr	r2, [pc, #28]	; (8009870 <Wifi_RxCallBack+0x290>)
 8009854:	6013      	str	r3, [r2, #0]
  //--- check +IPD in At command buffer  
}
 8009856:	bf00      	nop
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	200006f8 	.word	0x200006f8
 8009860:	20000dfd 	.word	0x20000dfd
 8009864:	20000dff 	.word	0x20000dff
 8009868:	20000644 	.word	0x20000644
 800986c:	20000dfc 	.word	0x20000dfc
 8009870:	20000fb0 	.word	0x20000fb0

08009874 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void WifiTask(void const * argument)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	osDelay(3000);
 800987c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009880:	f000 feed 	bl	800a65e <osDelay>
	Wifi_SendStringAndWait("AT\r\n",1000);
 8009884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009888:	481a      	ldr	r0, [pc, #104]	; (80098f4 <WifiTask+0x80>)
 800988a:	f7ff fce9 	bl	8009260 <Wifi_SendStringAndWait>
	Wifi_SetRfPower(82);
 800988e:	2052      	movs	r0, #82	; 0x52
 8009890:	f000 f88e 	bl	80099b0 <Wifi_SetRfPower>
	Wifi_TcpIp_GetMultiConnection();
 8009894:	f000 fc5e 	bl	800a154 <Wifi_TcpIp_GetMultiConnection>
	Wifi_TcpIp_Close(0);
 8009898:	2000      	movs	r0, #0
 800989a:	f000 fd65 	bl	800a368 <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(1);
 800989e:	2001      	movs	r0, #1
 80098a0:	f000 fd62 	bl	800a368 <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(2);
 80098a4:	2002      	movs	r0, #2
 80098a6:	f000 fd5f 	bl	800a368 <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(3);
 80098aa:	2003      	movs	r0, #3
 80098ac:	f000 fd5c 	bl	800a368 <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(4);
 80098b0:	2004      	movs	r0, #4
 80098b2:	f000 fd59 	bl	800a368 <Wifi_TcpIp_Close>
	Wifi_TcpIp_SetMultiConnection(true);
 80098b6:	2001      	movs	r0, #1
 80098b8:	f000 fbf8 	bl	800a0ac <Wifi_TcpIp_SetMultiConnection>
	Wifi_GetMode();
 80098bc:	f000 f91a 	bl	8009af4 <Wifi_GetMode>
	Wifi_Station_DhcpIsEnable();
 80098c0:	f000 fa7c 	bl	8009dbc <Wifi_Station_DhcpIsEnable>
	Wifi_UserInit();
 80098c4:	f7f8 fd14 	bl	80022f0 <Wifi_UserInit>
	//Wifi_GetMyIp();

	//#######################
	while(1)
	{
		Wifi_GetMyIp();
 80098c8:	f000 f974 	bl	8009bb4 <Wifi_GetMyIp>
		//if((Wifi.Mode==WifiMode_SoftAp) || (Wifi.Mode==WifiMode_StationAndSoftAp))
		//Wifi_SoftAp_GetConnectedDevices();
		Wifi_TcpIp_GetConnectionStatus();
 80098cc:	f000 fb04 	bl	8009ed8 <Wifi_TcpIp_GetConnectionStatus>
		Wifi_RxClear();
 80098d0:	f7ff fe60 	bl	8009594 <Wifi_RxClear>
		for(uint8_t i=0; i< 100; i++)
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
 80098d8:	e005      	b.n	80098e6 <WifiTask+0x72>
					Wifi_UserGetUdpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);
				  if((strstr(Wifi.TcpIpConnections[ii].Type,"TCP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
					Wifi_UserGetTcpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);
				}
			}*/
			osDelay(10);
 80098da:	200a      	movs	r0, #10
 80098dc:	f000 febf 	bl	800a65e <osDelay>
		for(uint8_t i=0; i< 100; i++)
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	3301      	adds	r3, #1
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	2b63      	cmp	r3, #99	; 0x63
 80098ea:	d9f6      	bls.n	80098da <WifiTask+0x66>
		}
		Wifi_UserProcess();
 80098ec:	f7f8 fc78 	bl	80021e0 <Wifi_UserProcess>
		Wifi_GetMyIp();
 80098f0:	e7ea      	b.n	80098c8 <WifiTask+0x54>
 80098f2:	bf00      	nop
 80098f4:	080105cc 	.word	0x080105cc

080098f8 <HAL_UART_RxCpltCallback>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(Debug_Pin_GPIO_Port, Debug_Pin_Pin, 1);
 8009900:	2201      	movs	r2, #1
 8009902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009906:	4807      	ldr	r0, [pc, #28]	; (8009924 <HAL_UART_RxCpltCallback+0x2c>)
 8009908:	f7fc f84c 	bl	80059a4 <HAL_GPIO_WritePin>
	  Wifi_RxCallBack();
 800990c:	f7ff fe68 	bl	80095e0 <Wifi_RxCallBack>
	  HAL_GPIO_WritePin(Debug_Pin_GPIO_Port, Debug_Pin_Pin, 0);
 8009910:	2200      	movs	r2, #0
 8009912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009916:	4803      	ldr	r0, [pc, #12]	; (8009924 <HAL_UART_RxCpltCallback+0x2c>)
 8009918:	f7fc f844 	bl	80059a4 <HAL_GPIO_WritePin>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	48000800 	.word	0x48000800

08009928 <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void	Wifi_Init(osPriority	Priority)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08c      	sub	sp, #48	; 0x30
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8009932:	2201      	movs	r2, #1
 8009934:	4918      	ldr	r1, [pc, #96]	; (8009998 <Wifi_Init+0x70>)
 8009936:	4819      	ldr	r0, [pc, #100]	; (800999c <Wifi_Init+0x74>)
 8009938:	f7fe f9c2 	bl	8007cc0 <HAL_UART_Receive_IT>
	Wifi_RxClear();
 800993c:	f7ff fe2a 	bl	8009594 <Wifi_RxClear>
	Wifi_TxClear();
 8009940:	f7ff fe42 	bl	80095c8 <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8009944:	2300      	movs	r3, #0
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28
 8009948:	2300      	movs	r3, #0
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 800994c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009950:	2101      	movs	r1, #1
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fe97 	bl	800a686 <osSemaphoreCreate>
 8009958:	4603      	mov	r3, r0
 800995a:	4a11      	ldr	r2, [pc, #68]	; (80099a0 <Wifi_Init+0x78>)
 800995c:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 800995e:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <Wifi_Init+0x7c>)
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <Wifi_Init+0x80>)
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	82bb      	strh	r3, [r7, #20]
 800996a:	2300      	movs	r3, #0
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009972:	61fb      	str	r3, [r7, #28]
 8009974:	2300      	movs	r3, #0
 8009976:	623b      	str	r3, [r7, #32]
 8009978:	2300      	movs	r3, #0
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);
 800997c:	f107 030c 	add.w	r3, r7, #12
 8009980:	2100      	movs	r1, #0
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fe1f 	bl	800a5c6 <osThreadCreate>
 8009988:	4603      	mov	r3, r0
 800998a:	4a08      	ldr	r2, [pc, #32]	; (80099ac <Wifi_Init+0x84>)
 800998c:	6013      	str	r3, [r2, #0]


	//osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
	//defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
}
 800998e:	bf00      	nop
 8009990:	3730      	adds	r7, #48	; 0x30
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	200006f8 	.word	0x200006f8
 800999c:	20000644 	.word	0x20000644
 80099a0:	200006f4 	.word	0x200006f4
 80099a4:	080105d4 	.word	0x080105d4
 80099a8:	08009875 	.word	0x08009875
 80099ac:	200006f0 	.word	0x200006f0

080099b0 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	4603      	mov	r3, r0
 80099b8:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80099ba:	4b1f      	ldr	r3, [pc, #124]	; (8009a38 <Wifi_SetRfPower+0x88>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f04f 31ff 	mov.w	r1, #4294967295
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fe92 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80099cc:	f7ff fde2 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	461a      	mov	r2, r3
 80099d4:	4919      	ldr	r1, [pc, #100]	; (8009a3c <Wifi_SetRfPower+0x8c>)
 80099d6:	481a      	ldr	r0, [pc, #104]	; (8009a40 <Wifi_SetRfPower+0x90>)
 80099d8:	f003 ffbc 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80099dc:	4818      	ldr	r0, [pc, #96]	; (8009a40 <Wifi_SetRfPower+0x90>)
 80099de:	f7ff fc2d 	bl	800923c <Wifi_SendString>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f083 0301 	eor.w	r3, r3, #1
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d115      	bne.n	8009a1a <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80099ee:	f107 010e 	add.w	r1, r7, #14
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <Wifi_SetRfPower+0x94>)
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <Wifi_SetRfPower+0x98>)
 80099f8:	2202      	movs	r2, #2
 80099fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099fe:	f7ff fc4f 	bl	80092a0 <Wifi_WaitForString>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f083 0301 	eor.w	r3, r3, #1
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d107      	bne.n	8009a1e <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d006      	beq.n	8009a22 <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
 8009a18:	e004      	b.n	8009a24 <Wifi_SetRfPower+0x74>
			break;
 8009a1a:	bf00      	nop
 8009a1c:	e002      	b.n	8009a24 <Wifi_SetRfPower+0x74>
			break;
 8009a1e:	bf00      	nop
 8009a20:	e000      	b.n	8009a24 <Wifi_SetRfPower+0x74>
			break;			
 8009a22:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8009a24:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <Wifi_SetRfPower+0x88>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fead 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	200006f4 	.word	0x200006f4
 8009a3c:	0801062c 	.word	0x0801062c
 8009a40:	200008f9 	.word	0x200008f9
 8009a44:	080105f4 	.word	0x080105f4
 8009a48:	080105f0 	.word	0x080105f0

08009a4c <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8009a56:	4b21      	ldr	r3, [pc, #132]	; (8009adc <Wifi_SetMode+0x90>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fe44 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8009a68:	f7ff fd94 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	491b      	ldr	r1, [pc, #108]	; (8009ae0 <Wifi_SetMode+0x94>)
 8009a72:	481c      	ldr	r0, [pc, #112]	; (8009ae4 <Wifi_SetMode+0x98>)
 8009a74:	f003 ff6e 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009a78:	481a      	ldr	r0, [pc, #104]	; (8009ae4 <Wifi_SetMode+0x98>)
 8009a7a:	f7ff fbdf 	bl	800923c <Wifi_SendString>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f083 0301 	eor.w	r3, r3, #1
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d119      	bne.n	8009abe <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8009a8a:	f107 010e 	add.w	r1, r7, #14
 8009a8e:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <Wifi_SetMode+0x9c>)
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <Wifi_SetMode+0xa0>)
 8009a94:	2202      	movs	r2, #2
 8009a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a9a:	f7ff fc01 	bl	80092a0 <Wifi_WaitForString>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f083 0301 	eor.w	r3, r3, #1
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10b      	bne.n	8009ac2 <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d00a      	beq.n	8009ac6 <Wifi_SetMode+0x7a>
			break;			
		Wifi.Mode = WifiMode_;
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <Wifi_SetMode+0xa4>)
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;	
 8009ab8:	2301      	movs	r3, #1
 8009aba:	73fb      	strb	r3, [r7, #15]
 8009abc:	e004      	b.n	8009ac8 <Wifi_SetMode+0x7c>
			break;
 8009abe:	bf00      	nop
 8009ac0:	e002      	b.n	8009ac8 <Wifi_SetMode+0x7c>
			break;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <Wifi_SetMode+0x7c>
			break;			
 8009ac6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <Wifi_SetMode+0x90>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fe5b 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	200006f4 	.word	0x200006f4
 8009ae0:	0801063c 	.word	0x0801063c
 8009ae4:	200008f9 	.word	0x200008f9
 8009ae8:	080105f4 	.word	0x080105f4
 8009aec:	080105f0 	.word	0x080105f0
 8009af0:	200006f8 	.word	0x200006f8

08009af4 <Wifi_GetMode>:
//#########################################################################################################
bool	Wifi_GetMode(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8009afa:	4b27      	ldr	r3, [pc, #156]	; (8009b98 <Wifi_GetMode+0xa4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f04f 31ff 	mov.w	r1, #4294967295
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fdf2 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8009b0c:	f7ff fd42 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8009b10:	4922      	ldr	r1, [pc, #136]	; (8009b9c <Wifi_GetMode+0xa8>)
 8009b12:	4823      	ldr	r0, [pc, #140]	; (8009ba0 <Wifi_GetMode+0xac>)
 8009b14:	f003 ff1e 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009b18:	4821      	ldr	r0, [pc, #132]	; (8009ba0 <Wifi_GetMode+0xac>)
 8009b1a:	f7ff fb8f 	bl	800923c <Wifi_SendString>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f083 0301 	eor.w	r3, r3, #1
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d126      	bne.n	8009b78 <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8009b2a:	1db9      	adds	r1, r7, #6
 8009b2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ba4 <Wifi_GetMode+0xb0>)
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <Wifi_GetMode+0xb4>)
 8009b32:	2202      	movs	r2, #2
 8009b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009b38:	f7ff fbb2 	bl	80092a0 <Wifi_WaitForString>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f083 0301 	eor.w	r3, r3, #1
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d119      	bne.n	8009b7c <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 8009b48:	79bb      	ldrb	r3, [r7, #6]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d018      	beq.n	8009b80 <Wifi_GetMode+0x8c>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 8009b4e:	1dbb      	adds	r3, r7, #6
 8009b50:	4a16      	ldr	r2, [pc, #88]	; (8009bac <Wifi_GetMode+0xb8>)
 8009b52:	2101      	movs	r1, #1
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7ff fcfb 	bl	8009550 <Wifi_ReturnInteger>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8009b60:	79ba      	ldrb	r2, [r7, #6]
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <Wifi_GetMode+0xbc>)
 8009b64:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8009b68:	e003      	b.n	8009b72 <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 8009b6a:	4b11      	ldr	r3, [pc, #68]	; (8009bb0 <Wifi_GetMode+0xbc>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;	
 8009b72:	2301      	movs	r3, #1
 8009b74:	71fb      	strb	r3, [r7, #7]
 8009b76:	e004      	b.n	8009b82 <Wifi_GetMode+0x8e>
			break;
 8009b78:	bf00      	nop
 8009b7a:	e002      	b.n	8009b82 <Wifi_GetMode+0x8e>
			break;
 8009b7c:	bf00      	nop
 8009b7e:	e000      	b.n	8009b82 <Wifi_GetMode+0x8e>
			break;			
 8009b80:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <Wifi_GetMode+0xa4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fdfe 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200006f4 	.word	0x200006f4
 8009b9c:	08010650 	.word	0x08010650
 8009ba0:	200008f9 	.word	0x200008f9
 8009ba4:	080105f4 	.word	0x080105f4
 8009ba8:	080105f0 	.word	0x080105f0
 8009bac:	08010664 	.word	0x08010664
 8009bb0:	200006f8 	.word	0x200006f8

08009bb4 <Wifi_GetMyIp>:
//#########################################################################################################
bool	Wifi_GetMyIp(void)
{	
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8009bba:	4b42      	ldr	r3, [pc, #264]	; (8009cc4 <Wifi_GetMyIp+0x110>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fd92 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8009bcc:	f7ff fce2 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIFSR\r\n");
 8009bd0:	493d      	ldr	r1, [pc, #244]	; (8009cc8 <Wifi_GetMyIp+0x114>)
 8009bd2:	483e      	ldr	r0, [pc, #248]	; (8009ccc <Wifi_GetMyIp+0x118>)
 8009bd4:	f003 febe 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009bd8:	483c      	ldr	r0, [pc, #240]	; (8009ccc <Wifi_GetMyIp+0x118>)
 8009bda:	f7ff fb2f 	bl	800923c <Wifi_SendString>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f083 0301 	eor.w	r3, r3, #1
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d153      	bne.n	8009c92 <Wifi_GetMyIp+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8009bea:	1df9      	adds	r1, r7, #7
 8009bec:	4b38      	ldr	r3, [pc, #224]	; (8009cd0 <Wifi_GetMyIp+0x11c>)
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4b38      	ldr	r3, [pc, #224]	; (8009cd4 <Wifi_GetMyIp+0x120>)
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009bf8:	f7ff fb52 	bl	80092a0 <Wifi_WaitForString>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f083 0301 	eor.w	r3, r3, #1
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d146      	bne.n	8009c96 <Wifi_GetMyIp+0xe2>
			break;
		if(result == 2)
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d045      	beq.n	8009c9a <Wifi_GetMyIp+0xe6>
			break;		
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:APIP,\"%[^\"]",Wifi.MyIP);
 8009c0e:	4a32      	ldr	r2, [pc, #200]	; (8009cd8 <Wifi_GetMyIp+0x124>)
 8009c10:	4932      	ldr	r1, [pc, #200]	; (8009cdc <Wifi_GetMyIp+0x128>)
 8009c12:	4833      	ldr	r0, [pc, #204]	; (8009ce0 <Wifi_GetMyIp+0x12c>)
 8009c14:	f003 febe 	bl	800d994 <siscanf>
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:STAIP,\"%[^\"]",Wifi.MyIP);
 8009c18:	4a2f      	ldr	r2, [pc, #188]	; (8009cd8 <Wifi_GetMyIp+0x124>)
 8009c1a:	4932      	ldr	r1, [pc, #200]	; (8009ce4 <Wifi_GetMyIp+0x130>)
 8009c1c:	4830      	ldr	r0, [pc, #192]	; (8009ce0 <Wifi_GetMyIp+0x12c>)
 8009c1e:	f003 feb9 	bl	800d994 <siscanf>
    
		Wifi_RxClear();
 8009c22:	f7ff fcb7 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTA?\r\n");
 8009c26:	4930      	ldr	r1, [pc, #192]	; (8009ce8 <Wifi_GetMyIp+0x134>)
 8009c28:	4828      	ldr	r0, [pc, #160]	; (8009ccc <Wifi_GetMyIp+0x118>)
 8009c2a:	f003 fe93 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009c2e:	4827      	ldr	r0, [pc, #156]	; (8009ccc <Wifi_GetMyIp+0x118>)
 8009c30:	f7ff fb04 	bl	800923c <Wifi_SendString>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f083 0301 	eor.w	r3, r3, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d12e      	bne.n	8009c9e <Wifi_GetMyIp+0xea>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8009c40:	1df9      	adds	r1, r7, #7
 8009c42:	4b23      	ldr	r3, [pc, #140]	; (8009cd0 <Wifi_GetMyIp+0x11c>)
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <Wifi_GetMyIp+0x120>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c4e:	f7ff fb27 	bl	80092a0 <Wifi_WaitForString>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f083 0301 	eor.w	r3, r3, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d121      	bne.n	8009ca2 <Wifi_GetMyIp+0xee>
			break;
		if(result == 2)
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d020      	beq.n	8009ca6 <Wifi_GetMyIp+0xf2>
			break;	
    
    char *str=strstr((char*)Wifi.RxBuffer,"gateway:");
 8009c64:	4921      	ldr	r1, [pc, #132]	; (8009cec <Wifi_GetMyIp+0x138>)
 8009c66:	481e      	ldr	r0, [pc, #120]	; (8009ce0 <Wifi_GetMyIp+0x12c>)
 8009c68:	f003 ff9c 	bl	800dba4 <strstr>
 8009c6c:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01a      	beq.n	8009caa <Wifi_GetMyIp+0xf6>
      break;
    if(Wifi_ReturnStrings(str,"\"",1,Wifi.MyGateWay)==false)
 8009c74:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <Wifi_GetMyIp+0x13c>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	491e      	ldr	r1, [pc, #120]	; (8009cf4 <Wifi_GetMyIp+0x140>)
 8009c7a:	68b8      	ldr	r0, [r7, #8]
 8009c7c:	f7ff fbe0 	bl	8009440 <Wifi_ReturnStrings>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f083 0301 	eor.w	r3, r3, #1
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d110      	bne.n	8009cae <Wifi_GetMyIp+0xfa>
      break;    
    
		returnVal=true;	
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
 8009c90:	e00e      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
			break;
 8009c92:	bf00      	nop
 8009c94:	e00c      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
			break;
 8009c96:	bf00      	nop
 8009c98:	e00a      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
			break;		
 8009c9a:	bf00      	nop
 8009c9c:	e008      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
			break;
 8009c9e:	bf00      	nop
 8009ca0:	e006      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
			break;
 8009ca2:	bf00      	nop
 8009ca4:	e004      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
			break;	
 8009ca6:	bf00      	nop
 8009ca8:	e002      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
      break;
 8009caa:	bf00      	nop
 8009cac:	e000      	b.n	8009cb0 <Wifi_GetMyIp+0xfc>
      break;    
 8009cae:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <Wifi_GetMyIp+0x110>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fd67 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	200006f4 	.word	0x200006f4
 8009cc8:	08010668 	.word	0x08010668
 8009ccc:	200008f9 	.word	0x200008f9
 8009cd0:	080105f4 	.word	0x080105f4
 8009cd4:	080105f0 	.word	0x080105f0
 8009cd8:	20000e13 	.word	0x20000e13
 8009cdc:	08010674 	.word	0x08010674
 8009ce0:	200006f9 	.word	0x200006f9
 8009ce4:	08010694 	.word	0x08010694
 8009ce8:	080106b4 	.word	0x080106b4
 8009cec:	080106c4 	.word	0x080106c4
 8009cf0:	20000e23 	.word	0x20000e23
 8009cf4:	080106d0 	.word	0x080106d0

08009cf8 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8009d04:	4b26      	ldr	r3, [pc, #152]	; (8009da0 <Wifi_Station_ConnectToAp+0xa8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f04f 31ff 	mov.w	r1, #4294967295
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fced 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 8009d16:	f7ff fc3d 	bl	8009594 <Wifi_RxClear>
		if(MAC==NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d106      	bne.n	8009d2e <Wifi_Station_ConnectToAp+0x36>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	491f      	ldr	r1, [pc, #124]	; (8009da4 <Wifi_Station_ConnectToAp+0xac>)
 8009d26:	4820      	ldr	r0, [pc, #128]	; (8009da8 <Wifi_Station_ConnectToAp+0xb0>)
 8009d28:	f003 fe14 	bl	800d954 <siprintf>
 8009d2c:	e007      	b.n	8009d3e <Wifi_Station_ConnectToAp+0x46>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	491d      	ldr	r1, [pc, #116]	; (8009dac <Wifi_Station_ConnectToAp+0xb4>)
 8009d38:	481b      	ldr	r0, [pc, #108]	; (8009da8 <Wifi_Station_ConnectToAp+0xb0>)
 8009d3a:	f003 fe0b 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009d3e:	481a      	ldr	r0, [pc, #104]	; (8009da8 <Wifi_Station_ConnectToAp+0xb0>)
 8009d40:	f7ff fa7c 	bl	800923c <Wifi_SendString>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f083 0301 	eor.w	r3, r3, #1
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d117      	bne.n	8009d80 <Wifi_Station_ConnectToAp+0x88>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 8009d50:	f107 0116 	add.w	r1, r7, #22
 8009d54:	4b16      	ldr	r3, [pc, #88]	; (8009db0 <Wifi_Station_ConnectToAp+0xb8>)
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	4b16      	ldr	r3, [pc, #88]	; (8009db4 <Wifi_Station_ConnectToAp+0xbc>)
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	4b16      	ldr	r3, [pc, #88]	; (8009db8 <Wifi_Station_ConnectToAp+0xc0>)
 8009d5e:	2203      	movs	r2, #3
 8009d60:	f64e 2060 	movw	r0, #60000	; 0xea60
 8009d64:	f7ff fa9c 	bl	80092a0 <Wifi_WaitForString>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f083 0301 	eor.w	r3, r3, #1
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d107      	bne.n	8009d84 <Wifi_Station_ConnectToAp+0x8c>
			break;
		if( result > 1)
 8009d74:	7dbb      	ldrb	r3, [r7, #22]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d806      	bhi.n	8009d88 <Wifi_Station_ConnectToAp+0x90>
			break;		
		returnVal=true;	
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	75fb      	strb	r3, [r7, #23]
 8009d7e:	e004      	b.n	8009d8a <Wifi_Station_ConnectToAp+0x92>
			break;
 8009d80:	bf00      	nop
 8009d82:	e002      	b.n	8009d8a <Wifi_Station_ConnectToAp+0x92>
			break;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <Wifi_Station_ConnectToAp+0x92>
			break;		
 8009d88:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <Wifi_Station_ConnectToAp+0xa8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fcfa 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	200006f4 	.word	0x200006f4
 8009da4:	080106d4 	.word	0x080106d4
 8009da8:	200008f9 	.word	0x200008f9
 8009dac:	080106f0 	.word	0x080106f0
 8009db0:	08010718 	.word	0x08010718
 8009db4:	08010724 	.word	0x08010724
 8009db8:	08010710 	.word	0x08010710

08009dbc <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8009dc2:	4b3e      	ldr	r3, [pc, #248]	; (8009ebc <Wifi_Station_DhcpIsEnable+0x100>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fc8e 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8009dd4:	f7ff fbde 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 8009dd8:	4939      	ldr	r1, [pc, #228]	; (8009ec0 <Wifi_Station_DhcpIsEnable+0x104>)
 8009dda:	483a      	ldr	r0, [pc, #232]	; (8009ec4 <Wifi_Station_DhcpIsEnable+0x108>)
 8009ddc:	f003 fdba 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009de0:	4838      	ldr	r0, [pc, #224]	; (8009ec4 <Wifi_Station_DhcpIsEnable+0x108>)
 8009de2:	f7ff fa2b 	bl	800923c <Wifi_SendString>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f083 0301 	eor.w	r3, r3, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d153      	bne.n	8009e9a <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8009df2:	1db9      	adds	r1, r7, #6
 8009df4:	4b34      	ldr	r3, [pc, #208]	; (8009ec8 <Wifi_Station_DhcpIsEnable+0x10c>)
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	4b34      	ldr	r3, [pc, #208]	; (8009ecc <Wifi_Station_DhcpIsEnable+0x110>)
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e00:	f7ff fa4e 	bl	80092a0 <Wifi_WaitForString>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f083 0301 	eor.w	r3, r3, #1
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d146      	bne.n	8009e9e <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 8009e10:	79bb      	ldrb	r3, [r7, #6]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d045      	beq.n	8009ea2 <Wifi_Station_DhcpIsEnable+0xe6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8009e16:	1dbb      	adds	r3, r7, #6
 8009e18:	4a2d      	ldr	r2, [pc, #180]	; (8009ed0 <Wifi_Station_DhcpIsEnable+0x114>)
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fb97 	bl	8009550 <Wifi_ReturnInteger>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f083 0301 	eor.w	r3, r3, #1
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d13b      	bne.n	8009ea6 <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 8009e2e:	79bb      	ldrb	r3, [r7, #6]
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d82f      	bhi.n	8009e94 <Wifi_Station_DhcpIsEnable+0xd8>
 8009e34:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <Wifi_Station_DhcpIsEnable+0x80>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009e4d 	.word	0x08009e4d
 8009e40:	08009e5f 	.word	0x08009e5f
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	08009e83 	.word	0x08009e83
		{
			case 0:
				Wifi.StationDhcp=false;
 8009e4c:	4b21      	ldr	r3, [pc, #132]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8009e54:	4b1f      	ldr	r3, [pc, #124]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8009e5c:	e01a      	b.n	8009e94 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 8009e5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 8009e66:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8009e6e:	e011      	b.n	8009e94 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 8009e70:	4b18      	ldr	r3, [pc, #96]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8009e78:	4b16      	ldr	r3, [pc, #88]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8009e80:	e008      	b.n	8009e94 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 8009e82:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <Wifi_Station_DhcpIsEnable+0x118>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;			
 8009e92:	bf00      	nop
		}
		returnVal=true;	
 8009e94:	2301      	movs	r3, #1
 8009e96:	71fb      	strb	r3, [r7, #7]
 8009e98:	e006      	b.n	8009ea8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8009e9a:	bf00      	nop
 8009e9c:	e004      	b.n	8009ea8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8009e9e:	bf00      	nop
 8009ea0:	e002      	b.n	8009ea8 <Wifi_Station_DhcpIsEnable+0xec>
			break;		
 8009ea2:	bf00      	nop
 8009ea4:	e000      	b.n	8009ea8 <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8009ea6:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <Wifi_Station_DhcpIsEnable+0x100>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fc6b 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	200006f4 	.word	0x200006f4
 8009ec0:	08010754 	.word	0x08010754
 8009ec4:	200008f9 	.word	0x200008f9
 8009ec8:	080105f4 	.word	0x080105f4
 8009ecc:	080105f0 	.word	0x080105f0
 8009ed0:	08010664 	.word	0x08010664
 8009ed4:	200006f8 	.word	0x200006f8

08009ed8 <Wifi_TcpIp_GetConnectionStatus>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_TcpIp_GetConnectionStatus(void)
{
 8009ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eda:	b089      	sub	sp, #36	; 0x24
 8009edc:	af04      	add	r7, sp, #16
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8009ede:	4b68      	ldr	r3, [pc, #416]	; (800a080 <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fc00 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8009ef0:	f7ff fb50 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTATUS\r\n");
 8009ef4:	4963      	ldr	r1, [pc, #396]	; (800a084 <Wifi_TcpIp_GetConnectionStatus+0x1ac>)
 8009ef6:	4864      	ldr	r0, [pc, #400]	; (800a088 <Wifi_TcpIp_GetConnectionStatus+0x1b0>)
 8009ef8:	f003 fd2c 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8009efc:	4862      	ldr	r0, [pc, #392]	; (800a088 <Wifi_TcpIp_GetConnectionStatus+0x1b0>)
 8009efe:	f7ff f99d 	bl	800923c <Wifi_SendString>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f083 0301 	eor.w	r3, r3, #1
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f040 80ab 	bne.w	800a066 <Wifi_TcpIp_GetConnectionStatus+0x18e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8009f10:	1d79      	adds	r1, r7, #5
 8009f12:	4b5e      	ldr	r3, [pc, #376]	; (800a08c <Wifi_TcpIp_GetConnectionStatus+0x1b4>)
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	4b5e      	ldr	r3, [pc, #376]	; (800a090 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 8009f18:	2202      	movs	r2, #2
 8009f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f1e:	f7ff f9bf 	bl	80092a0 <Wifi_WaitForString>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f083 0301 	eor.w	r3, r3, #1
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d004      	beq.n	8009f38 <Wifi_TcpIp_GetConnectionStatus+0x60>
			schlecht++;//schlecht
 8009f2e:	4b59      	ldr	r3, [pc, #356]	; (800a094 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3301      	adds	r3, #1
 8009f34:	4a57      	ldr	r2, [pc, #348]	; (800a094 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8009f36:	6013      	str	r3, [r2, #0]
		if(result == 2)
 8009f38:	797b      	ldrb	r3, [r7, #5]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	f000 8095 	beq.w	800a06a <Wifi_TcpIp_GetConnectionStatus+0x192>
			break;		
		
    
		char *str = strstr((char*)Wifi.RxBuffer,"\nSTATUS:");
 8009f40:	4955      	ldr	r1, [pc, #340]	; (800a098 <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 8009f42:	4856      	ldr	r0, [pc, #344]	; (800a09c <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8009f44:	f003 fe2e 	bl	800dba4 <strstr>
 8009f48:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <Wifi_TcpIp_GetConnectionStatus+0x82>
    	schlecht++;//schlecht
 8009f50:	4b50      	ldr	r3, [pc, #320]	; (800a094 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	4a4f      	ldr	r2, [pc, #316]	; (800a094 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 8009f58:	6013      	str	r3, [r2, #0]
    str = strchr(str,':');
 8009f5a:	213a      	movs	r1, #58	; 0x3a
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	f003 fd92 	bl	800da86 <strchr>
 8009f62:	60b8      	str	r0, [r7, #8]
    str++;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	3301      	adds	r3, #1
 8009f68:	60bb      	str	r3, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	71fb      	strb	r3, [r7, #7]
 8009f6e:	e012      	b.n	8009f96 <Wifi_TcpIp_GetConnectionStatus+0xbe>
      Wifi.TcpIpConnections[i].status=(WifiConnectionStatus_t)atoi(str);
 8009f70:	68b8      	ldr	r0, [r7, #8]
 8009f72:	f002 fe8b 	bl	800cc8c <atoi>
 8009f76:	4603      	mov	r3, r0
 8009f78:	79fa      	ldrb	r2, [r7, #7]
 8009f7a:	b2d8      	uxtb	r0, r3
 8009f7c:	4948      	ldr	r1, [pc, #288]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8009f7e:	4613      	mov	r3, r2
 8009f80:	011b      	lsls	r3, r3, #4
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	440b      	add	r3, r1
 8009f88:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	701a      	strb	r2, [r3, #0]
    for(uint8_t i=0 ; i<5 ;i++)
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	3301      	adds	r3, #1
 8009f94:	71fb      	strb	r3, [r7, #7]
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d9e9      	bls.n	8009f70 <Wifi_TcpIp_GetConnectionStatus+0x98>
    str = strstr((char*)Wifi.RxBuffer,"+CIPSTATUS:");
 8009f9c:	4941      	ldr	r1, [pc, #260]	; (800a0a4 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 8009f9e:	483f      	ldr	r0, [pc, #252]	; (800a09c <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 8009fa0:	f003 fe00 	bl	800dba4 <strstr>
 8009fa4:	60b8      	str	r0, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	71bb      	strb	r3, [r7, #6]
 8009faa:	e054      	b.n	800a056 <Wifi_TcpIp_GetConnectionStatus+0x17e>
    {
      sscanf(str,"+CIPSTATUS:%d,\"%3s\",\"%[^\"]\",%d,%d,%d",(int*)&Wifi.TcpIpConnections[i].LinkId,Wifi.TcpIpConnections[i].Type,Wifi.TcpIpConnections[i].RemoteIp,(int*)&Wifi.TcpIpConnections[i].RemotePort,(int*)&Wifi.TcpIpConnections[i].LocalPort,(int*)&Wifi.TcpIpConnections[i].RunAsServer);
 8009fac:	79ba      	ldrb	r2, [r7, #6]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8009fba:	4a39      	ldr	r2, [pc, #228]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8009fbc:	4413      	add	r3, r2
 8009fbe:	1d5d      	adds	r5, r3, #5
 8009fc0:	79ba      	ldrb	r2, [r7, #6]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8009fce:	4a34      	ldr	r2, [pc, #208]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8009fd0:	4413      	add	r3, r2
 8009fd2:	1d9e      	adds	r6, r3, #6
 8009fd4:	79ba      	ldrb	r2, [r7, #6]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8009fe2:	4a2f      	ldr	r2, [pc, #188]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f103 010a 	add.w	r1, r3, #10
 8009fea:	79ba      	ldrb	r2, [r7, #6]
 8009fec:	4613      	mov	r3, r2
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	1a9b      	subs	r3, r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8009ff8:	4a29      	ldr	r2, [pc, #164]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 8009ffa:	4413      	add	r3, r2
 8009ffc:	1d18      	adds	r0, r3, #4
 8009ffe:	79ba      	ldrb	r2, [r7, #6]
 800a000:	4613      	mov	r3, r2
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800a00c:	4a24      	ldr	r2, [pc, #144]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 800a00e:	4413      	add	r3, r2
 800a010:	1d9c      	adds	r4, r3, #6
 800a012:	79ba      	ldrb	r2, [r7, #6]
 800a014:	4613      	mov	r3, r2
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 800a020:	4a1f      	ldr	r2, [pc, #124]	; (800a0a0 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 800a022:	4413      	add	r3, r2
 800a024:	3308      	adds	r3, #8
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	9402      	str	r4, [sp, #8]
 800a02a:	9001      	str	r0, [sp, #4]
 800a02c:	9100      	str	r1, [sp, #0]
 800a02e:	4633      	mov	r3, r6
 800a030:	462a      	mov	r2, r5
 800a032:	491d      	ldr	r1, [pc, #116]	; (800a0a8 <Wifi_TcpIp_GetConnectionStatus+0x1d0>)
 800a034:	68b8      	ldr	r0, [r7, #8]
 800a036:	f003 fcad 	bl	800d994 <siscanf>
      str++;
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	3301      	adds	r3, #1
 800a03e:	60bb      	str	r3, [r7, #8]
      str = strstr(str,"+CIPSTATUS:");
 800a040:	4918      	ldr	r1, [pc, #96]	; (800a0a4 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 800a042:	68b8      	ldr	r0, [r7, #8]
 800a044:	f003 fdae 	bl	800dba4 <strstr>
 800a048:	60b8      	str	r0, [r7, #8]
      if(str==NULL)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <Wifi_TcpIp_GetConnectionStatus+0x186>
    for(uint8_t i=0 ; i<5 ;i++)
 800a050:	79bb      	ldrb	r3, [r7, #6]
 800a052:	3301      	adds	r3, #1
 800a054:	71bb      	strb	r3, [r7, #6]
 800a056:	79bb      	ldrb	r3, [r7, #6]
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d9a7      	bls.n	8009fac <Wifi_TcpIp_GetConnectionStatus+0xd4>
 800a05c:	e000      	b.n	800a060 <Wifi_TcpIp_GetConnectionStatus+0x188>
        break;
 800a05e:	bf00      	nop
    }
		returnVal=true;	
 800a060:	2301      	movs	r3, #1
 800a062:	73fb      	strb	r3, [r7, #15]
 800a064:	e002      	b.n	800a06c <Wifi_TcpIp_GetConnectionStatus+0x194>
			break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <Wifi_TcpIp_GetConnectionStatus+0x194>
			break;		
 800a06a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <Wifi_TcpIp_GetConnectionStatus+0x1a8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fb89 	bl	800a788 <osSemaphoreRelease>
	return returnVal;			
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a080:	200006f4 	.word	0x200006f4
 800a084:	080107bc 	.word	0x080107bc
 800a088:	200008f9 	.word	0x200008f9
 800a08c:	080105f4 	.word	0x080105f4
 800a090:	080105f0 	.word	0x080105f0
 800a094:	20000fac 	.word	0x20000fac
 800a098:	080107cc 	.word	0x080107cc
 800a09c:	200006f9 	.word	0x200006f9
 800a0a0:	200006f8 	.word	0x200006f8
 800a0a4:	080107d8 	.word	0x080107d8
 800a0a8:	080107e4 	.word	0x080107e4

0800a0ac <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800a0b6:	4b21      	ldr	r3, [pc, #132]	; (800a13c <Wifi_TcpIp_SetMultiConnection+0x90>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fb14 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800a0c8:	f7ff fa64 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	491b      	ldr	r1, [pc, #108]	; (800a140 <Wifi_TcpIp_SetMultiConnection+0x94>)
 800a0d2:	481c      	ldr	r0, [pc, #112]	; (800a144 <Wifi_TcpIp_SetMultiConnection+0x98>)
 800a0d4:	f003 fc3e 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800a0d8:	481a      	ldr	r0, [pc, #104]	; (800a144 <Wifi_TcpIp_SetMultiConnection+0x98>)
 800a0da:	f7ff f8af 	bl	800923c <Wifi_SendString>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f083 0301 	eor.w	r3, r3, #1
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d119      	bne.n	800a11e <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800a0ea:	f107 010e 	add.w	r1, r7, #14
 800a0ee:	4b16      	ldr	r3, [pc, #88]	; (800a148 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	4b16      	ldr	r3, [pc, #88]	; (800a14c <Wifi_TcpIp_SetMultiConnection+0xa0>)
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a0fa:	f7ff f8d1 	bl	80092a0 <Wifi_WaitForString>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f083 0301 	eor.w	r3, r3, #1
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d00a      	beq.n	800a126 <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 800a110:	4a0f      	ldr	r2, [pc, #60]	; (800a150 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;	
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
 800a11c:	e004      	b.n	800a128 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800a11e:	bf00      	nop
 800a120:	e002      	b.n	800a128 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800a122:	bf00      	nop
 800a124:	e000      	b.n	800a128 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;				
 800a126:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800a128:	4b04      	ldr	r3, [pc, #16]	; (800a13c <Wifi_TcpIp_SetMultiConnection+0x90>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fb2b 	bl	800a788 <osSemaphoreRelease>
	return returnVal;			
 800a132:	7bfb      	ldrb	r3, [r7, #15]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	200006f4 	.word	0x200006f4
 800a140:	08010820 	.word	0x08010820
 800a144:	200008f9 	.word	0x200008f9
 800a148:	080105f4 	.word	0x080105f4
 800a14c:	080105f0 	.word	0x080105f0
 800a150:	200006f8 	.word	0x200006f8

0800a154 <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800a15a:	4b29      	ldr	r3, [pc, #164]	; (800a200 <Wifi_TcpIp_GetMultiConnection+0xac>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f04f 31ff 	mov.w	r1, #4294967295
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fac2 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800a168:	2300      	movs	r3, #0
 800a16a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800a16c:	f7ff fa12 	bl	8009594 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 800a170:	4924      	ldr	r1, [pc, #144]	; (800a204 <Wifi_TcpIp_GetMultiConnection+0xb0>)
 800a172:	4825      	ldr	r0, [pc, #148]	; (800a208 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 800a174:	f003 fbee 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800a178:	4823      	ldr	r0, [pc, #140]	; (800a208 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 800a17a:	f7ff f85f 	bl	800923c <Wifi_SendString>
 800a17e:	4603      	mov	r3, r0
 800a180:	f083 0301 	eor.w	r3, r3, #1
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d129      	bne.n	800a1de <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800a18a:	1db9      	adds	r1, r7, #6
 800a18c:	4b1f      	ldr	r3, [pc, #124]	; (800a20c <Wifi_TcpIp_GetMultiConnection+0xb8>)
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	4b1f      	ldr	r3, [pc, #124]	; (800a210 <Wifi_TcpIp_GetMultiConnection+0xbc>)
 800a192:	2202      	movs	r2, #2
 800a194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a198:	f7ff f882 	bl	80092a0 <Wifi_WaitForString>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f083 0301 	eor.w	r3, r3, #1
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d11c      	bne.n	800a1e2 <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 800a1a8:	79bb      	ldrb	r3, [r7, #6]
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d01b      	beq.n	800a1e6 <Wifi_TcpIp_GetMultiConnection+0x92>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 800a1ae:	1dbb      	adds	r3, r7, #6
 800a1b0:	4a18      	ldr	r2, [pc, #96]	; (800a214 <Wifi_TcpIp_GetMultiConnection+0xc0>)
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff f9cb 	bl	8009550 <Wifi_ReturnInteger>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f083 0301 	eor.w	r3, r3, #1
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d111      	bne.n	800a1ea <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 800a1c6:	79bb      	ldrb	r3, [r7, #6]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bf14      	ite	ne
 800a1cc:	2301      	movne	r3, #1
 800a1ce:	2300      	moveq	r3, #0
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	4b11      	ldr	r3, [pc, #68]	; (800a218 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 800a1d4:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;	
 800a1d8:	2301      	movs	r3, #1
 800a1da:	71fb      	strb	r3, [r7, #7]
 800a1dc:	e006      	b.n	800a1ec <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 800a1de:	bf00      	nop
 800a1e0:	e004      	b.n	800a1ec <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 800a1e2:	bf00      	nop
 800a1e4:	e002      	b.n	800a1ec <Wifi_TcpIp_GetMultiConnection+0x98>
			break;				
 800a1e6:	bf00      	nop
 800a1e8:	e000      	b.n	800a1ec <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 800a1ea:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800a1ec:	4b04      	ldr	r3, [pc, #16]	; (800a200 <Wifi_TcpIp_GetMultiConnection+0xac>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fac9 	bl	800a788 <osSemaphoreRelease>
	return returnVal;			
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	200006f4 	.word	0x200006f4
 800a204:	08010830 	.word	0x08010830
 800a208:	200008f9 	.word	0x200008f9
 800a20c:	080105f4 	.word	0x080105f4
 800a210:	080105f0 	.word	0x080105f0
 800a214:	08010664 	.word	0x08010664
 800a218:	200006f8 	.word	0x200006f8

0800a21c <Wifi_TcpIp_StartTcpConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af02      	add	r7, sp, #8
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	4611      	mov	r1, r2
 800a226:	461a      	mov	r2, r3
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
 800a22c:	460b      	mov	r3, r1
 800a22e:	81bb      	strh	r3, [r7, #12]
 800a230:	4613      	mov	r3, r2
 800a232:	80fb      	strh	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800a234:	4b42      	ldr	r3, [pc, #264]	; (800a340 <Wifi_TcpIp_StartTcpConnection+0x124>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f04f 31ff 	mov.w	r1, #4294967295
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 fa55 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800a242:	2300      	movs	r3, #0
 800a244:	75fb      	strb	r3, [r7, #23]
	do
	{
    Wifi_RxClear();
 800a246:	f7ff f9a5 	bl	8009594 <Wifi_RxClear>
    sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 800a24a:	89bb      	ldrh	r3, [r7, #12]
 800a24c:	461a      	mov	r2, r3
 800a24e:	493d      	ldr	r1, [pc, #244]	; (800a344 <Wifi_TcpIp_StartTcpConnection+0x128>)
 800a250:	483d      	ldr	r0, [pc, #244]	; (800a348 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800a252:	f003 fb7f 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800a256:	483c      	ldr	r0, [pc, #240]	; (800a348 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800a258:	f7fe fff0 	bl	800923c <Wifi_SendString>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f083 0301 	eor.w	r3, r3, #1
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d157      	bne.n	800a318 <Wifi_TcpIp_StartTcpConnection+0xfc>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800a268:	f107 0116 	add.w	r1, r7, #22
 800a26c:	4b37      	ldr	r3, [pc, #220]	; (800a34c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	4b37      	ldr	r3, [pc, #220]	; (800a350 <Wifi_TcpIp_StartTcpConnection+0x134>)
 800a272:	2202      	movs	r2, #2
 800a274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a278:	f7ff f812 	bl	80092a0 <Wifi_WaitForString>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f083 0301 	eor.w	r3, r3, #1
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <Wifi_TcpIp_StartTcpConnection+0x76>
			schlecht++;
 800a288:	4b32      	ldr	r3, [pc, #200]	; (800a354 <Wifi_TcpIp_StartTcpConnection+0x138>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3301      	adds	r3, #1
 800a28e:	4a31      	ldr	r2, [pc, #196]	; (800a354 <Wifi_TcpIp_StartTcpConnection+0x138>)
 800a290:	6013      	str	r3, [r2, #0]
		if(result == 2)
 800a292:	7dbb      	ldrb	r3, [r7, #22]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d041      	beq.n	800a31c <Wifi_TcpIp_StartTcpConnection+0x100>
			break;		
		Wifi_RxClear();
 800a298:	f7ff f97c 	bl	8009594 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800a29c:	4b2e      	ldr	r3, [pc, #184]	; (800a358 <Wifi_TcpIp_StartTcpConnection+0x13c>)
 800a29e:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 800a2a2:	f083 0301 	eor.w	r3, r3, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d009      	beq.n	800a2c0 <Wifi_TcpIp_StartTcpConnection+0xa4>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800a2ac:	89ba      	ldrh	r2, [r7, #12]
 800a2ae:	88fb      	ldrh	r3, [r7, #6]
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	4929      	ldr	r1, [pc, #164]	; (800a35c <Wifi_TcpIp_StartTcpConnection+0x140>)
 800a2b8:	4823      	ldr	r0, [pc, #140]	; (800a348 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800a2ba:	f003 fb4b 	bl	800d954 <siprintf>
 800a2be:	e00a      	b.n	800a2d6 <Wifi_TcpIp_StartTcpConnection+0xba>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 800a2c0:	7bf9      	ldrb	r1, [r7, #15]
 800a2c2:	89bb      	ldrh	r3, [r7, #12]
 800a2c4:	88fa      	ldrh	r2, [r7, #6]
 800a2c6:	9201      	str	r2, [sp, #4]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	4924      	ldr	r1, [pc, #144]	; (800a360 <Wifi_TcpIp_StartTcpConnection+0x144>)
 800a2d0:	481d      	ldr	r0, [pc, #116]	; (800a348 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800a2d2:	f003 fb3f 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800a2d6:	481c      	ldr	r0, [pc, #112]	; (800a348 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800a2d8:	f7fe ffb0 	bl	800923c <Wifi_SendString>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f083 0301 	eor.w	r3, r3, #1
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d11b      	bne.n	800a320 <Wifi_TcpIp_StartTcpConnection+0x104>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 800a2e8:	f107 0116 	add.w	r1, r7, #22
 800a2ec:	4b17      	ldr	r3, [pc, #92]	; (800a34c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	4b1c      	ldr	r3, [pc, #112]	; (800a364 <Wifi_TcpIp_StartTcpConnection+0x148>)
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4b16      	ldr	r3, [pc, #88]	; (800a350 <Wifi_TcpIp_StartTcpConnection+0x134>)
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800a2fc:	f7fe ffd0 	bl	80092a0 <Wifi_WaitForString>
 800a300:	4603      	mov	r3, r0
 800a302:	f083 0301 	eor.w	r3, r3, #1
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10b      	bne.n	800a324 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
		if(result == 3)
 800a30c:	7dbb      	ldrb	r3, [r7, #22]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d00a      	beq.n	800a328 <Wifi_TcpIp_StartTcpConnection+0x10c>
			break;		
		returnVal=true;	
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
 800a316:	e008      	b.n	800a32a <Wifi_TcpIp_StartTcpConnection+0x10e>
			break;
 800a318:	bf00      	nop
 800a31a:	e006      	b.n	800a32a <Wifi_TcpIp_StartTcpConnection+0x10e>
			break;		
 800a31c:	bf00      	nop
 800a31e:	e004      	b.n	800a32a <Wifi_TcpIp_StartTcpConnection+0x10e>
			break;
 800a320:	bf00      	nop
 800a322:	e002      	b.n	800a32a <Wifi_TcpIp_StartTcpConnection+0x10e>
			break;
 800a324:	bf00      	nop
 800a326:	e000      	b.n	800a32a <Wifi_TcpIp_StartTcpConnection+0x10e>
			break;		
 800a328:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <Wifi_TcpIp_StartTcpConnection+0x124>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fa2a 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 800a334:	7dfb      	ldrb	r3, [r7, #23]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200006f4 	.word	0x200006f4
 800a344:	08010840 	.word	0x08010840
 800a348:	200008f9 	.word	0x200008f9
 800a34c:	080105f4 	.word	0x080105f4
 800a350:	080105f0 	.word	0x080105f0
 800a354:	20000fac 	.word	0x20000fac
 800a358:	200006f8 	.word	0x200006f8
 800a35c:	08010854 	.word	0x08010854
 800a360:	08010874 	.word	0x08010874
 800a364:	08010898 	.word	0x08010898

0800a368 <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	4603      	mov	r3, r0
 800a370:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800a372:	4b26      	ldr	r3, [pc, #152]	; (800a40c <Wifi_TcpIp_Close+0xa4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f04f 31ff 	mov.w	r1, #4294967295
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f9b6 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800a384:	f7ff f906 	bl	8009594 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800a388:	4b21      	ldr	r3, [pc, #132]	; (800a410 <Wifi_TcpIp_Close+0xa8>)
 800a38a:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 800a38e:	f083 0301 	eor.w	r3, r3, #1
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d004      	beq.n	800a3a2 <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 800a398:	491e      	ldr	r1, [pc, #120]	; (800a414 <Wifi_TcpIp_Close+0xac>)
 800a39a:	481f      	ldr	r0, [pc, #124]	; (800a418 <Wifi_TcpIp_Close+0xb0>)
 800a39c:	f003 fada 	bl	800d954 <siprintf>
 800a3a0:	e005      	b.n	800a3ae <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	491d      	ldr	r1, [pc, #116]	; (800a41c <Wifi_TcpIp_Close+0xb4>)
 800a3a8:	481b      	ldr	r0, [pc, #108]	; (800a418 <Wifi_TcpIp_Close+0xb0>)
 800a3aa:	f003 fad3 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800a3ae:	481a      	ldr	r0, [pc, #104]	; (800a418 <Wifi_TcpIp_Close+0xb0>)
 800a3b0:	f7fe ff44 	bl	800923c <Wifi_SendString>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	f083 0301 	eor.w	r3, r3, #1
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d115      	bne.n	800a3ec <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800a3c0:	f107 010e 	add.w	r1, r7, #14
 800a3c4:	4b16      	ldr	r3, [pc, #88]	; (800a420 <Wifi_TcpIp_Close+0xb8>)
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4b16      	ldr	r3, [pc, #88]	; (800a424 <Wifi_TcpIp_Close+0xbc>)
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3d0:	f7fe ff66 	bl	80092a0 <Wifi_WaitForString>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f083 0301 	eor.w	r3, r3, #1
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d107      	bne.n	800a3f0 <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d006      	beq.n	800a3f4 <Wifi_TcpIp_Close+0x8c>
			break;		
		returnVal=true;	
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	e004      	b.n	800a3f6 <Wifi_TcpIp_Close+0x8e>
			break;
 800a3ec:	bf00      	nop
 800a3ee:	e002      	b.n	800a3f6 <Wifi_TcpIp_Close+0x8e>
			break;
 800a3f0:	bf00      	nop
 800a3f2:	e000      	b.n	800a3f6 <Wifi_TcpIp_Close+0x8e>
			break;		
 800a3f4:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800a3f6:	4b05      	ldr	r3, [pc, #20]	; (800a40c <Wifi_TcpIp_Close+0xa4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 f9c4 	bl	800a788 <osSemaphoreRelease>
	return returnVal;		
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	200006f4 	.word	0x200006f4
 800a410:	200006f8 	.word	0x200006f8
 800a414:	080108ec 	.word	0x080108ec
 800a418:	200008f9 	.word	0x200008f9
 800a41c:	080108fc 	.word	0x080108fc
 800a420:	080105f4 	.word	0x080105f4
 800a424:	080105f0 	.word	0x080105f0

0800a428 <Wifi_TcpIp_SendDataTcp>:
	return returnVal;	
  
}
//#########################################################################################################
bool  Wifi_TcpIp_SendDataTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	4603      	mov	r3, r0
 800a430:	603a      	str	r2, [r7, #0]
 800a432:	71fb      	strb	r3, [r7, #7]
 800a434:	460b      	mov	r3, r1
 800a436:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800a438:	4b40      	ldr	r3, [pc, #256]	; (800a53c <Wifi_TcpIp_SendDataTcp+0x114>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f04f 31ff 	mov.w	r1, #4294967295
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f953 	bl	800a6ec <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800a446:	2300      	movs	r3, #0
 800a448:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800a44a:	f7ff f8a3 	bl	8009594 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800a44e:	4b3c      	ldr	r3, [pc, #240]	; (800a540 <Wifi_TcpIp_SendDataTcp+0x118>)
 800a450:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 800a454:	f083 0301 	eor.w	r3, r3, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d006      	beq.n	800a46c <Wifi_TcpIp_SendDataTcp+0x44>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d\r\n",dataLen);
 800a45e:	88bb      	ldrh	r3, [r7, #4]
 800a460:	461a      	mov	r2, r3
 800a462:	4938      	ldr	r1, [pc, #224]	; (800a544 <Wifi_TcpIp_SendDataTcp+0x11c>)
 800a464:	4838      	ldr	r0, [pc, #224]	; (800a548 <Wifi_TcpIp_SendDataTcp+0x120>)
 800a466:	f003 fa75 	bl	800d954 <siprintf>
 800a46a:	e005      	b.n	800a478 <Wifi_TcpIp_SendDataTcp+0x50>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d,%d\r\n",LinkId,dataLen);
 800a46c:	79fa      	ldrb	r2, [r7, #7]
 800a46e:	88bb      	ldrh	r3, [r7, #4]
 800a470:	4936      	ldr	r1, [pc, #216]	; (800a54c <Wifi_TcpIp_SendDataTcp+0x124>)
 800a472:	4835      	ldr	r0, [pc, #212]	; (800a548 <Wifi_TcpIp_SendDataTcp+0x120>)
 800a474:	f003 fa6e 	bl	800d954 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800a478:	4833      	ldr	r0, [pc, #204]	; (800a548 <Wifi_TcpIp_SendDataTcp+0x120>)
 800a47a:	f7fe fedf 	bl	800923c <Wifi_SendString>
 800a47e:	4603      	mov	r3, r0
 800a480:	f083 0301 	eor.w	r3, r3, #1
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d148      	bne.n	800a51c <Wifi_TcpIp_SendDataTcp+0xf4>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800a48a:	f107 010e 	add.w	r1, r7, #14
 800a48e:	4b30      	ldr	r3, [pc, #192]	; (800a550 <Wifi_TcpIp_SendDataTcp+0x128>)
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	4b30      	ldr	r3, [pc, #192]	; (800a554 <Wifi_TcpIp_SendDataTcp+0x12c>)
 800a494:	2202      	movs	r2, #2
 800a496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a49a:	f7fe ff01 	bl	80092a0 <Wifi_WaitForString>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	f083 0301 	eor.w	r3, r3, #1
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <Wifi_TcpIp_SendDataTcp+0x8c>
			schlecht++;
 800a4aa:	4b2b      	ldr	r3, [pc, #172]	; (800a558 <Wifi_TcpIp_SendDataTcp+0x130>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	4a29      	ldr	r2, [pc, #164]	; (800a558 <Wifi_TcpIp_SendDataTcp+0x130>)
 800a4b2:	6013      	str	r3, [r2, #0]
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,3,">","ERROR","busy")==false)
 800a4b4:	f107 010e 	add.w	r1, r7, #14
 800a4b8:	4b28      	ldr	r3, [pc, #160]	; (800a55c <Wifi_TcpIp_SendDataTcp+0x134>)
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	4b24      	ldr	r3, [pc, #144]	; (800a550 <Wifi_TcpIp_SendDataTcp+0x128>)
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	4b27      	ldr	r3, [pc, #156]	; (800a560 <Wifi_TcpIp_SendDataTcp+0x138>)
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4c8:	f7fe feea 	bl	80092a0 <Wifi_WaitForString>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f083 0301 	eor.w	r3, r3, #1
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d004      	beq.n	800a4e2 <Wifi_TcpIp_SendDataTcp+0xba>
			schlecht++;
 800a4d8:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <Wifi_TcpIp_SendDataTcp+0x130>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	4a1e      	ldr	r2, [pc, #120]	; (800a558 <Wifi_TcpIp_SendDataTcp+0x130>)
 800a4e0:	6013      	str	r3, [r2, #0]
		if(result > 1)
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d81b      	bhi.n	800a520 <Wifi_TcpIp_SendDataTcp+0xf8>
			break;		
    Wifi_RxClear();
 800a4e8:	f7ff f854 	bl	8009594 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 800a4ec:	88bb      	ldrh	r3, [r7, #4]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6838      	ldr	r0, [r7, #0]
 800a4f2:	f7fe fe7d 	bl	80091f0 <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800a4f6:	f107 010e 	add.w	r1, r7, #14
 800a4fa:	4b15      	ldr	r3, [pc, #84]	; (800a550 <Wifi_TcpIp_SendDataTcp+0x128>)
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	4b15      	ldr	r3, [pc, #84]	; (800a554 <Wifi_TcpIp_SendDataTcp+0x12c>)
 800a500:	2202      	movs	r2, #2
 800a502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a506:	f7fe fecb 	bl	80092a0 <Wifi_WaitForString>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f083 0301 	eor.w	r3, r3, #1
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d106      	bne.n	800a524 <Wifi_TcpIp_SendDataTcp+0xfc>
			break;
		returnVal=true;	
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]
 800a51a:	e004      	b.n	800a526 <Wifi_TcpIp_SendDataTcp+0xfe>
			break;
 800a51c:	bf00      	nop
 800a51e:	e002      	b.n	800a526 <Wifi_TcpIp_SendDataTcp+0xfe>
			break;		
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <Wifi_TcpIp_SendDataTcp+0xfe>
			break;
 800a524:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <Wifi_TcpIp_SendDataTcp+0x114>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f92c 	bl	800a788 <osSemaphoreRelease>
	return returnVal;	  
 800a530:	7bfb      	ldrb	r3, [r7, #15]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	200006f4 	.word	0x200006f4
 800a540:	200006f8 	.word	0x200006f8
 800a544:	08010960 	.word	0x08010960
 800a548:	200008f9 	.word	0x200008f9
 800a54c:	08010974 	.word	0x08010974
 800a550:	080105f4 	.word	0x080105f4
 800a554:	080105f0 	.word	0x080105f0
 800a558:	20000fac 	.word	0x20000fac
 800a55c:	0801098c 	.word	0x0801098c
 800a560:	0801095c 	.word	0x0801095c

0800a564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a56e:	2300      	movs	r3, #0
 800a570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a576:	2b84      	cmp	r3, #132	; 0x84
 800a578:	d005      	beq.n	800a586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a57a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	3303      	adds	r3, #3
 800a584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a586:	68fb      	ldr	r3, [r7, #12]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a59a:	f3ef 8305 	mrs	r3, IPSR
 800a59e:	607b      	str	r3, [r7, #4]
  return(result);
 800a5a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	bf14      	ite	ne
 800a5a6:	2301      	movne	r3, #1
 800a5a8:	2300      	moveq	r3, #0
 800a5aa:	b2db      	uxtb	r3, r3
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a5bc:	f001 f910 	bl	800b7e0 <vTaskStartScheduler>
  
  return osOK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a5c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c8:	b089      	sub	sp, #36	; 0x24
 800a5ca:	af04      	add	r7, sp, #16
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d020      	beq.n	800a61a <osThreadCreate+0x54>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01c      	beq.n	800a61a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685c      	ldr	r4, [r3, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691e      	ldr	r6, [r3, #16]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff ffb6 	bl	800a564 <makeFreeRtosPriority>
 800a5f8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a602:	9202      	str	r2, [sp, #8]
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	9100      	str	r1, [sp, #0]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	4632      	mov	r2, r6
 800a60c:	4629      	mov	r1, r5
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 ff1e 	bl	800b450 <xTaskCreateStatic>
 800a614:	4603      	mov	r3, r0
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e01c      	b.n	800a654 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685c      	ldr	r4, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a626:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff ff98 	bl	800a564 <makeFreeRtosPriority>
 800a634:	4602      	mov	r2, r0
 800a636:	f107 030c 	add.w	r3, r7, #12
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	9200      	str	r2, [sp, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	4632      	mov	r2, r6
 800a642:	4629      	mov	r1, r5
 800a644:	4620      	mov	r0, r4
 800a646:	f000 ff60 	bl	800b50a <xTaskCreate>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d001      	beq.n	800a654 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	e000      	b.n	800a656 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a654:	68fb      	ldr	r3, [r7, #12]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a65e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <osDelay+0x16>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	e000      	b.n	800a676 <osDelay+0x18>
 800a674:	2301      	movs	r3, #1
 800a676:	4618      	mov	r0, r3
 800a678:	f001 f87e 	bl	800b778 <vTaskDelay>
  
  return osOK;
 800a67c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af02      	add	r7, sp, #8
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00f      	beq.n	800a6b8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d10a      	bne.n	800a6b4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	9200      	str	r2, [sp, #0]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	f000 f9be 	bl	800aa2c <xQueueGenericCreateStatic>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	e016      	b.n	800a6e2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e014      	b.n	800a6e2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d110      	bne.n	800a6e0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a6be:	2203      	movs	r2, #3
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f000 fa2a 	bl	800ab1c <xQueueGenericCreate>
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <osSemaphoreCreate+0x56>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fa7a 	bl	800abd0 <xQueueGenericSend>
      return sema;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	e000      	b.n	800a6e2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a6e0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a700:	2380      	movs	r3, #128	; 0x80
 800a702:	e03a      	b.n	800a77a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a710:	f04f 33ff 	mov.w	r3, #4294967295
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	e009      	b.n	800a72c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d006      	beq.n	800a72c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <osSemaphoreWait+0x40>
      ticks = 1;
 800a728:	2301      	movs	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a72c:	f7ff ff32 	bl	800a594 <inHandlerMode>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d017      	beq.n	800a766 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	461a      	mov	r2, r3
 800a73c:	2100      	movs	r1, #0
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fcde 	bl	800b100 <xQueueReceiveFromISR>
 800a744:	4603      	mov	r3, r0
 800a746:	2b01      	cmp	r3, #1
 800a748:	d001      	beq.n	800a74e <osSemaphoreWait+0x62>
      return osErrorOS;
 800a74a:	23ff      	movs	r3, #255	; 0xff
 800a74c:	e015      	b.n	800a77a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d011      	beq.n	800a778 <osSemaphoreWait+0x8c>
 800a754:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <osSemaphoreWait+0x98>)
 800a756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	e008      	b.n	800a778 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fbbd 	bl	800aee8 <xQueueSemaphoreTake>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b01      	cmp	r3, #1
 800a772:	d001      	beq.n	800a778 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a774:	23ff      	movs	r3, #255	; 0xff
 800a776:	e000      	b.n	800a77a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	e000ed04 	.word	0xe000ed04

0800a788 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a794:	2300      	movs	r3, #0
 800a796:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a798:	f7ff fefc 	bl	800a594 <inHandlerMode>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d016      	beq.n	800a7d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a7a2:	f107 0308 	add.w	r3, r7, #8
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fb0f 	bl	800adcc <xQueueGiveFromISR>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d001      	beq.n	800a7b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a7b4:	23ff      	movs	r3, #255	; 0xff
 800a7b6:	e017      	b.n	800a7e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d013      	beq.n	800a7e6 <osSemaphoreRelease+0x5e>
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <osSemaphoreRelease+0x68>)
 800a7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	e00a      	b.n	800a7e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f9fa 	bl	800abd0 <xQueueGenericSend>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d001      	beq.n	800a7e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a7e2:	23ff      	movs	r3, #255	; 0xff
 800a7e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f103 0208 	add.w	r2, r3, #8
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f04f 32ff 	mov.w	r2, #4294967295
 800a80c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f103 0208 	add.w	r2, r3, #8
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f103 0208 	add.w	r2, r3, #8
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a84e:	b480      	push	{r7}
 800a850:	b085      	sub	sp, #20
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	689a      	ldr	r2, [r3, #8]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	601a      	str	r2, [r3, #0]
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d103      	bne.n	800a8b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	e00c      	b.n	800a8d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e002      	b.n	800a8c4 <vListInsert+0x2e>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d2f6      	bcs.n	800a8be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6892      	ldr	r2, [r2, #8]
 800a91e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6852      	ldr	r2, [r2, #4]
 800a928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d103      	bne.n	800a93c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689a      	ldr	r2, [r3, #8]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	1e5a      	subs	r2, r3, #1
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a986:	f001 fe75 	bl	800c674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	68f9      	ldr	r1, [r7, #12]
 800a994:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a996:	fb01 f303 	mul.w	r3, r1, r3
 800a99a:	441a      	add	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	68f9      	ldr	r1, [r7, #12]
 800a9ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9bc:	fb01 f303 	mul.w	r3, r1, r3
 800a9c0:	441a      	add	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	22ff      	movs	r2, #255	; 0xff
 800a9ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	22ff      	movs	r2, #255	; 0xff
 800a9d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d114      	bne.n	800aa06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01a      	beq.n	800aa1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3310      	adds	r3, #16
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f001 f93b 	bl	800bc64 <xTaskRemoveFromEventList>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d012      	beq.n	800aa1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9f4:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <xQueueGenericReset+0xcc>)
 800a9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	e009      	b.n	800aa1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3310      	adds	r3, #16
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7ff fef2 	bl	800a7f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3324      	adds	r3, #36	; 0x24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff feed 	bl	800a7f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa1a:	f001 fe5b 	bl	800c6d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa1e:	2301      	movs	r3, #1
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08e      	sub	sp, #56	; 0x38
 800aa30:	af02      	add	r7, sp, #8
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <xQueueGenericCreateStatic+0x52>
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <xQueueGenericCreateStatic+0x56>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e000      	b.n	800aa84 <xQueueGenericCreateStatic+0x58>
 800aa82:	2300      	movs	r3, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	623b      	str	r3, [r7, #32]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <xQueueGenericCreateStatic+0x7e>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <xQueueGenericCreateStatic+0x82>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <xQueueGenericCreateStatic+0x84>
 800aaae:	2300      	movs	r3, #0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	61fb      	str	r3, [r7, #28]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aaca:	2348      	movs	r3, #72	; 0x48
 800aacc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2b48      	cmp	r3, #72	; 0x48
 800aad2:	d00a      	beq.n	800aaea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	61bb      	str	r3, [r7, #24]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aaea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00d      	beq.n	800ab12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aafe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	4613      	mov	r3, r2
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 f83f 	bl	800ab90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3730      	adds	r7, #48	; 0x30
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	; 0x28
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	4613      	mov	r3, r2
 800ab28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	fb02 f303 	mul.w	r3, r2, r3
 800ab4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	3348      	adds	r3, #72	; 0x48
 800ab54:	4618      	mov	r0, r3
 800ab56:	f001 feaf 	bl	800c8b8 <pvPortMalloc>
 800ab5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d011      	beq.n	800ab86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	3348      	adds	r3, #72	; 0x48
 800ab6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab74:	79fa      	ldrb	r2, [r7, #7]
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f805 	bl	800ab90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab86:	69bb      	ldr	r3, [r7, #24]
	}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	e002      	b.n	800abb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800abbe:	2101      	movs	r1, #1
 800abc0:	69b8      	ldr	r0, [r7, #24]
 800abc2:	f7ff fecb 	bl	800a95c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08e      	sub	sp, #56	; 0x38
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800abde:	2300      	movs	r3, #0
 800abe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <xQueueGenericSend+0x32>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d103      	bne.n	800ac10 <xQueueGenericSend+0x40>
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <xQueueGenericSend+0x44>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e000      	b.n	800ac16 <xQueueGenericSend+0x46>
 800ac14:	2300      	movs	r3, #0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <xQueueGenericSend+0x60>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d103      	bne.n	800ac3e <xQueueGenericSend+0x6e>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <xQueueGenericSend+0x72>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <xQueueGenericSend+0x74>
 800ac42:	2300      	movs	r3, #0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <xQueueGenericSend+0x8e>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	623b      	str	r3, [r7, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac5e:	f001 f9bd 	bl	800bfdc <xTaskGetSchedulerState>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <xQueueGenericSend+0x9e>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <xQueueGenericSend+0xa2>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueGenericSend+0xa4>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xQueueGenericSend+0xbe>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	61fb      	str	r3, [r7, #28]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac8e:	f001 fcf1 	bl	800c674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d302      	bcc.n	800aca4 <xQueueGenericSend+0xd4>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d129      	bne.n	800acf8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acaa:	f000 fac1 	bl	800b230 <prvCopyDataToQueue>
 800acae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d010      	beq.n	800acda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	3324      	adds	r3, #36	; 0x24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 ffd1 	bl	800bc64 <xTaskRemoveFromEventList>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d013      	beq.n	800acf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800acc8:	4b3f      	ldr	r3, [pc, #252]	; (800adc8 <xQueueGenericSend+0x1f8>)
 800acca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	e00a      	b.n	800acf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d007      	beq.n	800acf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ace0:	4b39      	ldr	r3, [pc, #228]	; (800adc8 <xQueueGenericSend+0x1f8>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800acf0:	f001 fcf0 	bl	800c6d4 <vPortExitCritical>
				return pdPASS;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e063      	b.n	800adc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d103      	bne.n	800ad06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acfe:	f001 fce9 	bl	800c6d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e05c      	b.n	800adc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d106      	bne.n	800ad1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad0c:	f107 0314 	add.w	r3, r7, #20
 800ad10:	4618      	mov	r0, r3
 800ad12:	f001 f809 	bl	800bd28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad16:	2301      	movs	r3, #1
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad1a:	f001 fcdb 	bl	800c6d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad1e:	f000 fdbf 	bl	800b8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad22:	f001 fca7 	bl	800c674 <vPortEnterCritical>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad2c:	b25b      	sxtb	r3, r3
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d103      	bne.n	800ad3c <xQueueGenericSend+0x16c>
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad42:	b25b      	sxtb	r3, r3
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d103      	bne.n	800ad52 <xQueueGenericSend+0x182>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad52:	f001 fcbf 	bl	800c6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad56:	1d3a      	adds	r2, r7, #4
 800ad58:	f107 0314 	add.w	r3, r7, #20
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fff8 	bl	800bd54 <xTaskCheckForTimeOut>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d124      	bne.n	800adb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad6c:	f000 fb58 	bl	800b420 <prvIsQueueFull>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d018      	beq.n	800ada8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	3310      	adds	r3, #16
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 ff4c 	bl	800bc1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad86:	f000 fae3 	bl	800b350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad8a:	f000 fd97 	bl	800b8bc <xTaskResumeAll>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f47f af7c 	bne.w	800ac8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ad96:	4b0c      	ldr	r3, [pc, #48]	; (800adc8 <xQueueGenericSend+0x1f8>)
 800ad98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	e772      	b.n	800ac8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ada8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adaa:	f000 fad1 	bl	800b350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adae:	f000 fd85 	bl	800b8bc <xTaskResumeAll>
 800adb2:	e76c      	b.n	800ac8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800adb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adb6:	f000 facb 	bl	800b350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adba:	f000 fd7f 	bl	800b8bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800adbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3738      	adds	r7, #56	; 0x38
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08e      	sub	sp, #56	; 0x38
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	623b      	str	r3, [r7, #32]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <xQueueGiveFromISR+0x48>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	61fb      	str	r3, [r7, #28]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d103      	bne.n	800ae24 <xQueueGiveFromISR+0x58>
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <xQueueGiveFromISR+0x5c>
 800ae24:	2301      	movs	r3, #1
 800ae26:	e000      	b.n	800ae2a <xQueueGiveFromISR+0x5e>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10a      	bne.n	800ae44 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	61bb      	str	r3, [r7, #24]
}
 800ae40:	bf00      	nop
 800ae42:	e7fe      	b.n	800ae42 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae44:	f001 fcf8 	bl	800c838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae48:	f3ef 8211 	mrs	r2, BASEPRI
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	617a      	str	r2, [r7, #20]
 800ae5e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae60:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae68:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d22b      	bcs.n	800aecc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d112      	bne.n	800aeb6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d016      	beq.n	800aec6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	3324      	adds	r3, #36	; 0x24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fee1 	bl	800bc64 <xTaskRemoveFromEventList>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00e      	beq.n	800aec6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00b      	beq.n	800aec6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	e007      	b.n	800aec6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aeb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeba:	3301      	adds	r3, #1
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	b25a      	sxtb	r2, r3
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aec6:	2301      	movs	r3, #1
 800aec8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeca:	e001      	b.n	800aed0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	637b      	str	r3, [r7, #52]	; 0x34
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aeda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3738      	adds	r7, #56	; 0x38
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
	...

0800aee8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08e      	sub	sp, #56	; 0x38
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aefa:	2300      	movs	r3, #0
 800aefc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10a      	bne.n	800af1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	623b      	str	r3, [r7, #32]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	61fb      	str	r3, [r7, #28]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af38:	f001 f850 	bl	800bfdc <xTaskGetSchedulerState>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <xQueueSemaphoreTake+0x60>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <xQueueSemaphoreTake+0x64>
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <xQueueSemaphoreTake+0x66>
 800af4c:	2300      	movs	r3, #0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	61bb      	str	r3, [r7, #24]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af68:	f001 fb84 	bl	800c674 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	2b00      	cmp	r3, #0
 800af76:	d024      	beq.n	800afc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	1e5a      	subs	r2, r3, #1
 800af7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d104      	bne.n	800af92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af88:	f001 f9d0 	bl	800c32c <pvTaskIncrementMutexHeldCount>
 800af8c:	4602      	mov	r2, r0
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00f      	beq.n	800afba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9c:	3310      	adds	r3, #16
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 fe60 	bl	800bc64 <xTaskRemoveFromEventList>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d007      	beq.n	800afba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afaa:	4b54      	ldr	r3, [pc, #336]	; (800b0fc <xQueueSemaphoreTake+0x214>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800afba:	f001 fb8b 	bl	800c6d4 <vPortExitCritical>
				return pdPASS;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e097      	b.n	800b0f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d111      	bne.n	800afec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	617b      	str	r3, [r7, #20]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800afe4:	f001 fb76 	bl	800c6d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afe8:	2300      	movs	r3, #0
 800afea:	e082      	b.n	800b0f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fe96 	bl	800bd28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800affc:	2301      	movs	r3, #1
 800affe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b000:	f001 fb68 	bl	800c6d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b004:	f000 fc4c 	bl	800b8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b008:	f001 fb34 	bl	800c674 <vPortEnterCritical>
 800b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b012:	b25b      	sxtb	r3, r3
 800b014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b018:	d103      	bne.n	800b022 <xQueueSemaphoreTake+0x13a>
 800b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b028:	b25b      	sxtb	r3, r3
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02e:	d103      	bne.n	800b038 <xQueueSemaphoreTake+0x150>
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b038:	f001 fb4c 	bl	800c6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b03c:	463a      	mov	r2, r7
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f000 fe85 	bl	800bd54 <xTaskCheckForTimeOut>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d132      	bne.n	800b0b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b052:	f000 f9cf 	bl	800b3f4 <prvIsQueueEmpty>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d026      	beq.n	800b0aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d109      	bne.n	800b078 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b064:	f001 fb06 	bl	800c674 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 ffd3 	bl	800c018 <xTaskPriorityInherit>
 800b072:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b074:	f001 fb2e 	bl	800c6d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	3324      	adds	r3, #36	; 0x24
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fdcb 	bl	800bc1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b088:	f000 f962 	bl	800b350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b08c:	f000 fc16 	bl	800b8bc <xTaskResumeAll>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	f47f af68 	bne.w	800af68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b098:	4b18      	ldr	r3, [pc, #96]	; (800b0fc <xQueueSemaphoreTake+0x214>)
 800b09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	e75e      	b.n	800af68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b0aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ac:	f000 f950 	bl	800b350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0b0:	f000 fc04 	bl	800b8bc <xTaskResumeAll>
 800b0b4:	e758      	b.n	800af68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b0b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0b8:	f000 f94a 	bl	800b350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0bc:	f000 fbfe 	bl	800b8bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0c2:	f000 f997 	bl	800b3f4 <prvIsQueueEmpty>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f43f af4d 	beq.w	800af68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00d      	beq.n	800b0f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b0d4:	f001 face 	bl	800c674 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0da:	f000 f891 	bl	800b200 <prvGetDisinheritPriorityAfterTimeout>
 800b0de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 f892 	bl	800c210 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b0ec:	f001 faf2 	bl	800c6d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3738      	adds	r7, #56	; 0x38
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	e000ed04 	.word	0xe000ed04

0800b100 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08e      	sub	sp, #56	; 0x38
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10a      	bne.n	800b12c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	623b      	str	r3, [r7, #32]
}
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d103      	bne.n	800b13a <xQueueReceiveFromISR+0x3a>
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <xQueueReceiveFromISR+0x3e>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <xQueueReceiveFromISR+0x40>
 800b13e:	2300      	movs	r3, #0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	61fb      	str	r3, [r7, #28]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b15a:	f001 fb6d 	bl	800c838 <vPortValidateInterruptPriority>
	__asm volatile
 800b15e:	f3ef 8211 	mrs	r2, BASEPRI
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	61ba      	str	r2, [r7, #24]
 800b174:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b176:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b178:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	2b00      	cmp	r3, #0
 800b184:	d02f      	beq.n	800b1e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b190:	68b9      	ldr	r1, [r7, #8]
 800b192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b194:	f000 f8b6 	bl	800b304 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19a:	1e5a      	subs	r2, r3, #1
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a8:	d112      	bne.n	800b1d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d016      	beq.n	800b1e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	3310      	adds	r3, #16
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 fd54 	bl	800bc64 <xTaskRemoveFromEventList>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00e      	beq.n	800b1e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	e007      	b.n	800b1e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	b25a      	sxtb	r2, r3
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1e4:	e001      	b.n	800b1ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f383 8811 	msr	BASEPRI, r3
}
 800b1f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3738      	adds	r7, #56	; 0x38
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d006      	beq.n	800b21e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f1c3 0307 	rsb	r3, r3, #7
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e001      	b.n	800b222 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b222:	68fb      	ldr	r3, [r7, #12]
	}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10d      	bne.n	800b26a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d14d      	bne.n	800b2f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 ff52 	bl	800c104 <xTaskPriorityDisinherit>
 800b260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	609a      	str	r2, [r3, #8]
 800b268:	e043      	b.n	800b2f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d119      	bne.n	800b2a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6858      	ldr	r0, [r3, #4]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	461a      	mov	r2, r3
 800b27a:	68b9      	ldr	r1, [r7, #8]
 800b27c:	f002 fd36 	bl	800dcec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b288:	441a      	add	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	429a      	cmp	r2, r3
 800b298:	d32b      	bcc.n	800b2f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	e026      	b.n	800b2f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	68d8      	ldr	r0, [r3, #12]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	f002 fd1c 	bl	800dcec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68da      	ldr	r2, [r3, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	425b      	negs	r3, r3
 800b2be:	441a      	add	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d207      	bcs.n	800b2e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	689a      	ldr	r2, [r3, #8]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	425b      	negs	r3, r3
 800b2da:	441a      	add	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d105      	bne.n	800b2f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2fa:	697b      	ldr	r3, [r7, #20]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d018      	beq.n	800b348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	441a      	add	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d303      	bcc.n	800b338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68d9      	ldr	r1, [r3, #12]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	461a      	mov	r2, r3
 800b342:	6838      	ldr	r0, [r7, #0]
 800b344:	f002 fcd2 	bl	800dcec <memcpy>
	}
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b358:	f001 f98c 	bl	800c674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b364:	e011      	b.n	800b38a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d012      	beq.n	800b394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3324      	adds	r3, #36	; 0x24
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fc76 	bl	800bc64 <xTaskRemoveFromEventList>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b37e:	f000 fd4b 	bl	800be18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	3b01      	subs	r3, #1
 800b386:	b2db      	uxtb	r3, r3
 800b388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dce9      	bgt.n	800b366 <prvUnlockQueue+0x16>
 800b392:	e000      	b.n	800b396 <prvUnlockQueue+0x46>
					break;
 800b394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	22ff      	movs	r2, #255	; 0xff
 800b39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b39e:	f001 f999 	bl	800c6d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3a2:	f001 f967 	bl	800c674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ae:	e011      	b.n	800b3d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d012      	beq.n	800b3de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3310      	adds	r3, #16
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 fc51 	bl	800bc64 <xTaskRemoveFromEventList>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3c8:	f000 fd26 	bl	800be18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	dce9      	bgt.n	800b3b0 <prvUnlockQueue+0x60>
 800b3dc:	e000      	b.n	800b3e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	22ff      	movs	r2, #255	; 0xff
 800b3e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3e8:	f001 f974 	bl	800c6d4 <vPortExitCritical>
}
 800b3ec:	bf00      	nop
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3fc:	f001 f93a 	bl	800c674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	2b00      	cmp	r3, #0
 800b406:	d102      	bne.n	800b40e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	e001      	b.n	800b412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b412:	f001 f95f 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800b416:	68fb      	ldr	r3, [r7, #12]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b428:	f001 f924 	bl	800c674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b434:	429a      	cmp	r2, r3
 800b436:	d102      	bne.n	800b43e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b438:	2301      	movs	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	e001      	b.n	800b442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b442:	f001 f947 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800b446:	68fb      	ldr	r3, [r7, #12]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08e      	sub	sp, #56	; 0x38
 800b454:	af04      	add	r7, sp, #16
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10a      	bne.n	800b47a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	623b      	str	r3, [r7, #32]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <xTaskCreateStatic+0x46>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	61fb      	str	r3, [r7, #28]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b496:	2354      	movs	r3, #84	; 0x54
 800b498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	2b54      	cmp	r3, #84	; 0x54
 800b49e:	d00a      	beq.n	800b4b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	61bb      	str	r3, [r7, #24]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d01e      	beq.n	800b4fc <xTaskCreateStatic+0xac>
 800b4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d01b      	beq.n	800b4fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9303      	str	r3, [sp, #12]
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	f107 0314 	add.w	r3, r7, #20
 800b4e2:	9301      	str	r3, [sp, #4]
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	68b9      	ldr	r1, [r7, #8]
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 f850 	bl	800b594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f6:	f000 f8d5 	bl	800b6a4 <prvAddNewTaskToReadyList>
 800b4fa:	e001      	b.n	800b500 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b500:	697b      	ldr	r3, [r7, #20]
	}
 800b502:	4618      	mov	r0, r3
 800b504:	3728      	adds	r7, #40	; 0x28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b08c      	sub	sp, #48	; 0x30
 800b50e:	af04      	add	r7, sp, #16
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	603b      	str	r3, [r7, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b51a:	88fb      	ldrh	r3, [r7, #6]
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4618      	mov	r0, r3
 800b520:	f001 f9ca 	bl	800c8b8 <pvPortMalloc>
 800b524:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00e      	beq.n	800b54a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b52c:	2054      	movs	r0, #84	; 0x54
 800b52e:	f001 f9c3 	bl	800c8b8 <pvPortMalloc>
 800b532:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	631a      	str	r2, [r3, #48]	; 0x30
 800b540:	e005      	b.n	800b54e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b542:	6978      	ldr	r0, [r7, #20]
 800b544:	f001 fa84 	bl	800ca50 <vPortFree>
 800b548:	e001      	b.n	800b54e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d017      	beq.n	800b584 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b55c:	88fa      	ldrh	r2, [r7, #6]
 800b55e:	2300      	movs	r3, #0
 800b560:	9303      	str	r3, [sp, #12]
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	68b9      	ldr	r1, [r7, #8]
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 f80e 	bl	800b594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b578:	69f8      	ldr	r0, [r7, #28]
 800b57a:	f000 f893 	bl	800b6a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b57e:	2301      	movs	r3, #1
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	e002      	b.n	800b58a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b58a:	69bb      	ldr	r3, [r7, #24]
	}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3720      	adds	r7, #32
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <prvInitialiseNewTask+0x48>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	617b      	str	r3, [r7, #20]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01f      	beq.n	800b622 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	61fb      	str	r3, [r7, #28]
 800b5e6:	e012      	b.n	800b60e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	7819      	ldrb	r1, [r3, #0]
 800b5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3334      	adds	r3, #52	; 0x34
 800b5f8:	460a      	mov	r2, r1
 800b5fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d006      	beq.n	800b616 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	3301      	adds	r3, #1
 800b60c:	61fb      	str	r3, [r7, #28]
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	2b0f      	cmp	r3, #15
 800b612:	d9e9      	bls.n	800b5e8 <prvInitialiseNewTask+0x54>
 800b614:	e000      	b.n	800b618 <prvInitialiseNewTask+0x84>
			{
				break;
 800b616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b620:	e003      	b.n	800b62a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	2b06      	cmp	r3, #6
 800b62e:	d901      	bls.n	800b634 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b630:	2306      	movs	r3, #6
 800b632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b63e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b642:	2200      	movs	r2, #0
 800b644:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	3304      	adds	r3, #4
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff f8f2 	bl	800a834 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	3318      	adds	r3, #24
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff f8ed 	bl	800a834 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	f1c3 0207 	rsb	r2, r3, #7
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	2200      	movs	r2, #0
 800b674:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	68f9      	ldr	r1, [r7, #12]
 800b682:	69b8      	ldr	r0, [r7, #24]
 800b684:	f000 fecc 	bl	800c420 <pxPortInitialiseStack>
 800b688:	4602      	mov	r2, r0
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b69a:	bf00      	nop
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6ac:	f000 ffe2 	bl	800c674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6b0:	4b2a      	ldr	r3, [pc, #168]	; (800b75c <prvAddNewTaskToReadyList+0xb8>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	4a29      	ldr	r2, [pc, #164]	; (800b75c <prvAddNewTaskToReadyList+0xb8>)
 800b6b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6ba:	4b29      	ldr	r3, [pc, #164]	; (800b760 <prvAddNewTaskToReadyList+0xbc>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d109      	bne.n	800b6d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6c2:	4a27      	ldr	r2, [pc, #156]	; (800b760 <prvAddNewTaskToReadyList+0xbc>)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6c8:	4b24      	ldr	r3, [pc, #144]	; (800b75c <prvAddNewTaskToReadyList+0xb8>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d110      	bne.n	800b6f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6d0:	f000 fbc6 	bl	800be60 <prvInitialiseTaskLists>
 800b6d4:	e00d      	b.n	800b6f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6d6:	4b23      	ldr	r3, [pc, #140]	; (800b764 <prvAddNewTaskToReadyList+0xc0>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d109      	bne.n	800b6f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6de:	4b20      	ldr	r3, [pc, #128]	; (800b760 <prvAddNewTaskToReadyList+0xbc>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d802      	bhi.n	800b6f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6ec:	4a1c      	ldr	r2, [pc, #112]	; (800b760 <prvAddNewTaskToReadyList+0xbc>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6f2:	4b1d      	ldr	r3, [pc, #116]	; (800b768 <prvAddNewTaskToReadyList+0xc4>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	4a1b      	ldr	r2, [pc, #108]	; (800b768 <prvAddNewTaskToReadyList+0xc4>)
 800b6fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	2201      	movs	r2, #1
 800b702:	409a      	lsls	r2, r3
 800b704:	4b19      	ldr	r3, [pc, #100]	; (800b76c <prvAddNewTaskToReadyList+0xc8>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4313      	orrs	r3, r2
 800b70a:	4a18      	ldr	r2, [pc, #96]	; (800b76c <prvAddNewTaskToReadyList+0xc8>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4a15      	ldr	r2, [pc, #84]	; (800b770 <prvAddNewTaskToReadyList+0xcc>)
 800b71c:	441a      	add	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3304      	adds	r3, #4
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f7ff f892 	bl	800a84e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b72a:	f000 ffd3 	bl	800c6d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <prvAddNewTaskToReadyList+0xc0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00e      	beq.n	800b754 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b736:	4b0a      	ldr	r3, [pc, #40]	; (800b760 <prvAddNewTaskToReadyList+0xbc>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	429a      	cmp	r2, r3
 800b742:	d207      	bcs.n	800b754 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b744:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <prvAddNewTaskToReadyList+0xd0>)
 800b746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	200010b4 	.word	0x200010b4
 800b760:	20000fb4 	.word	0x20000fb4
 800b764:	200010c0 	.word	0x200010c0
 800b768:	200010d0 	.word	0x200010d0
 800b76c:	200010bc 	.word	0x200010bc
 800b770:	20000fb8 	.word	0x20000fb8
 800b774:	e000ed04 	.word	0xe000ed04

0800b778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b780:	2300      	movs	r3, #0
 800b782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d017      	beq.n	800b7ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b78a:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <vTaskDelay+0x60>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <vTaskDelay+0x30>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60bb      	str	r3, [r7, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7a8:	f000 f87a 	bl	800b8a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fdd0 	bl	800c354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7b4:	f000 f882 	bl	800b8bc <xTaskResumeAll>
 800b7b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d107      	bne.n	800b7d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7c0:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <vTaskDelay+0x64>)
 800b7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7d0:	bf00      	nop
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200010dc 	.word	0x200010dc
 800b7dc:	e000ed04 	.word	0xe000ed04

0800b7e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	; 0x28
 800b7e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ee:	463a      	mov	r2, r7
 800b7f0:	1d39      	adds	r1, r7, #4
 800b7f2:	f107 0308 	add.w	r3, r7, #8
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7f5 fb74 	bl	8000ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	9202      	str	r2, [sp, #8]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	2300      	movs	r3, #0
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	460a      	mov	r2, r1
 800b80e:	491e      	ldr	r1, [pc, #120]	; (800b888 <vTaskStartScheduler+0xa8>)
 800b810:	481e      	ldr	r0, [pc, #120]	; (800b88c <vTaskStartScheduler+0xac>)
 800b812:	f7ff fe1d 	bl	800b450 <xTaskCreateStatic>
 800b816:	4603      	mov	r3, r0
 800b818:	4a1d      	ldr	r2, [pc, #116]	; (800b890 <vTaskStartScheduler+0xb0>)
 800b81a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b81c:	4b1c      	ldr	r3, [pc, #112]	; (800b890 <vTaskStartScheduler+0xb0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	e001      	b.n	800b82e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d116      	bne.n	800b862 <vTaskStartScheduler+0x82>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	613b      	str	r3, [r7, #16]
}
 800b846:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b848:	4b12      	ldr	r3, [pc, #72]	; (800b894 <vTaskStartScheduler+0xb4>)
 800b84a:	f04f 32ff 	mov.w	r2, #4294967295
 800b84e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b850:	4b11      	ldr	r3, [pc, #68]	; (800b898 <vTaskStartScheduler+0xb8>)
 800b852:	2201      	movs	r2, #1
 800b854:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b856:	4b11      	ldr	r3, [pc, #68]	; (800b89c <vTaskStartScheduler+0xbc>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b85c:	f000 fe68 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b860:	e00e      	b.n	800b880 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b868:	d10a      	bne.n	800b880 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	60fb      	str	r3, [r7, #12]
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <vTaskStartScheduler+0x9e>
}
 800b880:	bf00      	nop
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	08010994 	.word	0x08010994
 800b88c:	0800be31 	.word	0x0800be31
 800b890:	200010d8 	.word	0x200010d8
 800b894:	200010d4 	.word	0x200010d4
 800b898:	200010c0 	.word	0x200010c0
 800b89c:	200010b8 	.word	0x200010b8

0800b8a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8a4:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <vTaskSuspendAll+0x18>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	4a03      	ldr	r2, [pc, #12]	; (800b8b8 <vTaskSuspendAll+0x18>)
 800b8ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8ae:	bf00      	nop
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	200010dc 	.word	0x200010dc

0800b8bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8ca:	4b41      	ldr	r3, [pc, #260]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	603b      	str	r3, [r7, #0]
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8e8:	f000 fec4 	bl	800c674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8ec:	4b38      	ldr	r3, [pc, #224]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	4a37      	ldr	r2, [pc, #220]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8f6:	4b36      	ldr	r3, [pc, #216]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d161      	bne.n	800b9c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8fe:	4b35      	ldr	r3, [pc, #212]	; (800b9d4 <xTaskResumeAll+0x118>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d05d      	beq.n	800b9c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b906:	e02e      	b.n	800b966 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b908:	4b33      	ldr	r3, [pc, #204]	; (800b9d8 <xTaskResumeAll+0x11c>)
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3318      	adds	r3, #24
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe fff7 	bl	800a908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fff2 	bl	800a908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	2201      	movs	r2, #1
 800b92a:	409a      	lsls	r2, r3
 800b92c:	4b2b      	ldr	r3, [pc, #172]	; (800b9dc <xTaskResumeAll+0x120>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4313      	orrs	r3, r2
 800b932:	4a2a      	ldr	r2, [pc, #168]	; (800b9dc <xTaskResumeAll+0x120>)
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b93a:	4613      	mov	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4a27      	ldr	r2, [pc, #156]	; (800b9e0 <xTaskResumeAll+0x124>)
 800b944:	441a      	add	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3304      	adds	r3, #4
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f7fe ff7e 	bl	800a84e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b956:	4b23      	ldr	r3, [pc, #140]	; (800b9e4 <xTaskResumeAll+0x128>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d302      	bcc.n	800b966 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b960:	4b21      	ldr	r3, [pc, #132]	; (800b9e8 <xTaskResumeAll+0x12c>)
 800b962:	2201      	movs	r2, #1
 800b964:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b966:	4b1c      	ldr	r3, [pc, #112]	; (800b9d8 <xTaskResumeAll+0x11c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1cc      	bne.n	800b908 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b974:	f000 fb12 	bl	800bf9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b978:	4b1c      	ldr	r3, [pc, #112]	; (800b9ec <xTaskResumeAll+0x130>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d010      	beq.n	800b9a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b984:	f000 f836 	bl	800b9f4 <xTaskIncrementTick>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b98e:	4b16      	ldr	r3, [pc, #88]	; (800b9e8 <xTaskResumeAll+0x12c>)
 800b990:	2201      	movs	r2, #1
 800b992:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3b01      	subs	r3, #1
 800b998:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f1      	bne.n	800b984 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b9a0:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <xTaskResumeAll+0x130>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9a6:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <xTaskResumeAll+0x12c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d009      	beq.n	800b9c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9b2:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <xTaskResumeAll+0x134>)
 800b9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9c2:	f000 fe87 	bl	800c6d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	200010dc 	.word	0x200010dc
 800b9d4:	200010b4 	.word	0x200010b4
 800b9d8:	20001074 	.word	0x20001074
 800b9dc:	200010bc 	.word	0x200010bc
 800b9e0:	20000fb8 	.word	0x20000fb8
 800b9e4:	20000fb4 	.word	0x20000fb4
 800b9e8:	200010c8 	.word	0x200010c8
 800b9ec:	200010c4 	.word	0x200010c4
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fe:	4b4e      	ldr	r3, [pc, #312]	; (800bb38 <xTaskIncrementTick+0x144>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f040 808e 	bne.w	800bb24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba08:	4b4c      	ldr	r3, [pc, #304]	; (800bb3c <xTaskIncrementTick+0x148>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba10:	4a4a      	ldr	r2, [pc, #296]	; (800bb3c <xTaskIncrementTick+0x148>)
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d120      	bne.n	800ba5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba1c:	4b48      	ldr	r3, [pc, #288]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00a      	beq.n	800ba3c <xTaskIncrementTick+0x48>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	603b      	str	r3, [r7, #0]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <xTaskIncrementTick+0x46>
 800ba3c:	4b40      	ldr	r3, [pc, #256]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	4b40      	ldr	r3, [pc, #256]	; (800bb44 <xTaskIncrementTick+0x150>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a3e      	ldr	r2, [pc, #248]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	4a3e      	ldr	r2, [pc, #248]	; (800bb44 <xTaskIncrementTick+0x150>)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	4b3d      	ldr	r3, [pc, #244]	; (800bb48 <xTaskIncrementTick+0x154>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	4a3c      	ldr	r2, [pc, #240]	; (800bb48 <xTaskIncrementTick+0x154>)
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	f000 fa9f 	bl	800bf9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba5e:	4b3b      	ldr	r3, [pc, #236]	; (800bb4c <xTaskIncrementTick+0x158>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d348      	bcc.n	800bafa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba68:	4b35      	ldr	r3, [pc, #212]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d104      	bne.n	800ba7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba72:	4b36      	ldr	r3, [pc, #216]	; (800bb4c <xTaskIncrementTick+0x158>)
 800ba74:	f04f 32ff 	mov.w	r2, #4294967295
 800ba78:	601a      	str	r2, [r3, #0]
					break;
 800ba7a:	e03e      	b.n	800bafa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7c:	4b30      	ldr	r3, [pc, #192]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d203      	bcs.n	800ba9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba94:	4a2d      	ldr	r2, [pc, #180]	; (800bb4c <xTaskIncrementTick+0x158>)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba9a:	e02e      	b.n	800bafa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe ff31 	bl	800a908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d004      	beq.n	800bab8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	3318      	adds	r3, #24
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fe ff28 	bl	800a908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	2201      	movs	r2, #1
 800babe:	409a      	lsls	r2, r3
 800bac0:	4b23      	ldr	r3, [pc, #140]	; (800bb50 <xTaskIncrementTick+0x15c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	4a22      	ldr	r2, [pc, #136]	; (800bb50 <xTaskIncrementTick+0x15c>)
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	4613      	mov	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4a1f      	ldr	r2, [pc, #124]	; (800bb54 <xTaskIncrementTick+0x160>)
 800bad8:	441a      	add	r2, r3
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	3304      	adds	r3, #4
 800bade:	4619      	mov	r1, r3
 800bae0:	4610      	mov	r0, r2
 800bae2:	f7fe feb4 	bl	800a84e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baea:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <xTaskIncrementTick+0x164>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d3b9      	bcc.n	800ba68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800baf4:	2301      	movs	r3, #1
 800baf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baf8:	e7b6      	b.n	800ba68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bafa:	4b17      	ldr	r3, [pc, #92]	; (800bb58 <xTaskIncrementTick+0x164>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb00:	4914      	ldr	r1, [pc, #80]	; (800bb54 <xTaskIncrementTick+0x160>)
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	440b      	add	r3, r1
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d901      	bls.n	800bb16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb16:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <xTaskIncrementTick+0x168>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d007      	beq.n	800bb2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	617b      	str	r3, [r7, #20]
 800bb22:	e004      	b.n	800bb2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb24:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <xTaskIncrementTick+0x16c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	4a0d      	ldr	r2, [pc, #52]	; (800bb60 <xTaskIncrementTick+0x16c>)
 800bb2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb2e:	697b      	ldr	r3, [r7, #20]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	200010dc 	.word	0x200010dc
 800bb3c:	200010b8 	.word	0x200010b8
 800bb40:	2000106c 	.word	0x2000106c
 800bb44:	20001070 	.word	0x20001070
 800bb48:	200010cc 	.word	0x200010cc
 800bb4c:	200010d4 	.word	0x200010d4
 800bb50:	200010bc 	.word	0x200010bc
 800bb54:	20000fb8 	.word	0x20000fb8
 800bb58:	20000fb4 	.word	0x20000fb4
 800bb5c:	200010c8 	.word	0x200010c8
 800bb60:	200010c4 	.word	0x200010c4

0800bb64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb6a:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <vTaskSwitchContext+0xa4>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb72:	4b26      	ldr	r3, [pc, #152]	; (800bc0c <vTaskSwitchContext+0xa8>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb78:	e03f      	b.n	800bbfa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bb7a:	4b24      	ldr	r3, [pc, #144]	; (800bc0c <vTaskSwitchContext+0xa8>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb80:	4b23      	ldr	r3, [pc, #140]	; (800bc10 <vTaskSwitchContext+0xac>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	fab3 f383 	clz	r3, r3
 800bb8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb8e:	7afb      	ldrb	r3, [r7, #11]
 800bb90:	f1c3 031f 	rsb	r3, r3, #31
 800bb94:	617b      	str	r3, [r7, #20]
 800bb96:	491f      	ldr	r1, [pc, #124]	; (800bc14 <vTaskSwitchContext+0xb0>)
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	440b      	add	r3, r1
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	607b      	str	r3, [r7, #4]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <vTaskSwitchContext+0x5a>
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4a12      	ldr	r2, [pc, #72]	; (800bc14 <vTaskSwitchContext+0xb0>)
 800bbcc:	4413      	add	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	605a      	str	r2, [r3, #4]
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3308      	adds	r3, #8
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d104      	bne.n	800bbf0 <vTaskSwitchContext+0x8c>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	605a      	str	r2, [r3, #4]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	4a08      	ldr	r2, [pc, #32]	; (800bc18 <vTaskSwitchContext+0xb4>)
 800bbf8:	6013      	str	r3, [r2, #0]
}
 800bbfa:	bf00      	nop
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	200010dc 	.word	0x200010dc
 800bc0c:	200010c8 	.word	0x200010c8
 800bc10:	200010bc 	.word	0x200010bc
 800bc14:	20000fb8 	.word	0x20000fb8
 800bc18:	20000fb4 	.word	0x20000fb4

0800bc1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	60fb      	str	r3, [r7, #12]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <vTaskPlaceOnEventList+0x44>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3318      	adds	r3, #24
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7fe fe23 	bl	800a896 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc50:	2101      	movs	r1, #1
 800bc52:	6838      	ldr	r0, [r7, #0]
 800bc54:	f000 fb7e 	bl	800c354 <prvAddCurrentTaskToDelayedList>
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20000fb4 	.word	0x20000fb4

0800bc64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	60fb      	str	r3, [r7, #12]
}
 800bc8c:	bf00      	nop
 800bc8e:	e7fe      	b.n	800bc8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3318      	adds	r3, #24
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fe fe37 	bl	800a908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc9a:	4b1d      	ldr	r3, [pc, #116]	; (800bd10 <xTaskRemoveFromEventList+0xac>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d11c      	bne.n	800bcdc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3304      	adds	r3, #4
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe fe2e 	bl	800a908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	409a      	lsls	r2, r3
 800bcb4:	4b17      	ldr	r3, [pc, #92]	; (800bd14 <xTaskRemoveFromEventList+0xb0>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	4a16      	ldr	r2, [pc, #88]	; (800bd14 <xTaskRemoveFromEventList+0xb0>)
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4a13      	ldr	r2, [pc, #76]	; (800bd18 <xTaskRemoveFromEventList+0xb4>)
 800bccc:	441a      	add	r2, r3
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fe fdba 	bl	800a84e <vListInsertEnd>
 800bcda:	e005      	b.n	800bce8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	3318      	adds	r3, #24
 800bce0:	4619      	mov	r1, r3
 800bce2:	480e      	ldr	r0, [pc, #56]	; (800bd1c <xTaskRemoveFromEventList+0xb8>)
 800bce4:	f7fe fdb3 	bl	800a84e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcec:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <xTaskRemoveFromEventList+0xbc>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d905      	bls.n	800bd02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bcfa:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <xTaskRemoveFromEventList+0xc0>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]
 800bd00:	e001      	b.n	800bd06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bd02:	2300      	movs	r3, #0
 800bd04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd06:	697b      	ldr	r3, [r7, #20]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	200010dc 	.word	0x200010dc
 800bd14:	200010bc 	.word	0x200010bc
 800bd18:	20000fb8 	.word	0x20000fb8
 800bd1c:	20001074 	.word	0x20001074
 800bd20:	20000fb4 	.word	0x20000fb4
 800bd24:	200010c8 	.word	0x200010c8

0800bd28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd30:	4b06      	ldr	r3, [pc, #24]	; (800bd4c <vTaskInternalSetTimeOutState+0x24>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd38:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <vTaskInternalSetTimeOutState+0x28>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	605a      	str	r2, [r3, #4]
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	200010cc 	.word	0x200010cc
 800bd50:	200010b8 	.word	0x200010b8

0800bd54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	613b      	str	r3, [r7, #16]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	60fb      	str	r3, [r7, #12]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd96:	f000 fc6d 	bl	800c674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd9a:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <xTaskCheckForTimeOut+0xbc>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb2:	d102      	bne.n	800bdba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61fb      	str	r3, [r7, #28]
 800bdb8:	e023      	b.n	800be02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	4b15      	ldr	r3, [pc, #84]	; (800be14 <xTaskCheckForTimeOut+0xc0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d007      	beq.n	800bdd6 <xTaskCheckForTimeOut+0x82>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	69ba      	ldr	r2, [r7, #24]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d302      	bcc.n	800bdd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	61fb      	str	r3, [r7, #28]
 800bdd4:	e015      	b.n	800be02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d20b      	bcs.n	800bdf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	1ad2      	subs	r2, r2, r3
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff ff9b 	bl	800bd28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61fb      	str	r3, [r7, #28]
 800bdf6:	e004      	b.n	800be02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bdfe:	2301      	movs	r3, #1
 800be00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be02:	f000 fc67 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800be06:	69fb      	ldr	r3, [r7, #28]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3720      	adds	r7, #32
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	200010b8 	.word	0x200010b8
 800be14:	200010cc 	.word	0x200010cc

0800be18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be18:	b480      	push	{r7}
 800be1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be1c:	4b03      	ldr	r3, [pc, #12]	; (800be2c <vTaskMissedYield+0x14>)
 800be1e:	2201      	movs	r2, #1
 800be20:	601a      	str	r2, [r3, #0]
}
 800be22:	bf00      	nop
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	200010c8 	.word	0x200010c8

0800be30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be38:	f000 f852 	bl	800bee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <prvIdleTask+0x28>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d9f9      	bls.n	800be38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <prvIdleTask+0x2c>)
 800be46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4a:	601a      	str	r2, [r3, #0]
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be54:	e7f0      	b.n	800be38 <prvIdleTask+0x8>
 800be56:	bf00      	nop
 800be58:	20000fb8 	.word	0x20000fb8
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be66:	2300      	movs	r3, #0
 800be68:	607b      	str	r3, [r7, #4]
 800be6a:	e00c      	b.n	800be86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4a12      	ldr	r2, [pc, #72]	; (800bec0 <prvInitialiseTaskLists+0x60>)
 800be78:	4413      	add	r3, r2
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe fcba 	bl	800a7f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3301      	adds	r3, #1
 800be84:	607b      	str	r3, [r7, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b06      	cmp	r3, #6
 800be8a:	d9ef      	bls.n	800be6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be8c:	480d      	ldr	r0, [pc, #52]	; (800bec4 <prvInitialiseTaskLists+0x64>)
 800be8e:	f7fe fcb1 	bl	800a7f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be92:	480d      	ldr	r0, [pc, #52]	; (800bec8 <prvInitialiseTaskLists+0x68>)
 800be94:	f7fe fcae 	bl	800a7f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be98:	480c      	ldr	r0, [pc, #48]	; (800becc <prvInitialiseTaskLists+0x6c>)
 800be9a:	f7fe fcab 	bl	800a7f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be9e:	480c      	ldr	r0, [pc, #48]	; (800bed0 <prvInitialiseTaskLists+0x70>)
 800bea0:	f7fe fca8 	bl	800a7f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bea4:	480b      	ldr	r0, [pc, #44]	; (800bed4 <prvInitialiseTaskLists+0x74>)
 800bea6:	f7fe fca5 	bl	800a7f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800beaa:	4b0b      	ldr	r3, [pc, #44]	; (800bed8 <prvInitialiseTaskLists+0x78>)
 800beac:	4a05      	ldr	r2, [pc, #20]	; (800bec4 <prvInitialiseTaskLists+0x64>)
 800beae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800beb0:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <prvInitialiseTaskLists+0x7c>)
 800beb2:	4a05      	ldr	r2, [pc, #20]	; (800bec8 <prvInitialiseTaskLists+0x68>)
 800beb4:	601a      	str	r2, [r3, #0]
}
 800beb6:	bf00      	nop
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000fb8 	.word	0x20000fb8
 800bec4:	20001044 	.word	0x20001044
 800bec8:	20001058 	.word	0x20001058
 800becc:	20001074 	.word	0x20001074
 800bed0:	20001088 	.word	0x20001088
 800bed4:	200010a0 	.word	0x200010a0
 800bed8:	2000106c 	.word	0x2000106c
 800bedc:	20001070 	.word	0x20001070

0800bee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bee6:	e019      	b.n	800bf1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bee8:	f000 fbc4 	bl	800c674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beec:	4b10      	ldr	r3, [pc, #64]	; (800bf30 <prvCheckTasksWaitingTermination+0x50>)
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fd05 	bl	800a908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800befe:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <prvCheckTasksWaitingTermination+0x54>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	4a0b      	ldr	r2, [pc, #44]	; (800bf34 <prvCheckTasksWaitingTermination+0x54>)
 800bf06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf08:	4b0b      	ldr	r3, [pc, #44]	; (800bf38 <prvCheckTasksWaitingTermination+0x58>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	4a0a      	ldr	r2, [pc, #40]	; (800bf38 <prvCheckTasksWaitingTermination+0x58>)
 800bf10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf12:	f000 fbdf 	bl	800c6d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f810 	bl	800bf3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <prvCheckTasksWaitingTermination+0x58>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1e1      	bne.n	800bee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20001088 	.word	0x20001088
 800bf34:	200010b4 	.word	0x200010b4
 800bf38:	2000109c 	.word	0x2000109c

0800bf3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d108      	bne.n	800bf60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 fd7c 	bl	800ca50 <vPortFree>
				vPortFree( pxTCB );
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fd79 	bl	800ca50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf5e:	e018      	b.n	800bf92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d103      	bne.n	800bf72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fd70 	bl	800ca50 <vPortFree>
	}
 800bf70:	e00f      	b.n	800bf92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d00a      	beq.n	800bf92 <prvDeleteTCB+0x56>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	60fb      	str	r3, [r7, #12]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <prvDeleteTCB+0x54>
	}
 800bf92:	bf00      	nop
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
	...

0800bf9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfa2:	4b0c      	ldr	r3, [pc, #48]	; (800bfd4 <prvResetNextTaskUnblockTime+0x38>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <prvResetNextTaskUnblockTime+0x3c>)
 800bfae:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfb4:	e008      	b.n	800bfc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb6:	4b07      	ldr	r3, [pc, #28]	; (800bfd4 <prvResetNextTaskUnblockTime+0x38>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	4a04      	ldr	r2, [pc, #16]	; (800bfd8 <prvResetNextTaskUnblockTime+0x3c>)
 800bfc6:	6013      	str	r3, [r2, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	2000106c 	.word	0x2000106c
 800bfd8:	200010d4 	.word	0x200010d4

0800bfdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfe2:	4b0b      	ldr	r3, [pc, #44]	; (800c010 <xTaskGetSchedulerState+0x34>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d102      	bne.n	800bff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfea:	2301      	movs	r3, #1
 800bfec:	607b      	str	r3, [r7, #4]
 800bfee:	e008      	b.n	800c002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bff0:	4b08      	ldr	r3, [pc, #32]	; (800c014 <xTaskGetSchedulerState+0x38>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d102      	bne.n	800bffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bff8:	2302      	movs	r3, #2
 800bffa:	607b      	str	r3, [r7, #4]
 800bffc:	e001      	b.n	800c002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bffe:	2300      	movs	r3, #0
 800c000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c002:	687b      	ldr	r3, [r7, #4]
	}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	200010c0 	.word	0x200010c0
 800c014:	200010dc 	.word	0x200010dc

0800c018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c024:	2300      	movs	r3, #0
 800c026:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d05e      	beq.n	800c0ec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c032:	4b31      	ldr	r3, [pc, #196]	; (800c0f8 <xTaskPriorityInherit+0xe0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	429a      	cmp	r2, r3
 800c03a:	d24e      	bcs.n	800c0da <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	2b00      	cmp	r3, #0
 800c042:	db06      	blt.n	800c052 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c044:	4b2c      	ldr	r3, [pc, #176]	; (800c0f8 <xTaskPriorityInherit+0xe0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04a:	f1c3 0207 	rsb	r2, r3, #7
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	6959      	ldr	r1, [r3, #20]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05a:	4613      	mov	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4413      	add	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4a26      	ldr	r2, [pc, #152]	; (800c0fc <xTaskPriorityInherit+0xe4>)
 800c064:	4413      	add	r3, r2
 800c066:	4299      	cmp	r1, r3
 800c068:	d12f      	bne.n	800c0ca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe fc4a 	bl	800a908 <uxListRemove>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10a      	bne.n	800c090 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07e:	2201      	movs	r2, #1
 800c080:	fa02 f303 	lsl.w	r3, r2, r3
 800c084:	43da      	mvns	r2, r3
 800c086:	4b1e      	ldr	r3, [pc, #120]	; (800c100 <xTaskPriorityInherit+0xe8>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4013      	ands	r3, r2
 800c08c:	4a1c      	ldr	r2, [pc, #112]	; (800c100 <xTaskPriorityInherit+0xe8>)
 800c08e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c090:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <xTaskPriorityInherit+0xe0>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	2201      	movs	r2, #1
 800c0a0:	409a      	lsls	r2, r3
 800c0a2:	4b17      	ldr	r3, [pc, #92]	; (800c100 <xTaskPriorityInherit+0xe8>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	4a15      	ldr	r2, [pc, #84]	; (800c100 <xTaskPriorityInherit+0xe8>)
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4a10      	ldr	r2, [pc, #64]	; (800c0fc <xTaskPriorityInherit+0xe4>)
 800c0ba:	441a      	add	r2, r3
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	3304      	adds	r3, #4
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	f7fe fbc3 	bl	800a84e <vListInsertEnd>
 800c0c8:	e004      	b.n	800c0d4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <xTaskPriorityInherit+0xe0>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	e008      	b.n	800c0ec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0de:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <xTaskPriorityInherit+0xe0>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d201      	bcs.n	800c0ec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000fb4 	.word	0x20000fb4
 800c0fc:	20000fb8 	.word	0x20000fb8
 800c100:	200010bc 	.word	0x200010bc

0800c104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c110:	2300      	movs	r3, #0
 800c112:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d06e      	beq.n	800c1f8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c11a:	4b3a      	ldr	r3, [pc, #232]	; (800c204 <xTaskPriorityDisinherit+0x100>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	429a      	cmp	r2, r3
 800c122:	d00a      	beq.n	800c13a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	60fb      	str	r3, [r7, #12]
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	60bb      	str	r3, [r7, #8]
}
 800c154:	bf00      	nop
 800c156:	e7fe      	b.n	800c156 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c15c:	1e5a      	subs	r2, r3, #1
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d044      	beq.n	800c1f8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c172:	2b00      	cmp	r3, #0
 800c174:	d140      	bne.n	800c1f8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3304      	adds	r3, #4
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fbc4 	bl	800a908 <uxListRemove>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d115      	bne.n	800c1b2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18a:	491f      	ldr	r1, [pc, #124]	; (800c208 <xTaskPriorityDisinherit+0x104>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	440b      	add	r3, r1
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <xTaskPriorityDisinherit+0xae>
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a6:	43da      	mvns	r2, r3
 800c1a8:	4b18      	ldr	r3, [pc, #96]	; (800c20c <xTaskPriorityDisinherit+0x108>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	4a17      	ldr	r2, [pc, #92]	; (800c20c <xTaskPriorityDisinherit+0x108>)
 800c1b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	f1c3 0207 	rsb	r2, r3, #7
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	409a      	lsls	r2, r3
 800c1ce:	4b0f      	ldr	r3, [pc, #60]	; (800c20c <xTaskPriorityDisinherit+0x108>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	4a0d      	ldr	r2, [pc, #52]	; (800c20c <xTaskPriorityDisinherit+0x108>)
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4a08      	ldr	r2, [pc, #32]	; (800c208 <xTaskPriorityDisinherit+0x104>)
 800c1e6:	441a      	add	r2, r3
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	f7fe fb2d 	bl	800a84e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1f8:	697b      	ldr	r3, [r7, #20]
	}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20000fb4 	.word	0x20000fb4
 800c208:	20000fb8 	.word	0x20000fb8
 800c20c:	200010bc 	.word	0x200010bc

0800c210 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c210:	b580      	push	{r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c21e:	2301      	movs	r3, #1
 800c220:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d077      	beq.n	800c318 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	60fb      	str	r3, [r7, #12]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d902      	bls.n	800c256 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	e002      	b.n	800c25c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c25a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	69fa      	ldr	r2, [r7, #28]
 800c262:	429a      	cmp	r2, r3
 800c264:	d058      	beq.n	800c318 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d153      	bne.n	800c318 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c270:	4b2b      	ldr	r3, [pc, #172]	; (800c320 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	429a      	cmp	r2, r3
 800c278:	d10a      	bne.n	800c290 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	60bb      	str	r3, [r7, #8]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	db04      	blt.n	800c2ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	f1c3 0207 	rsb	r2, r3, #7
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	6959      	ldr	r1, [r3, #20]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4a19      	ldr	r2, [pc, #100]	; (800c324 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c2be:	4413      	add	r3, r2
 800c2c0:	4299      	cmp	r1, r3
 800c2c2:	d129      	bne.n	800c318 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fe fb1d 	bl	800a908 <uxListRemove>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10a      	bne.n	800c2ea <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d8:	2201      	movs	r2, #1
 800c2da:	fa02 f303 	lsl.w	r3, r2, r3
 800c2de:	43da      	mvns	r2, r3
 800c2e0:	4b11      	ldr	r3, [pc, #68]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	4a10      	ldr	r2, [pc, #64]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c2e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	409a      	lsls	r2, r3
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	4a0b      	ldr	r2, [pc, #44]	; (800c328 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c2fa:	6013      	str	r3, [r2, #0]
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4a06      	ldr	r2, [pc, #24]	; (800c324 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c30a:	441a      	add	r2, r3
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	3304      	adds	r3, #4
 800c310:	4619      	mov	r1, r3
 800c312:	4610      	mov	r0, r2
 800c314:	f7fe fa9b 	bl	800a84e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c318:	bf00      	nop
 800c31a:	3720      	adds	r7, #32
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000fb4 	.word	0x20000fb4
 800c324:	20000fb8 	.word	0x20000fb8
 800c328:	200010bc 	.word	0x200010bc

0800c32c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c32c:	b480      	push	{r7}
 800c32e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <pvTaskIncrementMutexHeldCount+0x24>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <pvTaskIncrementMutexHeldCount+0x24>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c33e:	3201      	adds	r2, #1
 800c340:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c342:	4b03      	ldr	r3, [pc, #12]	; (800c350 <pvTaskIncrementMutexHeldCount+0x24>)
 800c344:	681b      	ldr	r3, [r3, #0]
	}
 800c346:	4618      	mov	r0, r3
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20000fb4 	.word	0x20000fb4

0800c354 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c35e:	4b29      	ldr	r3, [pc, #164]	; (800c404 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c364:	4b28      	ldr	r3, [pc, #160]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3304      	adds	r3, #4
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe facc 	bl	800a908 <uxListRemove>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c376:	4b24      	ldr	r3, [pc, #144]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37c:	2201      	movs	r2, #1
 800c37e:	fa02 f303 	lsl.w	r3, r2, r3
 800c382:	43da      	mvns	r2, r3
 800c384:	4b21      	ldr	r3, [pc, #132]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4013      	ands	r3, r2
 800c38a:	4a20      	ldr	r2, [pc, #128]	; (800c40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c38c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c394:	d10a      	bne.n	800c3ac <prvAddCurrentTaskToDelayedList+0x58>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d007      	beq.n	800c3ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c39c:	4b1a      	ldr	r3, [pc, #104]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	481a      	ldr	r0, [pc, #104]	; (800c410 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c3a6:	f7fe fa52 	bl	800a84e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3aa:	e026      	b.n	800c3fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3b4:	4b14      	ldr	r3, [pc, #80]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d209      	bcs.n	800c3d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3c4:	4b13      	ldr	r3, [pc, #76]	; (800c414 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	4b0f      	ldr	r3, [pc, #60]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7fe fa60 	bl	800a896 <vListInsert>
}
 800c3d6:	e010      	b.n	800c3fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d8:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7fe fa56 	bl	800a896 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3ea:	4b0c      	ldr	r3, [pc, #48]	; (800c41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d202      	bcs.n	800c3fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c3f4:	4a09      	ldr	r2, [pc, #36]	; (800c41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	6013      	str	r3, [r2, #0]
}
 800c3fa:	bf00      	nop
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	200010b8 	.word	0x200010b8
 800c408:	20000fb4 	.word	0x20000fb4
 800c40c:	200010bc 	.word	0x200010bc
 800c410:	200010a0 	.word	0x200010a0
 800c414:	20001070 	.word	0x20001070
 800c418:	2000106c 	.word	0x2000106c
 800c41c:	200010d4 	.word	0x200010d4

0800c420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3b04      	subs	r3, #4
 800c430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b04      	subs	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f023 0201 	bic.w	r2, r3, #1
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3b04      	subs	r3, #4
 800c44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c450:	4a0c      	ldr	r2, [pc, #48]	; (800c484 <pxPortInitialiseStack+0x64>)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3b14      	subs	r3, #20
 800c45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3b04      	subs	r3, #4
 800c466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f06f 0202 	mvn.w	r2, #2
 800c46e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3b20      	subs	r3, #32
 800c474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c476:	68fb      	ldr	r3, [r7, #12]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	0800c489 	.word	0x0800c489

0800c488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c492:	4b12      	ldr	r3, [pc, #72]	; (800c4dc <prvTaskExitError+0x54>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49a:	d00a      	beq.n	800c4b2 <prvTaskExitError+0x2a>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	60fb      	str	r3, [r7, #12]
}
 800c4ae:	bf00      	nop
 800c4b0:	e7fe      	b.n	800c4b0 <prvTaskExitError+0x28>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	60bb      	str	r3, [r7, #8]
}
 800c4c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4c6:	bf00      	nop
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0fc      	beq.n	800c4c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	2000011c 	.word	0x2000011c

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	; (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	; (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c536:	4b46      	ldr	r3, [pc, #280]	; (800c650 <xPortStartScheduler+0x120>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a46      	ldr	r2, [pc, #280]	; (800c654 <xPortStartScheduler+0x124>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d10a      	bne.n	800c556 <xPortStartScheduler+0x26>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	613b      	str	r3, [r7, #16]
}
 800c552:	bf00      	nop
 800c554:	e7fe      	b.n	800c554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c556:	4b3e      	ldr	r3, [pc, #248]	; (800c650 <xPortStartScheduler+0x120>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a3f      	ldr	r2, [pc, #252]	; (800c658 <xPortStartScheduler+0x128>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d10a      	bne.n	800c576 <xPortStartScheduler+0x46>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	60fb      	str	r3, [r7, #12]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c576:	4b39      	ldr	r3, [pc, #228]	; (800c65c <xPortStartScheduler+0x12c>)
 800c578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	22ff      	movs	r2, #255	; 0xff
 800c586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c590:	78fb      	ldrb	r3, [r7, #3]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4b31      	ldr	r3, [pc, #196]	; (800c660 <xPortStartScheduler+0x130>)
 800c59c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c59e:	4b31      	ldr	r3, [pc, #196]	; (800c664 <xPortStartScheduler+0x134>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a4:	e009      	b.n	800c5ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c5a6:	4b2f      	ldr	r3, [pc, #188]	; (800c664 <xPortStartScheduler+0x134>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	4a2d      	ldr	r2, [pc, #180]	; (800c664 <xPortStartScheduler+0x134>)
 800c5ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5ba:	78fb      	ldrb	r3, [r7, #3]
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c2:	2b80      	cmp	r3, #128	; 0x80
 800c5c4:	d0ef      	beq.n	800c5a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <xPortStartScheduler+0x134>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f1c3 0307 	rsb	r3, r3, #7
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	d00a      	beq.n	800c5e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	60bb      	str	r3, [r7, #8]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5e8:	4b1e      	ldr	r3, [pc, #120]	; (800c664 <xPortStartScheduler+0x134>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	021b      	lsls	r3, r3, #8
 800c5ee:	4a1d      	ldr	r2, [pc, #116]	; (800c664 <xPortStartScheduler+0x134>)
 800c5f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5f2:	4b1c      	ldr	r3, [pc, #112]	; (800c664 <xPortStartScheduler+0x134>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5fa:	4a1a      	ldr	r2, [pc, #104]	; (800c664 <xPortStartScheduler+0x134>)
 800c5fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	b2da      	uxtb	r2, r3
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c606:	4b18      	ldr	r3, [pc, #96]	; (800c668 <xPortStartScheduler+0x138>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a17      	ldr	r2, [pc, #92]	; (800c668 <xPortStartScheduler+0x138>)
 800c60c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c612:	4b15      	ldr	r3, [pc, #84]	; (800c668 <xPortStartScheduler+0x138>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a14      	ldr	r2, [pc, #80]	; (800c668 <xPortStartScheduler+0x138>)
 800c618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c61c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c61e:	f000 f8dd 	bl	800c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c622:	4b12      	ldr	r3, [pc, #72]	; (800c66c <xPortStartScheduler+0x13c>)
 800c624:	2200      	movs	r2, #0
 800c626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c628:	f000 f8fc 	bl	800c824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c62c:	4b10      	ldr	r3, [pc, #64]	; (800c670 <xPortStartScheduler+0x140>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a0f      	ldr	r2, [pc, #60]	; (800c670 <xPortStartScheduler+0x140>)
 800c632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c638:	f7ff ff66 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c63c:	f7ff fa92 	bl	800bb64 <vTaskSwitchContext>
	prvTaskExitError();
 800c640:	f7ff ff22 	bl	800c488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3718      	adds	r7, #24
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	e000ed00 	.word	0xe000ed00
 800c654:	410fc271 	.word	0x410fc271
 800c658:	410fc270 	.word	0x410fc270
 800c65c:	e000e400 	.word	0xe000e400
 800c660:	200010e0 	.word	0x200010e0
 800c664:	200010e4 	.word	0x200010e4
 800c668:	e000ed20 	.word	0xe000ed20
 800c66c:	2000011c 	.word	0x2000011c
 800c670:	e000ef34 	.word	0xe000ef34

0800c674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
	__asm volatile
 800c67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	607b      	str	r3, [r7, #4]
}
 800c68c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c68e:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <vPortEnterCritical+0x58>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	3301      	adds	r3, #1
 800c694:	4a0d      	ldr	r2, [pc, #52]	; (800c6cc <vPortEnterCritical+0x58>)
 800c696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c698:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <vPortEnterCritical+0x58>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d10f      	bne.n	800c6c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <vPortEnterCritical+0x5c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	603b      	str	r3, [r7, #0]
}
 800c6bc:	bf00      	nop
 800c6be:	e7fe      	b.n	800c6be <vPortEnterCritical+0x4a>
	}
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	2000011c 	.word	0x2000011c
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6da:	4b12      	ldr	r3, [pc, #72]	; (800c724 <vPortExitCritical+0x50>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10a      	bne.n	800c6f8 <vPortExitCritical+0x24>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	607b      	str	r3, [r7, #4]
}
 800c6f4:	bf00      	nop
 800c6f6:	e7fe      	b.n	800c6f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6f8:	4b0a      	ldr	r3, [pc, #40]	; (800c724 <vPortExitCritical+0x50>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	4a09      	ldr	r2, [pc, #36]	; (800c724 <vPortExitCritical+0x50>)
 800c700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c702:	4b08      	ldr	r3, [pc, #32]	; (800c724 <vPortExitCritical+0x50>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d105      	bne.n	800c716 <vPortExitCritical+0x42>
 800c70a:	2300      	movs	r3, #0
 800c70c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	f383 8811 	msr	BASEPRI, r3
}
 800c714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c716:	bf00      	nop
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	2000011c 	.word	0x2000011c
	...

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	; (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c754:	f380 8811 	msr	BASEPRI, r0
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f7ff fa00 	bl	800bb64 <vTaskSwitchContext>
 800c764:	f04f 0000 	mov.w	r0, #0
 800c768:	f380 8811 	msr	BASEPRI, r0
 800c76c:	bc09      	pop	{r0, r3}
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6808      	ldr	r0, [r1, #0]
 800c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c776:	f01e 0f10 	tst.w	lr, #16
 800c77a:	bf08      	it	eq
 800c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c780:	f380 8809 	msr	PSP, r0
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst>:
 800c790:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b2:	f7ff f91f 	bl	800b9f4 <xTaskIncrementTick>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7bc:	4b06      	ldr	r3, [pc, #24]	; (800c7d8 <xPortSysTickHandler+0x40>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	; (800c814 <vPortSetupTimerInterrupt+0x38>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <vPortSetupTimerInterrupt+0x3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0a      	ldr	r2, [pc, #40]	; (800c81c <vPortSetupTimerInterrupt+0x40>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	099b      	lsrs	r3, r3, #6
 800c7f8:	4a09      	ldr	r2, [pc, #36]	; (800c820 <vPortSetupTimerInterrupt+0x44>)
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7fe:	4b04      	ldr	r3, [pc, #16]	; (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c800:	2207      	movs	r2, #7
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	e000e010 	.word	0xe000e010
 800c814:	e000e018 	.word	0xe000e018
 800c818:	20000000 	.word	0x20000000
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	e000e014 	.word	0xe000e014

0800c824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c834 <vPortEnableVFP+0x10>
 800c828:	6801      	ldr	r1, [r0, #0]
 800c82a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c82e:	6001      	str	r1, [r0, #0]
 800c830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c832:	bf00      	nop
 800c834:	e000ed88 	.word	0xe000ed88

0800c838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c83e:	f3ef 8305 	mrs	r3, IPSR
 800c842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d914      	bls.n	800c874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c84a:	4a17      	ldr	r2, [pc, #92]	; (800c8a8 <vPortValidateInterruptPriority+0x70>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c854:	4b15      	ldr	r3, [pc, #84]	; (800c8ac <vPortValidateInterruptPriority+0x74>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	7afa      	ldrb	r2, [r7, #11]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d20a      	bcs.n	800c874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c874:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <vPortValidateInterruptPriority+0x78>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c87c:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <vPortValidateInterruptPriority+0x7c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	429a      	cmp	r2, r3
 800c882:	d90a      	bls.n	800c89a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	603b      	str	r3, [r7, #0]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <vPortValidateInterruptPriority+0x60>
	}
 800c89a:	bf00      	nop
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	e000e3f0 	.word	0xe000e3f0
 800c8ac:	200010e0 	.word	0x200010e0
 800c8b0:	e000ed0c 	.word	0xe000ed0c
 800c8b4:	200010e4 	.word	0x200010e4

0800c8b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	; 0x28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8c4:	f7fe ffec 	bl	800b8a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8c8:	4b5b      	ldr	r3, [pc, #364]	; (800ca38 <pvPortMalloc+0x180>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8d0:	f000 f920 	bl	800cb14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8d4:	4b59      	ldr	r3, [pc, #356]	; (800ca3c <pvPortMalloc+0x184>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4013      	ands	r3, r2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 8093 	bne.w	800ca08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d01d      	beq.n	800c924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c8e8:	2208      	movs	r2, #8
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d014      	beq.n	800c924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f023 0307 	bic.w	r3, r3, #7
 800c900:	3308      	adds	r3, #8
 800c902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <pvPortMalloc+0x6c>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	617b      	str	r3, [r7, #20]
}
 800c920:	bf00      	nop
 800c922:	e7fe      	b.n	800c922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d06e      	beq.n	800ca08 <pvPortMalloc+0x150>
 800c92a:	4b45      	ldr	r3, [pc, #276]	; (800ca40 <pvPortMalloc+0x188>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	429a      	cmp	r2, r3
 800c932:	d869      	bhi.n	800ca08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c934:	4b43      	ldr	r3, [pc, #268]	; (800ca44 <pvPortMalloc+0x18c>)
 800c936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c938:	4b42      	ldr	r3, [pc, #264]	; (800ca44 <pvPortMalloc+0x18c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c93e:	e004      	b.n	800c94a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d903      	bls.n	800c95c <pvPortMalloc+0xa4>
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1f1      	bne.n	800c940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c95c:	4b36      	ldr	r3, [pc, #216]	; (800ca38 <pvPortMalloc+0x180>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c962:	429a      	cmp	r2, r3
 800c964:	d050      	beq.n	800ca08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2208      	movs	r2, #8
 800c96c:	4413      	add	r3, r2
 800c96e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	1ad2      	subs	r2, r2, r3
 800c980:	2308      	movs	r3, #8
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	429a      	cmp	r2, r3
 800c986:	d91f      	bls.n	800c9c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4413      	add	r3, r2
 800c98e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	613b      	str	r3, [r7, #16]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	1ad2      	subs	r2, r2, r3
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9c2:	69b8      	ldr	r0, [r7, #24]
 800c9c4:	f000 f908 	bl	800cbd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9c8:	4b1d      	ldr	r3, [pc, #116]	; (800ca40 <pvPortMalloc+0x188>)
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	4a1b      	ldr	r2, [pc, #108]	; (800ca40 <pvPortMalloc+0x188>)
 800c9d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ca40 <pvPortMalloc+0x188>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <pvPortMalloc+0x190>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d203      	bcs.n	800c9ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9e2:	4b17      	ldr	r3, [pc, #92]	; (800ca40 <pvPortMalloc+0x188>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a18      	ldr	r2, [pc, #96]	; (800ca48 <pvPortMalloc+0x190>)
 800c9e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	4b13      	ldr	r3, [pc, #76]	; (800ca3c <pvPortMalloc+0x184>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <pvPortMalloc+0x194>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	4a11      	ldr	r2, [pc, #68]	; (800ca4c <pvPortMalloc+0x194>)
 800ca06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca08:	f7fe ff58 	bl	800b8bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	f003 0307 	and.w	r3, r3, #7
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <pvPortMalloc+0x174>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	60fb      	str	r3, [r7, #12]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <pvPortMalloc+0x172>
	return pvReturn;
 800ca2c:	69fb      	ldr	r3, [r7, #28]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3728      	adds	r7, #40	; 0x28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20001ca8 	.word	0x20001ca8
 800ca3c:	20001cbc 	.word	0x20001cbc
 800ca40:	20001cac 	.word	0x20001cac
 800ca44:	20001ca0 	.word	0x20001ca0
 800ca48:	20001cb0 	.word	0x20001cb0
 800ca4c:	20001cb4 	.word	0x20001cb4

0800ca50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d04d      	beq.n	800cafe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca62:	2308      	movs	r3, #8
 800ca64:	425b      	negs	r3, r3
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	4413      	add	r3, r2
 800ca6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	4b24      	ldr	r3, [pc, #144]	; (800cb08 <vPortFree+0xb8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4013      	ands	r3, r2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <vPortFree+0x44>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	60fb      	str	r3, [r7, #12]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <vPortFree+0x62>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	60bb      	str	r3, [r7, #8]
}
 800caae:	bf00      	nop
 800cab0:	e7fe      	b.n	800cab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <vPortFree+0xb8>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4013      	ands	r3, r2
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01e      	beq.n	800cafe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d11a      	bne.n	800cafe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	4b0e      	ldr	r3, [pc, #56]	; (800cb08 <vPortFree+0xb8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	43db      	mvns	r3, r3
 800cad2:	401a      	ands	r2, r3
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cad8:	f7fe fee2 	bl	800b8a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <vPortFree+0xbc>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4413      	add	r3, r2
 800cae6:	4a09      	ldr	r2, [pc, #36]	; (800cb0c <vPortFree+0xbc>)
 800cae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caea:	6938      	ldr	r0, [r7, #16]
 800caec:	f000 f874 	bl	800cbd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <vPortFree+0xc0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3301      	adds	r3, #1
 800caf6:	4a06      	ldr	r2, [pc, #24]	; (800cb10 <vPortFree+0xc0>)
 800caf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cafa:	f7fe fedf 	bl	800b8bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cafe:	bf00      	nop
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20001cbc 	.word	0x20001cbc
 800cb0c:	20001cac 	.word	0x20001cac
 800cb10:	20001cb8 	.word	0x20001cb8

0800cb14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cb1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb20:	4b27      	ldr	r3, [pc, #156]	; (800cbc0 <prvHeapInit+0xac>)
 800cb22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00c      	beq.n	800cb48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3307      	adds	r3, #7
 800cb32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f023 0307 	bic.w	r3, r3, #7
 800cb3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	4a1f      	ldr	r2, [pc, #124]	; (800cbc0 <prvHeapInit+0xac>)
 800cb44:	4413      	add	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb4c:	4a1d      	ldr	r2, [pc, #116]	; (800cbc4 <prvHeapInit+0xb0>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb52:	4b1c      	ldr	r3, [pc, #112]	; (800cbc4 <prvHeapInit+0xb0>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb60:	2208      	movs	r2, #8
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	1a9b      	subs	r3, r3, r2
 800cb66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb76:	4b14      	ldr	r3, [pc, #80]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb7e:	4b12      	ldr	r3, [pc, #72]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2200      	movs	r2, #0
 800cb84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb94:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	4a0a      	ldr	r2, [pc, #40]	; (800cbcc <prvHeapInit+0xb8>)
 800cba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	4a09      	ldr	r2, [pc, #36]	; (800cbd0 <prvHeapInit+0xbc>)
 800cbaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbac:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <prvHeapInit+0xc0>)
 800cbae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbb2:	601a      	str	r2, [r3, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	200010e8 	.word	0x200010e8
 800cbc4:	20001ca0 	.word	0x20001ca0
 800cbc8:	20001ca8 	.word	0x20001ca8
 800cbcc:	20001cb0 	.word	0x20001cb0
 800cbd0:	20001cac 	.word	0x20001cac
 800cbd4:	20001cbc 	.word	0x20001cbc

0800cbd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbe0:	4b28      	ldr	r3, [pc, #160]	; (800cc84 <prvInsertBlockIntoFreeList+0xac>)
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e002      	b.n	800cbec <prvInsertBlockIntoFreeList+0x14>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d8f7      	bhi.n	800cbe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	4413      	add	r3, r2
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d108      	bne.n	800cc1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	441a      	add	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	441a      	add	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d118      	bne.n	800cc60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <prvInsertBlockIntoFreeList+0xb0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d00d      	beq.n	800cc56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	441a      	add	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	e008      	b.n	800cc68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc56:	4b0c      	ldr	r3, [pc, #48]	; (800cc88 <prvInsertBlockIntoFreeList+0xb0>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	e003      	b.n	800cc68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d002      	beq.n	800cc76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc76:	bf00      	nop
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	20001ca0 	.word	0x20001ca0
 800cc88:	20001ca8 	.word	0x20001ca8

0800cc8c <atoi>:
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	2100      	movs	r1, #0
 800cc90:	f000 b940 	b.w	800cf14 <strtol>

0800cc94 <malloc>:
 800cc94:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <malloc+0xc>)
 800cc96:	4601      	mov	r1, r0
 800cc98:	6818      	ldr	r0, [r3, #0]
 800cc9a:	f000 b82b 	b.w	800ccf4 <_malloc_r>
 800cc9e:	bf00      	nop
 800cca0:	200002e4 	.word	0x200002e4

0800cca4 <free>:
 800cca4:	4b02      	ldr	r3, [pc, #8]	; (800ccb0 <free+0xc>)
 800cca6:	4601      	mov	r1, r0
 800cca8:	6818      	ldr	r0, [r3, #0]
 800ccaa:	f001 bec7 	b.w	800ea3c <_free_r>
 800ccae:	bf00      	nop
 800ccb0:	200002e4 	.word	0x200002e4

0800ccb4 <sbrk_aligned>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	4e0e      	ldr	r6, [pc, #56]	; (800ccf0 <sbrk_aligned+0x3c>)
 800ccb8:	460c      	mov	r4, r1
 800ccba:	6831      	ldr	r1, [r6, #0]
 800ccbc:	4605      	mov	r5, r0
 800ccbe:	b911      	cbnz	r1, 800ccc6 <sbrk_aligned+0x12>
 800ccc0:	f000 ffbe 	bl	800dc40 <_sbrk_r>
 800ccc4:	6030      	str	r0, [r6, #0]
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f000 ffb9 	bl	800dc40 <_sbrk_r>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	d00a      	beq.n	800cce8 <sbrk_aligned+0x34>
 800ccd2:	1cc4      	adds	r4, r0, #3
 800ccd4:	f024 0403 	bic.w	r4, r4, #3
 800ccd8:	42a0      	cmp	r0, r4
 800ccda:	d007      	beq.n	800ccec <sbrk_aligned+0x38>
 800ccdc:	1a21      	subs	r1, r4, r0
 800ccde:	4628      	mov	r0, r5
 800cce0:	f000 ffae 	bl	800dc40 <_sbrk_r>
 800cce4:	3001      	adds	r0, #1
 800cce6:	d101      	bne.n	800ccec <sbrk_aligned+0x38>
 800cce8:	f04f 34ff 	mov.w	r4, #4294967295
 800ccec:	4620      	mov	r0, r4
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	20001cc4 	.word	0x20001cc4

0800ccf4 <_malloc_r>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	1ccd      	adds	r5, r1, #3
 800ccfa:	f025 0503 	bic.w	r5, r5, #3
 800ccfe:	3508      	adds	r5, #8
 800cd00:	2d0c      	cmp	r5, #12
 800cd02:	bf38      	it	cc
 800cd04:	250c      	movcc	r5, #12
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	4607      	mov	r7, r0
 800cd0a:	db01      	blt.n	800cd10 <_malloc_r+0x1c>
 800cd0c:	42a9      	cmp	r1, r5
 800cd0e:	d905      	bls.n	800cd1c <_malloc_r+0x28>
 800cd10:	230c      	movs	r3, #12
 800cd12:	603b      	str	r3, [r7, #0]
 800cd14:	2600      	movs	r6, #0
 800cd16:	4630      	mov	r0, r6
 800cd18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cdf0 <_malloc_r+0xfc>
 800cd20:	f000 f868 	bl	800cdf4 <__malloc_lock>
 800cd24:	f8d8 3000 	ldr.w	r3, [r8]
 800cd28:	461c      	mov	r4, r3
 800cd2a:	bb5c      	cbnz	r4, 800cd84 <_malloc_r+0x90>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4638      	mov	r0, r7
 800cd30:	f7ff ffc0 	bl	800ccb4 <sbrk_aligned>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	4604      	mov	r4, r0
 800cd38:	d155      	bne.n	800cde6 <_malloc_r+0xf2>
 800cd3a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd3e:	4626      	mov	r6, r4
 800cd40:	2e00      	cmp	r6, #0
 800cd42:	d145      	bne.n	800cdd0 <_malloc_r+0xdc>
 800cd44:	2c00      	cmp	r4, #0
 800cd46:	d048      	beq.n	800cdda <_malloc_r+0xe6>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	eb04 0903 	add.w	r9, r4, r3
 800cd52:	f000 ff75 	bl	800dc40 <_sbrk_r>
 800cd56:	4581      	cmp	r9, r0
 800cd58:	d13f      	bne.n	800cdda <_malloc_r+0xe6>
 800cd5a:	6821      	ldr	r1, [r4, #0]
 800cd5c:	1a6d      	subs	r5, r5, r1
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4638      	mov	r0, r7
 800cd62:	f7ff ffa7 	bl	800ccb4 <sbrk_aligned>
 800cd66:	3001      	adds	r0, #1
 800cd68:	d037      	beq.n	800cdda <_malloc_r+0xe6>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	442b      	add	r3, r5
 800cd6e:	6023      	str	r3, [r4, #0]
 800cd70:	f8d8 3000 	ldr.w	r3, [r8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d038      	beq.n	800cdea <_malloc_r+0xf6>
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	42a2      	cmp	r2, r4
 800cd7c:	d12b      	bne.n	800cdd6 <_malloc_r+0xe2>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	605a      	str	r2, [r3, #4]
 800cd82:	e00f      	b.n	800cda4 <_malloc_r+0xb0>
 800cd84:	6822      	ldr	r2, [r4, #0]
 800cd86:	1b52      	subs	r2, r2, r5
 800cd88:	d41f      	bmi.n	800cdca <_malloc_r+0xd6>
 800cd8a:	2a0b      	cmp	r2, #11
 800cd8c:	d917      	bls.n	800cdbe <_malloc_r+0xca>
 800cd8e:	1961      	adds	r1, r4, r5
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	6025      	str	r5, [r4, #0]
 800cd94:	bf18      	it	ne
 800cd96:	6059      	strne	r1, [r3, #4]
 800cd98:	6863      	ldr	r3, [r4, #4]
 800cd9a:	bf08      	it	eq
 800cd9c:	f8c8 1000 	streq.w	r1, [r8]
 800cda0:	5162      	str	r2, [r4, r5]
 800cda2:	604b      	str	r3, [r1, #4]
 800cda4:	4638      	mov	r0, r7
 800cda6:	f104 060b 	add.w	r6, r4, #11
 800cdaa:	f000 f829 	bl	800ce00 <__malloc_unlock>
 800cdae:	f026 0607 	bic.w	r6, r6, #7
 800cdb2:	1d23      	adds	r3, r4, #4
 800cdb4:	1af2      	subs	r2, r6, r3
 800cdb6:	d0ae      	beq.n	800cd16 <_malloc_r+0x22>
 800cdb8:	1b9b      	subs	r3, r3, r6
 800cdba:	50a3      	str	r3, [r4, r2]
 800cdbc:	e7ab      	b.n	800cd16 <_malloc_r+0x22>
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	6862      	ldr	r2, [r4, #4]
 800cdc2:	d1dd      	bne.n	800cd80 <_malloc_r+0x8c>
 800cdc4:	f8c8 2000 	str.w	r2, [r8]
 800cdc8:	e7ec      	b.n	800cda4 <_malloc_r+0xb0>
 800cdca:	4623      	mov	r3, r4
 800cdcc:	6864      	ldr	r4, [r4, #4]
 800cdce:	e7ac      	b.n	800cd2a <_malloc_r+0x36>
 800cdd0:	4634      	mov	r4, r6
 800cdd2:	6876      	ldr	r6, [r6, #4]
 800cdd4:	e7b4      	b.n	800cd40 <_malloc_r+0x4c>
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	e7cc      	b.n	800cd74 <_malloc_r+0x80>
 800cdda:	230c      	movs	r3, #12
 800cddc:	603b      	str	r3, [r7, #0]
 800cdde:	4638      	mov	r0, r7
 800cde0:	f000 f80e 	bl	800ce00 <__malloc_unlock>
 800cde4:	e797      	b.n	800cd16 <_malloc_r+0x22>
 800cde6:	6025      	str	r5, [r4, #0]
 800cde8:	e7dc      	b.n	800cda4 <_malloc_r+0xb0>
 800cdea:	605b      	str	r3, [r3, #4]
 800cdec:	deff      	udf	#255	; 0xff
 800cdee:	bf00      	nop
 800cdf0:	20001cc0 	.word	0x20001cc0

0800cdf4 <__malloc_lock>:
 800cdf4:	4801      	ldr	r0, [pc, #4]	; (800cdfc <__malloc_lock+0x8>)
 800cdf6:	f000 bf6f 	b.w	800dcd8 <__retarget_lock_acquire_recursive>
 800cdfa:	bf00      	nop
 800cdfc:	20001e08 	.word	0x20001e08

0800ce00 <__malloc_unlock>:
 800ce00:	4801      	ldr	r0, [pc, #4]	; (800ce08 <__malloc_unlock+0x8>)
 800ce02:	f000 bf6a 	b.w	800dcda <__retarget_lock_release_recursive>
 800ce06:	bf00      	nop
 800ce08:	20001e08 	.word	0x20001e08

0800ce0c <_strtol_l.constprop.0>:
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce12:	d001      	beq.n	800ce18 <_strtol_l.constprop.0+0xc>
 800ce14:	2b24      	cmp	r3, #36	; 0x24
 800ce16:	d906      	bls.n	800ce26 <_strtol_l.constprop.0+0x1a>
 800ce18:	f000 ff34 	bl	800dc84 <__errno>
 800ce1c:	2316      	movs	r3, #22
 800ce1e:	6003      	str	r3, [r0, #0]
 800ce20:	2000      	movs	r0, #0
 800ce22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf0c <_strtol_l.constprop.0+0x100>
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	462e      	mov	r6, r5
 800ce2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ce36:	f017 0708 	ands.w	r7, r7, #8
 800ce3a:	d1f7      	bne.n	800ce2c <_strtol_l.constprop.0+0x20>
 800ce3c:	2c2d      	cmp	r4, #45	; 0x2d
 800ce3e:	d132      	bne.n	800cea6 <_strtol_l.constprop.0+0x9a>
 800ce40:	782c      	ldrb	r4, [r5, #0]
 800ce42:	2701      	movs	r7, #1
 800ce44:	1cb5      	adds	r5, r6, #2
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d05b      	beq.n	800cf02 <_strtol_l.constprop.0+0xf6>
 800ce4a:	2b10      	cmp	r3, #16
 800ce4c:	d109      	bne.n	800ce62 <_strtol_l.constprop.0+0x56>
 800ce4e:	2c30      	cmp	r4, #48	; 0x30
 800ce50:	d107      	bne.n	800ce62 <_strtol_l.constprop.0+0x56>
 800ce52:	782c      	ldrb	r4, [r5, #0]
 800ce54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce58:	2c58      	cmp	r4, #88	; 0x58
 800ce5a:	d14d      	bne.n	800cef8 <_strtol_l.constprop.0+0xec>
 800ce5c:	786c      	ldrb	r4, [r5, #1]
 800ce5e:	2310      	movs	r3, #16
 800ce60:	3502      	adds	r5, #2
 800ce62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ce66:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce6a:	f04f 0e00 	mov.w	lr, #0
 800ce6e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ce72:	4676      	mov	r6, lr
 800ce74:	fb03 8a19 	mls	sl, r3, r9, r8
 800ce78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ce7c:	f1bc 0f09 	cmp.w	ip, #9
 800ce80:	d816      	bhi.n	800ceb0 <_strtol_l.constprop.0+0xa4>
 800ce82:	4664      	mov	r4, ip
 800ce84:	42a3      	cmp	r3, r4
 800ce86:	dd24      	ble.n	800ced2 <_strtol_l.constprop.0+0xc6>
 800ce88:	f1be 3fff 	cmp.w	lr, #4294967295
 800ce8c:	d008      	beq.n	800cea0 <_strtol_l.constprop.0+0x94>
 800ce8e:	45b1      	cmp	r9, r6
 800ce90:	d31c      	bcc.n	800cecc <_strtol_l.constprop.0+0xc0>
 800ce92:	d101      	bne.n	800ce98 <_strtol_l.constprop.0+0x8c>
 800ce94:	45a2      	cmp	sl, r4
 800ce96:	db19      	blt.n	800cecc <_strtol_l.constprop.0+0xc0>
 800ce98:	fb06 4603 	mla	r6, r6, r3, r4
 800ce9c:	f04f 0e01 	mov.w	lr, #1
 800cea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cea4:	e7e8      	b.n	800ce78 <_strtol_l.constprop.0+0x6c>
 800cea6:	2c2b      	cmp	r4, #43	; 0x2b
 800cea8:	bf04      	itt	eq
 800ceaa:	782c      	ldrbeq	r4, [r5, #0]
 800ceac:	1cb5      	addeq	r5, r6, #2
 800ceae:	e7ca      	b.n	800ce46 <_strtol_l.constprop.0+0x3a>
 800ceb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ceb4:	f1bc 0f19 	cmp.w	ip, #25
 800ceb8:	d801      	bhi.n	800cebe <_strtol_l.constprop.0+0xb2>
 800ceba:	3c37      	subs	r4, #55	; 0x37
 800cebc:	e7e2      	b.n	800ce84 <_strtol_l.constprop.0+0x78>
 800cebe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cec2:	f1bc 0f19 	cmp.w	ip, #25
 800cec6:	d804      	bhi.n	800ced2 <_strtol_l.constprop.0+0xc6>
 800cec8:	3c57      	subs	r4, #87	; 0x57
 800ceca:	e7db      	b.n	800ce84 <_strtol_l.constprop.0+0x78>
 800cecc:	f04f 3eff 	mov.w	lr, #4294967295
 800ced0:	e7e6      	b.n	800cea0 <_strtol_l.constprop.0+0x94>
 800ced2:	f1be 3fff 	cmp.w	lr, #4294967295
 800ced6:	d105      	bne.n	800cee4 <_strtol_l.constprop.0+0xd8>
 800ced8:	2322      	movs	r3, #34	; 0x22
 800ceda:	6003      	str	r3, [r0, #0]
 800cedc:	4646      	mov	r6, r8
 800cede:	b942      	cbnz	r2, 800cef2 <_strtol_l.constprop.0+0xe6>
 800cee0:	4630      	mov	r0, r6
 800cee2:	e79e      	b.n	800ce22 <_strtol_l.constprop.0+0x16>
 800cee4:	b107      	cbz	r7, 800cee8 <_strtol_l.constprop.0+0xdc>
 800cee6:	4276      	negs	r6, r6
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	d0f9      	beq.n	800cee0 <_strtol_l.constprop.0+0xd4>
 800ceec:	f1be 0f00 	cmp.w	lr, #0
 800cef0:	d000      	beq.n	800cef4 <_strtol_l.constprop.0+0xe8>
 800cef2:	1e69      	subs	r1, r5, #1
 800cef4:	6011      	str	r1, [r2, #0]
 800cef6:	e7f3      	b.n	800cee0 <_strtol_l.constprop.0+0xd4>
 800cef8:	2430      	movs	r4, #48	; 0x30
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1b1      	bne.n	800ce62 <_strtol_l.constprop.0+0x56>
 800cefe:	2308      	movs	r3, #8
 800cf00:	e7af      	b.n	800ce62 <_strtol_l.constprop.0+0x56>
 800cf02:	2c30      	cmp	r4, #48	; 0x30
 800cf04:	d0a5      	beq.n	800ce52 <_strtol_l.constprop.0+0x46>
 800cf06:	230a      	movs	r3, #10
 800cf08:	e7ab      	b.n	800ce62 <_strtol_l.constprop.0+0x56>
 800cf0a:	bf00      	nop
 800cf0c:	0804def9 	.word	0x0804def9

0800cf10 <_strtol_r>:
 800cf10:	f7ff bf7c 	b.w	800ce0c <_strtol_l.constprop.0>

0800cf14 <strtol>:
 800cf14:	4613      	mov	r3, r2
 800cf16:	460a      	mov	r2, r1
 800cf18:	4601      	mov	r1, r0
 800cf1a:	4802      	ldr	r0, [pc, #8]	; (800cf24 <strtol+0x10>)
 800cf1c:	6800      	ldr	r0, [r0, #0]
 800cf1e:	f7ff bf75 	b.w	800ce0c <_strtol_l.constprop.0>
 800cf22:	bf00      	nop
 800cf24:	200002e4 	.word	0x200002e4

0800cf28 <__cvt>:
 800cf28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	ec55 4b10 	vmov	r4, r5, d0
 800cf30:	2d00      	cmp	r5, #0
 800cf32:	460e      	mov	r6, r1
 800cf34:	4619      	mov	r1, r3
 800cf36:	462b      	mov	r3, r5
 800cf38:	bfbb      	ittet	lt
 800cf3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cf3e:	461d      	movlt	r5, r3
 800cf40:	2300      	movge	r3, #0
 800cf42:	232d      	movlt	r3, #45	; 0x2d
 800cf44:	700b      	strb	r3, [r1, #0]
 800cf46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cf4c:	4691      	mov	r9, r2
 800cf4e:	f023 0820 	bic.w	r8, r3, #32
 800cf52:	bfbc      	itt	lt
 800cf54:	4622      	movlt	r2, r4
 800cf56:	4614      	movlt	r4, r2
 800cf58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf5c:	d005      	beq.n	800cf6a <__cvt+0x42>
 800cf5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf62:	d100      	bne.n	800cf66 <__cvt+0x3e>
 800cf64:	3601      	adds	r6, #1
 800cf66:	2102      	movs	r1, #2
 800cf68:	e000      	b.n	800cf6c <__cvt+0x44>
 800cf6a:	2103      	movs	r1, #3
 800cf6c:	ab03      	add	r3, sp, #12
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	ab02      	add	r3, sp, #8
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	ec45 4b10 	vmov	d0, r4, r5
 800cf78:	4653      	mov	r3, sl
 800cf7a:	4632      	mov	r2, r6
 800cf7c:	f000 ff6c 	bl	800de58 <_dtoa_r>
 800cf80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf84:	4607      	mov	r7, r0
 800cf86:	d102      	bne.n	800cf8e <__cvt+0x66>
 800cf88:	f019 0f01 	tst.w	r9, #1
 800cf8c:	d022      	beq.n	800cfd4 <__cvt+0xac>
 800cf8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf92:	eb07 0906 	add.w	r9, r7, r6
 800cf96:	d110      	bne.n	800cfba <__cvt+0x92>
 800cf98:	783b      	ldrb	r3, [r7, #0]
 800cf9a:	2b30      	cmp	r3, #48	; 0x30
 800cf9c:	d10a      	bne.n	800cfb4 <__cvt+0x8c>
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7f3 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfaa:	b918      	cbnz	r0, 800cfb4 <__cvt+0x8c>
 800cfac:	f1c6 0601 	rsb	r6, r6, #1
 800cfb0:	f8ca 6000 	str.w	r6, [sl]
 800cfb4:	f8da 3000 	ldr.w	r3, [sl]
 800cfb8:	4499      	add	r9, r3
 800cfba:	2200      	movs	r2, #0
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	f7f3 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfc6:	b108      	cbz	r0, 800cfcc <__cvt+0xa4>
 800cfc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfcc:	2230      	movs	r2, #48	; 0x30
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	454b      	cmp	r3, r9
 800cfd2:	d307      	bcc.n	800cfe4 <__cvt+0xbc>
 800cfd4:	9b03      	ldr	r3, [sp, #12]
 800cfd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfd8:	1bdb      	subs	r3, r3, r7
 800cfda:	4638      	mov	r0, r7
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	b004      	add	sp, #16
 800cfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe4:	1c59      	adds	r1, r3, #1
 800cfe6:	9103      	str	r1, [sp, #12]
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	e7f0      	b.n	800cfce <__cvt+0xa6>

0800cfec <__exponent>:
 800cfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfee:	4603      	mov	r3, r0
 800cff0:	2900      	cmp	r1, #0
 800cff2:	bfb8      	it	lt
 800cff4:	4249      	neglt	r1, r1
 800cff6:	f803 2b02 	strb.w	r2, [r3], #2
 800cffa:	bfb4      	ite	lt
 800cffc:	222d      	movlt	r2, #45	; 0x2d
 800cffe:	222b      	movge	r2, #43	; 0x2b
 800d000:	2909      	cmp	r1, #9
 800d002:	7042      	strb	r2, [r0, #1]
 800d004:	dd2a      	ble.n	800d05c <__exponent+0x70>
 800d006:	f10d 0207 	add.w	r2, sp, #7
 800d00a:	4617      	mov	r7, r2
 800d00c:	260a      	movs	r6, #10
 800d00e:	4694      	mov	ip, r2
 800d010:	fb91 f5f6 	sdiv	r5, r1, r6
 800d014:	fb06 1415 	mls	r4, r6, r5, r1
 800d018:	3430      	adds	r4, #48	; 0x30
 800d01a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d01e:	460c      	mov	r4, r1
 800d020:	2c63      	cmp	r4, #99	; 0x63
 800d022:	f102 32ff 	add.w	r2, r2, #4294967295
 800d026:	4629      	mov	r1, r5
 800d028:	dcf1      	bgt.n	800d00e <__exponent+0x22>
 800d02a:	3130      	adds	r1, #48	; 0x30
 800d02c:	f1ac 0402 	sub.w	r4, ip, #2
 800d030:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d034:	1c41      	adds	r1, r0, #1
 800d036:	4622      	mov	r2, r4
 800d038:	42ba      	cmp	r2, r7
 800d03a:	d30a      	bcc.n	800d052 <__exponent+0x66>
 800d03c:	f10d 0209 	add.w	r2, sp, #9
 800d040:	eba2 020c 	sub.w	r2, r2, ip
 800d044:	42bc      	cmp	r4, r7
 800d046:	bf88      	it	hi
 800d048:	2200      	movhi	r2, #0
 800d04a:	4413      	add	r3, r2
 800d04c:	1a18      	subs	r0, r3, r0
 800d04e:	b003      	add	sp, #12
 800d050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d052:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d056:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d05a:	e7ed      	b.n	800d038 <__exponent+0x4c>
 800d05c:	2330      	movs	r3, #48	; 0x30
 800d05e:	3130      	adds	r1, #48	; 0x30
 800d060:	7083      	strb	r3, [r0, #2]
 800d062:	70c1      	strb	r1, [r0, #3]
 800d064:	1d03      	adds	r3, r0, #4
 800d066:	e7f1      	b.n	800d04c <__exponent+0x60>

0800d068 <_printf_float>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	ed2d 8b02 	vpush	{d8}
 800d070:	b08d      	sub	sp, #52	; 0x34
 800d072:	460c      	mov	r4, r1
 800d074:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d078:	4616      	mov	r6, r2
 800d07a:	461f      	mov	r7, r3
 800d07c:	4605      	mov	r5, r0
 800d07e:	f000 fda7 	bl	800dbd0 <_localeconv_r>
 800d082:	f8d0 a000 	ldr.w	sl, [r0]
 800d086:	4650      	mov	r0, sl
 800d088:	f7f3 f8f2 	bl	8000270 <strlen>
 800d08c:	2300      	movs	r3, #0
 800d08e:	930a      	str	r3, [sp, #40]	; 0x28
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	f8d8 3000 	ldr.w	r3, [r8]
 800d098:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d09c:	3307      	adds	r3, #7
 800d09e:	f023 0307 	bic.w	r3, r3, #7
 800d0a2:	f103 0208 	add.w	r2, r3, #8
 800d0a6:	f8c8 2000 	str.w	r2, [r8]
 800d0aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0b2:	9307      	str	r3, [sp, #28]
 800d0b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0b8:	ee08 0a10 	vmov	s16, r0
 800d0bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d0c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0c4:	4b9e      	ldr	r3, [pc, #632]	; (800d340 <_printf_float+0x2d8>)
 800d0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ca:	f7f3 fd2f 	bl	8000b2c <__aeabi_dcmpun>
 800d0ce:	bb88      	cbnz	r0, 800d134 <_printf_float+0xcc>
 800d0d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0d4:	4b9a      	ldr	r3, [pc, #616]	; (800d340 <_printf_float+0x2d8>)
 800d0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0da:	f7f3 fd09 	bl	8000af0 <__aeabi_dcmple>
 800d0de:	bb48      	cbnz	r0, 800d134 <_printf_float+0xcc>
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	4649      	mov	r1, r9
 800d0e8:	f7f3 fcf8 	bl	8000adc <__aeabi_dcmplt>
 800d0ec:	b110      	cbz	r0, 800d0f4 <_printf_float+0x8c>
 800d0ee:	232d      	movs	r3, #45	; 0x2d
 800d0f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0f4:	4a93      	ldr	r2, [pc, #588]	; (800d344 <_printf_float+0x2dc>)
 800d0f6:	4b94      	ldr	r3, [pc, #592]	; (800d348 <_printf_float+0x2e0>)
 800d0f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d0fc:	bf94      	ite	ls
 800d0fe:	4690      	movls	r8, r2
 800d100:	4698      	movhi	r8, r3
 800d102:	2303      	movs	r3, #3
 800d104:	6123      	str	r3, [r4, #16]
 800d106:	9b05      	ldr	r3, [sp, #20]
 800d108:	f023 0304 	bic.w	r3, r3, #4
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	f04f 0900 	mov.w	r9, #0
 800d112:	9700      	str	r7, [sp, #0]
 800d114:	4633      	mov	r3, r6
 800d116:	aa0b      	add	r2, sp, #44	; 0x2c
 800d118:	4621      	mov	r1, r4
 800d11a:	4628      	mov	r0, r5
 800d11c:	f000 f9da 	bl	800d4d4 <_printf_common>
 800d120:	3001      	adds	r0, #1
 800d122:	f040 8090 	bne.w	800d246 <_printf_float+0x1de>
 800d126:	f04f 30ff 	mov.w	r0, #4294967295
 800d12a:	b00d      	add	sp, #52	; 0x34
 800d12c:	ecbd 8b02 	vpop	{d8}
 800d130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d134:	4642      	mov	r2, r8
 800d136:	464b      	mov	r3, r9
 800d138:	4640      	mov	r0, r8
 800d13a:	4649      	mov	r1, r9
 800d13c:	f7f3 fcf6 	bl	8000b2c <__aeabi_dcmpun>
 800d140:	b140      	cbz	r0, 800d154 <_printf_float+0xec>
 800d142:	464b      	mov	r3, r9
 800d144:	2b00      	cmp	r3, #0
 800d146:	bfbc      	itt	lt
 800d148:	232d      	movlt	r3, #45	; 0x2d
 800d14a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d14e:	4a7f      	ldr	r2, [pc, #508]	; (800d34c <_printf_float+0x2e4>)
 800d150:	4b7f      	ldr	r3, [pc, #508]	; (800d350 <_printf_float+0x2e8>)
 800d152:	e7d1      	b.n	800d0f8 <_printf_float+0x90>
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d15a:	9206      	str	r2, [sp, #24]
 800d15c:	1c5a      	adds	r2, r3, #1
 800d15e:	d13f      	bne.n	800d1e0 <_printf_float+0x178>
 800d160:	2306      	movs	r3, #6
 800d162:	6063      	str	r3, [r4, #4]
 800d164:	9b05      	ldr	r3, [sp, #20]
 800d166:	6861      	ldr	r1, [r4, #4]
 800d168:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d16c:	2300      	movs	r3, #0
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	ab0a      	add	r3, sp, #40	; 0x28
 800d172:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d176:	ab09      	add	r3, sp, #36	; 0x24
 800d178:	ec49 8b10 	vmov	d0, r8, r9
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	6022      	str	r2, [r4, #0]
 800d180:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d184:	4628      	mov	r0, r5
 800d186:	f7ff fecf 	bl	800cf28 <__cvt>
 800d18a:	9b06      	ldr	r3, [sp, #24]
 800d18c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d18e:	2b47      	cmp	r3, #71	; 0x47
 800d190:	4680      	mov	r8, r0
 800d192:	d108      	bne.n	800d1a6 <_printf_float+0x13e>
 800d194:	1cc8      	adds	r0, r1, #3
 800d196:	db02      	blt.n	800d19e <_printf_float+0x136>
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	4299      	cmp	r1, r3
 800d19c:	dd41      	ble.n	800d222 <_printf_float+0x1ba>
 800d19e:	f1ab 0302 	sub.w	r3, fp, #2
 800d1a2:	fa5f fb83 	uxtb.w	fp, r3
 800d1a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1aa:	d820      	bhi.n	800d1ee <_printf_float+0x186>
 800d1ac:	3901      	subs	r1, #1
 800d1ae:	465a      	mov	r2, fp
 800d1b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d1b4:	9109      	str	r1, [sp, #36]	; 0x24
 800d1b6:	f7ff ff19 	bl	800cfec <__exponent>
 800d1ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1bc:	1813      	adds	r3, r2, r0
 800d1be:	2a01      	cmp	r2, #1
 800d1c0:	4681      	mov	r9, r0
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	dc02      	bgt.n	800d1cc <_printf_float+0x164>
 800d1c6:	6822      	ldr	r2, [r4, #0]
 800d1c8:	07d2      	lsls	r2, r2, #31
 800d1ca:	d501      	bpl.n	800d1d0 <_printf_float+0x168>
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	6123      	str	r3, [r4, #16]
 800d1d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d09c      	beq.n	800d112 <_printf_float+0xaa>
 800d1d8:	232d      	movs	r3, #45	; 0x2d
 800d1da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1de:	e798      	b.n	800d112 <_printf_float+0xaa>
 800d1e0:	9a06      	ldr	r2, [sp, #24]
 800d1e2:	2a47      	cmp	r2, #71	; 0x47
 800d1e4:	d1be      	bne.n	800d164 <_printf_float+0xfc>
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1bc      	bne.n	800d164 <_printf_float+0xfc>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e7b9      	b.n	800d162 <_printf_float+0xfa>
 800d1ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d1f2:	d118      	bne.n	800d226 <_printf_float+0x1be>
 800d1f4:	2900      	cmp	r1, #0
 800d1f6:	6863      	ldr	r3, [r4, #4]
 800d1f8:	dd0b      	ble.n	800d212 <_printf_float+0x1aa>
 800d1fa:	6121      	str	r1, [r4, #16]
 800d1fc:	b913      	cbnz	r3, 800d204 <_printf_float+0x19c>
 800d1fe:	6822      	ldr	r2, [r4, #0]
 800d200:	07d0      	lsls	r0, r2, #31
 800d202:	d502      	bpl.n	800d20a <_printf_float+0x1a2>
 800d204:	3301      	adds	r3, #1
 800d206:	440b      	add	r3, r1
 800d208:	6123      	str	r3, [r4, #16]
 800d20a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d20c:	f04f 0900 	mov.w	r9, #0
 800d210:	e7de      	b.n	800d1d0 <_printf_float+0x168>
 800d212:	b913      	cbnz	r3, 800d21a <_printf_float+0x1b2>
 800d214:	6822      	ldr	r2, [r4, #0]
 800d216:	07d2      	lsls	r2, r2, #31
 800d218:	d501      	bpl.n	800d21e <_printf_float+0x1b6>
 800d21a:	3302      	adds	r3, #2
 800d21c:	e7f4      	b.n	800d208 <_printf_float+0x1a0>
 800d21e:	2301      	movs	r3, #1
 800d220:	e7f2      	b.n	800d208 <_printf_float+0x1a0>
 800d222:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d228:	4299      	cmp	r1, r3
 800d22a:	db05      	blt.n	800d238 <_printf_float+0x1d0>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	6121      	str	r1, [r4, #16]
 800d230:	07d8      	lsls	r0, r3, #31
 800d232:	d5ea      	bpl.n	800d20a <_printf_float+0x1a2>
 800d234:	1c4b      	adds	r3, r1, #1
 800d236:	e7e7      	b.n	800d208 <_printf_float+0x1a0>
 800d238:	2900      	cmp	r1, #0
 800d23a:	bfd4      	ite	le
 800d23c:	f1c1 0202 	rsble	r2, r1, #2
 800d240:	2201      	movgt	r2, #1
 800d242:	4413      	add	r3, r2
 800d244:	e7e0      	b.n	800d208 <_printf_float+0x1a0>
 800d246:	6823      	ldr	r3, [r4, #0]
 800d248:	055a      	lsls	r2, r3, #21
 800d24a:	d407      	bmi.n	800d25c <_printf_float+0x1f4>
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	4642      	mov	r2, r8
 800d250:	4631      	mov	r1, r6
 800d252:	4628      	mov	r0, r5
 800d254:	47b8      	blx	r7
 800d256:	3001      	adds	r0, #1
 800d258:	d12c      	bne.n	800d2b4 <_printf_float+0x24c>
 800d25a:	e764      	b.n	800d126 <_printf_float+0xbe>
 800d25c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d260:	f240 80e0 	bls.w	800d424 <_printf_float+0x3bc>
 800d264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d268:	2200      	movs	r2, #0
 800d26a:	2300      	movs	r3, #0
 800d26c:	f7f3 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d270:	2800      	cmp	r0, #0
 800d272:	d034      	beq.n	800d2de <_printf_float+0x276>
 800d274:	4a37      	ldr	r2, [pc, #220]	; (800d354 <_printf_float+0x2ec>)
 800d276:	2301      	movs	r3, #1
 800d278:	4631      	mov	r1, r6
 800d27a:	4628      	mov	r0, r5
 800d27c:	47b8      	blx	r7
 800d27e:	3001      	adds	r0, #1
 800d280:	f43f af51 	beq.w	800d126 <_printf_float+0xbe>
 800d284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d288:	429a      	cmp	r2, r3
 800d28a:	db02      	blt.n	800d292 <_printf_float+0x22a>
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	07d8      	lsls	r0, r3, #31
 800d290:	d510      	bpl.n	800d2b4 <_printf_float+0x24c>
 800d292:	ee18 3a10 	vmov	r3, s16
 800d296:	4652      	mov	r2, sl
 800d298:	4631      	mov	r1, r6
 800d29a:	4628      	mov	r0, r5
 800d29c:	47b8      	blx	r7
 800d29e:	3001      	adds	r0, #1
 800d2a0:	f43f af41 	beq.w	800d126 <_printf_float+0xbe>
 800d2a4:	f04f 0800 	mov.w	r8, #0
 800d2a8:	f104 091a 	add.w	r9, r4, #26
 800d2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	4543      	cmp	r3, r8
 800d2b2:	dc09      	bgt.n	800d2c8 <_printf_float+0x260>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	079b      	lsls	r3, r3, #30
 800d2b8:	f100 8107 	bmi.w	800d4ca <_printf_float+0x462>
 800d2bc:	68e0      	ldr	r0, [r4, #12]
 800d2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2c0:	4298      	cmp	r0, r3
 800d2c2:	bfb8      	it	lt
 800d2c4:	4618      	movlt	r0, r3
 800d2c6:	e730      	b.n	800d12a <_printf_float+0xc2>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	464a      	mov	r2, r9
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	f43f af27 	beq.w	800d126 <_printf_float+0xbe>
 800d2d8:	f108 0801 	add.w	r8, r8, #1
 800d2dc:	e7e6      	b.n	800d2ac <_printf_float+0x244>
 800d2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dc39      	bgt.n	800d358 <_printf_float+0x2f0>
 800d2e4:	4a1b      	ldr	r2, [pc, #108]	; (800d354 <_printf_float+0x2ec>)
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	47b8      	blx	r7
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	f43f af19 	beq.w	800d126 <_printf_float+0xbe>
 800d2f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	d102      	bne.n	800d302 <_printf_float+0x29a>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	07d9      	lsls	r1, r3, #31
 800d300:	d5d8      	bpl.n	800d2b4 <_printf_float+0x24c>
 800d302:	ee18 3a10 	vmov	r3, s16
 800d306:	4652      	mov	r2, sl
 800d308:	4631      	mov	r1, r6
 800d30a:	4628      	mov	r0, r5
 800d30c:	47b8      	blx	r7
 800d30e:	3001      	adds	r0, #1
 800d310:	f43f af09 	beq.w	800d126 <_printf_float+0xbe>
 800d314:	f04f 0900 	mov.w	r9, #0
 800d318:	f104 0a1a 	add.w	sl, r4, #26
 800d31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31e:	425b      	negs	r3, r3
 800d320:	454b      	cmp	r3, r9
 800d322:	dc01      	bgt.n	800d328 <_printf_float+0x2c0>
 800d324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d326:	e792      	b.n	800d24e <_printf_float+0x1e6>
 800d328:	2301      	movs	r3, #1
 800d32a:	4652      	mov	r2, sl
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	f43f aef7 	beq.w	800d126 <_printf_float+0xbe>
 800d338:	f109 0901 	add.w	r9, r9, #1
 800d33c:	e7ee      	b.n	800d31c <_printf_float+0x2b4>
 800d33e:	bf00      	nop
 800d340:	7fefffff 	.word	0x7fefffff
 800d344:	0804dff9 	.word	0x0804dff9
 800d348:	0804dffd 	.word	0x0804dffd
 800d34c:	0804e001 	.word	0x0804e001
 800d350:	0804e005 	.word	0x0804e005
 800d354:	0804e2db 	.word	0x0804e2db
 800d358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d35a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d35c:	429a      	cmp	r2, r3
 800d35e:	bfa8      	it	ge
 800d360:	461a      	movge	r2, r3
 800d362:	2a00      	cmp	r2, #0
 800d364:	4691      	mov	r9, r2
 800d366:	dc37      	bgt.n	800d3d8 <_printf_float+0x370>
 800d368:	f04f 0b00 	mov.w	fp, #0
 800d36c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d370:	f104 021a 	add.w	r2, r4, #26
 800d374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d376:	9305      	str	r3, [sp, #20]
 800d378:	eba3 0309 	sub.w	r3, r3, r9
 800d37c:	455b      	cmp	r3, fp
 800d37e:	dc33      	bgt.n	800d3e8 <_printf_float+0x380>
 800d380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d384:	429a      	cmp	r2, r3
 800d386:	db3b      	blt.n	800d400 <_printf_float+0x398>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	07da      	lsls	r2, r3, #31
 800d38c:	d438      	bmi.n	800d400 <_printf_float+0x398>
 800d38e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d392:	eba2 0903 	sub.w	r9, r2, r3
 800d396:	9b05      	ldr	r3, [sp, #20]
 800d398:	1ad2      	subs	r2, r2, r3
 800d39a:	4591      	cmp	r9, r2
 800d39c:	bfa8      	it	ge
 800d39e:	4691      	movge	r9, r2
 800d3a0:	f1b9 0f00 	cmp.w	r9, #0
 800d3a4:	dc35      	bgt.n	800d412 <_printf_float+0x3aa>
 800d3a6:	f04f 0800 	mov.w	r8, #0
 800d3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3ae:	f104 0a1a 	add.w	sl, r4, #26
 800d3b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	eba3 0309 	sub.w	r3, r3, r9
 800d3bc:	4543      	cmp	r3, r8
 800d3be:	f77f af79 	ble.w	800d2b4 <_printf_float+0x24c>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	4652      	mov	r2, sl
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b8      	blx	r7
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	f43f aeaa 	beq.w	800d126 <_printf_float+0xbe>
 800d3d2:	f108 0801 	add.w	r8, r8, #1
 800d3d6:	e7ec      	b.n	800d3b2 <_printf_float+0x34a>
 800d3d8:	4613      	mov	r3, r2
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4642      	mov	r2, r8
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b8      	blx	r7
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	d1c0      	bne.n	800d368 <_printf_float+0x300>
 800d3e6:	e69e      	b.n	800d126 <_printf_float+0xbe>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	9205      	str	r2, [sp, #20]
 800d3f0:	47b8      	blx	r7
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	f43f ae97 	beq.w	800d126 <_printf_float+0xbe>
 800d3f8:	9a05      	ldr	r2, [sp, #20]
 800d3fa:	f10b 0b01 	add.w	fp, fp, #1
 800d3fe:	e7b9      	b.n	800d374 <_printf_float+0x30c>
 800d400:	ee18 3a10 	vmov	r3, s16
 800d404:	4652      	mov	r2, sl
 800d406:	4631      	mov	r1, r6
 800d408:	4628      	mov	r0, r5
 800d40a:	47b8      	blx	r7
 800d40c:	3001      	adds	r0, #1
 800d40e:	d1be      	bne.n	800d38e <_printf_float+0x326>
 800d410:	e689      	b.n	800d126 <_printf_float+0xbe>
 800d412:	9a05      	ldr	r2, [sp, #20]
 800d414:	464b      	mov	r3, r9
 800d416:	4442      	add	r2, r8
 800d418:	4631      	mov	r1, r6
 800d41a:	4628      	mov	r0, r5
 800d41c:	47b8      	blx	r7
 800d41e:	3001      	adds	r0, #1
 800d420:	d1c1      	bne.n	800d3a6 <_printf_float+0x33e>
 800d422:	e680      	b.n	800d126 <_printf_float+0xbe>
 800d424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d426:	2a01      	cmp	r2, #1
 800d428:	dc01      	bgt.n	800d42e <_printf_float+0x3c6>
 800d42a:	07db      	lsls	r3, r3, #31
 800d42c:	d53a      	bpl.n	800d4a4 <_printf_float+0x43c>
 800d42e:	2301      	movs	r3, #1
 800d430:	4642      	mov	r2, r8
 800d432:	4631      	mov	r1, r6
 800d434:	4628      	mov	r0, r5
 800d436:	47b8      	blx	r7
 800d438:	3001      	adds	r0, #1
 800d43a:	f43f ae74 	beq.w	800d126 <_printf_float+0xbe>
 800d43e:	ee18 3a10 	vmov	r3, s16
 800d442:	4652      	mov	r2, sl
 800d444:	4631      	mov	r1, r6
 800d446:	4628      	mov	r0, r5
 800d448:	47b8      	blx	r7
 800d44a:	3001      	adds	r0, #1
 800d44c:	f43f ae6b 	beq.w	800d126 <_printf_float+0xbe>
 800d450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d45c:	f7f3 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800d460:	b9d8      	cbnz	r0, 800d49a <_printf_float+0x432>
 800d462:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d466:	f108 0201 	add.w	r2, r8, #1
 800d46a:	4631      	mov	r1, r6
 800d46c:	4628      	mov	r0, r5
 800d46e:	47b8      	blx	r7
 800d470:	3001      	adds	r0, #1
 800d472:	d10e      	bne.n	800d492 <_printf_float+0x42a>
 800d474:	e657      	b.n	800d126 <_printf_float+0xbe>
 800d476:	2301      	movs	r3, #1
 800d478:	4652      	mov	r2, sl
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	47b8      	blx	r7
 800d480:	3001      	adds	r0, #1
 800d482:	f43f ae50 	beq.w	800d126 <_printf_float+0xbe>
 800d486:	f108 0801 	add.w	r8, r8, #1
 800d48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d48c:	3b01      	subs	r3, #1
 800d48e:	4543      	cmp	r3, r8
 800d490:	dcf1      	bgt.n	800d476 <_printf_float+0x40e>
 800d492:	464b      	mov	r3, r9
 800d494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d498:	e6da      	b.n	800d250 <_printf_float+0x1e8>
 800d49a:	f04f 0800 	mov.w	r8, #0
 800d49e:	f104 0a1a 	add.w	sl, r4, #26
 800d4a2:	e7f2      	b.n	800d48a <_printf_float+0x422>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	4642      	mov	r2, r8
 800d4a8:	e7df      	b.n	800d46a <_printf_float+0x402>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	464a      	mov	r2, r9
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b8      	blx	r7
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	f43f ae36 	beq.w	800d126 <_printf_float+0xbe>
 800d4ba:	f108 0801 	add.w	r8, r8, #1
 800d4be:	68e3      	ldr	r3, [r4, #12]
 800d4c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4c2:	1a5b      	subs	r3, r3, r1
 800d4c4:	4543      	cmp	r3, r8
 800d4c6:	dcf0      	bgt.n	800d4aa <_printf_float+0x442>
 800d4c8:	e6f8      	b.n	800d2bc <_printf_float+0x254>
 800d4ca:	f04f 0800 	mov.w	r8, #0
 800d4ce:	f104 0919 	add.w	r9, r4, #25
 800d4d2:	e7f4      	b.n	800d4be <_printf_float+0x456>

0800d4d4 <_printf_common>:
 800d4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	4616      	mov	r6, r2
 800d4da:	4699      	mov	r9, r3
 800d4dc:	688a      	ldr	r2, [r1, #8]
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	bfb8      	it	lt
 800d4e8:	4613      	movlt	r3, r2
 800d4ea:	6033      	str	r3, [r6, #0]
 800d4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4f0:	4607      	mov	r7, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	b10a      	cbz	r2, 800d4fa <_printf_common+0x26>
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	6033      	str	r3, [r6, #0]
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	0699      	lsls	r1, r3, #26
 800d4fe:	bf42      	ittt	mi
 800d500:	6833      	ldrmi	r3, [r6, #0]
 800d502:	3302      	addmi	r3, #2
 800d504:	6033      	strmi	r3, [r6, #0]
 800d506:	6825      	ldr	r5, [r4, #0]
 800d508:	f015 0506 	ands.w	r5, r5, #6
 800d50c:	d106      	bne.n	800d51c <_printf_common+0x48>
 800d50e:	f104 0a19 	add.w	sl, r4, #25
 800d512:	68e3      	ldr	r3, [r4, #12]
 800d514:	6832      	ldr	r2, [r6, #0]
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	42ab      	cmp	r3, r5
 800d51a:	dc26      	bgt.n	800d56a <_printf_common+0x96>
 800d51c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d520:	1e13      	subs	r3, r2, #0
 800d522:	6822      	ldr	r2, [r4, #0]
 800d524:	bf18      	it	ne
 800d526:	2301      	movne	r3, #1
 800d528:	0692      	lsls	r2, r2, #26
 800d52a:	d42b      	bmi.n	800d584 <_printf_common+0xb0>
 800d52c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d530:	4649      	mov	r1, r9
 800d532:	4638      	mov	r0, r7
 800d534:	47c0      	blx	r8
 800d536:	3001      	adds	r0, #1
 800d538:	d01e      	beq.n	800d578 <_printf_common+0xa4>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	6922      	ldr	r2, [r4, #16]
 800d53e:	f003 0306 	and.w	r3, r3, #6
 800d542:	2b04      	cmp	r3, #4
 800d544:	bf02      	ittt	eq
 800d546:	68e5      	ldreq	r5, [r4, #12]
 800d548:	6833      	ldreq	r3, [r6, #0]
 800d54a:	1aed      	subeq	r5, r5, r3
 800d54c:	68a3      	ldr	r3, [r4, #8]
 800d54e:	bf0c      	ite	eq
 800d550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d554:	2500      	movne	r5, #0
 800d556:	4293      	cmp	r3, r2
 800d558:	bfc4      	itt	gt
 800d55a:	1a9b      	subgt	r3, r3, r2
 800d55c:	18ed      	addgt	r5, r5, r3
 800d55e:	2600      	movs	r6, #0
 800d560:	341a      	adds	r4, #26
 800d562:	42b5      	cmp	r5, r6
 800d564:	d11a      	bne.n	800d59c <_printf_common+0xc8>
 800d566:	2000      	movs	r0, #0
 800d568:	e008      	b.n	800d57c <_printf_common+0xa8>
 800d56a:	2301      	movs	r3, #1
 800d56c:	4652      	mov	r2, sl
 800d56e:	4649      	mov	r1, r9
 800d570:	4638      	mov	r0, r7
 800d572:	47c0      	blx	r8
 800d574:	3001      	adds	r0, #1
 800d576:	d103      	bne.n	800d580 <_printf_common+0xac>
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d580:	3501      	adds	r5, #1
 800d582:	e7c6      	b.n	800d512 <_printf_common+0x3e>
 800d584:	18e1      	adds	r1, r4, r3
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	2030      	movs	r0, #48	; 0x30
 800d58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d58e:	4422      	add	r2, r4
 800d590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d598:	3302      	adds	r3, #2
 800d59a:	e7c7      	b.n	800d52c <_printf_common+0x58>
 800d59c:	2301      	movs	r3, #1
 800d59e:	4622      	mov	r2, r4
 800d5a0:	4649      	mov	r1, r9
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	47c0      	blx	r8
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d0e6      	beq.n	800d578 <_printf_common+0xa4>
 800d5aa:	3601      	adds	r6, #1
 800d5ac:	e7d9      	b.n	800d562 <_printf_common+0x8e>
	...

0800d5b0 <_printf_i>:
 800d5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	7e0f      	ldrb	r7, [r1, #24]
 800d5b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5b8:	2f78      	cmp	r7, #120	; 0x78
 800d5ba:	4691      	mov	r9, r2
 800d5bc:	4680      	mov	r8, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	469a      	mov	sl, r3
 800d5c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5c6:	d807      	bhi.n	800d5d8 <_printf_i+0x28>
 800d5c8:	2f62      	cmp	r7, #98	; 0x62
 800d5ca:	d80a      	bhi.n	800d5e2 <_printf_i+0x32>
 800d5cc:	2f00      	cmp	r7, #0
 800d5ce:	f000 80d4 	beq.w	800d77a <_printf_i+0x1ca>
 800d5d2:	2f58      	cmp	r7, #88	; 0x58
 800d5d4:	f000 80c0 	beq.w	800d758 <_printf_i+0x1a8>
 800d5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5e0:	e03a      	b.n	800d658 <_printf_i+0xa8>
 800d5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5e6:	2b15      	cmp	r3, #21
 800d5e8:	d8f6      	bhi.n	800d5d8 <_printf_i+0x28>
 800d5ea:	a101      	add	r1, pc, #4	; (adr r1, 800d5f0 <_printf_i+0x40>)
 800d5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5f0:	0800d649 	.word	0x0800d649
 800d5f4:	0800d65d 	.word	0x0800d65d
 800d5f8:	0800d5d9 	.word	0x0800d5d9
 800d5fc:	0800d5d9 	.word	0x0800d5d9
 800d600:	0800d5d9 	.word	0x0800d5d9
 800d604:	0800d5d9 	.word	0x0800d5d9
 800d608:	0800d65d 	.word	0x0800d65d
 800d60c:	0800d5d9 	.word	0x0800d5d9
 800d610:	0800d5d9 	.word	0x0800d5d9
 800d614:	0800d5d9 	.word	0x0800d5d9
 800d618:	0800d5d9 	.word	0x0800d5d9
 800d61c:	0800d761 	.word	0x0800d761
 800d620:	0800d689 	.word	0x0800d689
 800d624:	0800d71b 	.word	0x0800d71b
 800d628:	0800d5d9 	.word	0x0800d5d9
 800d62c:	0800d5d9 	.word	0x0800d5d9
 800d630:	0800d783 	.word	0x0800d783
 800d634:	0800d5d9 	.word	0x0800d5d9
 800d638:	0800d689 	.word	0x0800d689
 800d63c:	0800d5d9 	.word	0x0800d5d9
 800d640:	0800d5d9 	.word	0x0800d5d9
 800d644:	0800d723 	.word	0x0800d723
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	1d1a      	adds	r2, r3, #4
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	602a      	str	r2, [r5, #0]
 800d650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d658:	2301      	movs	r3, #1
 800d65a:	e09f      	b.n	800d79c <_printf_i+0x1ec>
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	682b      	ldr	r3, [r5, #0]
 800d660:	0607      	lsls	r7, r0, #24
 800d662:	f103 0104 	add.w	r1, r3, #4
 800d666:	6029      	str	r1, [r5, #0]
 800d668:	d501      	bpl.n	800d66e <_printf_i+0xbe>
 800d66a:	681e      	ldr	r6, [r3, #0]
 800d66c:	e003      	b.n	800d676 <_printf_i+0xc6>
 800d66e:	0646      	lsls	r6, r0, #25
 800d670:	d5fb      	bpl.n	800d66a <_printf_i+0xba>
 800d672:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d676:	2e00      	cmp	r6, #0
 800d678:	da03      	bge.n	800d682 <_printf_i+0xd2>
 800d67a:	232d      	movs	r3, #45	; 0x2d
 800d67c:	4276      	negs	r6, r6
 800d67e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d682:	485a      	ldr	r0, [pc, #360]	; (800d7ec <_printf_i+0x23c>)
 800d684:	230a      	movs	r3, #10
 800d686:	e012      	b.n	800d6ae <_printf_i+0xfe>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	6820      	ldr	r0, [r4, #0]
 800d68c:	1d19      	adds	r1, r3, #4
 800d68e:	6029      	str	r1, [r5, #0]
 800d690:	0605      	lsls	r5, r0, #24
 800d692:	d501      	bpl.n	800d698 <_printf_i+0xe8>
 800d694:	681e      	ldr	r6, [r3, #0]
 800d696:	e002      	b.n	800d69e <_printf_i+0xee>
 800d698:	0641      	lsls	r1, r0, #25
 800d69a:	d5fb      	bpl.n	800d694 <_printf_i+0xe4>
 800d69c:	881e      	ldrh	r6, [r3, #0]
 800d69e:	4853      	ldr	r0, [pc, #332]	; (800d7ec <_printf_i+0x23c>)
 800d6a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2308      	moveq	r3, #8
 800d6a6:	230a      	movne	r3, #10
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6ae:	6865      	ldr	r5, [r4, #4]
 800d6b0:	60a5      	str	r5, [r4, #8]
 800d6b2:	2d00      	cmp	r5, #0
 800d6b4:	bfa2      	ittt	ge
 800d6b6:	6821      	ldrge	r1, [r4, #0]
 800d6b8:	f021 0104 	bicge.w	r1, r1, #4
 800d6bc:	6021      	strge	r1, [r4, #0]
 800d6be:	b90e      	cbnz	r6, 800d6c4 <_printf_i+0x114>
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	d04b      	beq.n	800d75c <_printf_i+0x1ac>
 800d6c4:	4615      	mov	r5, r2
 800d6c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d6ce:	5dc7      	ldrb	r7, [r0, r7]
 800d6d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6d4:	4637      	mov	r7, r6
 800d6d6:	42bb      	cmp	r3, r7
 800d6d8:	460e      	mov	r6, r1
 800d6da:	d9f4      	bls.n	800d6c6 <_printf_i+0x116>
 800d6dc:	2b08      	cmp	r3, #8
 800d6de:	d10b      	bne.n	800d6f8 <_printf_i+0x148>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	07de      	lsls	r6, r3, #31
 800d6e4:	d508      	bpl.n	800d6f8 <_printf_i+0x148>
 800d6e6:	6923      	ldr	r3, [r4, #16]
 800d6e8:	6861      	ldr	r1, [r4, #4]
 800d6ea:	4299      	cmp	r1, r3
 800d6ec:	bfde      	ittt	le
 800d6ee:	2330      	movle	r3, #48	; 0x30
 800d6f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6f8:	1b52      	subs	r2, r2, r5
 800d6fa:	6122      	str	r2, [r4, #16]
 800d6fc:	f8cd a000 	str.w	sl, [sp]
 800d700:	464b      	mov	r3, r9
 800d702:	aa03      	add	r2, sp, #12
 800d704:	4621      	mov	r1, r4
 800d706:	4640      	mov	r0, r8
 800d708:	f7ff fee4 	bl	800d4d4 <_printf_common>
 800d70c:	3001      	adds	r0, #1
 800d70e:	d14a      	bne.n	800d7a6 <_printf_i+0x1f6>
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	b004      	add	sp, #16
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	f043 0320 	orr.w	r3, r3, #32
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	4833      	ldr	r0, [pc, #204]	; (800d7f0 <_printf_i+0x240>)
 800d724:	2778      	movs	r7, #120	; 0x78
 800d726:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	6829      	ldr	r1, [r5, #0]
 800d72e:	061f      	lsls	r7, r3, #24
 800d730:	f851 6b04 	ldr.w	r6, [r1], #4
 800d734:	d402      	bmi.n	800d73c <_printf_i+0x18c>
 800d736:	065f      	lsls	r7, r3, #25
 800d738:	bf48      	it	mi
 800d73a:	b2b6      	uxthmi	r6, r6
 800d73c:	07df      	lsls	r7, r3, #31
 800d73e:	bf48      	it	mi
 800d740:	f043 0320 	orrmi.w	r3, r3, #32
 800d744:	6029      	str	r1, [r5, #0]
 800d746:	bf48      	it	mi
 800d748:	6023      	strmi	r3, [r4, #0]
 800d74a:	b91e      	cbnz	r6, 800d754 <_printf_i+0x1a4>
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	f023 0320 	bic.w	r3, r3, #32
 800d752:	6023      	str	r3, [r4, #0]
 800d754:	2310      	movs	r3, #16
 800d756:	e7a7      	b.n	800d6a8 <_printf_i+0xf8>
 800d758:	4824      	ldr	r0, [pc, #144]	; (800d7ec <_printf_i+0x23c>)
 800d75a:	e7e4      	b.n	800d726 <_printf_i+0x176>
 800d75c:	4615      	mov	r5, r2
 800d75e:	e7bd      	b.n	800d6dc <_printf_i+0x12c>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	6826      	ldr	r6, [r4, #0]
 800d764:	6961      	ldr	r1, [r4, #20]
 800d766:	1d18      	adds	r0, r3, #4
 800d768:	6028      	str	r0, [r5, #0]
 800d76a:	0635      	lsls	r5, r6, #24
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	d501      	bpl.n	800d774 <_printf_i+0x1c4>
 800d770:	6019      	str	r1, [r3, #0]
 800d772:	e002      	b.n	800d77a <_printf_i+0x1ca>
 800d774:	0670      	lsls	r0, r6, #25
 800d776:	d5fb      	bpl.n	800d770 <_printf_i+0x1c0>
 800d778:	8019      	strh	r1, [r3, #0]
 800d77a:	2300      	movs	r3, #0
 800d77c:	6123      	str	r3, [r4, #16]
 800d77e:	4615      	mov	r5, r2
 800d780:	e7bc      	b.n	800d6fc <_printf_i+0x14c>
 800d782:	682b      	ldr	r3, [r5, #0]
 800d784:	1d1a      	adds	r2, r3, #4
 800d786:	602a      	str	r2, [r5, #0]
 800d788:	681d      	ldr	r5, [r3, #0]
 800d78a:	6862      	ldr	r2, [r4, #4]
 800d78c:	2100      	movs	r1, #0
 800d78e:	4628      	mov	r0, r5
 800d790:	f7f2 fd1e 	bl	80001d0 <memchr>
 800d794:	b108      	cbz	r0, 800d79a <_printf_i+0x1ea>
 800d796:	1b40      	subs	r0, r0, r5
 800d798:	6060      	str	r0, [r4, #4]
 800d79a:	6863      	ldr	r3, [r4, #4]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a4:	e7aa      	b.n	800d6fc <_printf_i+0x14c>
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	4649      	mov	r1, r9
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	47d0      	blx	sl
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d0ad      	beq.n	800d710 <_printf_i+0x160>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	079b      	lsls	r3, r3, #30
 800d7b8:	d413      	bmi.n	800d7e2 <_printf_i+0x232>
 800d7ba:	68e0      	ldr	r0, [r4, #12]
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	4298      	cmp	r0, r3
 800d7c0:	bfb8      	it	lt
 800d7c2:	4618      	movlt	r0, r3
 800d7c4:	e7a6      	b.n	800d714 <_printf_i+0x164>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	4632      	mov	r2, r6
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	4640      	mov	r0, r8
 800d7ce:	47d0      	blx	sl
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d09d      	beq.n	800d710 <_printf_i+0x160>
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	68e3      	ldr	r3, [r4, #12]
 800d7d8:	9903      	ldr	r1, [sp, #12]
 800d7da:	1a5b      	subs	r3, r3, r1
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	dcf2      	bgt.n	800d7c6 <_printf_i+0x216>
 800d7e0:	e7eb      	b.n	800d7ba <_printf_i+0x20a>
 800d7e2:	2500      	movs	r5, #0
 800d7e4:	f104 0619 	add.w	r6, r4, #25
 800d7e8:	e7f5      	b.n	800d7d6 <_printf_i+0x226>
 800d7ea:	bf00      	nop
 800d7ec:	0804e009 	.word	0x0804e009
 800d7f0:	0804e01a 	.word	0x0804e01a

0800d7f4 <std>:
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d7fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d802:	6083      	str	r3, [r0, #8]
 800d804:	8181      	strh	r1, [r0, #12]
 800d806:	6643      	str	r3, [r0, #100]	; 0x64
 800d808:	81c2      	strh	r2, [r0, #14]
 800d80a:	6183      	str	r3, [r0, #24]
 800d80c:	4619      	mov	r1, r3
 800d80e:	2208      	movs	r2, #8
 800d810:	305c      	adds	r0, #92	; 0x5c
 800d812:	f000 f930 	bl	800da76 <memset>
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <std+0x38>)
 800d818:	6263      	str	r3, [r4, #36]	; 0x24
 800d81a:	4b05      	ldr	r3, [pc, #20]	; (800d830 <std+0x3c>)
 800d81c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d81e:	4b05      	ldr	r3, [pc, #20]	; (800d834 <std+0x40>)
 800d820:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d822:	4b05      	ldr	r3, [pc, #20]	; (800d838 <std+0x44>)
 800d824:	6224      	str	r4, [r4, #32]
 800d826:	6323      	str	r3, [r4, #48]	; 0x30
 800d828:	bd10      	pop	{r4, pc}
 800d82a:	bf00      	nop
 800d82c:	0800d9ed 	.word	0x0800d9ed
 800d830:	0800da13 	.word	0x0800da13
 800d834:	0800da4b 	.word	0x0800da4b
 800d838:	0800da6f 	.word	0x0800da6f

0800d83c <stdio_exit_handler>:
 800d83c:	4a02      	ldr	r2, [pc, #8]	; (800d848 <stdio_exit_handler+0xc>)
 800d83e:	4903      	ldr	r1, [pc, #12]	; (800d84c <stdio_exit_handler+0x10>)
 800d840:	4803      	ldr	r0, [pc, #12]	; (800d850 <stdio_exit_handler+0x14>)
 800d842:	f000 b869 	b.w	800d918 <_fwalk_sglue>
 800d846:	bf00      	nop
 800d848:	20000120 	.word	0x20000120
 800d84c:	0800fe91 	.word	0x0800fe91
 800d850:	20000298 	.word	0x20000298

0800d854 <cleanup_stdio>:
 800d854:	6841      	ldr	r1, [r0, #4]
 800d856:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <cleanup_stdio+0x34>)
 800d858:	4299      	cmp	r1, r3
 800d85a:	b510      	push	{r4, lr}
 800d85c:	4604      	mov	r4, r0
 800d85e:	d001      	beq.n	800d864 <cleanup_stdio+0x10>
 800d860:	f002 fb16 	bl	800fe90 <_fflush_r>
 800d864:	68a1      	ldr	r1, [r4, #8]
 800d866:	4b09      	ldr	r3, [pc, #36]	; (800d88c <cleanup_stdio+0x38>)
 800d868:	4299      	cmp	r1, r3
 800d86a:	d002      	beq.n	800d872 <cleanup_stdio+0x1e>
 800d86c:	4620      	mov	r0, r4
 800d86e:	f002 fb0f 	bl	800fe90 <_fflush_r>
 800d872:	68e1      	ldr	r1, [r4, #12]
 800d874:	4b06      	ldr	r3, [pc, #24]	; (800d890 <cleanup_stdio+0x3c>)
 800d876:	4299      	cmp	r1, r3
 800d878:	d004      	beq.n	800d884 <cleanup_stdio+0x30>
 800d87a:	4620      	mov	r0, r4
 800d87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d880:	f002 bb06 	b.w	800fe90 <_fflush_r>
 800d884:	bd10      	pop	{r4, pc}
 800d886:	bf00      	nop
 800d888:	20001cc8 	.word	0x20001cc8
 800d88c:	20001d30 	.word	0x20001d30
 800d890:	20001d98 	.word	0x20001d98

0800d894 <global_stdio_init.part.0>:
 800d894:	b510      	push	{r4, lr}
 800d896:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <global_stdio_init.part.0+0x30>)
 800d898:	4c0b      	ldr	r4, [pc, #44]	; (800d8c8 <global_stdio_init.part.0+0x34>)
 800d89a:	4a0c      	ldr	r2, [pc, #48]	; (800d8cc <global_stdio_init.part.0+0x38>)
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2104      	movs	r1, #4
 800d8a4:	f7ff ffa6 	bl	800d7f4 <std>
 800d8a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	2109      	movs	r1, #9
 800d8b0:	f7ff ffa0 	bl	800d7f4 <std>
 800d8b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8be:	2112      	movs	r1, #18
 800d8c0:	f7ff bf98 	b.w	800d7f4 <std>
 800d8c4:	20001e00 	.word	0x20001e00
 800d8c8:	20001cc8 	.word	0x20001cc8
 800d8cc:	0800d83d 	.word	0x0800d83d

0800d8d0 <__sfp_lock_acquire>:
 800d8d0:	4801      	ldr	r0, [pc, #4]	; (800d8d8 <__sfp_lock_acquire+0x8>)
 800d8d2:	f000 ba01 	b.w	800dcd8 <__retarget_lock_acquire_recursive>
 800d8d6:	bf00      	nop
 800d8d8:	20001e09 	.word	0x20001e09

0800d8dc <__sfp_lock_release>:
 800d8dc:	4801      	ldr	r0, [pc, #4]	; (800d8e4 <__sfp_lock_release+0x8>)
 800d8de:	f000 b9fc 	b.w	800dcda <__retarget_lock_release_recursive>
 800d8e2:	bf00      	nop
 800d8e4:	20001e09 	.word	0x20001e09

0800d8e8 <__sinit>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	f7ff fff0 	bl	800d8d0 <__sfp_lock_acquire>
 800d8f0:	6a23      	ldr	r3, [r4, #32]
 800d8f2:	b11b      	cbz	r3, 800d8fc <__sinit+0x14>
 800d8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f8:	f7ff bff0 	b.w	800d8dc <__sfp_lock_release>
 800d8fc:	4b04      	ldr	r3, [pc, #16]	; (800d910 <__sinit+0x28>)
 800d8fe:	6223      	str	r3, [r4, #32]
 800d900:	4b04      	ldr	r3, [pc, #16]	; (800d914 <__sinit+0x2c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1f5      	bne.n	800d8f4 <__sinit+0xc>
 800d908:	f7ff ffc4 	bl	800d894 <global_stdio_init.part.0>
 800d90c:	e7f2      	b.n	800d8f4 <__sinit+0xc>
 800d90e:	bf00      	nop
 800d910:	0800d855 	.word	0x0800d855
 800d914:	20001e00 	.word	0x20001e00

0800d918 <_fwalk_sglue>:
 800d918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d91c:	4607      	mov	r7, r0
 800d91e:	4688      	mov	r8, r1
 800d920:	4614      	mov	r4, r2
 800d922:	2600      	movs	r6, #0
 800d924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d928:	f1b9 0901 	subs.w	r9, r9, #1
 800d92c:	d505      	bpl.n	800d93a <_fwalk_sglue+0x22>
 800d92e:	6824      	ldr	r4, [r4, #0]
 800d930:	2c00      	cmp	r4, #0
 800d932:	d1f7      	bne.n	800d924 <_fwalk_sglue+0xc>
 800d934:	4630      	mov	r0, r6
 800d936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d93a:	89ab      	ldrh	r3, [r5, #12]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d907      	bls.n	800d950 <_fwalk_sglue+0x38>
 800d940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d944:	3301      	adds	r3, #1
 800d946:	d003      	beq.n	800d950 <_fwalk_sglue+0x38>
 800d948:	4629      	mov	r1, r5
 800d94a:	4638      	mov	r0, r7
 800d94c:	47c0      	blx	r8
 800d94e:	4306      	orrs	r6, r0
 800d950:	3568      	adds	r5, #104	; 0x68
 800d952:	e7e9      	b.n	800d928 <_fwalk_sglue+0x10>

0800d954 <siprintf>:
 800d954:	b40e      	push	{r1, r2, r3}
 800d956:	b500      	push	{lr}
 800d958:	b09c      	sub	sp, #112	; 0x70
 800d95a:	ab1d      	add	r3, sp, #116	; 0x74
 800d95c:	9002      	str	r0, [sp, #8]
 800d95e:	9006      	str	r0, [sp, #24]
 800d960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d964:	4809      	ldr	r0, [pc, #36]	; (800d98c <siprintf+0x38>)
 800d966:	9107      	str	r1, [sp, #28]
 800d968:	9104      	str	r1, [sp, #16]
 800d96a:	4909      	ldr	r1, [pc, #36]	; (800d990 <siprintf+0x3c>)
 800d96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d970:	9105      	str	r1, [sp, #20]
 800d972:	6800      	ldr	r0, [r0, #0]
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	a902      	add	r1, sp, #8
 800d978:	f001 fca2 	bl	800f2c0 <_svfiprintf_r>
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	2200      	movs	r2, #0
 800d980:	701a      	strb	r2, [r3, #0]
 800d982:	b01c      	add	sp, #112	; 0x70
 800d984:	f85d eb04 	ldr.w	lr, [sp], #4
 800d988:	b003      	add	sp, #12
 800d98a:	4770      	bx	lr
 800d98c:	200002e4 	.word	0x200002e4
 800d990:	ffff0208 	.word	0xffff0208

0800d994 <siscanf>:
 800d994:	b40e      	push	{r1, r2, r3}
 800d996:	b510      	push	{r4, lr}
 800d998:	b09f      	sub	sp, #124	; 0x7c
 800d99a:	ac21      	add	r4, sp, #132	; 0x84
 800d99c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d9a0:	f854 2b04 	ldr.w	r2, [r4], #4
 800d9a4:	9201      	str	r2, [sp, #4]
 800d9a6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d9aa:	9004      	str	r0, [sp, #16]
 800d9ac:	9008      	str	r0, [sp, #32]
 800d9ae:	f7f2 fc5f 	bl	8000270 <strlen>
 800d9b2:	4b0c      	ldr	r3, [pc, #48]	; (800d9e4 <siscanf+0x50>)
 800d9b4:	9005      	str	r0, [sp, #20]
 800d9b6:	9009      	str	r0, [sp, #36]	; 0x24
 800d9b8:	930d      	str	r3, [sp, #52]	; 0x34
 800d9ba:	480b      	ldr	r0, [pc, #44]	; (800d9e8 <siscanf+0x54>)
 800d9bc:	9a01      	ldr	r2, [sp, #4]
 800d9be:	6800      	ldr	r0, [r0, #0]
 800d9c0:	9403      	str	r4, [sp, #12]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	9311      	str	r3, [sp, #68]	; 0x44
 800d9c6:	9316      	str	r3, [sp, #88]	; 0x58
 800d9c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d9d0:	a904      	add	r1, sp, #16
 800d9d2:	4623      	mov	r3, r4
 800d9d4:	f001 fdcc 	bl	800f570 <__ssvfiscanf_r>
 800d9d8:	b01f      	add	sp, #124	; 0x7c
 800d9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9de:	b003      	add	sp, #12
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	0800da0f 	.word	0x0800da0f
 800d9e8:	200002e4 	.word	0x200002e4

0800d9ec <__sread>:
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f4:	f000 f912 	bl	800dc1c <_read_r>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	bfab      	itete	ge
 800d9fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9fe:	89a3      	ldrhlt	r3, [r4, #12]
 800da00:	181b      	addge	r3, r3, r0
 800da02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da06:	bfac      	ite	ge
 800da08:	6563      	strge	r3, [r4, #84]	; 0x54
 800da0a:	81a3      	strhlt	r3, [r4, #12]
 800da0c:	bd10      	pop	{r4, pc}

0800da0e <__seofread>:
 800da0e:	2000      	movs	r0, #0
 800da10:	4770      	bx	lr

0800da12 <__swrite>:
 800da12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da16:	461f      	mov	r7, r3
 800da18:	898b      	ldrh	r3, [r1, #12]
 800da1a:	05db      	lsls	r3, r3, #23
 800da1c:	4605      	mov	r5, r0
 800da1e:	460c      	mov	r4, r1
 800da20:	4616      	mov	r6, r2
 800da22:	d505      	bpl.n	800da30 <__swrite+0x1e>
 800da24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da28:	2302      	movs	r3, #2
 800da2a:	2200      	movs	r2, #0
 800da2c:	f000 f8e4 	bl	800dbf8 <_lseek_r>
 800da30:	89a3      	ldrh	r3, [r4, #12]
 800da32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da3a:	81a3      	strh	r3, [r4, #12]
 800da3c:	4632      	mov	r2, r6
 800da3e:	463b      	mov	r3, r7
 800da40:	4628      	mov	r0, r5
 800da42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da46:	f000 b90b 	b.w	800dc60 <_write_r>

0800da4a <__sseek>:
 800da4a:	b510      	push	{r4, lr}
 800da4c:	460c      	mov	r4, r1
 800da4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da52:	f000 f8d1 	bl	800dbf8 <_lseek_r>
 800da56:	1c43      	adds	r3, r0, #1
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	bf15      	itete	ne
 800da5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da66:	81a3      	strheq	r3, [r4, #12]
 800da68:	bf18      	it	ne
 800da6a:	81a3      	strhne	r3, [r4, #12]
 800da6c:	bd10      	pop	{r4, pc}

0800da6e <__sclose>:
 800da6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da72:	f000 b8b1 	b.w	800dbd8 <_close_r>

0800da76 <memset>:
 800da76:	4402      	add	r2, r0
 800da78:	4603      	mov	r3, r0
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d100      	bne.n	800da80 <memset+0xa>
 800da7e:	4770      	bx	lr
 800da80:	f803 1b01 	strb.w	r1, [r3], #1
 800da84:	e7f9      	b.n	800da7a <memset+0x4>

0800da86 <strchr>:
 800da86:	b2c9      	uxtb	r1, r1
 800da88:	4603      	mov	r3, r0
 800da8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da8e:	b11a      	cbz	r2, 800da98 <strchr+0x12>
 800da90:	428a      	cmp	r2, r1
 800da92:	d1f9      	bne.n	800da88 <strchr+0x2>
 800da94:	4618      	mov	r0, r3
 800da96:	4770      	bx	lr
 800da98:	2900      	cmp	r1, #0
 800da9a:	bf18      	it	ne
 800da9c:	2300      	movne	r3, #0
 800da9e:	e7f9      	b.n	800da94 <strchr+0xe>

0800daa0 <strncmp>:
 800daa0:	b510      	push	{r4, lr}
 800daa2:	b16a      	cbz	r2, 800dac0 <strncmp+0x20>
 800daa4:	3901      	subs	r1, #1
 800daa6:	1884      	adds	r4, r0, r2
 800daa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d103      	bne.n	800dabc <strncmp+0x1c>
 800dab4:	42a0      	cmp	r0, r4
 800dab6:	d001      	beq.n	800dabc <strncmp+0x1c>
 800dab8:	2a00      	cmp	r2, #0
 800daba:	d1f5      	bne.n	800daa8 <strncmp+0x8>
 800dabc:	1ad0      	subs	r0, r2, r3
 800dabe:	bd10      	pop	{r4, pc}
 800dac0:	4610      	mov	r0, r2
 800dac2:	e7fc      	b.n	800dabe <strncmp+0x1e>

0800dac4 <strncpy>:
 800dac4:	b510      	push	{r4, lr}
 800dac6:	3901      	subs	r1, #1
 800dac8:	4603      	mov	r3, r0
 800daca:	b132      	cbz	r2, 800dada <strncpy+0x16>
 800dacc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dad0:	f803 4b01 	strb.w	r4, [r3], #1
 800dad4:	3a01      	subs	r2, #1
 800dad6:	2c00      	cmp	r4, #0
 800dad8:	d1f7      	bne.n	800daca <strncpy+0x6>
 800dada:	441a      	add	r2, r3
 800dadc:	2100      	movs	r1, #0
 800dade:	4293      	cmp	r3, r2
 800dae0:	d100      	bne.n	800dae4 <strncpy+0x20>
 800dae2:	bd10      	pop	{r4, pc}
 800dae4:	f803 1b01 	strb.w	r1, [r3], #1
 800dae8:	e7f9      	b.n	800dade <strncpy+0x1a>
	...

0800daec <strtok>:
 800daec:	4b16      	ldr	r3, [pc, #88]	; (800db48 <strtok+0x5c>)
 800daee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800daf0:	681e      	ldr	r6, [r3, #0]
 800daf2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800daf4:	4605      	mov	r5, r0
 800daf6:	b9fc      	cbnz	r4, 800db38 <strtok+0x4c>
 800daf8:	2050      	movs	r0, #80	; 0x50
 800dafa:	9101      	str	r1, [sp, #4]
 800dafc:	f7ff f8ca 	bl	800cc94 <malloc>
 800db00:	9901      	ldr	r1, [sp, #4]
 800db02:	6470      	str	r0, [r6, #68]	; 0x44
 800db04:	4602      	mov	r2, r0
 800db06:	b920      	cbnz	r0, 800db12 <strtok+0x26>
 800db08:	4b10      	ldr	r3, [pc, #64]	; (800db4c <strtok+0x60>)
 800db0a:	4811      	ldr	r0, [pc, #68]	; (800db50 <strtok+0x64>)
 800db0c:	215b      	movs	r1, #91	; 0x5b
 800db0e:	f000 f8fb 	bl	800dd08 <__assert_func>
 800db12:	e9c0 4400 	strd	r4, r4, [r0]
 800db16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800db1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800db1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800db22:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800db26:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800db2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800db2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800db32:	6184      	str	r4, [r0, #24]
 800db34:	7704      	strb	r4, [r0, #28]
 800db36:	6244      	str	r4, [r0, #36]	; 0x24
 800db38:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800db3a:	2301      	movs	r3, #1
 800db3c:	4628      	mov	r0, r5
 800db3e:	b002      	add	sp, #8
 800db40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db44:	f000 b806 	b.w	800db54 <__strtok_r>
 800db48:	200002e4 	.word	0x200002e4
 800db4c:	0804e02b 	.word	0x0804e02b
 800db50:	0804e042 	.word	0x0804e042

0800db54 <__strtok_r>:
 800db54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db56:	b908      	cbnz	r0, 800db5c <__strtok_r+0x8>
 800db58:	6810      	ldr	r0, [r2, #0]
 800db5a:	b188      	cbz	r0, 800db80 <__strtok_r+0x2c>
 800db5c:	4604      	mov	r4, r0
 800db5e:	4620      	mov	r0, r4
 800db60:	f814 5b01 	ldrb.w	r5, [r4], #1
 800db64:	460f      	mov	r7, r1
 800db66:	f817 6b01 	ldrb.w	r6, [r7], #1
 800db6a:	b91e      	cbnz	r6, 800db74 <__strtok_r+0x20>
 800db6c:	b965      	cbnz	r5, 800db88 <__strtok_r+0x34>
 800db6e:	6015      	str	r5, [r2, #0]
 800db70:	4628      	mov	r0, r5
 800db72:	e005      	b.n	800db80 <__strtok_r+0x2c>
 800db74:	42b5      	cmp	r5, r6
 800db76:	d1f6      	bne.n	800db66 <__strtok_r+0x12>
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1f0      	bne.n	800db5e <__strtok_r+0xa>
 800db7c:	6014      	str	r4, [r2, #0]
 800db7e:	7003      	strb	r3, [r0, #0]
 800db80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db82:	461c      	mov	r4, r3
 800db84:	e00c      	b.n	800dba0 <__strtok_r+0x4c>
 800db86:	b915      	cbnz	r5, 800db8e <__strtok_r+0x3a>
 800db88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db8c:	460e      	mov	r6, r1
 800db8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800db92:	42ab      	cmp	r3, r5
 800db94:	d1f7      	bne.n	800db86 <__strtok_r+0x32>
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0f3      	beq.n	800db82 <__strtok_r+0x2e>
 800db9a:	2300      	movs	r3, #0
 800db9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dba0:	6014      	str	r4, [r2, #0]
 800dba2:	e7ed      	b.n	800db80 <__strtok_r+0x2c>

0800dba4 <strstr>:
 800dba4:	780a      	ldrb	r2, [r1, #0]
 800dba6:	b570      	push	{r4, r5, r6, lr}
 800dba8:	b96a      	cbnz	r2, 800dbc6 <strstr+0x22>
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d109      	bne.n	800dbc4 <strstr+0x20>
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0f6      	beq.n	800dbaa <strstr+0x6>
 800dbbc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dbc0:	429e      	cmp	r6, r3
 800dbc2:	d0f7      	beq.n	800dbb4 <strstr+0x10>
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	7803      	ldrb	r3, [r0, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1ef      	bne.n	800dbac <strstr+0x8>
 800dbcc:	4618      	mov	r0, r3
 800dbce:	e7ec      	b.n	800dbaa <strstr+0x6>

0800dbd0 <_localeconv_r>:
 800dbd0:	4800      	ldr	r0, [pc, #0]	; (800dbd4 <_localeconv_r+0x4>)
 800dbd2:	4770      	bx	lr
 800dbd4:	2000021c 	.word	0x2000021c

0800dbd8 <_close_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4d06      	ldr	r5, [pc, #24]	; (800dbf4 <_close_r+0x1c>)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	f7f3 fedd 	bl	80019a2 <_close>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_close_r+0x1a>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_close_r+0x1a>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	20001e04 	.word	0x20001e04

0800dbf8 <_lseek_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4d07      	ldr	r5, [pc, #28]	; (800dc18 <_lseek_r+0x20>)
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	4608      	mov	r0, r1
 800dc00:	4611      	mov	r1, r2
 800dc02:	2200      	movs	r2, #0
 800dc04:	602a      	str	r2, [r5, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	f7f3 fef2 	bl	80019f0 <_lseek>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_lseek_r+0x1e>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_lseek_r+0x1e>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	20001e04 	.word	0x20001e04

0800dc1c <_read_r>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4d07      	ldr	r5, [pc, #28]	; (800dc3c <_read_r+0x20>)
 800dc20:	4604      	mov	r4, r0
 800dc22:	4608      	mov	r0, r1
 800dc24:	4611      	mov	r1, r2
 800dc26:	2200      	movs	r2, #0
 800dc28:	602a      	str	r2, [r5, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f7f3 fe80 	bl	8001930 <_read>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d102      	bne.n	800dc3a <_read_r+0x1e>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b103      	cbz	r3, 800dc3a <_read_r+0x1e>
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	20001e04 	.word	0x20001e04

0800dc40 <_sbrk_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4d06      	ldr	r5, [pc, #24]	; (800dc5c <_sbrk_r+0x1c>)
 800dc44:	2300      	movs	r3, #0
 800dc46:	4604      	mov	r4, r0
 800dc48:	4608      	mov	r0, r1
 800dc4a:	602b      	str	r3, [r5, #0]
 800dc4c:	f7f3 fede 	bl	8001a0c <_sbrk>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d102      	bne.n	800dc5a <_sbrk_r+0x1a>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	b103      	cbz	r3, 800dc5a <_sbrk_r+0x1a>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	20001e04 	.word	0x20001e04

0800dc60 <_write_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4d07      	ldr	r5, [pc, #28]	; (800dc80 <_write_r+0x20>)
 800dc64:	4604      	mov	r4, r0
 800dc66:	4608      	mov	r0, r1
 800dc68:	4611      	mov	r1, r2
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	602a      	str	r2, [r5, #0]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f7f3 fe7b 	bl	800196a <_write>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_write_r+0x1e>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_write_r+0x1e>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	20001e04 	.word	0x20001e04

0800dc84 <__errno>:
 800dc84:	4b01      	ldr	r3, [pc, #4]	; (800dc8c <__errno+0x8>)
 800dc86:	6818      	ldr	r0, [r3, #0]
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	200002e4 	.word	0x200002e4

0800dc90 <__libc_init_array>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	4d0d      	ldr	r5, [pc, #52]	; (800dcc8 <__libc_init_array+0x38>)
 800dc94:	4c0d      	ldr	r4, [pc, #52]	; (800dccc <__libc_init_array+0x3c>)
 800dc96:	1b64      	subs	r4, r4, r5
 800dc98:	10a4      	asrs	r4, r4, #2
 800dc9a:	2600      	movs	r6, #0
 800dc9c:	42a6      	cmp	r6, r4
 800dc9e:	d109      	bne.n	800dcb4 <__libc_init_array+0x24>
 800dca0:	4d0b      	ldr	r5, [pc, #44]	; (800dcd0 <__libc_init_array+0x40>)
 800dca2:	4c0c      	ldr	r4, [pc, #48]	; (800dcd4 <__libc_init_array+0x44>)
 800dca4:	f002 fbe0 	bl	8010468 <_init>
 800dca8:	1b64      	subs	r4, r4, r5
 800dcaa:	10a4      	asrs	r4, r4, #2
 800dcac:	2600      	movs	r6, #0
 800dcae:	42a6      	cmp	r6, r4
 800dcb0:	d105      	bne.n	800dcbe <__libc_init_array+0x2e>
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb8:	4798      	blx	r3
 800dcba:	3601      	adds	r6, #1
 800dcbc:	e7ee      	b.n	800dc9c <__libc_init_array+0xc>
 800dcbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc2:	4798      	blx	r3
 800dcc4:	3601      	adds	r6, #1
 800dcc6:	e7f2      	b.n	800dcae <__libc_init_array+0x1e>
 800dcc8:	0804e2e8 	.word	0x0804e2e8
 800dccc:	0804e2e8 	.word	0x0804e2e8
 800dcd0:	0804e2e8 	.word	0x0804e2e8
 800dcd4:	0804e2ec 	.word	0x0804e2ec

0800dcd8 <__retarget_lock_acquire_recursive>:
 800dcd8:	4770      	bx	lr

0800dcda <__retarget_lock_release_recursive>:
 800dcda:	4770      	bx	lr

0800dcdc <strcpy>:
 800dcdc:	4603      	mov	r3, r0
 800dcde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dce2:	f803 2b01 	strb.w	r2, [r3], #1
 800dce6:	2a00      	cmp	r2, #0
 800dce8:	d1f9      	bne.n	800dcde <strcpy+0x2>
 800dcea:	4770      	bx	lr

0800dcec <memcpy>:
 800dcec:	440a      	add	r2, r1
 800dcee:	4291      	cmp	r1, r2
 800dcf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcf4:	d100      	bne.n	800dcf8 <memcpy+0xc>
 800dcf6:	4770      	bx	lr
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd02:	4291      	cmp	r1, r2
 800dd04:	d1f9      	bne.n	800dcfa <memcpy+0xe>
 800dd06:	bd10      	pop	{r4, pc}

0800dd08 <__assert_func>:
 800dd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd0a:	4614      	mov	r4, r2
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <__assert_func+0x2c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4605      	mov	r5, r0
 800dd14:	68d8      	ldr	r0, [r3, #12]
 800dd16:	b14c      	cbz	r4, 800dd2c <__assert_func+0x24>
 800dd18:	4b07      	ldr	r3, [pc, #28]	; (800dd38 <__assert_func+0x30>)
 800dd1a:	9100      	str	r1, [sp, #0]
 800dd1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd20:	4906      	ldr	r1, [pc, #24]	; (800dd3c <__assert_func+0x34>)
 800dd22:	462b      	mov	r3, r5
 800dd24:	f002 f8dc 	bl	800fee0 <fiprintf>
 800dd28:	f002 fa0e 	bl	8010148 <abort>
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <__assert_func+0x38>)
 800dd2e:	461c      	mov	r4, r3
 800dd30:	e7f3      	b.n	800dd1a <__assert_func+0x12>
 800dd32:	bf00      	nop
 800dd34:	200002e4 	.word	0x200002e4
 800dd38:	0804e0a6 	.word	0x0804e0a6
 800dd3c:	0804e0b3 	.word	0x0804e0b3
 800dd40:	0804e0e1 	.word	0x0804e0e1

0800dd44 <quorem>:
 800dd44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd48:	6903      	ldr	r3, [r0, #16]
 800dd4a:	690c      	ldr	r4, [r1, #16]
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	4607      	mov	r7, r0
 800dd50:	db7e      	blt.n	800de50 <quorem+0x10c>
 800dd52:	3c01      	subs	r4, #1
 800dd54:	f101 0814 	add.w	r8, r1, #20
 800dd58:	f100 0514 	add.w	r5, r0, #20
 800dd5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd76:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd7a:	d331      	bcc.n	800dde0 <quorem+0x9c>
 800dd7c:	f04f 0e00 	mov.w	lr, #0
 800dd80:	4640      	mov	r0, r8
 800dd82:	46ac      	mov	ip, r5
 800dd84:	46f2      	mov	sl, lr
 800dd86:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd8a:	b293      	uxth	r3, r2
 800dd8c:	fb06 e303 	mla	r3, r6, r3, lr
 800dd90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd94:	0c1a      	lsrs	r2, r3, #16
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	ebaa 0303 	sub.w	r3, sl, r3
 800dd9c:	f8dc a000 	ldr.w	sl, [ip]
 800dda0:	fa13 f38a 	uxtah	r3, r3, sl
 800dda4:	fb06 220e 	mla	r2, r6, lr, r2
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	9b00      	ldr	r3, [sp, #0]
 800ddac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddb0:	b292      	uxth	r2, r2
 800ddb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ddb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddba:	f8bd 3000 	ldrh.w	r3, [sp]
 800ddbe:	4581      	cmp	r9, r0
 800ddc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddc4:	f84c 3b04 	str.w	r3, [ip], #4
 800ddc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ddcc:	d2db      	bcs.n	800dd86 <quorem+0x42>
 800ddce:	f855 300b 	ldr.w	r3, [r5, fp]
 800ddd2:	b92b      	cbnz	r3, 800dde0 <quorem+0x9c>
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	3b04      	subs	r3, #4
 800ddd8:	429d      	cmp	r5, r3
 800ddda:	461a      	mov	r2, r3
 800dddc:	d32c      	bcc.n	800de38 <quorem+0xf4>
 800ddde:	613c      	str	r4, [r7, #16]
 800dde0:	4638      	mov	r0, r7
 800dde2:	f001 f905 	bl	800eff0 <__mcmp>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	db22      	blt.n	800de30 <quorem+0xec>
 800ddea:	3601      	adds	r6, #1
 800ddec:	4629      	mov	r1, r5
 800ddee:	2000      	movs	r0, #0
 800ddf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddf4:	f8d1 c000 	ldr.w	ip, [r1]
 800ddf8:	b293      	uxth	r3, r2
 800ddfa:	1ac3      	subs	r3, r0, r3
 800ddfc:	0c12      	lsrs	r2, r2, #16
 800ddfe:	fa13 f38c 	uxtah	r3, r3, ip
 800de02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800de06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de10:	45c1      	cmp	r9, r8
 800de12:	f841 3b04 	str.w	r3, [r1], #4
 800de16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de1a:	d2e9      	bcs.n	800ddf0 <quorem+0xac>
 800de1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de24:	b922      	cbnz	r2, 800de30 <quorem+0xec>
 800de26:	3b04      	subs	r3, #4
 800de28:	429d      	cmp	r5, r3
 800de2a:	461a      	mov	r2, r3
 800de2c:	d30a      	bcc.n	800de44 <quorem+0x100>
 800de2e:	613c      	str	r4, [r7, #16]
 800de30:	4630      	mov	r0, r6
 800de32:	b003      	add	sp, #12
 800de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de38:	6812      	ldr	r2, [r2, #0]
 800de3a:	3b04      	subs	r3, #4
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	d1ce      	bne.n	800ddde <quorem+0x9a>
 800de40:	3c01      	subs	r4, #1
 800de42:	e7c9      	b.n	800ddd8 <quorem+0x94>
 800de44:	6812      	ldr	r2, [r2, #0]
 800de46:	3b04      	subs	r3, #4
 800de48:	2a00      	cmp	r2, #0
 800de4a:	d1f0      	bne.n	800de2e <quorem+0xea>
 800de4c:	3c01      	subs	r4, #1
 800de4e:	e7eb      	b.n	800de28 <quorem+0xe4>
 800de50:	2000      	movs	r0, #0
 800de52:	e7ee      	b.n	800de32 <quorem+0xee>
 800de54:	0000      	movs	r0, r0
	...

0800de58 <_dtoa_r>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	ed2d 8b04 	vpush	{d8-d9}
 800de60:	69c5      	ldr	r5, [r0, #28]
 800de62:	b093      	sub	sp, #76	; 0x4c
 800de64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de68:	ec57 6b10 	vmov	r6, r7, d0
 800de6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de70:	9107      	str	r1, [sp, #28]
 800de72:	4604      	mov	r4, r0
 800de74:	920a      	str	r2, [sp, #40]	; 0x28
 800de76:	930d      	str	r3, [sp, #52]	; 0x34
 800de78:	b975      	cbnz	r5, 800de98 <_dtoa_r+0x40>
 800de7a:	2010      	movs	r0, #16
 800de7c:	f7fe ff0a 	bl	800cc94 <malloc>
 800de80:	4602      	mov	r2, r0
 800de82:	61e0      	str	r0, [r4, #28]
 800de84:	b920      	cbnz	r0, 800de90 <_dtoa_r+0x38>
 800de86:	4bae      	ldr	r3, [pc, #696]	; (800e140 <_dtoa_r+0x2e8>)
 800de88:	21ef      	movs	r1, #239	; 0xef
 800de8a:	48ae      	ldr	r0, [pc, #696]	; (800e144 <_dtoa_r+0x2ec>)
 800de8c:	f7ff ff3c 	bl	800dd08 <__assert_func>
 800de90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de94:	6005      	str	r5, [r0, #0]
 800de96:	60c5      	str	r5, [r0, #12]
 800de98:	69e3      	ldr	r3, [r4, #28]
 800de9a:	6819      	ldr	r1, [r3, #0]
 800de9c:	b151      	cbz	r1, 800deb4 <_dtoa_r+0x5c>
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	604a      	str	r2, [r1, #4]
 800dea2:	2301      	movs	r3, #1
 800dea4:	4093      	lsls	r3, r2
 800dea6:	608b      	str	r3, [r1, #8]
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 fe65 	bl	800eb78 <_Bfree>
 800deae:	69e3      	ldr	r3, [r4, #28]
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	1e3b      	subs	r3, r7, #0
 800deb6:	bfbb      	ittet	lt
 800deb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800debc:	9303      	strlt	r3, [sp, #12]
 800debe:	2300      	movge	r3, #0
 800dec0:	2201      	movlt	r2, #1
 800dec2:	bfac      	ite	ge
 800dec4:	f8c8 3000 	strge.w	r3, [r8]
 800dec8:	f8c8 2000 	strlt.w	r2, [r8]
 800decc:	4b9e      	ldr	r3, [pc, #632]	; (800e148 <_dtoa_r+0x2f0>)
 800dece:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ded2:	ea33 0308 	bics.w	r3, r3, r8
 800ded6:	d11b      	bne.n	800df10 <_dtoa_r+0xb8>
 800ded8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800deda:	f242 730f 	movw	r3, #9999	; 0x270f
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dee4:	4333      	orrs	r3, r6
 800dee6:	f000 8593 	beq.w	800ea10 <_dtoa_r+0xbb8>
 800deea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deec:	b963      	cbnz	r3, 800df08 <_dtoa_r+0xb0>
 800deee:	4b97      	ldr	r3, [pc, #604]	; (800e14c <_dtoa_r+0x2f4>)
 800def0:	e027      	b.n	800df42 <_dtoa_r+0xea>
 800def2:	4b97      	ldr	r3, [pc, #604]	; (800e150 <_dtoa_r+0x2f8>)
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	3308      	adds	r3, #8
 800def8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	9800      	ldr	r0, [sp, #0]
 800defe:	b013      	add	sp, #76	; 0x4c
 800df00:	ecbd 8b04 	vpop	{d8-d9}
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	4b90      	ldr	r3, [pc, #576]	; (800e14c <_dtoa_r+0x2f4>)
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	3303      	adds	r3, #3
 800df0e:	e7f3      	b.n	800def8 <_dtoa_r+0xa0>
 800df10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df14:	2200      	movs	r2, #0
 800df16:	ec51 0b17 	vmov	r0, r1, d7
 800df1a:	eeb0 8a47 	vmov.f32	s16, s14
 800df1e:	eef0 8a67 	vmov.f32	s17, s15
 800df22:	2300      	movs	r3, #0
 800df24:	f7f2 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800df28:	4681      	mov	r9, r0
 800df2a:	b160      	cbz	r0, 800df46 <_dtoa_r+0xee>
 800df2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df2e:	2301      	movs	r3, #1
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df34:	2b00      	cmp	r3, #0
 800df36:	f000 8568 	beq.w	800ea0a <_dtoa_r+0xbb2>
 800df3a:	4b86      	ldr	r3, [pc, #536]	; (800e154 <_dtoa_r+0x2fc>)
 800df3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	3b01      	subs	r3, #1
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	e7da      	b.n	800defc <_dtoa_r+0xa4>
 800df46:	aa10      	add	r2, sp, #64	; 0x40
 800df48:	a911      	add	r1, sp, #68	; 0x44
 800df4a:	4620      	mov	r0, r4
 800df4c:	eeb0 0a48 	vmov.f32	s0, s16
 800df50:	eef0 0a68 	vmov.f32	s1, s17
 800df54:	f001 f8f2 	bl	800f13c <__d2b>
 800df58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800df5c:	4682      	mov	sl, r0
 800df5e:	2d00      	cmp	r5, #0
 800df60:	d07f      	beq.n	800e062 <_dtoa_r+0x20a>
 800df62:	ee18 3a90 	vmov	r3, s17
 800df66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800df6e:	ec51 0b18 	vmov	r0, r1, d8
 800df72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800df76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800df7e:	4619      	mov	r1, r3
 800df80:	2200      	movs	r2, #0
 800df82:	4b75      	ldr	r3, [pc, #468]	; (800e158 <_dtoa_r+0x300>)
 800df84:	f7f2 f980 	bl	8000288 <__aeabi_dsub>
 800df88:	a367      	add	r3, pc, #412	; (adr r3, 800e128 <_dtoa_r+0x2d0>)
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	f7f2 fb33 	bl	80005f8 <__aeabi_dmul>
 800df92:	a367      	add	r3, pc, #412	; (adr r3, 800e130 <_dtoa_r+0x2d8>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 f978 	bl	800028c <__adddf3>
 800df9c:	4606      	mov	r6, r0
 800df9e:	4628      	mov	r0, r5
 800dfa0:	460f      	mov	r7, r1
 800dfa2:	f7f2 fabf 	bl	8000524 <__aeabi_i2d>
 800dfa6:	a364      	add	r3, pc, #400	; (adr r3, 800e138 <_dtoa_r+0x2e0>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	f7f2 fb24 	bl	80005f8 <__aeabi_dmul>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	f7f2 f968 	bl	800028c <__adddf3>
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	f7f2 fdca 	bl	8000b58 <__aeabi_d2iz>
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	4683      	mov	fp, r0
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4630      	mov	r0, r6
 800dfcc:	4639      	mov	r1, r7
 800dfce:	f7f2 fd85 	bl	8000adc <__aeabi_dcmplt>
 800dfd2:	b148      	cbz	r0, 800dfe8 <_dtoa_r+0x190>
 800dfd4:	4658      	mov	r0, fp
 800dfd6:	f7f2 faa5 	bl	8000524 <__aeabi_i2d>
 800dfda:	4632      	mov	r2, r6
 800dfdc:	463b      	mov	r3, r7
 800dfde:	f7f2 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfe2:	b908      	cbnz	r0, 800dfe8 <_dtoa_r+0x190>
 800dfe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dfe8:	f1bb 0f16 	cmp.w	fp, #22
 800dfec:	d857      	bhi.n	800e09e <_dtoa_r+0x246>
 800dfee:	4b5b      	ldr	r3, [pc, #364]	; (800e15c <_dtoa_r+0x304>)
 800dff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	ec51 0b18 	vmov	r0, r1, d8
 800dffc:	f7f2 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800e000:	2800      	cmp	r0, #0
 800e002:	d04e      	beq.n	800e0a2 <_dtoa_r+0x24a>
 800e004:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e008:	2300      	movs	r3, #0
 800e00a:	930c      	str	r3, [sp, #48]	; 0x30
 800e00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e00e:	1b5b      	subs	r3, r3, r5
 800e010:	1e5a      	subs	r2, r3, #1
 800e012:	bf45      	ittet	mi
 800e014:	f1c3 0301 	rsbmi	r3, r3, #1
 800e018:	9305      	strmi	r3, [sp, #20]
 800e01a:	2300      	movpl	r3, #0
 800e01c:	2300      	movmi	r3, #0
 800e01e:	9206      	str	r2, [sp, #24]
 800e020:	bf54      	ite	pl
 800e022:	9305      	strpl	r3, [sp, #20]
 800e024:	9306      	strmi	r3, [sp, #24]
 800e026:	f1bb 0f00 	cmp.w	fp, #0
 800e02a:	db3c      	blt.n	800e0a6 <_dtoa_r+0x24e>
 800e02c:	9b06      	ldr	r3, [sp, #24]
 800e02e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e032:	445b      	add	r3, fp
 800e034:	9306      	str	r3, [sp, #24]
 800e036:	2300      	movs	r3, #0
 800e038:	9308      	str	r3, [sp, #32]
 800e03a:	9b07      	ldr	r3, [sp, #28]
 800e03c:	2b09      	cmp	r3, #9
 800e03e:	d868      	bhi.n	800e112 <_dtoa_r+0x2ba>
 800e040:	2b05      	cmp	r3, #5
 800e042:	bfc4      	itt	gt
 800e044:	3b04      	subgt	r3, #4
 800e046:	9307      	strgt	r3, [sp, #28]
 800e048:	9b07      	ldr	r3, [sp, #28]
 800e04a:	f1a3 0302 	sub.w	r3, r3, #2
 800e04e:	bfcc      	ite	gt
 800e050:	2500      	movgt	r5, #0
 800e052:	2501      	movle	r5, #1
 800e054:	2b03      	cmp	r3, #3
 800e056:	f200 8085 	bhi.w	800e164 <_dtoa_r+0x30c>
 800e05a:	e8df f003 	tbb	[pc, r3]
 800e05e:	3b2e      	.short	0x3b2e
 800e060:	5839      	.short	0x5839
 800e062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e066:	441d      	add	r5, r3
 800e068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	bfc1      	itttt	gt
 800e070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e074:	fa08 f803 	lslgt.w	r8, r8, r3
 800e078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e07c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e080:	bfd6      	itet	le
 800e082:	f1c3 0320 	rsble	r3, r3, #32
 800e086:	ea48 0003 	orrgt.w	r0, r8, r3
 800e08a:	fa06 f003 	lslle.w	r0, r6, r3
 800e08e:	f7f2 fa39 	bl	8000504 <__aeabi_ui2d>
 800e092:	2201      	movs	r2, #1
 800e094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e098:	3d01      	subs	r5, #1
 800e09a:	920e      	str	r2, [sp, #56]	; 0x38
 800e09c:	e76f      	b.n	800df7e <_dtoa_r+0x126>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e7b3      	b.n	800e00a <_dtoa_r+0x1b2>
 800e0a2:	900c      	str	r0, [sp, #48]	; 0x30
 800e0a4:	e7b2      	b.n	800e00c <_dtoa_r+0x1b4>
 800e0a6:	9b05      	ldr	r3, [sp, #20]
 800e0a8:	eba3 030b 	sub.w	r3, r3, fp
 800e0ac:	9305      	str	r3, [sp, #20]
 800e0ae:	f1cb 0300 	rsb	r3, fp, #0
 800e0b2:	9308      	str	r3, [sp, #32]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0b8:	e7bf      	b.n	800e03a <_dtoa_r+0x1e2>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dc52      	bgt.n	800e16a <_dtoa_r+0x312>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	920a      	str	r2, [sp, #40]	; 0x28
 800e0ce:	e00b      	b.n	800e0e8 <_dtoa_r+0x290>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e7f3      	b.n	800e0bc <_dtoa_r+0x264>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0da:	445b      	add	r3, fp
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	9304      	str	r3, [sp, #16]
 800e0e4:	bfb8      	it	lt
 800e0e6:	2301      	movlt	r3, #1
 800e0e8:	69e0      	ldr	r0, [r4, #28]
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	2204      	movs	r2, #4
 800e0ee:	f102 0614 	add.w	r6, r2, #20
 800e0f2:	429e      	cmp	r6, r3
 800e0f4:	d93d      	bls.n	800e172 <_dtoa_r+0x31a>
 800e0f6:	6041      	str	r1, [r0, #4]
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 fcfd 	bl	800eaf8 <_Balloc>
 800e0fe:	9000      	str	r0, [sp, #0]
 800e100:	2800      	cmp	r0, #0
 800e102:	d139      	bne.n	800e178 <_dtoa_r+0x320>
 800e104:	4b16      	ldr	r3, [pc, #88]	; (800e160 <_dtoa_r+0x308>)
 800e106:	4602      	mov	r2, r0
 800e108:	f240 11af 	movw	r1, #431	; 0x1af
 800e10c:	e6bd      	b.n	800de8a <_dtoa_r+0x32>
 800e10e:	2301      	movs	r3, #1
 800e110:	e7e1      	b.n	800e0d6 <_dtoa_r+0x27e>
 800e112:	2501      	movs	r5, #1
 800e114:	2300      	movs	r3, #0
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	9509      	str	r5, [sp, #36]	; 0x24
 800e11a:	f04f 33ff 	mov.w	r3, #4294967295
 800e11e:	9301      	str	r3, [sp, #4]
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	2200      	movs	r2, #0
 800e124:	2312      	movs	r3, #18
 800e126:	e7d1      	b.n	800e0cc <_dtoa_r+0x274>
 800e128:	636f4361 	.word	0x636f4361
 800e12c:	3fd287a7 	.word	0x3fd287a7
 800e130:	8b60c8b3 	.word	0x8b60c8b3
 800e134:	3fc68a28 	.word	0x3fc68a28
 800e138:	509f79fb 	.word	0x509f79fb
 800e13c:	3fd34413 	.word	0x3fd34413
 800e140:	0804e02b 	.word	0x0804e02b
 800e144:	0804e0ef 	.word	0x0804e0ef
 800e148:	7ff00000 	.word	0x7ff00000
 800e14c:	0804e0eb 	.word	0x0804e0eb
 800e150:	0804e0e2 	.word	0x0804e0e2
 800e154:	0804e2dc 	.word	0x0804e2dc
 800e158:	3ff80000 	.word	0x3ff80000
 800e15c:	0804e1e0 	.word	0x0804e1e0
 800e160:	0804e147 	.word	0x0804e147
 800e164:	2301      	movs	r3, #1
 800e166:	9309      	str	r3, [sp, #36]	; 0x24
 800e168:	e7d7      	b.n	800e11a <_dtoa_r+0x2c2>
 800e16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	9304      	str	r3, [sp, #16]
 800e170:	e7ba      	b.n	800e0e8 <_dtoa_r+0x290>
 800e172:	3101      	adds	r1, #1
 800e174:	0052      	lsls	r2, r2, #1
 800e176:	e7ba      	b.n	800e0ee <_dtoa_r+0x296>
 800e178:	69e3      	ldr	r3, [r4, #28]
 800e17a:	9a00      	ldr	r2, [sp, #0]
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	9b04      	ldr	r3, [sp, #16]
 800e180:	2b0e      	cmp	r3, #14
 800e182:	f200 80a8 	bhi.w	800e2d6 <_dtoa_r+0x47e>
 800e186:	2d00      	cmp	r5, #0
 800e188:	f000 80a5 	beq.w	800e2d6 <_dtoa_r+0x47e>
 800e18c:	f1bb 0f00 	cmp.w	fp, #0
 800e190:	dd38      	ble.n	800e204 <_dtoa_r+0x3ac>
 800e192:	4bc0      	ldr	r3, [pc, #768]	; (800e494 <_dtoa_r+0x63c>)
 800e194:	f00b 020f 	and.w	r2, fp, #15
 800e198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e19c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e1a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e1a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e1a8:	d019      	beq.n	800e1de <_dtoa_r+0x386>
 800e1aa:	4bbb      	ldr	r3, [pc, #748]	; (800e498 <_dtoa_r+0x640>)
 800e1ac:	ec51 0b18 	vmov	r0, r1, d8
 800e1b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1b4:	f7f2 fb4a 	bl	800084c <__aeabi_ddiv>
 800e1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1bc:	f008 080f 	and.w	r8, r8, #15
 800e1c0:	2503      	movs	r5, #3
 800e1c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e498 <_dtoa_r+0x640>
 800e1c6:	f1b8 0f00 	cmp.w	r8, #0
 800e1ca:	d10a      	bne.n	800e1e2 <_dtoa_r+0x38a>
 800e1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1d0:	4632      	mov	r2, r6
 800e1d2:	463b      	mov	r3, r7
 800e1d4:	f7f2 fb3a 	bl	800084c <__aeabi_ddiv>
 800e1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1dc:	e02b      	b.n	800e236 <_dtoa_r+0x3de>
 800e1de:	2502      	movs	r5, #2
 800e1e0:	e7ef      	b.n	800e1c2 <_dtoa_r+0x36a>
 800e1e2:	f018 0f01 	tst.w	r8, #1
 800e1e6:	d008      	beq.n	800e1fa <_dtoa_r+0x3a2>
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e1f0:	f7f2 fa02 	bl	80005f8 <__aeabi_dmul>
 800e1f4:	3501      	adds	r5, #1
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	460f      	mov	r7, r1
 800e1fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e1fe:	f109 0908 	add.w	r9, r9, #8
 800e202:	e7e0      	b.n	800e1c6 <_dtoa_r+0x36e>
 800e204:	f000 809f 	beq.w	800e346 <_dtoa_r+0x4ee>
 800e208:	f1cb 0600 	rsb	r6, fp, #0
 800e20c:	4ba1      	ldr	r3, [pc, #644]	; (800e494 <_dtoa_r+0x63c>)
 800e20e:	4fa2      	ldr	r7, [pc, #648]	; (800e498 <_dtoa_r+0x640>)
 800e210:	f006 020f 	and.w	r2, r6, #15
 800e214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	ec51 0b18 	vmov	r0, r1, d8
 800e220:	f7f2 f9ea 	bl	80005f8 <__aeabi_dmul>
 800e224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e228:	1136      	asrs	r6, r6, #4
 800e22a:	2300      	movs	r3, #0
 800e22c:	2502      	movs	r5, #2
 800e22e:	2e00      	cmp	r6, #0
 800e230:	d17e      	bne.n	800e330 <_dtoa_r+0x4d8>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1d0      	bne.n	800e1d8 <_dtoa_r+0x380>
 800e236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e238:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 8084 	beq.w	800e34a <_dtoa_r+0x4f2>
 800e242:	4b96      	ldr	r3, [pc, #600]	; (800e49c <_dtoa_r+0x644>)
 800e244:	2200      	movs	r2, #0
 800e246:	4640      	mov	r0, r8
 800e248:	4649      	mov	r1, r9
 800e24a:	f7f2 fc47 	bl	8000adc <__aeabi_dcmplt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d07b      	beq.n	800e34a <_dtoa_r+0x4f2>
 800e252:	9b04      	ldr	r3, [sp, #16]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d078      	beq.n	800e34a <_dtoa_r+0x4f2>
 800e258:	9b01      	ldr	r3, [sp, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	dd39      	ble.n	800e2d2 <_dtoa_r+0x47a>
 800e25e:	4b90      	ldr	r3, [pc, #576]	; (800e4a0 <_dtoa_r+0x648>)
 800e260:	2200      	movs	r2, #0
 800e262:	4640      	mov	r0, r8
 800e264:	4649      	mov	r1, r9
 800e266:	f7f2 f9c7 	bl	80005f8 <__aeabi_dmul>
 800e26a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e26e:	9e01      	ldr	r6, [sp, #4]
 800e270:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e274:	3501      	adds	r5, #1
 800e276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e27a:	4628      	mov	r0, r5
 800e27c:	f7f2 f952 	bl	8000524 <__aeabi_i2d>
 800e280:	4642      	mov	r2, r8
 800e282:	464b      	mov	r3, r9
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	4b86      	ldr	r3, [pc, #536]	; (800e4a4 <_dtoa_r+0x64c>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	f7f1 fffe 	bl	800028c <__adddf3>
 800e290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e298:	9303      	str	r3, [sp, #12]
 800e29a:	2e00      	cmp	r6, #0
 800e29c:	d158      	bne.n	800e350 <_dtoa_r+0x4f8>
 800e29e:	4b82      	ldr	r3, [pc, #520]	; (800e4a8 <_dtoa_r+0x650>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	f7f1 ffef 	bl	8000288 <__aeabi_dsub>
 800e2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2ae:	4680      	mov	r8, r0
 800e2b0:	4689      	mov	r9, r1
 800e2b2:	f7f2 fc31 	bl	8000b18 <__aeabi_dcmpgt>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	f040 8296 	bne.w	800e7e8 <_dtoa_r+0x990>
 800e2bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2c6:	4649      	mov	r1, r9
 800e2c8:	f7f2 fc08 	bl	8000adc <__aeabi_dcmplt>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f040 8289 	bne.w	800e7e4 <_dtoa_r+0x98c>
 800e2d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e2d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f2c0 814e 	blt.w	800e57a <_dtoa_r+0x722>
 800e2de:	f1bb 0f0e 	cmp.w	fp, #14
 800e2e2:	f300 814a 	bgt.w	800e57a <_dtoa_r+0x722>
 800e2e6:	4b6b      	ldr	r3, [pc, #428]	; (800e494 <_dtoa_r+0x63c>)
 800e2e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e2ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f280 80dc 	bge.w	800e4b0 <_dtoa_r+0x658>
 800e2f8:	9b04      	ldr	r3, [sp, #16]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f300 80d8 	bgt.w	800e4b0 <_dtoa_r+0x658>
 800e300:	f040 826f 	bne.w	800e7e2 <_dtoa_r+0x98a>
 800e304:	4b68      	ldr	r3, [pc, #416]	; (800e4a8 <_dtoa_r+0x650>)
 800e306:	2200      	movs	r2, #0
 800e308:	4640      	mov	r0, r8
 800e30a:	4649      	mov	r1, r9
 800e30c:	f7f2 f974 	bl	80005f8 <__aeabi_dmul>
 800e310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e314:	f7f2 fbf6 	bl	8000b04 <__aeabi_dcmpge>
 800e318:	9e04      	ldr	r6, [sp, #16]
 800e31a:	4637      	mov	r7, r6
 800e31c:	2800      	cmp	r0, #0
 800e31e:	f040 8245 	bne.w	800e7ac <_dtoa_r+0x954>
 800e322:	9d00      	ldr	r5, [sp, #0]
 800e324:	2331      	movs	r3, #49	; 0x31
 800e326:	f805 3b01 	strb.w	r3, [r5], #1
 800e32a:	f10b 0b01 	add.w	fp, fp, #1
 800e32e:	e241      	b.n	800e7b4 <_dtoa_r+0x95c>
 800e330:	07f2      	lsls	r2, r6, #31
 800e332:	d505      	bpl.n	800e340 <_dtoa_r+0x4e8>
 800e334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e338:	f7f2 f95e 	bl	80005f8 <__aeabi_dmul>
 800e33c:	3501      	adds	r5, #1
 800e33e:	2301      	movs	r3, #1
 800e340:	1076      	asrs	r6, r6, #1
 800e342:	3708      	adds	r7, #8
 800e344:	e773      	b.n	800e22e <_dtoa_r+0x3d6>
 800e346:	2502      	movs	r5, #2
 800e348:	e775      	b.n	800e236 <_dtoa_r+0x3de>
 800e34a:	9e04      	ldr	r6, [sp, #16]
 800e34c:	465f      	mov	r7, fp
 800e34e:	e792      	b.n	800e276 <_dtoa_r+0x41e>
 800e350:	9900      	ldr	r1, [sp, #0]
 800e352:	4b50      	ldr	r3, [pc, #320]	; (800e494 <_dtoa_r+0x63c>)
 800e354:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e358:	4431      	add	r1, r6
 800e35a:	9102      	str	r1, [sp, #8]
 800e35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e35e:	eeb0 9a47 	vmov.f32	s18, s14
 800e362:	eef0 9a67 	vmov.f32	s19, s15
 800e366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e36a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e36e:	2900      	cmp	r1, #0
 800e370:	d044      	beq.n	800e3fc <_dtoa_r+0x5a4>
 800e372:	494e      	ldr	r1, [pc, #312]	; (800e4ac <_dtoa_r+0x654>)
 800e374:	2000      	movs	r0, #0
 800e376:	f7f2 fa69 	bl	800084c <__aeabi_ddiv>
 800e37a:	ec53 2b19 	vmov	r2, r3, d9
 800e37e:	f7f1 ff83 	bl	8000288 <__aeabi_dsub>
 800e382:	9d00      	ldr	r5, [sp, #0]
 800e384:	ec41 0b19 	vmov	d9, r0, r1
 800e388:	4649      	mov	r1, r9
 800e38a:	4640      	mov	r0, r8
 800e38c:	f7f2 fbe4 	bl	8000b58 <__aeabi_d2iz>
 800e390:	4606      	mov	r6, r0
 800e392:	f7f2 f8c7 	bl	8000524 <__aeabi_i2d>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	f7f1 ff73 	bl	8000288 <__aeabi_dsub>
 800e3a2:	3630      	adds	r6, #48	; 0x30
 800e3a4:	f805 6b01 	strb.w	r6, [r5], #1
 800e3a8:	ec53 2b19 	vmov	r2, r3, d9
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	4689      	mov	r9, r1
 800e3b0:	f7f2 fb94 	bl	8000adc <__aeabi_dcmplt>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d164      	bne.n	800e482 <_dtoa_r+0x62a>
 800e3b8:	4642      	mov	r2, r8
 800e3ba:	464b      	mov	r3, r9
 800e3bc:	4937      	ldr	r1, [pc, #220]	; (800e49c <_dtoa_r+0x644>)
 800e3be:	2000      	movs	r0, #0
 800e3c0:	f7f1 ff62 	bl	8000288 <__aeabi_dsub>
 800e3c4:	ec53 2b19 	vmov	r2, r3, d9
 800e3c8:	f7f2 fb88 	bl	8000adc <__aeabi_dcmplt>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	f040 80b6 	bne.w	800e53e <_dtoa_r+0x6e6>
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	429d      	cmp	r5, r3
 800e3d6:	f43f af7c 	beq.w	800e2d2 <_dtoa_r+0x47a>
 800e3da:	4b31      	ldr	r3, [pc, #196]	; (800e4a0 <_dtoa_r+0x648>)
 800e3dc:	ec51 0b19 	vmov	r0, r1, d9
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f7f2 f909 	bl	80005f8 <__aeabi_dmul>
 800e3e6:	4b2e      	ldr	r3, [pc, #184]	; (800e4a0 <_dtoa_r+0x648>)
 800e3e8:	ec41 0b19 	vmov	d9, r0, r1
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	4649      	mov	r1, r9
 800e3f2:	f7f2 f901 	bl	80005f8 <__aeabi_dmul>
 800e3f6:	4680      	mov	r8, r0
 800e3f8:	4689      	mov	r9, r1
 800e3fa:	e7c5      	b.n	800e388 <_dtoa_r+0x530>
 800e3fc:	ec51 0b17 	vmov	r0, r1, d7
 800e400:	f7f2 f8fa 	bl	80005f8 <__aeabi_dmul>
 800e404:	9b02      	ldr	r3, [sp, #8]
 800e406:	9d00      	ldr	r5, [sp, #0]
 800e408:	930f      	str	r3, [sp, #60]	; 0x3c
 800e40a:	ec41 0b19 	vmov	d9, r0, r1
 800e40e:	4649      	mov	r1, r9
 800e410:	4640      	mov	r0, r8
 800e412:	f7f2 fba1 	bl	8000b58 <__aeabi_d2iz>
 800e416:	4606      	mov	r6, r0
 800e418:	f7f2 f884 	bl	8000524 <__aeabi_i2d>
 800e41c:	3630      	adds	r6, #48	; 0x30
 800e41e:	4602      	mov	r2, r0
 800e420:	460b      	mov	r3, r1
 800e422:	4640      	mov	r0, r8
 800e424:	4649      	mov	r1, r9
 800e426:	f7f1 ff2f 	bl	8000288 <__aeabi_dsub>
 800e42a:	f805 6b01 	strb.w	r6, [r5], #1
 800e42e:	9b02      	ldr	r3, [sp, #8]
 800e430:	429d      	cmp	r5, r3
 800e432:	4680      	mov	r8, r0
 800e434:	4689      	mov	r9, r1
 800e436:	f04f 0200 	mov.w	r2, #0
 800e43a:	d124      	bne.n	800e486 <_dtoa_r+0x62e>
 800e43c:	4b1b      	ldr	r3, [pc, #108]	; (800e4ac <_dtoa_r+0x654>)
 800e43e:	ec51 0b19 	vmov	r0, r1, d9
 800e442:	f7f1 ff23 	bl	800028c <__adddf3>
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	4640      	mov	r0, r8
 800e44c:	4649      	mov	r1, r9
 800e44e:	f7f2 fb63 	bl	8000b18 <__aeabi_dcmpgt>
 800e452:	2800      	cmp	r0, #0
 800e454:	d173      	bne.n	800e53e <_dtoa_r+0x6e6>
 800e456:	ec53 2b19 	vmov	r2, r3, d9
 800e45a:	4914      	ldr	r1, [pc, #80]	; (800e4ac <_dtoa_r+0x654>)
 800e45c:	2000      	movs	r0, #0
 800e45e:	f7f1 ff13 	bl	8000288 <__aeabi_dsub>
 800e462:	4602      	mov	r2, r0
 800e464:	460b      	mov	r3, r1
 800e466:	4640      	mov	r0, r8
 800e468:	4649      	mov	r1, r9
 800e46a:	f7f2 fb37 	bl	8000adc <__aeabi_dcmplt>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f43f af2f 	beq.w	800e2d2 <_dtoa_r+0x47a>
 800e474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e476:	1e6b      	subs	r3, r5, #1
 800e478:	930f      	str	r3, [sp, #60]	; 0x3c
 800e47a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e47e:	2b30      	cmp	r3, #48	; 0x30
 800e480:	d0f8      	beq.n	800e474 <_dtoa_r+0x61c>
 800e482:	46bb      	mov	fp, r7
 800e484:	e04a      	b.n	800e51c <_dtoa_r+0x6c4>
 800e486:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <_dtoa_r+0x648>)
 800e488:	f7f2 f8b6 	bl	80005f8 <__aeabi_dmul>
 800e48c:	4680      	mov	r8, r0
 800e48e:	4689      	mov	r9, r1
 800e490:	e7bd      	b.n	800e40e <_dtoa_r+0x5b6>
 800e492:	bf00      	nop
 800e494:	0804e1e0 	.word	0x0804e1e0
 800e498:	0804e1b8 	.word	0x0804e1b8
 800e49c:	3ff00000 	.word	0x3ff00000
 800e4a0:	40240000 	.word	0x40240000
 800e4a4:	401c0000 	.word	0x401c0000
 800e4a8:	40140000 	.word	0x40140000
 800e4ac:	3fe00000 	.word	0x3fe00000
 800e4b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e4b4:	9d00      	ldr	r5, [sp, #0]
 800e4b6:	4642      	mov	r2, r8
 800e4b8:	464b      	mov	r3, r9
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	4639      	mov	r1, r7
 800e4be:	f7f2 f9c5 	bl	800084c <__aeabi_ddiv>
 800e4c2:	f7f2 fb49 	bl	8000b58 <__aeabi_d2iz>
 800e4c6:	9001      	str	r0, [sp, #4]
 800e4c8:	f7f2 f82c 	bl	8000524 <__aeabi_i2d>
 800e4cc:	4642      	mov	r2, r8
 800e4ce:	464b      	mov	r3, r9
 800e4d0:	f7f2 f892 	bl	80005f8 <__aeabi_dmul>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f1 fed4 	bl	8000288 <__aeabi_dsub>
 800e4e0:	9e01      	ldr	r6, [sp, #4]
 800e4e2:	9f04      	ldr	r7, [sp, #16]
 800e4e4:	3630      	adds	r6, #48	; 0x30
 800e4e6:	f805 6b01 	strb.w	r6, [r5], #1
 800e4ea:	9e00      	ldr	r6, [sp, #0]
 800e4ec:	1bae      	subs	r6, r5, r6
 800e4ee:	42b7      	cmp	r7, r6
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	d134      	bne.n	800e560 <_dtoa_r+0x708>
 800e4f6:	f7f1 fec9 	bl	800028c <__adddf3>
 800e4fa:	4642      	mov	r2, r8
 800e4fc:	464b      	mov	r3, r9
 800e4fe:	4606      	mov	r6, r0
 800e500:	460f      	mov	r7, r1
 800e502:	f7f2 fb09 	bl	8000b18 <__aeabi_dcmpgt>
 800e506:	b9c8      	cbnz	r0, 800e53c <_dtoa_r+0x6e4>
 800e508:	4642      	mov	r2, r8
 800e50a:	464b      	mov	r3, r9
 800e50c:	4630      	mov	r0, r6
 800e50e:	4639      	mov	r1, r7
 800e510:	f7f2 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 800e514:	b110      	cbz	r0, 800e51c <_dtoa_r+0x6c4>
 800e516:	9b01      	ldr	r3, [sp, #4]
 800e518:	07db      	lsls	r3, r3, #31
 800e51a:	d40f      	bmi.n	800e53c <_dtoa_r+0x6e4>
 800e51c:	4651      	mov	r1, sl
 800e51e:	4620      	mov	r0, r4
 800e520:	f000 fb2a 	bl	800eb78 <_Bfree>
 800e524:	2300      	movs	r3, #0
 800e526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e528:	702b      	strb	r3, [r5, #0]
 800e52a:	f10b 0301 	add.w	r3, fp, #1
 800e52e:	6013      	str	r3, [r2, #0]
 800e530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e532:	2b00      	cmp	r3, #0
 800e534:	f43f ace2 	beq.w	800defc <_dtoa_r+0xa4>
 800e538:	601d      	str	r5, [r3, #0]
 800e53a:	e4df      	b.n	800defc <_dtoa_r+0xa4>
 800e53c:	465f      	mov	r7, fp
 800e53e:	462b      	mov	r3, r5
 800e540:	461d      	mov	r5, r3
 800e542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e546:	2a39      	cmp	r2, #57	; 0x39
 800e548:	d106      	bne.n	800e558 <_dtoa_r+0x700>
 800e54a:	9a00      	ldr	r2, [sp, #0]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d1f7      	bne.n	800e540 <_dtoa_r+0x6e8>
 800e550:	9900      	ldr	r1, [sp, #0]
 800e552:	2230      	movs	r2, #48	; 0x30
 800e554:	3701      	adds	r7, #1
 800e556:	700a      	strb	r2, [r1, #0]
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	3201      	adds	r2, #1
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	e790      	b.n	800e482 <_dtoa_r+0x62a>
 800e560:	4ba3      	ldr	r3, [pc, #652]	; (800e7f0 <_dtoa_r+0x998>)
 800e562:	2200      	movs	r2, #0
 800e564:	f7f2 f848 	bl	80005f8 <__aeabi_dmul>
 800e568:	2200      	movs	r2, #0
 800e56a:	2300      	movs	r3, #0
 800e56c:	4606      	mov	r6, r0
 800e56e:	460f      	mov	r7, r1
 800e570:	f7f2 faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800e574:	2800      	cmp	r0, #0
 800e576:	d09e      	beq.n	800e4b6 <_dtoa_r+0x65e>
 800e578:	e7d0      	b.n	800e51c <_dtoa_r+0x6c4>
 800e57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	f000 80ca 	beq.w	800e716 <_dtoa_r+0x8be>
 800e582:	9a07      	ldr	r2, [sp, #28]
 800e584:	2a01      	cmp	r2, #1
 800e586:	f300 80ad 	bgt.w	800e6e4 <_dtoa_r+0x88c>
 800e58a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e58c:	2a00      	cmp	r2, #0
 800e58e:	f000 80a5 	beq.w	800e6dc <_dtoa_r+0x884>
 800e592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e596:	9e08      	ldr	r6, [sp, #32]
 800e598:	9d05      	ldr	r5, [sp, #20]
 800e59a:	9a05      	ldr	r2, [sp, #20]
 800e59c:	441a      	add	r2, r3
 800e59e:	9205      	str	r2, [sp, #20]
 800e5a0:	9a06      	ldr	r2, [sp, #24]
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	441a      	add	r2, r3
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	9206      	str	r2, [sp, #24]
 800e5aa:	f000 fb9b 	bl	800ece4 <__i2b>
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	b165      	cbz	r5, 800e5cc <_dtoa_r+0x774>
 800e5b2:	9b06      	ldr	r3, [sp, #24]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd09      	ble.n	800e5cc <_dtoa_r+0x774>
 800e5b8:	42ab      	cmp	r3, r5
 800e5ba:	9a05      	ldr	r2, [sp, #20]
 800e5bc:	bfa8      	it	ge
 800e5be:	462b      	movge	r3, r5
 800e5c0:	1ad2      	subs	r2, r2, r3
 800e5c2:	9205      	str	r2, [sp, #20]
 800e5c4:	9a06      	ldr	r2, [sp, #24]
 800e5c6:	1aed      	subs	r5, r5, r3
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	9306      	str	r3, [sp, #24]
 800e5cc:	9b08      	ldr	r3, [sp, #32]
 800e5ce:	b1f3      	cbz	r3, 800e60e <_dtoa_r+0x7b6>
 800e5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 80a3 	beq.w	800e71e <_dtoa_r+0x8c6>
 800e5d8:	2e00      	cmp	r6, #0
 800e5da:	dd10      	ble.n	800e5fe <_dtoa_r+0x7a6>
 800e5dc:	4639      	mov	r1, r7
 800e5de:	4632      	mov	r2, r6
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f000 fc3f 	bl	800ee64 <__pow5mult>
 800e5e6:	4652      	mov	r2, sl
 800e5e8:	4601      	mov	r1, r0
 800e5ea:	4607      	mov	r7, r0
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f000 fb8f 	bl	800ed10 <__multiply>
 800e5f2:	4651      	mov	r1, sl
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f000 fabe 	bl	800eb78 <_Bfree>
 800e5fc:	46c2      	mov	sl, r8
 800e5fe:	9b08      	ldr	r3, [sp, #32]
 800e600:	1b9a      	subs	r2, r3, r6
 800e602:	d004      	beq.n	800e60e <_dtoa_r+0x7b6>
 800e604:	4651      	mov	r1, sl
 800e606:	4620      	mov	r0, r4
 800e608:	f000 fc2c 	bl	800ee64 <__pow5mult>
 800e60c:	4682      	mov	sl, r0
 800e60e:	2101      	movs	r1, #1
 800e610:	4620      	mov	r0, r4
 800e612:	f000 fb67 	bl	800ece4 <__i2b>
 800e616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	4606      	mov	r6, r0
 800e61c:	f340 8081 	ble.w	800e722 <_dtoa_r+0x8ca>
 800e620:	461a      	mov	r2, r3
 800e622:	4601      	mov	r1, r0
 800e624:	4620      	mov	r0, r4
 800e626:	f000 fc1d 	bl	800ee64 <__pow5mult>
 800e62a:	9b07      	ldr	r3, [sp, #28]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	4606      	mov	r6, r0
 800e630:	dd7a      	ble.n	800e728 <_dtoa_r+0x8d0>
 800e632:	f04f 0800 	mov.w	r8, #0
 800e636:	6933      	ldr	r3, [r6, #16]
 800e638:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e63c:	6918      	ldr	r0, [r3, #16]
 800e63e:	f000 fb03 	bl	800ec48 <__hi0bits>
 800e642:	f1c0 0020 	rsb	r0, r0, #32
 800e646:	9b06      	ldr	r3, [sp, #24]
 800e648:	4418      	add	r0, r3
 800e64a:	f010 001f 	ands.w	r0, r0, #31
 800e64e:	f000 8094 	beq.w	800e77a <_dtoa_r+0x922>
 800e652:	f1c0 0320 	rsb	r3, r0, #32
 800e656:	2b04      	cmp	r3, #4
 800e658:	f340 8085 	ble.w	800e766 <_dtoa_r+0x90e>
 800e65c:	9b05      	ldr	r3, [sp, #20]
 800e65e:	f1c0 001c 	rsb	r0, r0, #28
 800e662:	4403      	add	r3, r0
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	9b06      	ldr	r3, [sp, #24]
 800e668:	4403      	add	r3, r0
 800e66a:	4405      	add	r5, r0
 800e66c:	9306      	str	r3, [sp, #24]
 800e66e:	9b05      	ldr	r3, [sp, #20]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dd05      	ble.n	800e680 <_dtoa_r+0x828>
 800e674:	4651      	mov	r1, sl
 800e676:	461a      	mov	r2, r3
 800e678:	4620      	mov	r0, r4
 800e67a:	f000 fc4d 	bl	800ef18 <__lshift>
 800e67e:	4682      	mov	sl, r0
 800e680:	9b06      	ldr	r3, [sp, #24]
 800e682:	2b00      	cmp	r3, #0
 800e684:	dd05      	ble.n	800e692 <_dtoa_r+0x83a>
 800e686:	4631      	mov	r1, r6
 800e688:	461a      	mov	r2, r3
 800e68a:	4620      	mov	r0, r4
 800e68c:	f000 fc44 	bl	800ef18 <__lshift>
 800e690:	4606      	mov	r6, r0
 800e692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e694:	2b00      	cmp	r3, #0
 800e696:	d072      	beq.n	800e77e <_dtoa_r+0x926>
 800e698:	4631      	mov	r1, r6
 800e69a:	4650      	mov	r0, sl
 800e69c:	f000 fca8 	bl	800eff0 <__mcmp>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	da6c      	bge.n	800e77e <_dtoa_r+0x926>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	4651      	mov	r1, sl
 800e6a8:	220a      	movs	r2, #10
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 fa86 	bl	800ebbc <__multadd>
 800e6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e6b6:	4682      	mov	sl, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 81b0 	beq.w	800ea1e <_dtoa_r+0xbc6>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	4639      	mov	r1, r7
 800e6c2:	220a      	movs	r2, #10
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f000 fa79 	bl	800ebbc <__multadd>
 800e6ca:	9b01      	ldr	r3, [sp, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	4607      	mov	r7, r0
 800e6d0:	f300 8096 	bgt.w	800e800 <_dtoa_r+0x9a8>
 800e6d4:	9b07      	ldr	r3, [sp, #28]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	dc59      	bgt.n	800e78e <_dtoa_r+0x936>
 800e6da:	e091      	b.n	800e800 <_dtoa_r+0x9a8>
 800e6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6e2:	e758      	b.n	800e596 <_dtoa_r+0x73e>
 800e6e4:	9b04      	ldr	r3, [sp, #16]
 800e6e6:	1e5e      	subs	r6, r3, #1
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	42b3      	cmp	r3, r6
 800e6ec:	bfbf      	itttt	lt
 800e6ee:	9b08      	ldrlt	r3, [sp, #32]
 800e6f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e6f2:	9608      	strlt	r6, [sp, #32]
 800e6f4:	1af3      	sublt	r3, r6, r3
 800e6f6:	bfb4      	ite	lt
 800e6f8:	18d2      	addlt	r2, r2, r3
 800e6fa:	1b9e      	subge	r6, r3, r6
 800e6fc:	9b04      	ldr	r3, [sp, #16]
 800e6fe:	bfbc      	itt	lt
 800e700:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e702:	2600      	movlt	r6, #0
 800e704:	2b00      	cmp	r3, #0
 800e706:	bfb7      	itett	lt
 800e708:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e70c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e710:	1a9d      	sublt	r5, r3, r2
 800e712:	2300      	movlt	r3, #0
 800e714:	e741      	b.n	800e59a <_dtoa_r+0x742>
 800e716:	9e08      	ldr	r6, [sp, #32]
 800e718:	9d05      	ldr	r5, [sp, #20]
 800e71a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e71c:	e748      	b.n	800e5b0 <_dtoa_r+0x758>
 800e71e:	9a08      	ldr	r2, [sp, #32]
 800e720:	e770      	b.n	800e604 <_dtoa_r+0x7ac>
 800e722:	9b07      	ldr	r3, [sp, #28]
 800e724:	2b01      	cmp	r3, #1
 800e726:	dc19      	bgt.n	800e75c <_dtoa_r+0x904>
 800e728:	9b02      	ldr	r3, [sp, #8]
 800e72a:	b9bb      	cbnz	r3, 800e75c <_dtoa_r+0x904>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e732:	b99b      	cbnz	r3, 800e75c <_dtoa_r+0x904>
 800e734:	9b03      	ldr	r3, [sp, #12]
 800e736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e73a:	0d1b      	lsrs	r3, r3, #20
 800e73c:	051b      	lsls	r3, r3, #20
 800e73e:	b183      	cbz	r3, 800e762 <_dtoa_r+0x90a>
 800e740:	9b05      	ldr	r3, [sp, #20]
 800e742:	3301      	adds	r3, #1
 800e744:	9305      	str	r3, [sp, #20]
 800e746:	9b06      	ldr	r3, [sp, #24]
 800e748:	3301      	adds	r3, #1
 800e74a:	9306      	str	r3, [sp, #24]
 800e74c:	f04f 0801 	mov.w	r8, #1
 800e750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e752:	2b00      	cmp	r3, #0
 800e754:	f47f af6f 	bne.w	800e636 <_dtoa_r+0x7de>
 800e758:	2001      	movs	r0, #1
 800e75a:	e774      	b.n	800e646 <_dtoa_r+0x7ee>
 800e75c:	f04f 0800 	mov.w	r8, #0
 800e760:	e7f6      	b.n	800e750 <_dtoa_r+0x8f8>
 800e762:	4698      	mov	r8, r3
 800e764:	e7f4      	b.n	800e750 <_dtoa_r+0x8f8>
 800e766:	d082      	beq.n	800e66e <_dtoa_r+0x816>
 800e768:	9a05      	ldr	r2, [sp, #20]
 800e76a:	331c      	adds	r3, #28
 800e76c:	441a      	add	r2, r3
 800e76e:	9205      	str	r2, [sp, #20]
 800e770:	9a06      	ldr	r2, [sp, #24]
 800e772:	441a      	add	r2, r3
 800e774:	441d      	add	r5, r3
 800e776:	9206      	str	r2, [sp, #24]
 800e778:	e779      	b.n	800e66e <_dtoa_r+0x816>
 800e77a:	4603      	mov	r3, r0
 800e77c:	e7f4      	b.n	800e768 <_dtoa_r+0x910>
 800e77e:	9b04      	ldr	r3, [sp, #16]
 800e780:	2b00      	cmp	r3, #0
 800e782:	dc37      	bgt.n	800e7f4 <_dtoa_r+0x99c>
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	2b02      	cmp	r3, #2
 800e788:	dd34      	ble.n	800e7f4 <_dtoa_r+0x99c>
 800e78a:	9b04      	ldr	r3, [sp, #16]
 800e78c:	9301      	str	r3, [sp, #4]
 800e78e:	9b01      	ldr	r3, [sp, #4]
 800e790:	b963      	cbnz	r3, 800e7ac <_dtoa_r+0x954>
 800e792:	4631      	mov	r1, r6
 800e794:	2205      	movs	r2, #5
 800e796:	4620      	mov	r0, r4
 800e798:	f000 fa10 	bl	800ebbc <__multadd>
 800e79c:	4601      	mov	r1, r0
 800e79e:	4606      	mov	r6, r0
 800e7a0:	4650      	mov	r0, sl
 800e7a2:	f000 fc25 	bl	800eff0 <__mcmp>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	f73f adbb 	bgt.w	800e322 <_dtoa_r+0x4ca>
 800e7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ae:	9d00      	ldr	r5, [sp, #0]
 800e7b0:	ea6f 0b03 	mvn.w	fp, r3
 800e7b4:	f04f 0800 	mov.w	r8, #0
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 f9dc 	bl	800eb78 <_Bfree>
 800e7c0:	2f00      	cmp	r7, #0
 800e7c2:	f43f aeab 	beq.w	800e51c <_dtoa_r+0x6c4>
 800e7c6:	f1b8 0f00 	cmp.w	r8, #0
 800e7ca:	d005      	beq.n	800e7d8 <_dtoa_r+0x980>
 800e7cc:	45b8      	cmp	r8, r7
 800e7ce:	d003      	beq.n	800e7d8 <_dtoa_r+0x980>
 800e7d0:	4641      	mov	r1, r8
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f000 f9d0 	bl	800eb78 <_Bfree>
 800e7d8:	4639      	mov	r1, r7
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f000 f9cc 	bl	800eb78 <_Bfree>
 800e7e0:	e69c      	b.n	800e51c <_dtoa_r+0x6c4>
 800e7e2:	2600      	movs	r6, #0
 800e7e4:	4637      	mov	r7, r6
 800e7e6:	e7e1      	b.n	800e7ac <_dtoa_r+0x954>
 800e7e8:	46bb      	mov	fp, r7
 800e7ea:	4637      	mov	r7, r6
 800e7ec:	e599      	b.n	800e322 <_dtoa_r+0x4ca>
 800e7ee:	bf00      	nop
 800e7f0:	40240000 	.word	0x40240000
 800e7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f000 80c8 	beq.w	800e98c <_dtoa_r+0xb34>
 800e7fc:	9b04      	ldr	r3, [sp, #16]
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	2d00      	cmp	r5, #0
 800e802:	dd05      	ble.n	800e810 <_dtoa_r+0x9b8>
 800e804:	4639      	mov	r1, r7
 800e806:	462a      	mov	r2, r5
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 fb85 	bl	800ef18 <__lshift>
 800e80e:	4607      	mov	r7, r0
 800e810:	f1b8 0f00 	cmp.w	r8, #0
 800e814:	d05b      	beq.n	800e8ce <_dtoa_r+0xa76>
 800e816:	6879      	ldr	r1, [r7, #4]
 800e818:	4620      	mov	r0, r4
 800e81a:	f000 f96d 	bl	800eaf8 <_Balloc>
 800e81e:	4605      	mov	r5, r0
 800e820:	b928      	cbnz	r0, 800e82e <_dtoa_r+0x9d6>
 800e822:	4b83      	ldr	r3, [pc, #524]	; (800ea30 <_dtoa_r+0xbd8>)
 800e824:	4602      	mov	r2, r0
 800e826:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e82a:	f7ff bb2e 	b.w	800de8a <_dtoa_r+0x32>
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	3202      	adds	r2, #2
 800e832:	0092      	lsls	r2, r2, #2
 800e834:	f107 010c 	add.w	r1, r7, #12
 800e838:	300c      	adds	r0, #12
 800e83a:	f7ff fa57 	bl	800dcec <memcpy>
 800e83e:	2201      	movs	r2, #1
 800e840:	4629      	mov	r1, r5
 800e842:	4620      	mov	r0, r4
 800e844:	f000 fb68 	bl	800ef18 <__lshift>
 800e848:	9b00      	ldr	r3, [sp, #0]
 800e84a:	3301      	adds	r3, #1
 800e84c:	9304      	str	r3, [sp, #16]
 800e84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e852:	4413      	add	r3, r2
 800e854:	9308      	str	r3, [sp, #32]
 800e856:	9b02      	ldr	r3, [sp, #8]
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	46b8      	mov	r8, r7
 800e85e:	9306      	str	r3, [sp, #24]
 800e860:	4607      	mov	r7, r0
 800e862:	9b04      	ldr	r3, [sp, #16]
 800e864:	4631      	mov	r1, r6
 800e866:	3b01      	subs	r3, #1
 800e868:	4650      	mov	r0, sl
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	f7ff fa6a 	bl	800dd44 <quorem>
 800e870:	4641      	mov	r1, r8
 800e872:	9002      	str	r0, [sp, #8]
 800e874:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e878:	4650      	mov	r0, sl
 800e87a:	f000 fbb9 	bl	800eff0 <__mcmp>
 800e87e:	463a      	mov	r2, r7
 800e880:	9005      	str	r0, [sp, #20]
 800e882:	4631      	mov	r1, r6
 800e884:	4620      	mov	r0, r4
 800e886:	f000 fbcf 	bl	800f028 <__mdiff>
 800e88a:	68c2      	ldr	r2, [r0, #12]
 800e88c:	4605      	mov	r5, r0
 800e88e:	bb02      	cbnz	r2, 800e8d2 <_dtoa_r+0xa7a>
 800e890:	4601      	mov	r1, r0
 800e892:	4650      	mov	r0, sl
 800e894:	f000 fbac 	bl	800eff0 <__mcmp>
 800e898:	4602      	mov	r2, r0
 800e89a:	4629      	mov	r1, r5
 800e89c:	4620      	mov	r0, r4
 800e89e:	9209      	str	r2, [sp, #36]	; 0x24
 800e8a0:	f000 f96a 	bl	800eb78 <_Bfree>
 800e8a4:	9b07      	ldr	r3, [sp, #28]
 800e8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8a8:	9d04      	ldr	r5, [sp, #16]
 800e8aa:	ea43 0102 	orr.w	r1, r3, r2
 800e8ae:	9b06      	ldr	r3, [sp, #24]
 800e8b0:	4319      	orrs	r1, r3
 800e8b2:	d110      	bne.n	800e8d6 <_dtoa_r+0xa7e>
 800e8b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8b8:	d029      	beq.n	800e90e <_dtoa_r+0xab6>
 800e8ba:	9b05      	ldr	r3, [sp, #20]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	dd02      	ble.n	800e8c6 <_dtoa_r+0xa6e>
 800e8c0:	9b02      	ldr	r3, [sp, #8]
 800e8c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e8c6:	9b01      	ldr	r3, [sp, #4]
 800e8c8:	f883 9000 	strb.w	r9, [r3]
 800e8cc:	e774      	b.n	800e7b8 <_dtoa_r+0x960>
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	e7ba      	b.n	800e848 <_dtoa_r+0x9f0>
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	e7e1      	b.n	800e89a <_dtoa_r+0xa42>
 800e8d6:	9b05      	ldr	r3, [sp, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	db04      	blt.n	800e8e6 <_dtoa_r+0xa8e>
 800e8dc:	9907      	ldr	r1, [sp, #28]
 800e8de:	430b      	orrs	r3, r1
 800e8e0:	9906      	ldr	r1, [sp, #24]
 800e8e2:	430b      	orrs	r3, r1
 800e8e4:	d120      	bne.n	800e928 <_dtoa_r+0xad0>
 800e8e6:	2a00      	cmp	r2, #0
 800e8e8:	dded      	ble.n	800e8c6 <_dtoa_r+0xa6e>
 800e8ea:	4651      	mov	r1, sl
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f000 fb12 	bl	800ef18 <__lshift>
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4682      	mov	sl, r0
 800e8f8:	f000 fb7a 	bl	800eff0 <__mcmp>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	dc03      	bgt.n	800e908 <_dtoa_r+0xab0>
 800e900:	d1e1      	bne.n	800e8c6 <_dtoa_r+0xa6e>
 800e902:	f019 0f01 	tst.w	r9, #1
 800e906:	d0de      	beq.n	800e8c6 <_dtoa_r+0xa6e>
 800e908:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e90c:	d1d8      	bne.n	800e8c0 <_dtoa_r+0xa68>
 800e90e:	9a01      	ldr	r2, [sp, #4]
 800e910:	2339      	movs	r3, #57	; 0x39
 800e912:	7013      	strb	r3, [r2, #0]
 800e914:	462b      	mov	r3, r5
 800e916:	461d      	mov	r5, r3
 800e918:	3b01      	subs	r3, #1
 800e91a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e91e:	2a39      	cmp	r2, #57	; 0x39
 800e920:	d06c      	beq.n	800e9fc <_dtoa_r+0xba4>
 800e922:	3201      	adds	r2, #1
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	e747      	b.n	800e7b8 <_dtoa_r+0x960>
 800e928:	2a00      	cmp	r2, #0
 800e92a:	dd07      	ble.n	800e93c <_dtoa_r+0xae4>
 800e92c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e930:	d0ed      	beq.n	800e90e <_dtoa_r+0xab6>
 800e932:	9a01      	ldr	r2, [sp, #4]
 800e934:	f109 0301 	add.w	r3, r9, #1
 800e938:	7013      	strb	r3, [r2, #0]
 800e93a:	e73d      	b.n	800e7b8 <_dtoa_r+0x960>
 800e93c:	9b04      	ldr	r3, [sp, #16]
 800e93e:	9a08      	ldr	r2, [sp, #32]
 800e940:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e944:	4293      	cmp	r3, r2
 800e946:	d043      	beq.n	800e9d0 <_dtoa_r+0xb78>
 800e948:	4651      	mov	r1, sl
 800e94a:	2300      	movs	r3, #0
 800e94c:	220a      	movs	r2, #10
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 f934 	bl	800ebbc <__multadd>
 800e954:	45b8      	cmp	r8, r7
 800e956:	4682      	mov	sl, r0
 800e958:	f04f 0300 	mov.w	r3, #0
 800e95c:	f04f 020a 	mov.w	r2, #10
 800e960:	4641      	mov	r1, r8
 800e962:	4620      	mov	r0, r4
 800e964:	d107      	bne.n	800e976 <_dtoa_r+0xb1e>
 800e966:	f000 f929 	bl	800ebbc <__multadd>
 800e96a:	4680      	mov	r8, r0
 800e96c:	4607      	mov	r7, r0
 800e96e:	9b04      	ldr	r3, [sp, #16]
 800e970:	3301      	adds	r3, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	e775      	b.n	800e862 <_dtoa_r+0xa0a>
 800e976:	f000 f921 	bl	800ebbc <__multadd>
 800e97a:	4639      	mov	r1, r7
 800e97c:	4680      	mov	r8, r0
 800e97e:	2300      	movs	r3, #0
 800e980:	220a      	movs	r2, #10
 800e982:	4620      	mov	r0, r4
 800e984:	f000 f91a 	bl	800ebbc <__multadd>
 800e988:	4607      	mov	r7, r0
 800e98a:	e7f0      	b.n	800e96e <_dtoa_r+0xb16>
 800e98c:	9b04      	ldr	r3, [sp, #16]
 800e98e:	9301      	str	r3, [sp, #4]
 800e990:	9d00      	ldr	r5, [sp, #0]
 800e992:	4631      	mov	r1, r6
 800e994:	4650      	mov	r0, sl
 800e996:	f7ff f9d5 	bl	800dd44 <quorem>
 800e99a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	f805 9b01 	strb.w	r9, [r5], #1
 800e9a4:	1aea      	subs	r2, r5, r3
 800e9a6:	9b01      	ldr	r3, [sp, #4]
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	dd07      	ble.n	800e9bc <_dtoa_r+0xb64>
 800e9ac:	4651      	mov	r1, sl
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	220a      	movs	r2, #10
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f000 f902 	bl	800ebbc <__multadd>
 800e9b8:	4682      	mov	sl, r0
 800e9ba:	e7ea      	b.n	800e992 <_dtoa_r+0xb3a>
 800e9bc:	9b01      	ldr	r3, [sp, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	bfc8      	it	gt
 800e9c2:	461d      	movgt	r5, r3
 800e9c4:	9b00      	ldr	r3, [sp, #0]
 800e9c6:	bfd8      	it	le
 800e9c8:	2501      	movle	r5, #1
 800e9ca:	441d      	add	r5, r3
 800e9cc:	f04f 0800 	mov.w	r8, #0
 800e9d0:	4651      	mov	r1, sl
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f000 fa9f 	bl	800ef18 <__lshift>
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4682      	mov	sl, r0
 800e9de:	f000 fb07 	bl	800eff0 <__mcmp>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	dc96      	bgt.n	800e914 <_dtoa_r+0xabc>
 800e9e6:	d102      	bne.n	800e9ee <_dtoa_r+0xb96>
 800e9e8:	f019 0f01 	tst.w	r9, #1
 800e9ec:	d192      	bne.n	800e914 <_dtoa_r+0xabc>
 800e9ee:	462b      	mov	r3, r5
 800e9f0:	461d      	mov	r5, r3
 800e9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9f6:	2a30      	cmp	r2, #48	; 0x30
 800e9f8:	d0fa      	beq.n	800e9f0 <_dtoa_r+0xb98>
 800e9fa:	e6dd      	b.n	800e7b8 <_dtoa_r+0x960>
 800e9fc:	9a00      	ldr	r2, [sp, #0]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d189      	bne.n	800e916 <_dtoa_r+0xabe>
 800ea02:	f10b 0b01 	add.w	fp, fp, #1
 800ea06:	2331      	movs	r3, #49	; 0x31
 800ea08:	e796      	b.n	800e938 <_dtoa_r+0xae0>
 800ea0a:	4b0a      	ldr	r3, [pc, #40]	; (800ea34 <_dtoa_r+0xbdc>)
 800ea0c:	f7ff ba99 	b.w	800df42 <_dtoa_r+0xea>
 800ea10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f47f aa6d 	bne.w	800def2 <_dtoa_r+0x9a>
 800ea18:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <_dtoa_r+0xbe0>)
 800ea1a:	f7ff ba92 	b.w	800df42 <_dtoa_r+0xea>
 800ea1e:	9b01      	ldr	r3, [sp, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dcb5      	bgt.n	800e990 <_dtoa_r+0xb38>
 800ea24:	9b07      	ldr	r3, [sp, #28]
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	f73f aeb1 	bgt.w	800e78e <_dtoa_r+0x936>
 800ea2c:	e7b0      	b.n	800e990 <_dtoa_r+0xb38>
 800ea2e:	bf00      	nop
 800ea30:	0804e147 	.word	0x0804e147
 800ea34:	0804e2db 	.word	0x0804e2db
 800ea38:	0804e0e2 	.word	0x0804e0e2

0800ea3c <_free_r>:
 800ea3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	d044      	beq.n	800eacc <_free_r+0x90>
 800ea42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea46:	9001      	str	r0, [sp, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea4e:	bfb8      	it	lt
 800ea50:	18e4      	addlt	r4, r4, r3
 800ea52:	f7fe f9cf 	bl	800cdf4 <__malloc_lock>
 800ea56:	4a1e      	ldr	r2, [pc, #120]	; (800ead0 <_free_r+0x94>)
 800ea58:	9801      	ldr	r0, [sp, #4]
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	b933      	cbnz	r3, 800ea6c <_free_r+0x30>
 800ea5e:	6063      	str	r3, [r4, #4]
 800ea60:	6014      	str	r4, [r2, #0]
 800ea62:	b003      	add	sp, #12
 800ea64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea68:	f7fe b9ca 	b.w	800ce00 <__malloc_unlock>
 800ea6c:	42a3      	cmp	r3, r4
 800ea6e:	d908      	bls.n	800ea82 <_free_r+0x46>
 800ea70:	6825      	ldr	r5, [r4, #0]
 800ea72:	1961      	adds	r1, r4, r5
 800ea74:	428b      	cmp	r3, r1
 800ea76:	bf01      	itttt	eq
 800ea78:	6819      	ldreq	r1, [r3, #0]
 800ea7a:	685b      	ldreq	r3, [r3, #4]
 800ea7c:	1949      	addeq	r1, r1, r5
 800ea7e:	6021      	streq	r1, [r4, #0]
 800ea80:	e7ed      	b.n	800ea5e <_free_r+0x22>
 800ea82:	461a      	mov	r2, r3
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	b10b      	cbz	r3, 800ea8c <_free_r+0x50>
 800ea88:	42a3      	cmp	r3, r4
 800ea8a:	d9fa      	bls.n	800ea82 <_free_r+0x46>
 800ea8c:	6811      	ldr	r1, [r2, #0]
 800ea8e:	1855      	adds	r5, r2, r1
 800ea90:	42a5      	cmp	r5, r4
 800ea92:	d10b      	bne.n	800eaac <_free_r+0x70>
 800ea94:	6824      	ldr	r4, [r4, #0]
 800ea96:	4421      	add	r1, r4
 800ea98:	1854      	adds	r4, r2, r1
 800ea9a:	42a3      	cmp	r3, r4
 800ea9c:	6011      	str	r1, [r2, #0]
 800ea9e:	d1e0      	bne.n	800ea62 <_free_r+0x26>
 800eaa0:	681c      	ldr	r4, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	6053      	str	r3, [r2, #4]
 800eaa6:	440c      	add	r4, r1
 800eaa8:	6014      	str	r4, [r2, #0]
 800eaaa:	e7da      	b.n	800ea62 <_free_r+0x26>
 800eaac:	d902      	bls.n	800eab4 <_free_r+0x78>
 800eaae:	230c      	movs	r3, #12
 800eab0:	6003      	str	r3, [r0, #0]
 800eab2:	e7d6      	b.n	800ea62 <_free_r+0x26>
 800eab4:	6825      	ldr	r5, [r4, #0]
 800eab6:	1961      	adds	r1, r4, r5
 800eab8:	428b      	cmp	r3, r1
 800eaba:	bf04      	itt	eq
 800eabc:	6819      	ldreq	r1, [r3, #0]
 800eabe:	685b      	ldreq	r3, [r3, #4]
 800eac0:	6063      	str	r3, [r4, #4]
 800eac2:	bf04      	itt	eq
 800eac4:	1949      	addeq	r1, r1, r5
 800eac6:	6021      	streq	r1, [r4, #0]
 800eac8:	6054      	str	r4, [r2, #4]
 800eaca:	e7ca      	b.n	800ea62 <_free_r+0x26>
 800eacc:	b003      	add	sp, #12
 800eace:	bd30      	pop	{r4, r5, pc}
 800ead0:	20001cc0 	.word	0x20001cc0

0800ead4 <__ascii_mbtowc>:
 800ead4:	b082      	sub	sp, #8
 800ead6:	b901      	cbnz	r1, 800eada <__ascii_mbtowc+0x6>
 800ead8:	a901      	add	r1, sp, #4
 800eada:	b142      	cbz	r2, 800eaee <__ascii_mbtowc+0x1a>
 800eadc:	b14b      	cbz	r3, 800eaf2 <__ascii_mbtowc+0x1e>
 800eade:	7813      	ldrb	r3, [r2, #0]
 800eae0:	600b      	str	r3, [r1, #0]
 800eae2:	7812      	ldrb	r2, [r2, #0]
 800eae4:	1e10      	subs	r0, r2, #0
 800eae6:	bf18      	it	ne
 800eae8:	2001      	movne	r0, #1
 800eaea:	b002      	add	sp, #8
 800eaec:	4770      	bx	lr
 800eaee:	4610      	mov	r0, r2
 800eaf0:	e7fb      	b.n	800eaea <__ascii_mbtowc+0x16>
 800eaf2:	f06f 0001 	mvn.w	r0, #1
 800eaf6:	e7f8      	b.n	800eaea <__ascii_mbtowc+0x16>

0800eaf8 <_Balloc>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	69c6      	ldr	r6, [r0, #28]
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	b976      	cbnz	r6, 800eb20 <_Balloc+0x28>
 800eb02:	2010      	movs	r0, #16
 800eb04:	f7fe f8c6 	bl	800cc94 <malloc>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	61e0      	str	r0, [r4, #28]
 800eb0c:	b920      	cbnz	r0, 800eb18 <_Balloc+0x20>
 800eb0e:	4b18      	ldr	r3, [pc, #96]	; (800eb70 <_Balloc+0x78>)
 800eb10:	4818      	ldr	r0, [pc, #96]	; (800eb74 <_Balloc+0x7c>)
 800eb12:	216b      	movs	r1, #107	; 0x6b
 800eb14:	f7ff f8f8 	bl	800dd08 <__assert_func>
 800eb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb1c:	6006      	str	r6, [r0, #0]
 800eb1e:	60c6      	str	r6, [r0, #12]
 800eb20:	69e6      	ldr	r6, [r4, #28]
 800eb22:	68f3      	ldr	r3, [r6, #12]
 800eb24:	b183      	cbz	r3, 800eb48 <_Balloc+0x50>
 800eb26:	69e3      	ldr	r3, [r4, #28]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb2e:	b9b8      	cbnz	r0, 800eb60 <_Balloc+0x68>
 800eb30:	2101      	movs	r1, #1
 800eb32:	fa01 f605 	lsl.w	r6, r1, r5
 800eb36:	1d72      	adds	r2, r6, #5
 800eb38:	0092      	lsls	r2, r2, #2
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f001 fb0b 	bl	8010156 <_calloc_r>
 800eb40:	b160      	cbz	r0, 800eb5c <_Balloc+0x64>
 800eb42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb46:	e00e      	b.n	800eb66 <_Balloc+0x6e>
 800eb48:	2221      	movs	r2, #33	; 0x21
 800eb4a:	2104      	movs	r1, #4
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f001 fb02 	bl	8010156 <_calloc_r>
 800eb52:	69e3      	ldr	r3, [r4, #28]
 800eb54:	60f0      	str	r0, [r6, #12]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e4      	bne.n	800eb26 <_Balloc+0x2e>
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	6802      	ldr	r2, [r0, #0]
 800eb62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb66:	2300      	movs	r3, #0
 800eb68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb6c:	e7f7      	b.n	800eb5e <_Balloc+0x66>
 800eb6e:	bf00      	nop
 800eb70:	0804e02b 	.word	0x0804e02b
 800eb74:	0804e158 	.word	0x0804e158

0800eb78 <_Bfree>:
 800eb78:	b570      	push	{r4, r5, r6, lr}
 800eb7a:	69c6      	ldr	r6, [r0, #28]
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	460c      	mov	r4, r1
 800eb80:	b976      	cbnz	r6, 800eba0 <_Bfree+0x28>
 800eb82:	2010      	movs	r0, #16
 800eb84:	f7fe f886 	bl	800cc94 <malloc>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	61e8      	str	r0, [r5, #28]
 800eb8c:	b920      	cbnz	r0, 800eb98 <_Bfree+0x20>
 800eb8e:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <_Bfree+0x3c>)
 800eb90:	4809      	ldr	r0, [pc, #36]	; (800ebb8 <_Bfree+0x40>)
 800eb92:	218f      	movs	r1, #143	; 0x8f
 800eb94:	f7ff f8b8 	bl	800dd08 <__assert_func>
 800eb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb9c:	6006      	str	r6, [r0, #0]
 800eb9e:	60c6      	str	r6, [r0, #12]
 800eba0:	b13c      	cbz	r4, 800ebb2 <_Bfree+0x3a>
 800eba2:	69eb      	ldr	r3, [r5, #28]
 800eba4:	6862      	ldr	r2, [r4, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebac:	6021      	str	r1, [r4, #0]
 800ebae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}
 800ebb4:	0804e02b 	.word	0x0804e02b
 800ebb8:	0804e158 	.word	0x0804e158

0800ebbc <__multadd>:
 800ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc0:	690d      	ldr	r5, [r1, #16]
 800ebc2:	4607      	mov	r7, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	461e      	mov	r6, r3
 800ebc8:	f101 0c14 	add.w	ip, r1, #20
 800ebcc:	2000      	movs	r0, #0
 800ebce:	f8dc 3000 	ldr.w	r3, [ip]
 800ebd2:	b299      	uxth	r1, r3
 800ebd4:	fb02 6101 	mla	r1, r2, r1, r6
 800ebd8:	0c1e      	lsrs	r6, r3, #16
 800ebda:	0c0b      	lsrs	r3, r1, #16
 800ebdc:	fb02 3306 	mla	r3, r2, r6, r3
 800ebe0:	b289      	uxth	r1, r1
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebe8:	4285      	cmp	r5, r0
 800ebea:	f84c 1b04 	str.w	r1, [ip], #4
 800ebee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebf2:	dcec      	bgt.n	800ebce <__multadd+0x12>
 800ebf4:	b30e      	cbz	r6, 800ec3a <__multadd+0x7e>
 800ebf6:	68a3      	ldr	r3, [r4, #8]
 800ebf8:	42ab      	cmp	r3, r5
 800ebfa:	dc19      	bgt.n	800ec30 <__multadd+0x74>
 800ebfc:	6861      	ldr	r1, [r4, #4]
 800ebfe:	4638      	mov	r0, r7
 800ec00:	3101      	adds	r1, #1
 800ec02:	f7ff ff79 	bl	800eaf8 <_Balloc>
 800ec06:	4680      	mov	r8, r0
 800ec08:	b928      	cbnz	r0, 800ec16 <__multadd+0x5a>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <__multadd+0x84>)
 800ec0e:	480d      	ldr	r0, [pc, #52]	; (800ec44 <__multadd+0x88>)
 800ec10:	21ba      	movs	r1, #186	; 0xba
 800ec12:	f7ff f879 	bl	800dd08 <__assert_func>
 800ec16:	6922      	ldr	r2, [r4, #16]
 800ec18:	3202      	adds	r2, #2
 800ec1a:	f104 010c 	add.w	r1, r4, #12
 800ec1e:	0092      	lsls	r2, r2, #2
 800ec20:	300c      	adds	r0, #12
 800ec22:	f7ff f863 	bl	800dcec <memcpy>
 800ec26:	4621      	mov	r1, r4
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f7ff ffa5 	bl	800eb78 <_Bfree>
 800ec2e:	4644      	mov	r4, r8
 800ec30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec34:	3501      	adds	r5, #1
 800ec36:	615e      	str	r6, [r3, #20]
 800ec38:	6125      	str	r5, [r4, #16]
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec40:	0804e147 	.word	0x0804e147
 800ec44:	0804e158 	.word	0x0804e158

0800ec48 <__hi0bits>:
 800ec48:	0c03      	lsrs	r3, r0, #16
 800ec4a:	041b      	lsls	r3, r3, #16
 800ec4c:	b9d3      	cbnz	r3, 800ec84 <__hi0bits+0x3c>
 800ec4e:	0400      	lsls	r0, r0, #16
 800ec50:	2310      	movs	r3, #16
 800ec52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ec56:	bf04      	itt	eq
 800ec58:	0200      	lsleq	r0, r0, #8
 800ec5a:	3308      	addeq	r3, #8
 800ec5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec60:	bf04      	itt	eq
 800ec62:	0100      	lsleq	r0, r0, #4
 800ec64:	3304      	addeq	r3, #4
 800ec66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec6a:	bf04      	itt	eq
 800ec6c:	0080      	lsleq	r0, r0, #2
 800ec6e:	3302      	addeq	r3, #2
 800ec70:	2800      	cmp	r0, #0
 800ec72:	db05      	blt.n	800ec80 <__hi0bits+0x38>
 800ec74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec78:	f103 0301 	add.w	r3, r3, #1
 800ec7c:	bf08      	it	eq
 800ec7e:	2320      	moveq	r3, #32
 800ec80:	4618      	mov	r0, r3
 800ec82:	4770      	bx	lr
 800ec84:	2300      	movs	r3, #0
 800ec86:	e7e4      	b.n	800ec52 <__hi0bits+0xa>

0800ec88 <__lo0bits>:
 800ec88:	6803      	ldr	r3, [r0, #0]
 800ec8a:	f013 0207 	ands.w	r2, r3, #7
 800ec8e:	d00c      	beq.n	800ecaa <__lo0bits+0x22>
 800ec90:	07d9      	lsls	r1, r3, #31
 800ec92:	d422      	bmi.n	800ecda <__lo0bits+0x52>
 800ec94:	079a      	lsls	r2, r3, #30
 800ec96:	bf49      	itett	mi
 800ec98:	085b      	lsrmi	r3, r3, #1
 800ec9a:	089b      	lsrpl	r3, r3, #2
 800ec9c:	6003      	strmi	r3, [r0, #0]
 800ec9e:	2201      	movmi	r2, #1
 800eca0:	bf5c      	itt	pl
 800eca2:	6003      	strpl	r3, [r0, #0]
 800eca4:	2202      	movpl	r2, #2
 800eca6:	4610      	mov	r0, r2
 800eca8:	4770      	bx	lr
 800ecaa:	b299      	uxth	r1, r3
 800ecac:	b909      	cbnz	r1, 800ecb2 <__lo0bits+0x2a>
 800ecae:	0c1b      	lsrs	r3, r3, #16
 800ecb0:	2210      	movs	r2, #16
 800ecb2:	b2d9      	uxtb	r1, r3
 800ecb4:	b909      	cbnz	r1, 800ecba <__lo0bits+0x32>
 800ecb6:	3208      	adds	r2, #8
 800ecb8:	0a1b      	lsrs	r3, r3, #8
 800ecba:	0719      	lsls	r1, r3, #28
 800ecbc:	bf04      	itt	eq
 800ecbe:	091b      	lsreq	r3, r3, #4
 800ecc0:	3204      	addeq	r2, #4
 800ecc2:	0799      	lsls	r1, r3, #30
 800ecc4:	bf04      	itt	eq
 800ecc6:	089b      	lsreq	r3, r3, #2
 800ecc8:	3202      	addeq	r2, #2
 800ecca:	07d9      	lsls	r1, r3, #31
 800eccc:	d403      	bmi.n	800ecd6 <__lo0bits+0x4e>
 800ecce:	085b      	lsrs	r3, r3, #1
 800ecd0:	f102 0201 	add.w	r2, r2, #1
 800ecd4:	d003      	beq.n	800ecde <__lo0bits+0x56>
 800ecd6:	6003      	str	r3, [r0, #0]
 800ecd8:	e7e5      	b.n	800eca6 <__lo0bits+0x1e>
 800ecda:	2200      	movs	r2, #0
 800ecdc:	e7e3      	b.n	800eca6 <__lo0bits+0x1e>
 800ecde:	2220      	movs	r2, #32
 800ece0:	e7e1      	b.n	800eca6 <__lo0bits+0x1e>
	...

0800ece4 <__i2b>:
 800ece4:	b510      	push	{r4, lr}
 800ece6:	460c      	mov	r4, r1
 800ece8:	2101      	movs	r1, #1
 800ecea:	f7ff ff05 	bl	800eaf8 <_Balloc>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	b928      	cbnz	r0, 800ecfe <__i2b+0x1a>
 800ecf2:	4b05      	ldr	r3, [pc, #20]	; (800ed08 <__i2b+0x24>)
 800ecf4:	4805      	ldr	r0, [pc, #20]	; (800ed0c <__i2b+0x28>)
 800ecf6:	f240 1145 	movw	r1, #325	; 0x145
 800ecfa:	f7ff f805 	bl	800dd08 <__assert_func>
 800ecfe:	2301      	movs	r3, #1
 800ed00:	6144      	str	r4, [r0, #20]
 800ed02:	6103      	str	r3, [r0, #16]
 800ed04:	bd10      	pop	{r4, pc}
 800ed06:	bf00      	nop
 800ed08:	0804e147 	.word	0x0804e147
 800ed0c:	0804e158 	.word	0x0804e158

0800ed10 <__multiply>:
 800ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	4691      	mov	r9, r2
 800ed16:	690a      	ldr	r2, [r1, #16]
 800ed18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	bfb8      	it	lt
 800ed20:	460b      	movlt	r3, r1
 800ed22:	460c      	mov	r4, r1
 800ed24:	bfbc      	itt	lt
 800ed26:	464c      	movlt	r4, r9
 800ed28:	4699      	movlt	r9, r3
 800ed2a:	6927      	ldr	r7, [r4, #16]
 800ed2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed30:	68a3      	ldr	r3, [r4, #8]
 800ed32:	6861      	ldr	r1, [r4, #4]
 800ed34:	eb07 060a 	add.w	r6, r7, sl
 800ed38:	42b3      	cmp	r3, r6
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	bfb8      	it	lt
 800ed3e:	3101      	addlt	r1, #1
 800ed40:	f7ff feda 	bl	800eaf8 <_Balloc>
 800ed44:	b930      	cbnz	r0, 800ed54 <__multiply+0x44>
 800ed46:	4602      	mov	r2, r0
 800ed48:	4b44      	ldr	r3, [pc, #272]	; (800ee5c <__multiply+0x14c>)
 800ed4a:	4845      	ldr	r0, [pc, #276]	; (800ee60 <__multiply+0x150>)
 800ed4c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ed50:	f7fe ffda 	bl	800dd08 <__assert_func>
 800ed54:	f100 0514 	add.w	r5, r0, #20
 800ed58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed5c:	462b      	mov	r3, r5
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4543      	cmp	r3, r8
 800ed62:	d321      	bcc.n	800eda8 <__multiply+0x98>
 800ed64:	f104 0314 	add.w	r3, r4, #20
 800ed68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed6c:	f109 0314 	add.w	r3, r9, #20
 800ed70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed74:	9202      	str	r2, [sp, #8]
 800ed76:	1b3a      	subs	r2, r7, r4
 800ed78:	3a15      	subs	r2, #21
 800ed7a:	f022 0203 	bic.w	r2, r2, #3
 800ed7e:	3204      	adds	r2, #4
 800ed80:	f104 0115 	add.w	r1, r4, #21
 800ed84:	428f      	cmp	r7, r1
 800ed86:	bf38      	it	cc
 800ed88:	2204      	movcc	r2, #4
 800ed8a:	9201      	str	r2, [sp, #4]
 800ed8c:	9a02      	ldr	r2, [sp, #8]
 800ed8e:	9303      	str	r3, [sp, #12]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d80c      	bhi.n	800edae <__multiply+0x9e>
 800ed94:	2e00      	cmp	r6, #0
 800ed96:	dd03      	ble.n	800eda0 <__multiply+0x90>
 800ed98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d05b      	beq.n	800ee58 <__multiply+0x148>
 800eda0:	6106      	str	r6, [r0, #16]
 800eda2:	b005      	add	sp, #20
 800eda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda8:	f843 2b04 	str.w	r2, [r3], #4
 800edac:	e7d8      	b.n	800ed60 <__multiply+0x50>
 800edae:	f8b3 a000 	ldrh.w	sl, [r3]
 800edb2:	f1ba 0f00 	cmp.w	sl, #0
 800edb6:	d024      	beq.n	800ee02 <__multiply+0xf2>
 800edb8:	f104 0e14 	add.w	lr, r4, #20
 800edbc:	46a9      	mov	r9, r5
 800edbe:	f04f 0c00 	mov.w	ip, #0
 800edc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800edc6:	f8d9 1000 	ldr.w	r1, [r9]
 800edca:	fa1f fb82 	uxth.w	fp, r2
 800edce:	b289      	uxth	r1, r1
 800edd0:	fb0a 110b 	mla	r1, sl, fp, r1
 800edd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800edd8:	f8d9 2000 	ldr.w	r2, [r9]
 800eddc:	4461      	add	r1, ip
 800edde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ede2:	fb0a c20b 	mla	r2, sl, fp, ip
 800ede6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800edea:	b289      	uxth	r1, r1
 800edec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800edf0:	4577      	cmp	r7, lr
 800edf2:	f849 1b04 	str.w	r1, [r9], #4
 800edf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800edfa:	d8e2      	bhi.n	800edc2 <__multiply+0xb2>
 800edfc:	9a01      	ldr	r2, [sp, #4]
 800edfe:	f845 c002 	str.w	ip, [r5, r2]
 800ee02:	9a03      	ldr	r2, [sp, #12]
 800ee04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee08:	3304      	adds	r3, #4
 800ee0a:	f1b9 0f00 	cmp.w	r9, #0
 800ee0e:	d021      	beq.n	800ee54 <__multiply+0x144>
 800ee10:	6829      	ldr	r1, [r5, #0]
 800ee12:	f104 0c14 	add.w	ip, r4, #20
 800ee16:	46ae      	mov	lr, r5
 800ee18:	f04f 0a00 	mov.w	sl, #0
 800ee1c:	f8bc b000 	ldrh.w	fp, [ip]
 800ee20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ee24:	fb09 220b 	mla	r2, r9, fp, r2
 800ee28:	4452      	add	r2, sl
 800ee2a:	b289      	uxth	r1, r1
 800ee2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ee30:	f84e 1b04 	str.w	r1, [lr], #4
 800ee34:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ee38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ee3c:	f8be 1000 	ldrh.w	r1, [lr]
 800ee40:	fb09 110a 	mla	r1, r9, sl, r1
 800ee44:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ee48:	4567      	cmp	r7, ip
 800ee4a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ee4e:	d8e5      	bhi.n	800ee1c <__multiply+0x10c>
 800ee50:	9a01      	ldr	r2, [sp, #4]
 800ee52:	50a9      	str	r1, [r5, r2]
 800ee54:	3504      	adds	r5, #4
 800ee56:	e799      	b.n	800ed8c <__multiply+0x7c>
 800ee58:	3e01      	subs	r6, #1
 800ee5a:	e79b      	b.n	800ed94 <__multiply+0x84>
 800ee5c:	0804e147 	.word	0x0804e147
 800ee60:	0804e158 	.word	0x0804e158

0800ee64 <__pow5mult>:
 800ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee68:	4615      	mov	r5, r2
 800ee6a:	f012 0203 	ands.w	r2, r2, #3
 800ee6e:	4606      	mov	r6, r0
 800ee70:	460f      	mov	r7, r1
 800ee72:	d007      	beq.n	800ee84 <__pow5mult+0x20>
 800ee74:	4c25      	ldr	r4, [pc, #148]	; (800ef0c <__pow5mult+0xa8>)
 800ee76:	3a01      	subs	r2, #1
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee7e:	f7ff fe9d 	bl	800ebbc <__multadd>
 800ee82:	4607      	mov	r7, r0
 800ee84:	10ad      	asrs	r5, r5, #2
 800ee86:	d03d      	beq.n	800ef04 <__pow5mult+0xa0>
 800ee88:	69f4      	ldr	r4, [r6, #28]
 800ee8a:	b97c      	cbnz	r4, 800eeac <__pow5mult+0x48>
 800ee8c:	2010      	movs	r0, #16
 800ee8e:	f7fd ff01 	bl	800cc94 <malloc>
 800ee92:	4602      	mov	r2, r0
 800ee94:	61f0      	str	r0, [r6, #28]
 800ee96:	b928      	cbnz	r0, 800eea4 <__pow5mult+0x40>
 800ee98:	4b1d      	ldr	r3, [pc, #116]	; (800ef10 <__pow5mult+0xac>)
 800ee9a:	481e      	ldr	r0, [pc, #120]	; (800ef14 <__pow5mult+0xb0>)
 800ee9c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eea0:	f7fe ff32 	bl	800dd08 <__assert_func>
 800eea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eea8:	6004      	str	r4, [r0, #0]
 800eeaa:	60c4      	str	r4, [r0, #12]
 800eeac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eeb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eeb4:	b94c      	cbnz	r4, 800eeca <__pow5mult+0x66>
 800eeb6:	f240 2171 	movw	r1, #625	; 0x271
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff ff12 	bl	800ece4 <__i2b>
 800eec0:	2300      	movs	r3, #0
 800eec2:	f8c8 0008 	str.w	r0, [r8, #8]
 800eec6:	4604      	mov	r4, r0
 800eec8:	6003      	str	r3, [r0, #0]
 800eeca:	f04f 0900 	mov.w	r9, #0
 800eece:	07eb      	lsls	r3, r5, #31
 800eed0:	d50a      	bpl.n	800eee8 <__pow5mult+0x84>
 800eed2:	4639      	mov	r1, r7
 800eed4:	4622      	mov	r2, r4
 800eed6:	4630      	mov	r0, r6
 800eed8:	f7ff ff1a 	bl	800ed10 <__multiply>
 800eedc:	4639      	mov	r1, r7
 800eede:	4680      	mov	r8, r0
 800eee0:	4630      	mov	r0, r6
 800eee2:	f7ff fe49 	bl	800eb78 <_Bfree>
 800eee6:	4647      	mov	r7, r8
 800eee8:	106d      	asrs	r5, r5, #1
 800eeea:	d00b      	beq.n	800ef04 <__pow5mult+0xa0>
 800eeec:	6820      	ldr	r0, [r4, #0]
 800eeee:	b938      	cbnz	r0, 800ef00 <__pow5mult+0x9c>
 800eef0:	4622      	mov	r2, r4
 800eef2:	4621      	mov	r1, r4
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff ff0b 	bl	800ed10 <__multiply>
 800eefa:	6020      	str	r0, [r4, #0]
 800eefc:	f8c0 9000 	str.w	r9, [r0]
 800ef00:	4604      	mov	r4, r0
 800ef02:	e7e4      	b.n	800eece <__pow5mult+0x6a>
 800ef04:	4638      	mov	r0, r7
 800ef06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef0a:	bf00      	nop
 800ef0c:	0804e2a8 	.word	0x0804e2a8
 800ef10:	0804e02b 	.word	0x0804e02b
 800ef14:	0804e158 	.word	0x0804e158

0800ef18 <__lshift>:
 800ef18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1c:	460c      	mov	r4, r1
 800ef1e:	6849      	ldr	r1, [r1, #4]
 800ef20:	6923      	ldr	r3, [r4, #16]
 800ef22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef26:	68a3      	ldr	r3, [r4, #8]
 800ef28:	4607      	mov	r7, r0
 800ef2a:	4691      	mov	r9, r2
 800ef2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef30:	f108 0601 	add.w	r6, r8, #1
 800ef34:	42b3      	cmp	r3, r6
 800ef36:	db0b      	blt.n	800ef50 <__lshift+0x38>
 800ef38:	4638      	mov	r0, r7
 800ef3a:	f7ff fddd 	bl	800eaf8 <_Balloc>
 800ef3e:	4605      	mov	r5, r0
 800ef40:	b948      	cbnz	r0, 800ef56 <__lshift+0x3e>
 800ef42:	4602      	mov	r2, r0
 800ef44:	4b28      	ldr	r3, [pc, #160]	; (800efe8 <__lshift+0xd0>)
 800ef46:	4829      	ldr	r0, [pc, #164]	; (800efec <__lshift+0xd4>)
 800ef48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ef4c:	f7fe fedc 	bl	800dd08 <__assert_func>
 800ef50:	3101      	adds	r1, #1
 800ef52:	005b      	lsls	r3, r3, #1
 800ef54:	e7ee      	b.n	800ef34 <__lshift+0x1c>
 800ef56:	2300      	movs	r3, #0
 800ef58:	f100 0114 	add.w	r1, r0, #20
 800ef5c:	f100 0210 	add.w	r2, r0, #16
 800ef60:	4618      	mov	r0, r3
 800ef62:	4553      	cmp	r3, sl
 800ef64:	db33      	blt.n	800efce <__lshift+0xb6>
 800ef66:	6920      	ldr	r0, [r4, #16]
 800ef68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef6c:	f104 0314 	add.w	r3, r4, #20
 800ef70:	f019 091f 	ands.w	r9, r9, #31
 800ef74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef7c:	d02b      	beq.n	800efd6 <__lshift+0xbe>
 800ef7e:	f1c9 0e20 	rsb	lr, r9, #32
 800ef82:	468a      	mov	sl, r1
 800ef84:	2200      	movs	r2, #0
 800ef86:	6818      	ldr	r0, [r3, #0]
 800ef88:	fa00 f009 	lsl.w	r0, r0, r9
 800ef8c:	4310      	orrs	r0, r2
 800ef8e:	f84a 0b04 	str.w	r0, [sl], #4
 800ef92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef96:	459c      	cmp	ip, r3
 800ef98:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef9c:	d8f3      	bhi.n	800ef86 <__lshift+0x6e>
 800ef9e:	ebac 0304 	sub.w	r3, ip, r4
 800efa2:	3b15      	subs	r3, #21
 800efa4:	f023 0303 	bic.w	r3, r3, #3
 800efa8:	3304      	adds	r3, #4
 800efaa:	f104 0015 	add.w	r0, r4, #21
 800efae:	4584      	cmp	ip, r0
 800efb0:	bf38      	it	cc
 800efb2:	2304      	movcc	r3, #4
 800efb4:	50ca      	str	r2, [r1, r3]
 800efb6:	b10a      	cbz	r2, 800efbc <__lshift+0xa4>
 800efb8:	f108 0602 	add.w	r6, r8, #2
 800efbc:	3e01      	subs	r6, #1
 800efbe:	4638      	mov	r0, r7
 800efc0:	612e      	str	r6, [r5, #16]
 800efc2:	4621      	mov	r1, r4
 800efc4:	f7ff fdd8 	bl	800eb78 <_Bfree>
 800efc8:	4628      	mov	r0, r5
 800efca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efce:	f842 0f04 	str.w	r0, [r2, #4]!
 800efd2:	3301      	adds	r3, #1
 800efd4:	e7c5      	b.n	800ef62 <__lshift+0x4a>
 800efd6:	3904      	subs	r1, #4
 800efd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800efdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800efe0:	459c      	cmp	ip, r3
 800efe2:	d8f9      	bhi.n	800efd8 <__lshift+0xc0>
 800efe4:	e7ea      	b.n	800efbc <__lshift+0xa4>
 800efe6:	bf00      	nop
 800efe8:	0804e147 	.word	0x0804e147
 800efec:	0804e158 	.word	0x0804e158

0800eff0 <__mcmp>:
 800eff0:	b530      	push	{r4, r5, lr}
 800eff2:	6902      	ldr	r2, [r0, #16]
 800eff4:	690c      	ldr	r4, [r1, #16]
 800eff6:	1b12      	subs	r2, r2, r4
 800eff8:	d10e      	bne.n	800f018 <__mcmp+0x28>
 800effa:	f100 0314 	add.w	r3, r0, #20
 800effe:	3114      	adds	r1, #20
 800f000:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f004:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f008:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f00c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f010:	42a5      	cmp	r5, r4
 800f012:	d003      	beq.n	800f01c <__mcmp+0x2c>
 800f014:	d305      	bcc.n	800f022 <__mcmp+0x32>
 800f016:	2201      	movs	r2, #1
 800f018:	4610      	mov	r0, r2
 800f01a:	bd30      	pop	{r4, r5, pc}
 800f01c:	4283      	cmp	r3, r0
 800f01e:	d3f3      	bcc.n	800f008 <__mcmp+0x18>
 800f020:	e7fa      	b.n	800f018 <__mcmp+0x28>
 800f022:	f04f 32ff 	mov.w	r2, #4294967295
 800f026:	e7f7      	b.n	800f018 <__mcmp+0x28>

0800f028 <__mdiff>:
 800f028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	460c      	mov	r4, r1
 800f02e:	4606      	mov	r6, r0
 800f030:	4611      	mov	r1, r2
 800f032:	4620      	mov	r0, r4
 800f034:	4690      	mov	r8, r2
 800f036:	f7ff ffdb 	bl	800eff0 <__mcmp>
 800f03a:	1e05      	subs	r5, r0, #0
 800f03c:	d110      	bne.n	800f060 <__mdiff+0x38>
 800f03e:	4629      	mov	r1, r5
 800f040:	4630      	mov	r0, r6
 800f042:	f7ff fd59 	bl	800eaf8 <_Balloc>
 800f046:	b930      	cbnz	r0, 800f056 <__mdiff+0x2e>
 800f048:	4b3a      	ldr	r3, [pc, #232]	; (800f134 <__mdiff+0x10c>)
 800f04a:	4602      	mov	r2, r0
 800f04c:	f240 2137 	movw	r1, #567	; 0x237
 800f050:	4839      	ldr	r0, [pc, #228]	; (800f138 <__mdiff+0x110>)
 800f052:	f7fe fe59 	bl	800dd08 <__assert_func>
 800f056:	2301      	movs	r3, #1
 800f058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f060:	bfa4      	itt	ge
 800f062:	4643      	movge	r3, r8
 800f064:	46a0      	movge	r8, r4
 800f066:	4630      	mov	r0, r6
 800f068:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f06c:	bfa6      	itte	ge
 800f06e:	461c      	movge	r4, r3
 800f070:	2500      	movge	r5, #0
 800f072:	2501      	movlt	r5, #1
 800f074:	f7ff fd40 	bl	800eaf8 <_Balloc>
 800f078:	b920      	cbnz	r0, 800f084 <__mdiff+0x5c>
 800f07a:	4b2e      	ldr	r3, [pc, #184]	; (800f134 <__mdiff+0x10c>)
 800f07c:	4602      	mov	r2, r0
 800f07e:	f240 2145 	movw	r1, #581	; 0x245
 800f082:	e7e5      	b.n	800f050 <__mdiff+0x28>
 800f084:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f088:	6926      	ldr	r6, [r4, #16]
 800f08a:	60c5      	str	r5, [r0, #12]
 800f08c:	f104 0914 	add.w	r9, r4, #20
 800f090:	f108 0514 	add.w	r5, r8, #20
 800f094:	f100 0e14 	add.w	lr, r0, #20
 800f098:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f09c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f0a0:	f108 0210 	add.w	r2, r8, #16
 800f0a4:	46f2      	mov	sl, lr
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f0ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f0b0:	fa11 f88b 	uxtah	r8, r1, fp
 800f0b4:	b299      	uxth	r1, r3
 800f0b6:	0c1b      	lsrs	r3, r3, #16
 800f0b8:	eba8 0801 	sub.w	r8, r8, r1
 800f0bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f0c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f0c4:	fa1f f888 	uxth.w	r8, r8
 800f0c8:	1419      	asrs	r1, r3, #16
 800f0ca:	454e      	cmp	r6, r9
 800f0cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f0d0:	f84a 3b04 	str.w	r3, [sl], #4
 800f0d4:	d8e8      	bhi.n	800f0a8 <__mdiff+0x80>
 800f0d6:	1b33      	subs	r3, r6, r4
 800f0d8:	3b15      	subs	r3, #21
 800f0da:	f023 0303 	bic.w	r3, r3, #3
 800f0de:	3304      	adds	r3, #4
 800f0e0:	3415      	adds	r4, #21
 800f0e2:	42a6      	cmp	r6, r4
 800f0e4:	bf38      	it	cc
 800f0e6:	2304      	movcc	r3, #4
 800f0e8:	441d      	add	r5, r3
 800f0ea:	4473      	add	r3, lr
 800f0ec:	469e      	mov	lr, r3
 800f0ee:	462e      	mov	r6, r5
 800f0f0:	4566      	cmp	r6, ip
 800f0f2:	d30e      	bcc.n	800f112 <__mdiff+0xea>
 800f0f4:	f10c 0203 	add.w	r2, ip, #3
 800f0f8:	1b52      	subs	r2, r2, r5
 800f0fa:	f022 0203 	bic.w	r2, r2, #3
 800f0fe:	3d03      	subs	r5, #3
 800f100:	45ac      	cmp	ip, r5
 800f102:	bf38      	it	cc
 800f104:	2200      	movcc	r2, #0
 800f106:	4413      	add	r3, r2
 800f108:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f10c:	b17a      	cbz	r2, 800f12e <__mdiff+0x106>
 800f10e:	6107      	str	r7, [r0, #16]
 800f110:	e7a4      	b.n	800f05c <__mdiff+0x34>
 800f112:	f856 8b04 	ldr.w	r8, [r6], #4
 800f116:	fa11 f288 	uxtah	r2, r1, r8
 800f11a:	1414      	asrs	r4, r2, #16
 800f11c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f120:	b292      	uxth	r2, r2
 800f122:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f126:	f84e 2b04 	str.w	r2, [lr], #4
 800f12a:	1421      	asrs	r1, r4, #16
 800f12c:	e7e0      	b.n	800f0f0 <__mdiff+0xc8>
 800f12e:	3f01      	subs	r7, #1
 800f130:	e7ea      	b.n	800f108 <__mdiff+0xe0>
 800f132:	bf00      	nop
 800f134:	0804e147 	.word	0x0804e147
 800f138:	0804e158 	.word	0x0804e158

0800f13c <__d2b>:
 800f13c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f140:	460f      	mov	r7, r1
 800f142:	2101      	movs	r1, #1
 800f144:	ec59 8b10 	vmov	r8, r9, d0
 800f148:	4616      	mov	r6, r2
 800f14a:	f7ff fcd5 	bl	800eaf8 <_Balloc>
 800f14e:	4604      	mov	r4, r0
 800f150:	b930      	cbnz	r0, 800f160 <__d2b+0x24>
 800f152:	4602      	mov	r2, r0
 800f154:	4b24      	ldr	r3, [pc, #144]	; (800f1e8 <__d2b+0xac>)
 800f156:	4825      	ldr	r0, [pc, #148]	; (800f1ec <__d2b+0xb0>)
 800f158:	f240 310f 	movw	r1, #783	; 0x30f
 800f15c:	f7fe fdd4 	bl	800dd08 <__assert_func>
 800f160:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f168:	bb2d      	cbnz	r5, 800f1b6 <__d2b+0x7a>
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	f1b8 0300 	subs.w	r3, r8, #0
 800f170:	d026      	beq.n	800f1c0 <__d2b+0x84>
 800f172:	4668      	mov	r0, sp
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	f7ff fd87 	bl	800ec88 <__lo0bits>
 800f17a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f17e:	b1e8      	cbz	r0, 800f1bc <__d2b+0x80>
 800f180:	f1c0 0320 	rsb	r3, r0, #32
 800f184:	fa02 f303 	lsl.w	r3, r2, r3
 800f188:	430b      	orrs	r3, r1
 800f18a:	40c2      	lsrs	r2, r0
 800f18c:	6163      	str	r3, [r4, #20]
 800f18e:	9201      	str	r2, [sp, #4]
 800f190:	9b01      	ldr	r3, [sp, #4]
 800f192:	61a3      	str	r3, [r4, #24]
 800f194:	2b00      	cmp	r3, #0
 800f196:	bf14      	ite	ne
 800f198:	2202      	movne	r2, #2
 800f19a:	2201      	moveq	r2, #1
 800f19c:	6122      	str	r2, [r4, #16]
 800f19e:	b1bd      	cbz	r5, 800f1d0 <__d2b+0x94>
 800f1a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f1a4:	4405      	add	r5, r0
 800f1a6:	603d      	str	r5, [r7, #0]
 800f1a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f1ac:	6030      	str	r0, [r6, #0]
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	b003      	add	sp, #12
 800f1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1ba:	e7d6      	b.n	800f16a <__d2b+0x2e>
 800f1bc:	6161      	str	r1, [r4, #20]
 800f1be:	e7e7      	b.n	800f190 <__d2b+0x54>
 800f1c0:	a801      	add	r0, sp, #4
 800f1c2:	f7ff fd61 	bl	800ec88 <__lo0bits>
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	6163      	str	r3, [r4, #20]
 800f1ca:	3020      	adds	r0, #32
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	e7e5      	b.n	800f19c <__d2b+0x60>
 800f1d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1d8:	6038      	str	r0, [r7, #0]
 800f1da:	6918      	ldr	r0, [r3, #16]
 800f1dc:	f7ff fd34 	bl	800ec48 <__hi0bits>
 800f1e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1e4:	e7e2      	b.n	800f1ac <__d2b+0x70>
 800f1e6:	bf00      	nop
 800f1e8:	0804e147 	.word	0x0804e147
 800f1ec:	0804e158 	.word	0x0804e158

0800f1f0 <__ascii_wctomb>:
 800f1f0:	b149      	cbz	r1, 800f206 <__ascii_wctomb+0x16>
 800f1f2:	2aff      	cmp	r2, #255	; 0xff
 800f1f4:	bf85      	ittet	hi
 800f1f6:	238a      	movhi	r3, #138	; 0x8a
 800f1f8:	6003      	strhi	r3, [r0, #0]
 800f1fa:	700a      	strbls	r2, [r1, #0]
 800f1fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800f200:	bf98      	it	ls
 800f202:	2001      	movls	r0, #1
 800f204:	4770      	bx	lr
 800f206:	4608      	mov	r0, r1
 800f208:	4770      	bx	lr

0800f20a <__ssputs_r>:
 800f20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f20e:	688e      	ldr	r6, [r1, #8]
 800f210:	461f      	mov	r7, r3
 800f212:	42be      	cmp	r6, r7
 800f214:	680b      	ldr	r3, [r1, #0]
 800f216:	4682      	mov	sl, r0
 800f218:	460c      	mov	r4, r1
 800f21a:	4690      	mov	r8, r2
 800f21c:	d82c      	bhi.n	800f278 <__ssputs_r+0x6e>
 800f21e:	898a      	ldrh	r2, [r1, #12]
 800f220:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f224:	d026      	beq.n	800f274 <__ssputs_r+0x6a>
 800f226:	6965      	ldr	r5, [r4, #20]
 800f228:	6909      	ldr	r1, [r1, #16]
 800f22a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f22e:	eba3 0901 	sub.w	r9, r3, r1
 800f232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f236:	1c7b      	adds	r3, r7, #1
 800f238:	444b      	add	r3, r9
 800f23a:	106d      	asrs	r5, r5, #1
 800f23c:	429d      	cmp	r5, r3
 800f23e:	bf38      	it	cc
 800f240:	461d      	movcc	r5, r3
 800f242:	0553      	lsls	r3, r2, #21
 800f244:	d527      	bpl.n	800f296 <__ssputs_r+0x8c>
 800f246:	4629      	mov	r1, r5
 800f248:	f7fd fd54 	bl	800ccf4 <_malloc_r>
 800f24c:	4606      	mov	r6, r0
 800f24e:	b360      	cbz	r0, 800f2aa <__ssputs_r+0xa0>
 800f250:	6921      	ldr	r1, [r4, #16]
 800f252:	464a      	mov	r2, r9
 800f254:	f7fe fd4a 	bl	800dcec <memcpy>
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f25e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	6126      	str	r6, [r4, #16]
 800f266:	6165      	str	r5, [r4, #20]
 800f268:	444e      	add	r6, r9
 800f26a:	eba5 0509 	sub.w	r5, r5, r9
 800f26e:	6026      	str	r6, [r4, #0]
 800f270:	60a5      	str	r5, [r4, #8]
 800f272:	463e      	mov	r6, r7
 800f274:	42be      	cmp	r6, r7
 800f276:	d900      	bls.n	800f27a <__ssputs_r+0x70>
 800f278:	463e      	mov	r6, r7
 800f27a:	6820      	ldr	r0, [r4, #0]
 800f27c:	4632      	mov	r2, r6
 800f27e:	4641      	mov	r1, r8
 800f280:	f000 ff48 	bl	8010114 <memmove>
 800f284:	68a3      	ldr	r3, [r4, #8]
 800f286:	1b9b      	subs	r3, r3, r6
 800f288:	60a3      	str	r3, [r4, #8]
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	4433      	add	r3, r6
 800f28e:	6023      	str	r3, [r4, #0]
 800f290:	2000      	movs	r0, #0
 800f292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f296:	462a      	mov	r2, r5
 800f298:	f000 ff73 	bl	8010182 <_realloc_r>
 800f29c:	4606      	mov	r6, r0
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d1e0      	bne.n	800f264 <__ssputs_r+0x5a>
 800f2a2:	6921      	ldr	r1, [r4, #16]
 800f2a4:	4650      	mov	r0, sl
 800f2a6:	f7ff fbc9 	bl	800ea3c <_free_r>
 800f2aa:	230c      	movs	r3, #12
 800f2ac:	f8ca 3000 	str.w	r3, [sl]
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b6:	81a3      	strh	r3, [r4, #12]
 800f2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2bc:	e7e9      	b.n	800f292 <__ssputs_r+0x88>
	...

0800f2c0 <_svfiprintf_r>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	4698      	mov	r8, r3
 800f2c6:	898b      	ldrh	r3, [r1, #12]
 800f2c8:	061b      	lsls	r3, r3, #24
 800f2ca:	b09d      	sub	sp, #116	; 0x74
 800f2cc:	4607      	mov	r7, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	4614      	mov	r4, r2
 800f2d2:	d50e      	bpl.n	800f2f2 <_svfiprintf_r+0x32>
 800f2d4:	690b      	ldr	r3, [r1, #16]
 800f2d6:	b963      	cbnz	r3, 800f2f2 <_svfiprintf_r+0x32>
 800f2d8:	2140      	movs	r1, #64	; 0x40
 800f2da:	f7fd fd0b 	bl	800ccf4 <_malloc_r>
 800f2de:	6028      	str	r0, [r5, #0]
 800f2e0:	6128      	str	r0, [r5, #16]
 800f2e2:	b920      	cbnz	r0, 800f2ee <_svfiprintf_r+0x2e>
 800f2e4:	230c      	movs	r3, #12
 800f2e6:	603b      	str	r3, [r7, #0]
 800f2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ec:	e0d0      	b.n	800f490 <_svfiprintf_r+0x1d0>
 800f2ee:	2340      	movs	r3, #64	; 0x40
 800f2f0:	616b      	str	r3, [r5, #20]
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f6:	2320      	movs	r3, #32
 800f2f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f300:	2330      	movs	r3, #48	; 0x30
 800f302:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f4a8 <_svfiprintf_r+0x1e8>
 800f306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f30a:	f04f 0901 	mov.w	r9, #1
 800f30e:	4623      	mov	r3, r4
 800f310:	469a      	mov	sl, r3
 800f312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f316:	b10a      	cbz	r2, 800f31c <_svfiprintf_r+0x5c>
 800f318:	2a25      	cmp	r2, #37	; 0x25
 800f31a:	d1f9      	bne.n	800f310 <_svfiprintf_r+0x50>
 800f31c:	ebba 0b04 	subs.w	fp, sl, r4
 800f320:	d00b      	beq.n	800f33a <_svfiprintf_r+0x7a>
 800f322:	465b      	mov	r3, fp
 800f324:	4622      	mov	r2, r4
 800f326:	4629      	mov	r1, r5
 800f328:	4638      	mov	r0, r7
 800f32a:	f7ff ff6e 	bl	800f20a <__ssputs_r>
 800f32e:	3001      	adds	r0, #1
 800f330:	f000 80a9 	beq.w	800f486 <_svfiprintf_r+0x1c6>
 800f334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f336:	445a      	add	r2, fp
 800f338:	9209      	str	r2, [sp, #36]	; 0x24
 800f33a:	f89a 3000 	ldrb.w	r3, [sl]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f000 80a1 	beq.w	800f486 <_svfiprintf_r+0x1c6>
 800f344:	2300      	movs	r3, #0
 800f346:	f04f 32ff 	mov.w	r2, #4294967295
 800f34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f34e:	f10a 0a01 	add.w	sl, sl, #1
 800f352:	9304      	str	r3, [sp, #16]
 800f354:	9307      	str	r3, [sp, #28]
 800f356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f35a:	931a      	str	r3, [sp, #104]	; 0x68
 800f35c:	4654      	mov	r4, sl
 800f35e:	2205      	movs	r2, #5
 800f360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f364:	4850      	ldr	r0, [pc, #320]	; (800f4a8 <_svfiprintf_r+0x1e8>)
 800f366:	f7f0 ff33 	bl	80001d0 <memchr>
 800f36a:	9a04      	ldr	r2, [sp, #16]
 800f36c:	b9d8      	cbnz	r0, 800f3a6 <_svfiprintf_r+0xe6>
 800f36e:	06d0      	lsls	r0, r2, #27
 800f370:	bf44      	itt	mi
 800f372:	2320      	movmi	r3, #32
 800f374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f378:	0711      	lsls	r1, r2, #28
 800f37a:	bf44      	itt	mi
 800f37c:	232b      	movmi	r3, #43	; 0x2b
 800f37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f382:	f89a 3000 	ldrb.w	r3, [sl]
 800f386:	2b2a      	cmp	r3, #42	; 0x2a
 800f388:	d015      	beq.n	800f3b6 <_svfiprintf_r+0xf6>
 800f38a:	9a07      	ldr	r2, [sp, #28]
 800f38c:	4654      	mov	r4, sl
 800f38e:	2000      	movs	r0, #0
 800f390:	f04f 0c0a 	mov.w	ip, #10
 800f394:	4621      	mov	r1, r4
 800f396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f39a:	3b30      	subs	r3, #48	; 0x30
 800f39c:	2b09      	cmp	r3, #9
 800f39e:	d94d      	bls.n	800f43c <_svfiprintf_r+0x17c>
 800f3a0:	b1b0      	cbz	r0, 800f3d0 <_svfiprintf_r+0x110>
 800f3a2:	9207      	str	r2, [sp, #28]
 800f3a4:	e014      	b.n	800f3d0 <_svfiprintf_r+0x110>
 800f3a6:	eba0 0308 	sub.w	r3, r0, r8
 800f3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	9304      	str	r3, [sp, #16]
 800f3b2:	46a2      	mov	sl, r4
 800f3b4:	e7d2      	b.n	800f35c <_svfiprintf_r+0x9c>
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	1d19      	adds	r1, r3, #4
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	9103      	str	r1, [sp, #12]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	bfbb      	ittet	lt
 800f3c2:	425b      	neglt	r3, r3
 800f3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3c8:	9307      	strge	r3, [sp, #28]
 800f3ca:	9307      	strlt	r3, [sp, #28]
 800f3cc:	bfb8      	it	lt
 800f3ce:	9204      	strlt	r2, [sp, #16]
 800f3d0:	7823      	ldrb	r3, [r4, #0]
 800f3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800f3d4:	d10c      	bne.n	800f3f0 <_svfiprintf_r+0x130>
 800f3d6:	7863      	ldrb	r3, [r4, #1]
 800f3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f3da:	d134      	bne.n	800f446 <_svfiprintf_r+0x186>
 800f3dc:	9b03      	ldr	r3, [sp, #12]
 800f3de:	1d1a      	adds	r2, r3, #4
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	9203      	str	r2, [sp, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	bfb8      	it	lt
 800f3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3ec:	3402      	adds	r4, #2
 800f3ee:	9305      	str	r3, [sp, #20]
 800f3f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f4b8 <_svfiprintf_r+0x1f8>
 800f3f4:	7821      	ldrb	r1, [r4, #0]
 800f3f6:	2203      	movs	r2, #3
 800f3f8:	4650      	mov	r0, sl
 800f3fa:	f7f0 fee9 	bl	80001d0 <memchr>
 800f3fe:	b138      	cbz	r0, 800f410 <_svfiprintf_r+0x150>
 800f400:	9b04      	ldr	r3, [sp, #16]
 800f402:	eba0 000a 	sub.w	r0, r0, sl
 800f406:	2240      	movs	r2, #64	; 0x40
 800f408:	4082      	lsls	r2, r0
 800f40a:	4313      	orrs	r3, r2
 800f40c:	3401      	adds	r4, #1
 800f40e:	9304      	str	r3, [sp, #16]
 800f410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f414:	4825      	ldr	r0, [pc, #148]	; (800f4ac <_svfiprintf_r+0x1ec>)
 800f416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f41a:	2206      	movs	r2, #6
 800f41c:	f7f0 fed8 	bl	80001d0 <memchr>
 800f420:	2800      	cmp	r0, #0
 800f422:	d038      	beq.n	800f496 <_svfiprintf_r+0x1d6>
 800f424:	4b22      	ldr	r3, [pc, #136]	; (800f4b0 <_svfiprintf_r+0x1f0>)
 800f426:	bb1b      	cbnz	r3, 800f470 <_svfiprintf_r+0x1b0>
 800f428:	9b03      	ldr	r3, [sp, #12]
 800f42a:	3307      	adds	r3, #7
 800f42c:	f023 0307 	bic.w	r3, r3, #7
 800f430:	3308      	adds	r3, #8
 800f432:	9303      	str	r3, [sp, #12]
 800f434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f436:	4433      	add	r3, r6
 800f438:	9309      	str	r3, [sp, #36]	; 0x24
 800f43a:	e768      	b.n	800f30e <_svfiprintf_r+0x4e>
 800f43c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f440:	460c      	mov	r4, r1
 800f442:	2001      	movs	r0, #1
 800f444:	e7a6      	b.n	800f394 <_svfiprintf_r+0xd4>
 800f446:	2300      	movs	r3, #0
 800f448:	3401      	adds	r4, #1
 800f44a:	9305      	str	r3, [sp, #20]
 800f44c:	4619      	mov	r1, r3
 800f44e:	f04f 0c0a 	mov.w	ip, #10
 800f452:	4620      	mov	r0, r4
 800f454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f458:	3a30      	subs	r2, #48	; 0x30
 800f45a:	2a09      	cmp	r2, #9
 800f45c:	d903      	bls.n	800f466 <_svfiprintf_r+0x1a6>
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d0c6      	beq.n	800f3f0 <_svfiprintf_r+0x130>
 800f462:	9105      	str	r1, [sp, #20]
 800f464:	e7c4      	b.n	800f3f0 <_svfiprintf_r+0x130>
 800f466:	fb0c 2101 	mla	r1, ip, r1, r2
 800f46a:	4604      	mov	r4, r0
 800f46c:	2301      	movs	r3, #1
 800f46e:	e7f0      	b.n	800f452 <_svfiprintf_r+0x192>
 800f470:	ab03      	add	r3, sp, #12
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	462a      	mov	r2, r5
 800f476:	4b0f      	ldr	r3, [pc, #60]	; (800f4b4 <_svfiprintf_r+0x1f4>)
 800f478:	a904      	add	r1, sp, #16
 800f47a:	4638      	mov	r0, r7
 800f47c:	f7fd fdf4 	bl	800d068 <_printf_float>
 800f480:	1c42      	adds	r2, r0, #1
 800f482:	4606      	mov	r6, r0
 800f484:	d1d6      	bne.n	800f434 <_svfiprintf_r+0x174>
 800f486:	89ab      	ldrh	r3, [r5, #12]
 800f488:	065b      	lsls	r3, r3, #25
 800f48a:	f53f af2d 	bmi.w	800f2e8 <_svfiprintf_r+0x28>
 800f48e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f490:	b01d      	add	sp, #116	; 0x74
 800f492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f496:	ab03      	add	r3, sp, #12
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	462a      	mov	r2, r5
 800f49c:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <_svfiprintf_r+0x1f4>)
 800f49e:	a904      	add	r1, sp, #16
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	f7fe f885 	bl	800d5b0 <_printf_i>
 800f4a6:	e7eb      	b.n	800f480 <_svfiprintf_r+0x1c0>
 800f4a8:	0804e2b4 	.word	0x0804e2b4
 800f4ac:	0804e2be 	.word	0x0804e2be
 800f4b0:	0800d069 	.word	0x0800d069
 800f4b4:	0800f20b 	.word	0x0800f20b
 800f4b8:	0804e2ba 	.word	0x0804e2ba

0800f4bc <_sungetc_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	1c4b      	adds	r3, r1, #1
 800f4c0:	4614      	mov	r4, r2
 800f4c2:	d103      	bne.n	800f4cc <_sungetc_r+0x10>
 800f4c4:	f04f 35ff 	mov.w	r5, #4294967295
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	bd38      	pop	{r3, r4, r5, pc}
 800f4cc:	8993      	ldrh	r3, [r2, #12]
 800f4ce:	f023 0320 	bic.w	r3, r3, #32
 800f4d2:	8193      	strh	r3, [r2, #12]
 800f4d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4d6:	6852      	ldr	r2, [r2, #4]
 800f4d8:	b2cd      	uxtb	r5, r1
 800f4da:	b18b      	cbz	r3, 800f500 <_sungetc_r+0x44>
 800f4dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	dd08      	ble.n	800f4f4 <_sungetc_r+0x38>
 800f4e2:	6823      	ldr	r3, [r4, #0]
 800f4e4:	1e5a      	subs	r2, r3, #1
 800f4e6:	6022      	str	r2, [r4, #0]
 800f4e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f4ec:	6863      	ldr	r3, [r4, #4]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	6063      	str	r3, [r4, #4]
 800f4f2:	e7e9      	b.n	800f4c8 <_sungetc_r+0xc>
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	f000 fd3e 	bl	800ff76 <__submore>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d0f1      	beq.n	800f4e2 <_sungetc_r+0x26>
 800f4fe:	e7e1      	b.n	800f4c4 <_sungetc_r+0x8>
 800f500:	6921      	ldr	r1, [r4, #16]
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	b151      	cbz	r1, 800f51c <_sungetc_r+0x60>
 800f506:	4299      	cmp	r1, r3
 800f508:	d208      	bcs.n	800f51c <_sungetc_r+0x60>
 800f50a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f50e:	42a9      	cmp	r1, r5
 800f510:	d104      	bne.n	800f51c <_sungetc_r+0x60>
 800f512:	3b01      	subs	r3, #1
 800f514:	3201      	adds	r2, #1
 800f516:	6023      	str	r3, [r4, #0]
 800f518:	6062      	str	r2, [r4, #4]
 800f51a:	e7d5      	b.n	800f4c8 <_sungetc_r+0xc>
 800f51c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f524:	6363      	str	r3, [r4, #52]	; 0x34
 800f526:	2303      	movs	r3, #3
 800f528:	63a3      	str	r3, [r4, #56]	; 0x38
 800f52a:	4623      	mov	r3, r4
 800f52c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	2301      	movs	r3, #1
 800f534:	e7dc      	b.n	800f4f0 <_sungetc_r+0x34>

0800f536 <__ssrefill_r>:
 800f536:	b510      	push	{r4, lr}
 800f538:	460c      	mov	r4, r1
 800f53a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f53c:	b169      	cbz	r1, 800f55a <__ssrefill_r+0x24>
 800f53e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f542:	4299      	cmp	r1, r3
 800f544:	d001      	beq.n	800f54a <__ssrefill_r+0x14>
 800f546:	f7ff fa79 	bl	800ea3c <_free_r>
 800f54a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f54c:	6063      	str	r3, [r4, #4]
 800f54e:	2000      	movs	r0, #0
 800f550:	6360      	str	r0, [r4, #52]	; 0x34
 800f552:	b113      	cbz	r3, 800f55a <__ssrefill_r+0x24>
 800f554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f556:	6023      	str	r3, [r4, #0]
 800f558:	bd10      	pop	{r4, pc}
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	2300      	movs	r3, #0
 800f560:	6063      	str	r3, [r4, #4]
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	f043 0320 	orr.w	r3, r3, #32
 800f568:	81a3      	strh	r3, [r4, #12]
 800f56a:	f04f 30ff 	mov.w	r0, #4294967295
 800f56e:	e7f3      	b.n	800f558 <__ssrefill_r+0x22>

0800f570 <__ssvfiscanf_r>:
 800f570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	460c      	mov	r4, r1
 800f576:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f57a:	2100      	movs	r1, #0
 800f57c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f580:	49a6      	ldr	r1, [pc, #664]	; (800f81c <__ssvfiscanf_r+0x2ac>)
 800f582:	91a0      	str	r1, [sp, #640]	; 0x280
 800f584:	f10d 0804 	add.w	r8, sp, #4
 800f588:	49a5      	ldr	r1, [pc, #660]	; (800f820 <__ssvfiscanf_r+0x2b0>)
 800f58a:	4fa6      	ldr	r7, [pc, #664]	; (800f824 <__ssvfiscanf_r+0x2b4>)
 800f58c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f828 <__ssvfiscanf_r+0x2b8>
 800f590:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f594:	4606      	mov	r6, r0
 800f596:	91a1      	str	r1, [sp, #644]	; 0x284
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	7813      	ldrb	r3, [r2, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f000 815a 	beq.w	800f856 <__ssvfiscanf_r+0x2e6>
 800f5a2:	5cf9      	ldrb	r1, [r7, r3]
 800f5a4:	f011 0108 	ands.w	r1, r1, #8
 800f5a8:	f102 0501 	add.w	r5, r2, #1
 800f5ac:	d019      	beq.n	800f5e2 <__ssvfiscanf_r+0x72>
 800f5ae:	6863      	ldr	r3, [r4, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	dd0f      	ble.n	800f5d4 <__ssvfiscanf_r+0x64>
 800f5b4:	6823      	ldr	r3, [r4, #0]
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	5cba      	ldrb	r2, [r7, r2]
 800f5ba:	0712      	lsls	r2, r2, #28
 800f5bc:	d401      	bmi.n	800f5c2 <__ssvfiscanf_r+0x52>
 800f5be:	462a      	mov	r2, r5
 800f5c0:	e7eb      	b.n	800f59a <__ssvfiscanf_r+0x2a>
 800f5c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f5c4:	3201      	adds	r2, #1
 800f5c6:	9245      	str	r2, [sp, #276]	; 0x114
 800f5c8:	6862      	ldr	r2, [r4, #4]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	3a01      	subs	r2, #1
 800f5ce:	6062      	str	r2, [r4, #4]
 800f5d0:	6023      	str	r3, [r4, #0]
 800f5d2:	e7ec      	b.n	800f5ae <__ssvfiscanf_r+0x3e>
 800f5d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4798      	blx	r3
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d0e9      	beq.n	800f5b4 <__ssvfiscanf_r+0x44>
 800f5e0:	e7ed      	b.n	800f5be <__ssvfiscanf_r+0x4e>
 800f5e2:	2b25      	cmp	r3, #37	; 0x25
 800f5e4:	d012      	beq.n	800f60c <__ssvfiscanf_r+0x9c>
 800f5e6:	469a      	mov	sl, r3
 800f5e8:	6863      	ldr	r3, [r4, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f340 8091 	ble.w	800f712 <__ssvfiscanf_r+0x1a2>
 800f5f0:	6822      	ldr	r2, [r4, #0]
 800f5f2:	7813      	ldrb	r3, [r2, #0]
 800f5f4:	4553      	cmp	r3, sl
 800f5f6:	f040 812e 	bne.w	800f856 <__ssvfiscanf_r+0x2e6>
 800f5fa:	6863      	ldr	r3, [r4, #4]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	6063      	str	r3, [r4, #4]
 800f600:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f602:	3201      	adds	r2, #1
 800f604:	3301      	adds	r3, #1
 800f606:	6022      	str	r2, [r4, #0]
 800f608:	9345      	str	r3, [sp, #276]	; 0x114
 800f60a:	e7d8      	b.n	800f5be <__ssvfiscanf_r+0x4e>
 800f60c:	9141      	str	r1, [sp, #260]	; 0x104
 800f60e:	9143      	str	r1, [sp, #268]	; 0x10c
 800f610:	7853      	ldrb	r3, [r2, #1]
 800f612:	2b2a      	cmp	r3, #42	; 0x2a
 800f614:	bf02      	ittt	eq
 800f616:	2310      	moveq	r3, #16
 800f618:	1c95      	addeq	r5, r2, #2
 800f61a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f61c:	220a      	movs	r2, #10
 800f61e:	46aa      	mov	sl, r5
 800f620:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f624:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f628:	2b09      	cmp	r3, #9
 800f62a:	d91c      	bls.n	800f666 <__ssvfiscanf_r+0xf6>
 800f62c:	487e      	ldr	r0, [pc, #504]	; (800f828 <__ssvfiscanf_r+0x2b8>)
 800f62e:	2203      	movs	r2, #3
 800f630:	f7f0 fdce 	bl	80001d0 <memchr>
 800f634:	b138      	cbz	r0, 800f646 <__ssvfiscanf_r+0xd6>
 800f636:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f638:	eba0 0009 	sub.w	r0, r0, r9
 800f63c:	2301      	movs	r3, #1
 800f63e:	4083      	lsls	r3, r0
 800f640:	4313      	orrs	r3, r2
 800f642:	9341      	str	r3, [sp, #260]	; 0x104
 800f644:	4655      	mov	r5, sl
 800f646:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f64a:	2b78      	cmp	r3, #120	; 0x78
 800f64c:	d806      	bhi.n	800f65c <__ssvfiscanf_r+0xec>
 800f64e:	2b57      	cmp	r3, #87	; 0x57
 800f650:	d810      	bhi.n	800f674 <__ssvfiscanf_r+0x104>
 800f652:	2b25      	cmp	r3, #37	; 0x25
 800f654:	d0c7      	beq.n	800f5e6 <__ssvfiscanf_r+0x76>
 800f656:	d857      	bhi.n	800f708 <__ssvfiscanf_r+0x198>
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d065      	beq.n	800f728 <__ssvfiscanf_r+0x1b8>
 800f65c:	2303      	movs	r3, #3
 800f65e:	9347      	str	r3, [sp, #284]	; 0x11c
 800f660:	230a      	movs	r3, #10
 800f662:	9342      	str	r3, [sp, #264]	; 0x108
 800f664:	e076      	b.n	800f754 <__ssvfiscanf_r+0x1e4>
 800f666:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f668:	fb02 1103 	mla	r1, r2, r3, r1
 800f66c:	3930      	subs	r1, #48	; 0x30
 800f66e:	9143      	str	r1, [sp, #268]	; 0x10c
 800f670:	4655      	mov	r5, sl
 800f672:	e7d4      	b.n	800f61e <__ssvfiscanf_r+0xae>
 800f674:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f678:	2a20      	cmp	r2, #32
 800f67a:	d8ef      	bhi.n	800f65c <__ssvfiscanf_r+0xec>
 800f67c:	a101      	add	r1, pc, #4	; (adr r1, 800f684 <__ssvfiscanf_r+0x114>)
 800f67e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f682:	bf00      	nop
 800f684:	0800f737 	.word	0x0800f737
 800f688:	0800f65d 	.word	0x0800f65d
 800f68c:	0800f65d 	.word	0x0800f65d
 800f690:	0800f795 	.word	0x0800f795
 800f694:	0800f65d 	.word	0x0800f65d
 800f698:	0800f65d 	.word	0x0800f65d
 800f69c:	0800f65d 	.word	0x0800f65d
 800f6a0:	0800f65d 	.word	0x0800f65d
 800f6a4:	0800f65d 	.word	0x0800f65d
 800f6a8:	0800f65d 	.word	0x0800f65d
 800f6ac:	0800f65d 	.word	0x0800f65d
 800f6b0:	0800f7ab 	.word	0x0800f7ab
 800f6b4:	0800f791 	.word	0x0800f791
 800f6b8:	0800f70f 	.word	0x0800f70f
 800f6bc:	0800f70f 	.word	0x0800f70f
 800f6c0:	0800f70f 	.word	0x0800f70f
 800f6c4:	0800f65d 	.word	0x0800f65d
 800f6c8:	0800f74d 	.word	0x0800f74d
 800f6cc:	0800f65d 	.word	0x0800f65d
 800f6d0:	0800f65d 	.word	0x0800f65d
 800f6d4:	0800f65d 	.word	0x0800f65d
 800f6d8:	0800f65d 	.word	0x0800f65d
 800f6dc:	0800f7bb 	.word	0x0800f7bb
 800f6e0:	0800f789 	.word	0x0800f789
 800f6e4:	0800f72f 	.word	0x0800f72f
 800f6e8:	0800f65d 	.word	0x0800f65d
 800f6ec:	0800f65d 	.word	0x0800f65d
 800f6f0:	0800f7b7 	.word	0x0800f7b7
 800f6f4:	0800f65d 	.word	0x0800f65d
 800f6f8:	0800f791 	.word	0x0800f791
 800f6fc:	0800f65d 	.word	0x0800f65d
 800f700:	0800f65d 	.word	0x0800f65d
 800f704:	0800f737 	.word	0x0800f737
 800f708:	3b45      	subs	r3, #69	; 0x45
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d8a6      	bhi.n	800f65c <__ssvfiscanf_r+0xec>
 800f70e:	2305      	movs	r3, #5
 800f710:	e01f      	b.n	800f752 <__ssvfiscanf_r+0x1e2>
 800f712:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f714:	4621      	mov	r1, r4
 800f716:	4630      	mov	r0, r6
 800f718:	4798      	blx	r3
 800f71a:	2800      	cmp	r0, #0
 800f71c:	f43f af68 	beq.w	800f5f0 <__ssvfiscanf_r+0x80>
 800f720:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f722:	2800      	cmp	r0, #0
 800f724:	f040 808d 	bne.w	800f842 <__ssvfiscanf_r+0x2d2>
 800f728:	f04f 30ff 	mov.w	r0, #4294967295
 800f72c:	e08f      	b.n	800f84e <__ssvfiscanf_r+0x2de>
 800f72e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f730:	f042 0220 	orr.w	r2, r2, #32
 800f734:	9241      	str	r2, [sp, #260]	; 0x104
 800f736:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f73c:	9241      	str	r2, [sp, #260]	; 0x104
 800f73e:	2210      	movs	r2, #16
 800f740:	2b6f      	cmp	r3, #111	; 0x6f
 800f742:	9242      	str	r2, [sp, #264]	; 0x108
 800f744:	bf34      	ite	cc
 800f746:	2303      	movcc	r3, #3
 800f748:	2304      	movcs	r3, #4
 800f74a:	e002      	b.n	800f752 <__ssvfiscanf_r+0x1e2>
 800f74c:	2300      	movs	r3, #0
 800f74e:	9342      	str	r3, [sp, #264]	; 0x108
 800f750:	2303      	movs	r3, #3
 800f752:	9347      	str	r3, [sp, #284]	; 0x11c
 800f754:	6863      	ldr	r3, [r4, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	dd3d      	ble.n	800f7d6 <__ssvfiscanf_r+0x266>
 800f75a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f75c:	0659      	lsls	r1, r3, #25
 800f75e:	d404      	bmi.n	800f76a <__ssvfiscanf_r+0x1fa>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	781a      	ldrb	r2, [r3, #0]
 800f764:	5cba      	ldrb	r2, [r7, r2]
 800f766:	0712      	lsls	r2, r2, #28
 800f768:	d43c      	bmi.n	800f7e4 <__ssvfiscanf_r+0x274>
 800f76a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	dc4b      	bgt.n	800f808 <__ssvfiscanf_r+0x298>
 800f770:	466b      	mov	r3, sp
 800f772:	4622      	mov	r2, r4
 800f774:	a941      	add	r1, sp, #260	; 0x104
 800f776:	4630      	mov	r0, r6
 800f778:	f000 f9b6 	bl	800fae8 <_scanf_chars>
 800f77c:	2801      	cmp	r0, #1
 800f77e:	d06a      	beq.n	800f856 <__ssvfiscanf_r+0x2e6>
 800f780:	2802      	cmp	r0, #2
 800f782:	f47f af1c 	bne.w	800f5be <__ssvfiscanf_r+0x4e>
 800f786:	e7cb      	b.n	800f720 <__ssvfiscanf_r+0x1b0>
 800f788:	2308      	movs	r3, #8
 800f78a:	9342      	str	r3, [sp, #264]	; 0x108
 800f78c:	2304      	movs	r3, #4
 800f78e:	e7e0      	b.n	800f752 <__ssvfiscanf_r+0x1e2>
 800f790:	220a      	movs	r2, #10
 800f792:	e7d5      	b.n	800f740 <__ssvfiscanf_r+0x1d0>
 800f794:	4629      	mov	r1, r5
 800f796:	4640      	mov	r0, r8
 800f798:	f000 fbb4 	bl	800ff04 <__sccl>
 800f79c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7a2:	9341      	str	r3, [sp, #260]	; 0x104
 800f7a4:	4605      	mov	r5, r0
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e7d3      	b.n	800f752 <__ssvfiscanf_r+0x1e2>
 800f7aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7b0:	9341      	str	r3, [sp, #260]	; 0x104
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	e7cd      	b.n	800f752 <__ssvfiscanf_r+0x1e2>
 800f7b6:	2302      	movs	r3, #2
 800f7b8:	e7cb      	b.n	800f752 <__ssvfiscanf_r+0x1e2>
 800f7ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f7bc:	06c3      	lsls	r3, r0, #27
 800f7be:	f53f aefe 	bmi.w	800f5be <__ssvfiscanf_r+0x4e>
 800f7c2:	9b00      	ldr	r3, [sp, #0]
 800f7c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f7c6:	1d19      	adds	r1, r3, #4
 800f7c8:	9100      	str	r1, [sp, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	07c0      	lsls	r0, r0, #31
 800f7ce:	bf4c      	ite	mi
 800f7d0:	801a      	strhmi	r2, [r3, #0]
 800f7d2:	601a      	strpl	r2, [r3, #0]
 800f7d4:	e6f3      	b.n	800f5be <__ssvfiscanf_r+0x4e>
 800f7d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4630      	mov	r0, r6
 800f7dc:	4798      	blx	r3
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0bb      	beq.n	800f75a <__ssvfiscanf_r+0x1ea>
 800f7e2:	e79d      	b.n	800f720 <__ssvfiscanf_r+0x1b0>
 800f7e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f7e6:	3201      	adds	r2, #1
 800f7e8:	9245      	str	r2, [sp, #276]	; 0x114
 800f7ea:	6862      	ldr	r2, [r4, #4]
 800f7ec:	3a01      	subs	r2, #1
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	6062      	str	r2, [r4, #4]
 800f7f2:	dd02      	ble.n	800f7fa <__ssvfiscanf_r+0x28a>
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	6023      	str	r3, [r4, #0]
 800f7f8:	e7b2      	b.n	800f760 <__ssvfiscanf_r+0x1f0>
 800f7fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f7fc:	4621      	mov	r1, r4
 800f7fe:	4630      	mov	r0, r6
 800f800:	4798      	blx	r3
 800f802:	2800      	cmp	r0, #0
 800f804:	d0ac      	beq.n	800f760 <__ssvfiscanf_r+0x1f0>
 800f806:	e78b      	b.n	800f720 <__ssvfiscanf_r+0x1b0>
 800f808:	2b04      	cmp	r3, #4
 800f80a:	dc0f      	bgt.n	800f82c <__ssvfiscanf_r+0x2bc>
 800f80c:	466b      	mov	r3, sp
 800f80e:	4622      	mov	r2, r4
 800f810:	a941      	add	r1, sp, #260	; 0x104
 800f812:	4630      	mov	r0, r6
 800f814:	f000 f9c2 	bl	800fb9c <_scanf_i>
 800f818:	e7b0      	b.n	800f77c <__ssvfiscanf_r+0x20c>
 800f81a:	bf00      	nop
 800f81c:	0800f4bd 	.word	0x0800f4bd
 800f820:	0800f537 	.word	0x0800f537
 800f824:	0804def9 	.word	0x0804def9
 800f828:	0804e2ba 	.word	0x0804e2ba
 800f82c:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <__ssvfiscanf_r+0x2ec>)
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f43f aec5 	beq.w	800f5be <__ssvfiscanf_r+0x4e>
 800f834:	466b      	mov	r3, sp
 800f836:	4622      	mov	r2, r4
 800f838:	a941      	add	r1, sp, #260	; 0x104
 800f83a:	4630      	mov	r0, r6
 800f83c:	f3af 8000 	nop.w
 800f840:	e79c      	b.n	800f77c <__ssvfiscanf_r+0x20c>
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f848:	bf18      	it	ne
 800f84a:	f04f 30ff 	movne.w	r0, #4294967295
 800f84e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f856:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f858:	e7f9      	b.n	800f84e <__ssvfiscanf_r+0x2de>
 800f85a:	bf00      	nop
 800f85c:	00000000 	.word	0x00000000

0800f860 <__sfputc_r>:
 800f860:	6893      	ldr	r3, [r2, #8]
 800f862:	3b01      	subs	r3, #1
 800f864:	2b00      	cmp	r3, #0
 800f866:	b410      	push	{r4}
 800f868:	6093      	str	r3, [r2, #8]
 800f86a:	da08      	bge.n	800f87e <__sfputc_r+0x1e>
 800f86c:	6994      	ldr	r4, [r2, #24]
 800f86e:	42a3      	cmp	r3, r4
 800f870:	db01      	blt.n	800f876 <__sfputc_r+0x16>
 800f872:	290a      	cmp	r1, #10
 800f874:	d103      	bne.n	800f87e <__sfputc_r+0x1e>
 800f876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f87a:	f000 bbb6 	b.w	800ffea <__swbuf_r>
 800f87e:	6813      	ldr	r3, [r2, #0]
 800f880:	1c58      	adds	r0, r3, #1
 800f882:	6010      	str	r0, [r2, #0]
 800f884:	7019      	strb	r1, [r3, #0]
 800f886:	4608      	mov	r0, r1
 800f888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f88c:	4770      	bx	lr

0800f88e <__sfputs_r>:
 800f88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f890:	4606      	mov	r6, r0
 800f892:	460f      	mov	r7, r1
 800f894:	4614      	mov	r4, r2
 800f896:	18d5      	adds	r5, r2, r3
 800f898:	42ac      	cmp	r4, r5
 800f89a:	d101      	bne.n	800f8a0 <__sfputs_r+0x12>
 800f89c:	2000      	movs	r0, #0
 800f89e:	e007      	b.n	800f8b0 <__sfputs_r+0x22>
 800f8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a4:	463a      	mov	r2, r7
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f7ff ffda 	bl	800f860 <__sfputc_r>
 800f8ac:	1c43      	adds	r3, r0, #1
 800f8ae:	d1f3      	bne.n	800f898 <__sfputs_r+0xa>
 800f8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8b4 <_vfiprintf_r>:
 800f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	b09d      	sub	sp, #116	; 0x74
 800f8bc:	4614      	mov	r4, r2
 800f8be:	4698      	mov	r8, r3
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	b118      	cbz	r0, 800f8cc <_vfiprintf_r+0x18>
 800f8c4:	6a03      	ldr	r3, [r0, #32]
 800f8c6:	b90b      	cbnz	r3, 800f8cc <_vfiprintf_r+0x18>
 800f8c8:	f7fe f80e 	bl	800d8e8 <__sinit>
 800f8cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8ce:	07d9      	lsls	r1, r3, #31
 800f8d0:	d405      	bmi.n	800f8de <_vfiprintf_r+0x2a>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	059a      	lsls	r2, r3, #22
 800f8d6:	d402      	bmi.n	800f8de <_vfiprintf_r+0x2a>
 800f8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8da:	f7fe f9fd 	bl	800dcd8 <__retarget_lock_acquire_recursive>
 800f8de:	89ab      	ldrh	r3, [r5, #12]
 800f8e0:	071b      	lsls	r3, r3, #28
 800f8e2:	d501      	bpl.n	800f8e8 <_vfiprintf_r+0x34>
 800f8e4:	692b      	ldr	r3, [r5, #16]
 800f8e6:	b99b      	cbnz	r3, 800f910 <_vfiprintf_r+0x5c>
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f000 fbba 	bl	8010064 <__swsetup_r>
 800f8f0:	b170      	cbz	r0, 800f910 <_vfiprintf_r+0x5c>
 800f8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8f4:	07dc      	lsls	r4, r3, #31
 800f8f6:	d504      	bpl.n	800f902 <_vfiprintf_r+0x4e>
 800f8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fc:	b01d      	add	sp, #116	; 0x74
 800f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f902:	89ab      	ldrh	r3, [r5, #12]
 800f904:	0598      	lsls	r0, r3, #22
 800f906:	d4f7      	bmi.n	800f8f8 <_vfiprintf_r+0x44>
 800f908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f90a:	f7fe f9e6 	bl	800dcda <__retarget_lock_release_recursive>
 800f90e:	e7f3      	b.n	800f8f8 <_vfiprintf_r+0x44>
 800f910:	2300      	movs	r3, #0
 800f912:	9309      	str	r3, [sp, #36]	; 0x24
 800f914:	2320      	movs	r3, #32
 800f916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f91a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f91e:	2330      	movs	r3, #48	; 0x30
 800f920:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fad4 <_vfiprintf_r+0x220>
 800f924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f928:	f04f 0901 	mov.w	r9, #1
 800f92c:	4623      	mov	r3, r4
 800f92e:	469a      	mov	sl, r3
 800f930:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f934:	b10a      	cbz	r2, 800f93a <_vfiprintf_r+0x86>
 800f936:	2a25      	cmp	r2, #37	; 0x25
 800f938:	d1f9      	bne.n	800f92e <_vfiprintf_r+0x7a>
 800f93a:	ebba 0b04 	subs.w	fp, sl, r4
 800f93e:	d00b      	beq.n	800f958 <_vfiprintf_r+0xa4>
 800f940:	465b      	mov	r3, fp
 800f942:	4622      	mov	r2, r4
 800f944:	4629      	mov	r1, r5
 800f946:	4630      	mov	r0, r6
 800f948:	f7ff ffa1 	bl	800f88e <__sfputs_r>
 800f94c:	3001      	adds	r0, #1
 800f94e:	f000 80a9 	beq.w	800faa4 <_vfiprintf_r+0x1f0>
 800f952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f954:	445a      	add	r2, fp
 800f956:	9209      	str	r2, [sp, #36]	; 0x24
 800f958:	f89a 3000 	ldrb.w	r3, [sl]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 80a1 	beq.w	800faa4 <_vfiprintf_r+0x1f0>
 800f962:	2300      	movs	r3, #0
 800f964:	f04f 32ff 	mov.w	r2, #4294967295
 800f968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f96c:	f10a 0a01 	add.w	sl, sl, #1
 800f970:	9304      	str	r3, [sp, #16]
 800f972:	9307      	str	r3, [sp, #28]
 800f974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f978:	931a      	str	r3, [sp, #104]	; 0x68
 800f97a:	4654      	mov	r4, sl
 800f97c:	2205      	movs	r2, #5
 800f97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f982:	4854      	ldr	r0, [pc, #336]	; (800fad4 <_vfiprintf_r+0x220>)
 800f984:	f7f0 fc24 	bl	80001d0 <memchr>
 800f988:	9a04      	ldr	r2, [sp, #16]
 800f98a:	b9d8      	cbnz	r0, 800f9c4 <_vfiprintf_r+0x110>
 800f98c:	06d1      	lsls	r1, r2, #27
 800f98e:	bf44      	itt	mi
 800f990:	2320      	movmi	r3, #32
 800f992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f996:	0713      	lsls	r3, r2, #28
 800f998:	bf44      	itt	mi
 800f99a:	232b      	movmi	r3, #43	; 0x2b
 800f99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f9a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f9a6:	d015      	beq.n	800f9d4 <_vfiprintf_r+0x120>
 800f9a8:	9a07      	ldr	r2, [sp, #28]
 800f9aa:	4654      	mov	r4, sl
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	f04f 0c0a 	mov.w	ip, #10
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9b8:	3b30      	subs	r3, #48	; 0x30
 800f9ba:	2b09      	cmp	r3, #9
 800f9bc:	d94d      	bls.n	800fa5a <_vfiprintf_r+0x1a6>
 800f9be:	b1b0      	cbz	r0, 800f9ee <_vfiprintf_r+0x13a>
 800f9c0:	9207      	str	r2, [sp, #28]
 800f9c2:	e014      	b.n	800f9ee <_vfiprintf_r+0x13a>
 800f9c4:	eba0 0308 	sub.w	r3, r0, r8
 800f9c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	9304      	str	r3, [sp, #16]
 800f9d0:	46a2      	mov	sl, r4
 800f9d2:	e7d2      	b.n	800f97a <_vfiprintf_r+0xc6>
 800f9d4:	9b03      	ldr	r3, [sp, #12]
 800f9d6:	1d19      	adds	r1, r3, #4
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	9103      	str	r1, [sp, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	bfbb      	ittet	lt
 800f9e0:	425b      	neglt	r3, r3
 800f9e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f9e6:	9307      	strge	r3, [sp, #28]
 800f9e8:	9307      	strlt	r3, [sp, #28]
 800f9ea:	bfb8      	it	lt
 800f9ec:	9204      	strlt	r2, [sp, #16]
 800f9ee:	7823      	ldrb	r3, [r4, #0]
 800f9f0:	2b2e      	cmp	r3, #46	; 0x2e
 800f9f2:	d10c      	bne.n	800fa0e <_vfiprintf_r+0x15a>
 800f9f4:	7863      	ldrb	r3, [r4, #1]
 800f9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9f8:	d134      	bne.n	800fa64 <_vfiprintf_r+0x1b0>
 800f9fa:	9b03      	ldr	r3, [sp, #12]
 800f9fc:	1d1a      	adds	r2, r3, #4
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	9203      	str	r2, [sp, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	bfb8      	it	lt
 800fa06:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa0a:	3402      	adds	r4, #2
 800fa0c:	9305      	str	r3, [sp, #20]
 800fa0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fae4 <_vfiprintf_r+0x230>
 800fa12:	7821      	ldrb	r1, [r4, #0]
 800fa14:	2203      	movs	r2, #3
 800fa16:	4650      	mov	r0, sl
 800fa18:	f7f0 fbda 	bl	80001d0 <memchr>
 800fa1c:	b138      	cbz	r0, 800fa2e <_vfiprintf_r+0x17a>
 800fa1e:	9b04      	ldr	r3, [sp, #16]
 800fa20:	eba0 000a 	sub.w	r0, r0, sl
 800fa24:	2240      	movs	r2, #64	; 0x40
 800fa26:	4082      	lsls	r2, r0
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	3401      	adds	r4, #1
 800fa2c:	9304      	str	r3, [sp, #16]
 800fa2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa32:	4829      	ldr	r0, [pc, #164]	; (800fad8 <_vfiprintf_r+0x224>)
 800fa34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa38:	2206      	movs	r2, #6
 800fa3a:	f7f0 fbc9 	bl	80001d0 <memchr>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d03f      	beq.n	800fac2 <_vfiprintf_r+0x20e>
 800fa42:	4b26      	ldr	r3, [pc, #152]	; (800fadc <_vfiprintf_r+0x228>)
 800fa44:	bb1b      	cbnz	r3, 800fa8e <_vfiprintf_r+0x1da>
 800fa46:	9b03      	ldr	r3, [sp, #12]
 800fa48:	3307      	adds	r3, #7
 800fa4a:	f023 0307 	bic.w	r3, r3, #7
 800fa4e:	3308      	adds	r3, #8
 800fa50:	9303      	str	r3, [sp, #12]
 800fa52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa54:	443b      	add	r3, r7
 800fa56:	9309      	str	r3, [sp, #36]	; 0x24
 800fa58:	e768      	b.n	800f92c <_vfiprintf_r+0x78>
 800fa5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa5e:	460c      	mov	r4, r1
 800fa60:	2001      	movs	r0, #1
 800fa62:	e7a6      	b.n	800f9b2 <_vfiprintf_r+0xfe>
 800fa64:	2300      	movs	r3, #0
 800fa66:	3401      	adds	r4, #1
 800fa68:	9305      	str	r3, [sp, #20]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	f04f 0c0a 	mov.w	ip, #10
 800fa70:	4620      	mov	r0, r4
 800fa72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa76:	3a30      	subs	r2, #48	; 0x30
 800fa78:	2a09      	cmp	r2, #9
 800fa7a:	d903      	bls.n	800fa84 <_vfiprintf_r+0x1d0>
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d0c6      	beq.n	800fa0e <_vfiprintf_r+0x15a>
 800fa80:	9105      	str	r1, [sp, #20]
 800fa82:	e7c4      	b.n	800fa0e <_vfiprintf_r+0x15a>
 800fa84:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa88:	4604      	mov	r4, r0
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e7f0      	b.n	800fa70 <_vfiprintf_r+0x1bc>
 800fa8e:	ab03      	add	r3, sp, #12
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	462a      	mov	r2, r5
 800fa94:	4b12      	ldr	r3, [pc, #72]	; (800fae0 <_vfiprintf_r+0x22c>)
 800fa96:	a904      	add	r1, sp, #16
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f7fd fae5 	bl	800d068 <_printf_float>
 800fa9e:	4607      	mov	r7, r0
 800faa0:	1c78      	adds	r0, r7, #1
 800faa2:	d1d6      	bne.n	800fa52 <_vfiprintf_r+0x19e>
 800faa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faa6:	07d9      	lsls	r1, r3, #31
 800faa8:	d405      	bmi.n	800fab6 <_vfiprintf_r+0x202>
 800faaa:	89ab      	ldrh	r3, [r5, #12]
 800faac:	059a      	lsls	r2, r3, #22
 800faae:	d402      	bmi.n	800fab6 <_vfiprintf_r+0x202>
 800fab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fab2:	f7fe f912 	bl	800dcda <__retarget_lock_release_recursive>
 800fab6:	89ab      	ldrh	r3, [r5, #12]
 800fab8:	065b      	lsls	r3, r3, #25
 800faba:	f53f af1d 	bmi.w	800f8f8 <_vfiprintf_r+0x44>
 800fabe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fac0:	e71c      	b.n	800f8fc <_vfiprintf_r+0x48>
 800fac2:	ab03      	add	r3, sp, #12
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	462a      	mov	r2, r5
 800fac8:	4b05      	ldr	r3, [pc, #20]	; (800fae0 <_vfiprintf_r+0x22c>)
 800faca:	a904      	add	r1, sp, #16
 800facc:	4630      	mov	r0, r6
 800face:	f7fd fd6f 	bl	800d5b0 <_printf_i>
 800fad2:	e7e4      	b.n	800fa9e <_vfiprintf_r+0x1ea>
 800fad4:	0804e2b4 	.word	0x0804e2b4
 800fad8:	0804e2be 	.word	0x0804e2be
 800fadc:	0800d069 	.word	0x0800d069
 800fae0:	0800f88f 	.word	0x0800f88f
 800fae4:	0804e2ba 	.word	0x0804e2ba

0800fae8 <_scanf_chars>:
 800fae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faec:	4615      	mov	r5, r2
 800faee:	688a      	ldr	r2, [r1, #8]
 800faf0:	4680      	mov	r8, r0
 800faf2:	460c      	mov	r4, r1
 800faf4:	b932      	cbnz	r2, 800fb04 <_scanf_chars+0x1c>
 800faf6:	698a      	ldr	r2, [r1, #24]
 800faf8:	2a00      	cmp	r2, #0
 800fafa:	bf0c      	ite	eq
 800fafc:	2201      	moveq	r2, #1
 800fafe:	f04f 32ff 	movne.w	r2, #4294967295
 800fb02:	608a      	str	r2, [r1, #8]
 800fb04:	6822      	ldr	r2, [r4, #0]
 800fb06:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fb98 <_scanf_chars+0xb0>
 800fb0a:	06d1      	lsls	r1, r2, #27
 800fb0c:	bf5f      	itttt	pl
 800fb0e:	681a      	ldrpl	r2, [r3, #0]
 800fb10:	1d11      	addpl	r1, r2, #4
 800fb12:	6019      	strpl	r1, [r3, #0]
 800fb14:	6816      	ldrpl	r6, [r2, #0]
 800fb16:	2700      	movs	r7, #0
 800fb18:	69a0      	ldr	r0, [r4, #24]
 800fb1a:	b188      	cbz	r0, 800fb40 <_scanf_chars+0x58>
 800fb1c:	2801      	cmp	r0, #1
 800fb1e:	d107      	bne.n	800fb30 <_scanf_chars+0x48>
 800fb20:	682a      	ldr	r2, [r5, #0]
 800fb22:	7811      	ldrb	r1, [r2, #0]
 800fb24:	6962      	ldr	r2, [r4, #20]
 800fb26:	5c52      	ldrb	r2, [r2, r1]
 800fb28:	b952      	cbnz	r2, 800fb40 <_scanf_chars+0x58>
 800fb2a:	2f00      	cmp	r7, #0
 800fb2c:	d031      	beq.n	800fb92 <_scanf_chars+0xaa>
 800fb2e:	e022      	b.n	800fb76 <_scanf_chars+0x8e>
 800fb30:	2802      	cmp	r0, #2
 800fb32:	d120      	bne.n	800fb76 <_scanf_chars+0x8e>
 800fb34:	682b      	ldr	r3, [r5, #0]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fb3c:	071b      	lsls	r3, r3, #28
 800fb3e:	d41a      	bmi.n	800fb76 <_scanf_chars+0x8e>
 800fb40:	6823      	ldr	r3, [r4, #0]
 800fb42:	06da      	lsls	r2, r3, #27
 800fb44:	bf5e      	ittt	pl
 800fb46:	682b      	ldrpl	r3, [r5, #0]
 800fb48:	781b      	ldrbpl	r3, [r3, #0]
 800fb4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fb4e:	682a      	ldr	r2, [r5, #0]
 800fb50:	686b      	ldr	r3, [r5, #4]
 800fb52:	3201      	adds	r2, #1
 800fb54:	602a      	str	r2, [r5, #0]
 800fb56:	68a2      	ldr	r2, [r4, #8]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	3a01      	subs	r2, #1
 800fb5c:	606b      	str	r3, [r5, #4]
 800fb5e:	3701      	adds	r7, #1
 800fb60:	60a2      	str	r2, [r4, #8]
 800fb62:	b142      	cbz	r2, 800fb76 <_scanf_chars+0x8e>
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dcd7      	bgt.n	800fb18 <_scanf_chars+0x30>
 800fb68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	4640      	mov	r0, r8
 800fb70:	4798      	blx	r3
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d0d0      	beq.n	800fb18 <_scanf_chars+0x30>
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	f013 0310 	ands.w	r3, r3, #16
 800fb7c:	d105      	bne.n	800fb8a <_scanf_chars+0xa2>
 800fb7e:	68e2      	ldr	r2, [r4, #12]
 800fb80:	3201      	adds	r2, #1
 800fb82:	60e2      	str	r2, [r4, #12]
 800fb84:	69a2      	ldr	r2, [r4, #24]
 800fb86:	b102      	cbz	r2, 800fb8a <_scanf_chars+0xa2>
 800fb88:	7033      	strb	r3, [r6, #0]
 800fb8a:	6923      	ldr	r3, [r4, #16]
 800fb8c:	443b      	add	r3, r7
 800fb8e:	6123      	str	r3, [r4, #16]
 800fb90:	2000      	movs	r0, #0
 800fb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb96:	bf00      	nop
 800fb98:	0804def9 	.word	0x0804def9

0800fb9c <_scanf_i>:
 800fb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	4698      	mov	r8, r3
 800fba2:	4b74      	ldr	r3, [pc, #464]	; (800fd74 <_scanf_i+0x1d8>)
 800fba4:	460c      	mov	r4, r1
 800fba6:	4682      	mov	sl, r0
 800fba8:	4616      	mov	r6, r2
 800fbaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbae:	b087      	sub	sp, #28
 800fbb0:	ab03      	add	r3, sp, #12
 800fbb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbb6:	4b70      	ldr	r3, [pc, #448]	; (800fd78 <_scanf_i+0x1dc>)
 800fbb8:	69a1      	ldr	r1, [r4, #24]
 800fbba:	4a70      	ldr	r2, [pc, #448]	; (800fd7c <_scanf_i+0x1e0>)
 800fbbc:	2903      	cmp	r1, #3
 800fbbe:	bf18      	it	ne
 800fbc0:	461a      	movne	r2, r3
 800fbc2:	68a3      	ldr	r3, [r4, #8]
 800fbc4:	9201      	str	r2, [sp, #4]
 800fbc6:	1e5a      	subs	r2, r3, #1
 800fbc8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fbcc:	bf88      	it	hi
 800fbce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fbd2:	4627      	mov	r7, r4
 800fbd4:	bf82      	ittt	hi
 800fbd6:	eb03 0905 	addhi.w	r9, r3, r5
 800fbda:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fbde:	60a3      	strhi	r3, [r4, #8]
 800fbe0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fbe4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fbe8:	bf98      	it	ls
 800fbea:	f04f 0900 	movls.w	r9, #0
 800fbee:	6023      	str	r3, [r4, #0]
 800fbf0:	463d      	mov	r5, r7
 800fbf2:	f04f 0b00 	mov.w	fp, #0
 800fbf6:	6831      	ldr	r1, [r6, #0]
 800fbf8:	ab03      	add	r3, sp, #12
 800fbfa:	7809      	ldrb	r1, [r1, #0]
 800fbfc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fc00:	2202      	movs	r2, #2
 800fc02:	f7f0 fae5 	bl	80001d0 <memchr>
 800fc06:	b328      	cbz	r0, 800fc54 <_scanf_i+0xb8>
 800fc08:	f1bb 0f01 	cmp.w	fp, #1
 800fc0c:	d159      	bne.n	800fcc2 <_scanf_i+0x126>
 800fc0e:	6862      	ldr	r2, [r4, #4]
 800fc10:	b92a      	cbnz	r2, 800fc1e <_scanf_i+0x82>
 800fc12:	6822      	ldr	r2, [r4, #0]
 800fc14:	2308      	movs	r3, #8
 800fc16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc1a:	6063      	str	r3, [r4, #4]
 800fc1c:	6022      	str	r2, [r4, #0]
 800fc1e:	6822      	ldr	r2, [r4, #0]
 800fc20:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fc24:	6022      	str	r2, [r4, #0]
 800fc26:	68a2      	ldr	r2, [r4, #8]
 800fc28:	1e51      	subs	r1, r2, #1
 800fc2a:	60a1      	str	r1, [r4, #8]
 800fc2c:	b192      	cbz	r2, 800fc54 <_scanf_i+0xb8>
 800fc2e:	6832      	ldr	r2, [r6, #0]
 800fc30:	1c51      	adds	r1, r2, #1
 800fc32:	6031      	str	r1, [r6, #0]
 800fc34:	7812      	ldrb	r2, [r2, #0]
 800fc36:	f805 2b01 	strb.w	r2, [r5], #1
 800fc3a:	6872      	ldr	r2, [r6, #4]
 800fc3c:	3a01      	subs	r2, #1
 800fc3e:	2a00      	cmp	r2, #0
 800fc40:	6072      	str	r2, [r6, #4]
 800fc42:	dc07      	bgt.n	800fc54 <_scanf_i+0xb8>
 800fc44:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4650      	mov	r0, sl
 800fc4c:	4790      	blx	r2
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f040 8085 	bne.w	800fd5e <_scanf_i+0x1c2>
 800fc54:	f10b 0b01 	add.w	fp, fp, #1
 800fc58:	f1bb 0f03 	cmp.w	fp, #3
 800fc5c:	d1cb      	bne.n	800fbf6 <_scanf_i+0x5a>
 800fc5e:	6863      	ldr	r3, [r4, #4]
 800fc60:	b90b      	cbnz	r3, 800fc66 <_scanf_i+0xca>
 800fc62:	230a      	movs	r3, #10
 800fc64:	6063      	str	r3, [r4, #4]
 800fc66:	6863      	ldr	r3, [r4, #4]
 800fc68:	4945      	ldr	r1, [pc, #276]	; (800fd80 <_scanf_i+0x1e4>)
 800fc6a:	6960      	ldr	r0, [r4, #20]
 800fc6c:	1ac9      	subs	r1, r1, r3
 800fc6e:	f000 f949 	bl	800ff04 <__sccl>
 800fc72:	f04f 0b00 	mov.w	fp, #0
 800fc76:	68a3      	ldr	r3, [r4, #8]
 800fc78:	6822      	ldr	r2, [r4, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d03d      	beq.n	800fcfa <_scanf_i+0x15e>
 800fc7e:	6831      	ldr	r1, [r6, #0]
 800fc80:	6960      	ldr	r0, [r4, #20]
 800fc82:	f891 c000 	ldrb.w	ip, [r1]
 800fc86:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d035      	beq.n	800fcfa <_scanf_i+0x15e>
 800fc8e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fc92:	d124      	bne.n	800fcde <_scanf_i+0x142>
 800fc94:	0510      	lsls	r0, r2, #20
 800fc96:	d522      	bpl.n	800fcde <_scanf_i+0x142>
 800fc98:	f10b 0b01 	add.w	fp, fp, #1
 800fc9c:	f1b9 0f00 	cmp.w	r9, #0
 800fca0:	d003      	beq.n	800fcaa <_scanf_i+0x10e>
 800fca2:	3301      	adds	r3, #1
 800fca4:	f109 39ff 	add.w	r9, r9, #4294967295
 800fca8:	60a3      	str	r3, [r4, #8]
 800fcaa:	6873      	ldr	r3, [r6, #4]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	6073      	str	r3, [r6, #4]
 800fcb2:	dd1b      	ble.n	800fcec <_scanf_i+0x150>
 800fcb4:	6833      	ldr	r3, [r6, #0]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	6033      	str	r3, [r6, #0]
 800fcba:	68a3      	ldr	r3, [r4, #8]
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	60a3      	str	r3, [r4, #8]
 800fcc0:	e7d9      	b.n	800fc76 <_scanf_i+0xda>
 800fcc2:	f1bb 0f02 	cmp.w	fp, #2
 800fcc6:	d1ae      	bne.n	800fc26 <_scanf_i+0x8a>
 800fcc8:	6822      	ldr	r2, [r4, #0]
 800fcca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fcce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fcd2:	d1bf      	bne.n	800fc54 <_scanf_i+0xb8>
 800fcd4:	2310      	movs	r3, #16
 800fcd6:	6063      	str	r3, [r4, #4]
 800fcd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcdc:	e7a2      	b.n	800fc24 <_scanf_i+0x88>
 800fcde:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fce2:	6022      	str	r2, [r4, #0]
 800fce4:	780b      	ldrb	r3, [r1, #0]
 800fce6:	f805 3b01 	strb.w	r3, [r5], #1
 800fcea:	e7de      	b.n	800fcaa <_scanf_i+0x10e>
 800fcec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fcf0:	4631      	mov	r1, r6
 800fcf2:	4650      	mov	r0, sl
 800fcf4:	4798      	blx	r3
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d0df      	beq.n	800fcba <_scanf_i+0x11e>
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	05d9      	lsls	r1, r3, #23
 800fcfe:	d50d      	bpl.n	800fd1c <_scanf_i+0x180>
 800fd00:	42bd      	cmp	r5, r7
 800fd02:	d909      	bls.n	800fd18 <_scanf_i+0x17c>
 800fd04:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fd08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd0c:	4632      	mov	r2, r6
 800fd0e:	4650      	mov	r0, sl
 800fd10:	4798      	blx	r3
 800fd12:	f105 39ff 	add.w	r9, r5, #4294967295
 800fd16:	464d      	mov	r5, r9
 800fd18:	42bd      	cmp	r5, r7
 800fd1a:	d028      	beq.n	800fd6e <_scanf_i+0x1d2>
 800fd1c:	6822      	ldr	r2, [r4, #0]
 800fd1e:	f012 0210 	ands.w	r2, r2, #16
 800fd22:	d113      	bne.n	800fd4c <_scanf_i+0x1b0>
 800fd24:	702a      	strb	r2, [r5, #0]
 800fd26:	6863      	ldr	r3, [r4, #4]
 800fd28:	9e01      	ldr	r6, [sp, #4]
 800fd2a:	4639      	mov	r1, r7
 800fd2c:	4650      	mov	r0, sl
 800fd2e:	47b0      	blx	r6
 800fd30:	f8d8 3000 	ldr.w	r3, [r8]
 800fd34:	6821      	ldr	r1, [r4, #0]
 800fd36:	1d1a      	adds	r2, r3, #4
 800fd38:	f8c8 2000 	str.w	r2, [r8]
 800fd3c:	f011 0f20 	tst.w	r1, #32
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	d00f      	beq.n	800fd64 <_scanf_i+0x1c8>
 800fd44:	6018      	str	r0, [r3, #0]
 800fd46:	68e3      	ldr	r3, [r4, #12]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	60e3      	str	r3, [r4, #12]
 800fd4c:	6923      	ldr	r3, [r4, #16]
 800fd4e:	1bed      	subs	r5, r5, r7
 800fd50:	445d      	add	r5, fp
 800fd52:	442b      	add	r3, r5
 800fd54:	6123      	str	r3, [r4, #16]
 800fd56:	2000      	movs	r0, #0
 800fd58:	b007      	add	sp, #28
 800fd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5e:	f04f 0b00 	mov.w	fp, #0
 800fd62:	e7ca      	b.n	800fcfa <_scanf_i+0x15e>
 800fd64:	07ca      	lsls	r2, r1, #31
 800fd66:	bf4c      	ite	mi
 800fd68:	8018      	strhmi	r0, [r3, #0]
 800fd6a:	6018      	strpl	r0, [r3, #0]
 800fd6c:	e7eb      	b.n	800fd46 <_scanf_i+0x1aa>
 800fd6e:	2001      	movs	r0, #1
 800fd70:	e7f2      	b.n	800fd58 <_scanf_i+0x1bc>
 800fd72:	bf00      	nop
 800fd74:	0801099c 	.word	0x0801099c
 800fd78:	080102c5 	.word	0x080102c5
 800fd7c:	0800cf11 	.word	0x0800cf11
 800fd80:	0804e2d5 	.word	0x0804e2d5

0800fd84 <__sflush_r>:
 800fd84:	898a      	ldrh	r2, [r1, #12]
 800fd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	0710      	lsls	r0, r2, #28
 800fd8e:	460c      	mov	r4, r1
 800fd90:	d458      	bmi.n	800fe44 <__sflush_r+0xc0>
 800fd92:	684b      	ldr	r3, [r1, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	dc05      	bgt.n	800fda4 <__sflush_r+0x20>
 800fd98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	dc02      	bgt.n	800fda4 <__sflush_r+0x20>
 800fd9e:	2000      	movs	r0, #0
 800fda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fda6:	2e00      	cmp	r6, #0
 800fda8:	d0f9      	beq.n	800fd9e <__sflush_r+0x1a>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdb0:	682f      	ldr	r7, [r5, #0]
 800fdb2:	6a21      	ldr	r1, [r4, #32]
 800fdb4:	602b      	str	r3, [r5, #0]
 800fdb6:	d032      	beq.n	800fe1e <__sflush_r+0x9a>
 800fdb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	075a      	lsls	r2, r3, #29
 800fdbe:	d505      	bpl.n	800fdcc <__sflush_r+0x48>
 800fdc0:	6863      	ldr	r3, [r4, #4]
 800fdc2:	1ac0      	subs	r0, r0, r3
 800fdc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdc6:	b10b      	cbz	r3, 800fdcc <__sflush_r+0x48>
 800fdc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdca:	1ac0      	subs	r0, r0, r3
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4602      	mov	r2, r0
 800fdd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdd2:	6a21      	ldr	r1, [r4, #32]
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	47b0      	blx	r6
 800fdd8:	1c43      	adds	r3, r0, #1
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	d106      	bne.n	800fdec <__sflush_r+0x68>
 800fdde:	6829      	ldr	r1, [r5, #0]
 800fde0:	291d      	cmp	r1, #29
 800fde2:	d82b      	bhi.n	800fe3c <__sflush_r+0xb8>
 800fde4:	4a29      	ldr	r2, [pc, #164]	; (800fe8c <__sflush_r+0x108>)
 800fde6:	410a      	asrs	r2, r1
 800fde8:	07d6      	lsls	r6, r2, #31
 800fdea:	d427      	bmi.n	800fe3c <__sflush_r+0xb8>
 800fdec:	2200      	movs	r2, #0
 800fdee:	6062      	str	r2, [r4, #4]
 800fdf0:	04d9      	lsls	r1, r3, #19
 800fdf2:	6922      	ldr	r2, [r4, #16]
 800fdf4:	6022      	str	r2, [r4, #0]
 800fdf6:	d504      	bpl.n	800fe02 <__sflush_r+0x7e>
 800fdf8:	1c42      	adds	r2, r0, #1
 800fdfa:	d101      	bne.n	800fe00 <__sflush_r+0x7c>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b903      	cbnz	r3, 800fe02 <__sflush_r+0x7e>
 800fe00:	6560      	str	r0, [r4, #84]	; 0x54
 800fe02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe04:	602f      	str	r7, [r5, #0]
 800fe06:	2900      	cmp	r1, #0
 800fe08:	d0c9      	beq.n	800fd9e <__sflush_r+0x1a>
 800fe0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe0e:	4299      	cmp	r1, r3
 800fe10:	d002      	beq.n	800fe18 <__sflush_r+0x94>
 800fe12:	4628      	mov	r0, r5
 800fe14:	f7fe fe12 	bl	800ea3c <_free_r>
 800fe18:	2000      	movs	r0, #0
 800fe1a:	6360      	str	r0, [r4, #52]	; 0x34
 800fe1c:	e7c0      	b.n	800fda0 <__sflush_r+0x1c>
 800fe1e:	2301      	movs	r3, #1
 800fe20:	4628      	mov	r0, r5
 800fe22:	47b0      	blx	r6
 800fe24:	1c41      	adds	r1, r0, #1
 800fe26:	d1c8      	bne.n	800fdba <__sflush_r+0x36>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0c5      	beq.n	800fdba <__sflush_r+0x36>
 800fe2e:	2b1d      	cmp	r3, #29
 800fe30:	d001      	beq.n	800fe36 <__sflush_r+0xb2>
 800fe32:	2b16      	cmp	r3, #22
 800fe34:	d101      	bne.n	800fe3a <__sflush_r+0xb6>
 800fe36:	602f      	str	r7, [r5, #0]
 800fe38:	e7b1      	b.n	800fd9e <__sflush_r+0x1a>
 800fe3a:	89a3      	ldrh	r3, [r4, #12]
 800fe3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe40:	81a3      	strh	r3, [r4, #12]
 800fe42:	e7ad      	b.n	800fda0 <__sflush_r+0x1c>
 800fe44:	690f      	ldr	r7, [r1, #16]
 800fe46:	2f00      	cmp	r7, #0
 800fe48:	d0a9      	beq.n	800fd9e <__sflush_r+0x1a>
 800fe4a:	0793      	lsls	r3, r2, #30
 800fe4c:	680e      	ldr	r6, [r1, #0]
 800fe4e:	bf08      	it	eq
 800fe50:	694b      	ldreq	r3, [r1, #20]
 800fe52:	600f      	str	r7, [r1, #0]
 800fe54:	bf18      	it	ne
 800fe56:	2300      	movne	r3, #0
 800fe58:	eba6 0807 	sub.w	r8, r6, r7
 800fe5c:	608b      	str	r3, [r1, #8]
 800fe5e:	f1b8 0f00 	cmp.w	r8, #0
 800fe62:	dd9c      	ble.n	800fd9e <__sflush_r+0x1a>
 800fe64:	6a21      	ldr	r1, [r4, #32]
 800fe66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe68:	4643      	mov	r3, r8
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	47b0      	blx	r6
 800fe70:	2800      	cmp	r0, #0
 800fe72:	dc06      	bgt.n	800fe82 <__sflush_r+0xfe>
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe80:	e78e      	b.n	800fda0 <__sflush_r+0x1c>
 800fe82:	4407      	add	r7, r0
 800fe84:	eba8 0800 	sub.w	r8, r8, r0
 800fe88:	e7e9      	b.n	800fe5e <__sflush_r+0xda>
 800fe8a:	bf00      	nop
 800fe8c:	dfbffffe 	.word	0xdfbffffe

0800fe90 <_fflush_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	690b      	ldr	r3, [r1, #16]
 800fe94:	4605      	mov	r5, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	b913      	cbnz	r3, 800fea0 <_fflush_r+0x10>
 800fe9a:	2500      	movs	r5, #0
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	b118      	cbz	r0, 800feaa <_fflush_r+0x1a>
 800fea2:	6a03      	ldr	r3, [r0, #32]
 800fea4:	b90b      	cbnz	r3, 800feaa <_fflush_r+0x1a>
 800fea6:	f7fd fd1f 	bl	800d8e8 <__sinit>
 800feaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0f3      	beq.n	800fe9a <_fflush_r+0xa>
 800feb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800feb4:	07d0      	lsls	r0, r2, #31
 800feb6:	d404      	bmi.n	800fec2 <_fflush_r+0x32>
 800feb8:	0599      	lsls	r1, r3, #22
 800feba:	d402      	bmi.n	800fec2 <_fflush_r+0x32>
 800febc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800febe:	f7fd ff0b 	bl	800dcd8 <__retarget_lock_acquire_recursive>
 800fec2:	4628      	mov	r0, r5
 800fec4:	4621      	mov	r1, r4
 800fec6:	f7ff ff5d 	bl	800fd84 <__sflush_r>
 800feca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fecc:	07da      	lsls	r2, r3, #31
 800fece:	4605      	mov	r5, r0
 800fed0:	d4e4      	bmi.n	800fe9c <_fflush_r+0xc>
 800fed2:	89a3      	ldrh	r3, [r4, #12]
 800fed4:	059b      	lsls	r3, r3, #22
 800fed6:	d4e1      	bmi.n	800fe9c <_fflush_r+0xc>
 800fed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feda:	f7fd fefe 	bl	800dcda <__retarget_lock_release_recursive>
 800fede:	e7dd      	b.n	800fe9c <_fflush_r+0xc>

0800fee0 <fiprintf>:
 800fee0:	b40e      	push	{r1, r2, r3}
 800fee2:	b503      	push	{r0, r1, lr}
 800fee4:	4601      	mov	r1, r0
 800fee6:	ab03      	add	r3, sp, #12
 800fee8:	4805      	ldr	r0, [pc, #20]	; (800ff00 <fiprintf+0x20>)
 800feea:	f853 2b04 	ldr.w	r2, [r3], #4
 800feee:	6800      	ldr	r0, [r0, #0]
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	f7ff fcdf 	bl	800f8b4 <_vfiprintf_r>
 800fef6:	b002      	add	sp, #8
 800fef8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fefc:	b003      	add	sp, #12
 800fefe:	4770      	bx	lr
 800ff00:	200002e4 	.word	0x200002e4

0800ff04 <__sccl>:
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	780b      	ldrb	r3, [r1, #0]
 800ff08:	4604      	mov	r4, r0
 800ff0a:	2b5e      	cmp	r3, #94	; 0x5e
 800ff0c:	bf0b      	itete	eq
 800ff0e:	784b      	ldrbeq	r3, [r1, #1]
 800ff10:	1c4a      	addne	r2, r1, #1
 800ff12:	1c8a      	addeq	r2, r1, #2
 800ff14:	2100      	movne	r1, #0
 800ff16:	bf08      	it	eq
 800ff18:	2101      	moveq	r1, #1
 800ff1a:	3801      	subs	r0, #1
 800ff1c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ff20:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ff24:	42a8      	cmp	r0, r5
 800ff26:	d1fb      	bne.n	800ff20 <__sccl+0x1c>
 800ff28:	b90b      	cbnz	r3, 800ff2e <__sccl+0x2a>
 800ff2a:	1e50      	subs	r0, r2, #1
 800ff2c:	bd70      	pop	{r4, r5, r6, pc}
 800ff2e:	f081 0101 	eor.w	r1, r1, #1
 800ff32:	54e1      	strb	r1, [r4, r3]
 800ff34:	4610      	mov	r0, r2
 800ff36:	4602      	mov	r2, r0
 800ff38:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ff3c:	2d2d      	cmp	r5, #45	; 0x2d
 800ff3e:	d005      	beq.n	800ff4c <__sccl+0x48>
 800ff40:	2d5d      	cmp	r5, #93	; 0x5d
 800ff42:	d016      	beq.n	800ff72 <__sccl+0x6e>
 800ff44:	2d00      	cmp	r5, #0
 800ff46:	d0f1      	beq.n	800ff2c <__sccl+0x28>
 800ff48:	462b      	mov	r3, r5
 800ff4a:	e7f2      	b.n	800ff32 <__sccl+0x2e>
 800ff4c:	7846      	ldrb	r6, [r0, #1]
 800ff4e:	2e5d      	cmp	r6, #93	; 0x5d
 800ff50:	d0fa      	beq.n	800ff48 <__sccl+0x44>
 800ff52:	42b3      	cmp	r3, r6
 800ff54:	dcf8      	bgt.n	800ff48 <__sccl+0x44>
 800ff56:	3002      	adds	r0, #2
 800ff58:	461a      	mov	r2, r3
 800ff5a:	3201      	adds	r2, #1
 800ff5c:	4296      	cmp	r6, r2
 800ff5e:	54a1      	strb	r1, [r4, r2]
 800ff60:	dcfb      	bgt.n	800ff5a <__sccl+0x56>
 800ff62:	1af2      	subs	r2, r6, r3
 800ff64:	3a01      	subs	r2, #1
 800ff66:	1c5d      	adds	r5, r3, #1
 800ff68:	42b3      	cmp	r3, r6
 800ff6a:	bfa8      	it	ge
 800ff6c:	2200      	movge	r2, #0
 800ff6e:	18ab      	adds	r3, r5, r2
 800ff70:	e7e1      	b.n	800ff36 <__sccl+0x32>
 800ff72:	4610      	mov	r0, r2
 800ff74:	e7da      	b.n	800ff2c <__sccl+0x28>

0800ff76 <__submore>:
 800ff76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7a:	460c      	mov	r4, r1
 800ff7c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ff7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff82:	4299      	cmp	r1, r3
 800ff84:	d11d      	bne.n	800ffc2 <__submore+0x4c>
 800ff86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ff8a:	f7fc feb3 	bl	800ccf4 <_malloc_r>
 800ff8e:	b918      	cbnz	r0, 800ff98 <__submore+0x22>
 800ff90:	f04f 30ff 	mov.w	r0, #4294967295
 800ff94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff9c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff9e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ffa2:	6360      	str	r0, [r4, #52]	; 0x34
 800ffa4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ffa8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ffac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ffb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ffb4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ffb8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ffbc:	6020      	str	r0, [r4, #0]
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e7e8      	b.n	800ff94 <__submore+0x1e>
 800ffc2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ffc4:	0077      	lsls	r7, r6, #1
 800ffc6:	463a      	mov	r2, r7
 800ffc8:	f000 f8db 	bl	8010182 <_realloc_r>
 800ffcc:	4605      	mov	r5, r0
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0de      	beq.n	800ff90 <__submore+0x1a>
 800ffd2:	eb00 0806 	add.w	r8, r0, r6
 800ffd6:	4601      	mov	r1, r0
 800ffd8:	4632      	mov	r2, r6
 800ffda:	4640      	mov	r0, r8
 800ffdc:	f7fd fe86 	bl	800dcec <memcpy>
 800ffe0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ffe4:	f8c4 8000 	str.w	r8, [r4]
 800ffe8:	e7e9      	b.n	800ffbe <__submore+0x48>

0800ffea <__swbuf_r>:
 800ffea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffec:	460e      	mov	r6, r1
 800ffee:	4614      	mov	r4, r2
 800fff0:	4605      	mov	r5, r0
 800fff2:	b118      	cbz	r0, 800fffc <__swbuf_r+0x12>
 800fff4:	6a03      	ldr	r3, [r0, #32]
 800fff6:	b90b      	cbnz	r3, 800fffc <__swbuf_r+0x12>
 800fff8:	f7fd fc76 	bl	800d8e8 <__sinit>
 800fffc:	69a3      	ldr	r3, [r4, #24]
 800fffe:	60a3      	str	r3, [r4, #8]
 8010000:	89a3      	ldrh	r3, [r4, #12]
 8010002:	071a      	lsls	r2, r3, #28
 8010004:	d525      	bpl.n	8010052 <__swbuf_r+0x68>
 8010006:	6923      	ldr	r3, [r4, #16]
 8010008:	b31b      	cbz	r3, 8010052 <__swbuf_r+0x68>
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	6922      	ldr	r2, [r4, #16]
 801000e:	1a98      	subs	r0, r3, r2
 8010010:	6963      	ldr	r3, [r4, #20]
 8010012:	b2f6      	uxtb	r6, r6
 8010014:	4283      	cmp	r3, r0
 8010016:	4637      	mov	r7, r6
 8010018:	dc04      	bgt.n	8010024 <__swbuf_r+0x3a>
 801001a:	4621      	mov	r1, r4
 801001c:	4628      	mov	r0, r5
 801001e:	f7ff ff37 	bl	800fe90 <_fflush_r>
 8010022:	b9e0      	cbnz	r0, 801005e <__swbuf_r+0x74>
 8010024:	68a3      	ldr	r3, [r4, #8]
 8010026:	3b01      	subs	r3, #1
 8010028:	60a3      	str	r3, [r4, #8]
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	1c5a      	adds	r2, r3, #1
 801002e:	6022      	str	r2, [r4, #0]
 8010030:	701e      	strb	r6, [r3, #0]
 8010032:	6962      	ldr	r2, [r4, #20]
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	429a      	cmp	r2, r3
 8010038:	d004      	beq.n	8010044 <__swbuf_r+0x5a>
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	07db      	lsls	r3, r3, #31
 801003e:	d506      	bpl.n	801004e <__swbuf_r+0x64>
 8010040:	2e0a      	cmp	r6, #10
 8010042:	d104      	bne.n	801004e <__swbuf_r+0x64>
 8010044:	4621      	mov	r1, r4
 8010046:	4628      	mov	r0, r5
 8010048:	f7ff ff22 	bl	800fe90 <_fflush_r>
 801004c:	b938      	cbnz	r0, 801005e <__swbuf_r+0x74>
 801004e:	4638      	mov	r0, r7
 8010050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010052:	4621      	mov	r1, r4
 8010054:	4628      	mov	r0, r5
 8010056:	f000 f805 	bl	8010064 <__swsetup_r>
 801005a:	2800      	cmp	r0, #0
 801005c:	d0d5      	beq.n	801000a <__swbuf_r+0x20>
 801005e:	f04f 37ff 	mov.w	r7, #4294967295
 8010062:	e7f4      	b.n	801004e <__swbuf_r+0x64>

08010064 <__swsetup_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4b2a      	ldr	r3, [pc, #168]	; (8010110 <__swsetup_r+0xac>)
 8010068:	4605      	mov	r5, r0
 801006a:	6818      	ldr	r0, [r3, #0]
 801006c:	460c      	mov	r4, r1
 801006e:	b118      	cbz	r0, 8010078 <__swsetup_r+0x14>
 8010070:	6a03      	ldr	r3, [r0, #32]
 8010072:	b90b      	cbnz	r3, 8010078 <__swsetup_r+0x14>
 8010074:	f7fd fc38 	bl	800d8e8 <__sinit>
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801007e:	0718      	lsls	r0, r3, #28
 8010080:	d422      	bmi.n	80100c8 <__swsetup_r+0x64>
 8010082:	06d9      	lsls	r1, r3, #27
 8010084:	d407      	bmi.n	8010096 <__swsetup_r+0x32>
 8010086:	2309      	movs	r3, #9
 8010088:	602b      	str	r3, [r5, #0]
 801008a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801008e:	81a3      	strh	r3, [r4, #12]
 8010090:	f04f 30ff 	mov.w	r0, #4294967295
 8010094:	e034      	b.n	8010100 <__swsetup_r+0x9c>
 8010096:	0758      	lsls	r0, r3, #29
 8010098:	d512      	bpl.n	80100c0 <__swsetup_r+0x5c>
 801009a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801009c:	b141      	cbz	r1, 80100b0 <__swsetup_r+0x4c>
 801009e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100a2:	4299      	cmp	r1, r3
 80100a4:	d002      	beq.n	80100ac <__swsetup_r+0x48>
 80100a6:	4628      	mov	r0, r5
 80100a8:	f7fe fcc8 	bl	800ea3c <_free_r>
 80100ac:	2300      	movs	r3, #0
 80100ae:	6363      	str	r3, [r4, #52]	; 0x34
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100b6:	81a3      	strh	r3, [r4, #12]
 80100b8:	2300      	movs	r3, #0
 80100ba:	6063      	str	r3, [r4, #4]
 80100bc:	6923      	ldr	r3, [r4, #16]
 80100be:	6023      	str	r3, [r4, #0]
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	f043 0308 	orr.w	r3, r3, #8
 80100c6:	81a3      	strh	r3, [r4, #12]
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	b94b      	cbnz	r3, 80100e0 <__swsetup_r+0x7c>
 80100cc:	89a3      	ldrh	r3, [r4, #12]
 80100ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100d6:	d003      	beq.n	80100e0 <__swsetup_r+0x7c>
 80100d8:	4621      	mov	r1, r4
 80100da:	4628      	mov	r0, r5
 80100dc:	f000 f91a 	bl	8010314 <__smakebuf_r>
 80100e0:	89a0      	ldrh	r0, [r4, #12]
 80100e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100e6:	f010 0301 	ands.w	r3, r0, #1
 80100ea:	d00a      	beq.n	8010102 <__swsetup_r+0x9e>
 80100ec:	2300      	movs	r3, #0
 80100ee:	60a3      	str	r3, [r4, #8]
 80100f0:	6963      	ldr	r3, [r4, #20]
 80100f2:	425b      	negs	r3, r3
 80100f4:	61a3      	str	r3, [r4, #24]
 80100f6:	6923      	ldr	r3, [r4, #16]
 80100f8:	b943      	cbnz	r3, 801010c <__swsetup_r+0xa8>
 80100fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80100fe:	d1c4      	bne.n	801008a <__swsetup_r+0x26>
 8010100:	bd38      	pop	{r3, r4, r5, pc}
 8010102:	0781      	lsls	r1, r0, #30
 8010104:	bf58      	it	pl
 8010106:	6963      	ldrpl	r3, [r4, #20]
 8010108:	60a3      	str	r3, [r4, #8]
 801010a:	e7f4      	b.n	80100f6 <__swsetup_r+0x92>
 801010c:	2000      	movs	r0, #0
 801010e:	e7f7      	b.n	8010100 <__swsetup_r+0x9c>
 8010110:	200002e4 	.word	0x200002e4

08010114 <memmove>:
 8010114:	4288      	cmp	r0, r1
 8010116:	b510      	push	{r4, lr}
 8010118:	eb01 0402 	add.w	r4, r1, r2
 801011c:	d902      	bls.n	8010124 <memmove+0x10>
 801011e:	4284      	cmp	r4, r0
 8010120:	4623      	mov	r3, r4
 8010122:	d807      	bhi.n	8010134 <memmove+0x20>
 8010124:	1e43      	subs	r3, r0, #1
 8010126:	42a1      	cmp	r1, r4
 8010128:	d008      	beq.n	801013c <memmove+0x28>
 801012a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801012e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010132:	e7f8      	b.n	8010126 <memmove+0x12>
 8010134:	4402      	add	r2, r0
 8010136:	4601      	mov	r1, r0
 8010138:	428a      	cmp	r2, r1
 801013a:	d100      	bne.n	801013e <memmove+0x2a>
 801013c:	bd10      	pop	{r4, pc}
 801013e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010146:	e7f7      	b.n	8010138 <memmove+0x24>

08010148 <abort>:
 8010148:	b508      	push	{r3, lr}
 801014a:	2006      	movs	r0, #6
 801014c:	f000 f946 	bl	80103dc <raise>
 8010150:	2001      	movs	r0, #1
 8010152:	f7f1 fbe3 	bl	800191c <_exit>

08010156 <_calloc_r>:
 8010156:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010158:	fba1 2402 	umull	r2, r4, r1, r2
 801015c:	b94c      	cbnz	r4, 8010172 <_calloc_r+0x1c>
 801015e:	4611      	mov	r1, r2
 8010160:	9201      	str	r2, [sp, #4]
 8010162:	f7fc fdc7 	bl	800ccf4 <_malloc_r>
 8010166:	9a01      	ldr	r2, [sp, #4]
 8010168:	4605      	mov	r5, r0
 801016a:	b930      	cbnz	r0, 801017a <_calloc_r+0x24>
 801016c:	4628      	mov	r0, r5
 801016e:	b003      	add	sp, #12
 8010170:	bd30      	pop	{r4, r5, pc}
 8010172:	220c      	movs	r2, #12
 8010174:	6002      	str	r2, [r0, #0]
 8010176:	2500      	movs	r5, #0
 8010178:	e7f8      	b.n	801016c <_calloc_r+0x16>
 801017a:	4621      	mov	r1, r4
 801017c:	f7fd fc7b 	bl	800da76 <memset>
 8010180:	e7f4      	b.n	801016c <_calloc_r+0x16>

08010182 <_realloc_r>:
 8010182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010186:	4680      	mov	r8, r0
 8010188:	4614      	mov	r4, r2
 801018a:	460e      	mov	r6, r1
 801018c:	b921      	cbnz	r1, 8010198 <_realloc_r+0x16>
 801018e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010192:	4611      	mov	r1, r2
 8010194:	f7fc bdae 	b.w	800ccf4 <_malloc_r>
 8010198:	b92a      	cbnz	r2, 80101a6 <_realloc_r+0x24>
 801019a:	f7fe fc4f 	bl	800ea3c <_free_r>
 801019e:	4625      	mov	r5, r4
 80101a0:	4628      	mov	r0, r5
 80101a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a6:	f000 f957 	bl	8010458 <_malloc_usable_size_r>
 80101aa:	4284      	cmp	r4, r0
 80101ac:	4607      	mov	r7, r0
 80101ae:	d802      	bhi.n	80101b6 <_realloc_r+0x34>
 80101b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101b4:	d812      	bhi.n	80101dc <_realloc_r+0x5a>
 80101b6:	4621      	mov	r1, r4
 80101b8:	4640      	mov	r0, r8
 80101ba:	f7fc fd9b 	bl	800ccf4 <_malloc_r>
 80101be:	4605      	mov	r5, r0
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d0ed      	beq.n	80101a0 <_realloc_r+0x1e>
 80101c4:	42bc      	cmp	r4, r7
 80101c6:	4622      	mov	r2, r4
 80101c8:	4631      	mov	r1, r6
 80101ca:	bf28      	it	cs
 80101cc:	463a      	movcs	r2, r7
 80101ce:	f7fd fd8d 	bl	800dcec <memcpy>
 80101d2:	4631      	mov	r1, r6
 80101d4:	4640      	mov	r0, r8
 80101d6:	f7fe fc31 	bl	800ea3c <_free_r>
 80101da:	e7e1      	b.n	80101a0 <_realloc_r+0x1e>
 80101dc:	4635      	mov	r5, r6
 80101de:	e7df      	b.n	80101a0 <_realloc_r+0x1e>

080101e0 <_strtoul_l.constprop.0>:
 80101e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101e4:	4f36      	ldr	r7, [pc, #216]	; (80102c0 <_strtoul_l.constprop.0+0xe0>)
 80101e6:	4686      	mov	lr, r0
 80101e8:	460d      	mov	r5, r1
 80101ea:	4628      	mov	r0, r5
 80101ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101f0:	5d3e      	ldrb	r6, [r7, r4]
 80101f2:	f016 0608 	ands.w	r6, r6, #8
 80101f6:	d1f8      	bne.n	80101ea <_strtoul_l.constprop.0+0xa>
 80101f8:	2c2d      	cmp	r4, #45	; 0x2d
 80101fa:	d130      	bne.n	801025e <_strtoul_l.constprop.0+0x7e>
 80101fc:	782c      	ldrb	r4, [r5, #0]
 80101fe:	2601      	movs	r6, #1
 8010200:	1c85      	adds	r5, r0, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d057      	beq.n	80102b6 <_strtoul_l.constprop.0+0xd6>
 8010206:	2b10      	cmp	r3, #16
 8010208:	d109      	bne.n	801021e <_strtoul_l.constprop.0+0x3e>
 801020a:	2c30      	cmp	r4, #48	; 0x30
 801020c:	d107      	bne.n	801021e <_strtoul_l.constprop.0+0x3e>
 801020e:	7828      	ldrb	r0, [r5, #0]
 8010210:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010214:	2858      	cmp	r0, #88	; 0x58
 8010216:	d149      	bne.n	80102ac <_strtoul_l.constprop.0+0xcc>
 8010218:	786c      	ldrb	r4, [r5, #1]
 801021a:	2310      	movs	r3, #16
 801021c:	3502      	adds	r5, #2
 801021e:	f04f 38ff 	mov.w	r8, #4294967295
 8010222:	2700      	movs	r7, #0
 8010224:	fbb8 f8f3 	udiv	r8, r8, r3
 8010228:	fb03 f908 	mul.w	r9, r3, r8
 801022c:	ea6f 0909 	mvn.w	r9, r9
 8010230:	4638      	mov	r0, r7
 8010232:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010236:	f1bc 0f09 	cmp.w	ip, #9
 801023a:	d815      	bhi.n	8010268 <_strtoul_l.constprop.0+0x88>
 801023c:	4664      	mov	r4, ip
 801023e:	42a3      	cmp	r3, r4
 8010240:	dd23      	ble.n	801028a <_strtoul_l.constprop.0+0xaa>
 8010242:	f1b7 3fff 	cmp.w	r7, #4294967295
 8010246:	d007      	beq.n	8010258 <_strtoul_l.constprop.0+0x78>
 8010248:	4580      	cmp	r8, r0
 801024a:	d31b      	bcc.n	8010284 <_strtoul_l.constprop.0+0xa4>
 801024c:	d101      	bne.n	8010252 <_strtoul_l.constprop.0+0x72>
 801024e:	45a1      	cmp	r9, r4
 8010250:	db18      	blt.n	8010284 <_strtoul_l.constprop.0+0xa4>
 8010252:	fb00 4003 	mla	r0, r0, r3, r4
 8010256:	2701      	movs	r7, #1
 8010258:	f815 4b01 	ldrb.w	r4, [r5], #1
 801025c:	e7e9      	b.n	8010232 <_strtoul_l.constprop.0+0x52>
 801025e:	2c2b      	cmp	r4, #43	; 0x2b
 8010260:	bf04      	itt	eq
 8010262:	782c      	ldrbeq	r4, [r5, #0]
 8010264:	1c85      	addeq	r5, r0, #2
 8010266:	e7cc      	b.n	8010202 <_strtoul_l.constprop.0+0x22>
 8010268:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801026c:	f1bc 0f19 	cmp.w	ip, #25
 8010270:	d801      	bhi.n	8010276 <_strtoul_l.constprop.0+0x96>
 8010272:	3c37      	subs	r4, #55	; 0x37
 8010274:	e7e3      	b.n	801023e <_strtoul_l.constprop.0+0x5e>
 8010276:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801027a:	f1bc 0f19 	cmp.w	ip, #25
 801027e:	d804      	bhi.n	801028a <_strtoul_l.constprop.0+0xaa>
 8010280:	3c57      	subs	r4, #87	; 0x57
 8010282:	e7dc      	b.n	801023e <_strtoul_l.constprop.0+0x5e>
 8010284:	f04f 37ff 	mov.w	r7, #4294967295
 8010288:	e7e6      	b.n	8010258 <_strtoul_l.constprop.0+0x78>
 801028a:	1c7b      	adds	r3, r7, #1
 801028c:	d106      	bne.n	801029c <_strtoul_l.constprop.0+0xbc>
 801028e:	2322      	movs	r3, #34	; 0x22
 8010290:	f8ce 3000 	str.w	r3, [lr]
 8010294:	4638      	mov	r0, r7
 8010296:	b932      	cbnz	r2, 80102a6 <_strtoul_l.constprop.0+0xc6>
 8010298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801029c:	b106      	cbz	r6, 80102a0 <_strtoul_l.constprop.0+0xc0>
 801029e:	4240      	negs	r0, r0
 80102a0:	2a00      	cmp	r2, #0
 80102a2:	d0f9      	beq.n	8010298 <_strtoul_l.constprop.0+0xb8>
 80102a4:	b107      	cbz	r7, 80102a8 <_strtoul_l.constprop.0+0xc8>
 80102a6:	1e69      	subs	r1, r5, #1
 80102a8:	6011      	str	r1, [r2, #0]
 80102aa:	e7f5      	b.n	8010298 <_strtoul_l.constprop.0+0xb8>
 80102ac:	2430      	movs	r4, #48	; 0x30
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1b5      	bne.n	801021e <_strtoul_l.constprop.0+0x3e>
 80102b2:	2308      	movs	r3, #8
 80102b4:	e7b3      	b.n	801021e <_strtoul_l.constprop.0+0x3e>
 80102b6:	2c30      	cmp	r4, #48	; 0x30
 80102b8:	d0a9      	beq.n	801020e <_strtoul_l.constprop.0+0x2e>
 80102ba:	230a      	movs	r3, #10
 80102bc:	e7af      	b.n	801021e <_strtoul_l.constprop.0+0x3e>
 80102be:	bf00      	nop
 80102c0:	0804def9 	.word	0x0804def9

080102c4 <_strtoul_r>:
 80102c4:	f7ff bf8c 	b.w	80101e0 <_strtoul_l.constprop.0>

080102c8 <__swhatbuf_r>:
 80102c8:	b570      	push	{r4, r5, r6, lr}
 80102ca:	460c      	mov	r4, r1
 80102cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d0:	2900      	cmp	r1, #0
 80102d2:	b096      	sub	sp, #88	; 0x58
 80102d4:	4615      	mov	r5, r2
 80102d6:	461e      	mov	r6, r3
 80102d8:	da0d      	bge.n	80102f6 <__swhatbuf_r+0x2e>
 80102da:	89a3      	ldrh	r3, [r4, #12]
 80102dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80102e0:	f04f 0100 	mov.w	r1, #0
 80102e4:	bf0c      	ite	eq
 80102e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80102ea:	2340      	movne	r3, #64	; 0x40
 80102ec:	2000      	movs	r0, #0
 80102ee:	6031      	str	r1, [r6, #0]
 80102f0:	602b      	str	r3, [r5, #0]
 80102f2:	b016      	add	sp, #88	; 0x58
 80102f4:	bd70      	pop	{r4, r5, r6, pc}
 80102f6:	466a      	mov	r2, sp
 80102f8:	f000 f878 	bl	80103ec <_fstat_r>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	dbec      	blt.n	80102da <__swhatbuf_r+0x12>
 8010300:	9901      	ldr	r1, [sp, #4]
 8010302:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010306:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801030a:	4259      	negs	r1, r3
 801030c:	4159      	adcs	r1, r3
 801030e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010312:	e7eb      	b.n	80102ec <__swhatbuf_r+0x24>

08010314 <__smakebuf_r>:
 8010314:	898b      	ldrh	r3, [r1, #12]
 8010316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010318:	079d      	lsls	r5, r3, #30
 801031a:	4606      	mov	r6, r0
 801031c:	460c      	mov	r4, r1
 801031e:	d507      	bpl.n	8010330 <__smakebuf_r+0x1c>
 8010320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	6123      	str	r3, [r4, #16]
 8010328:	2301      	movs	r3, #1
 801032a:	6163      	str	r3, [r4, #20]
 801032c:	b002      	add	sp, #8
 801032e:	bd70      	pop	{r4, r5, r6, pc}
 8010330:	ab01      	add	r3, sp, #4
 8010332:	466a      	mov	r2, sp
 8010334:	f7ff ffc8 	bl	80102c8 <__swhatbuf_r>
 8010338:	9900      	ldr	r1, [sp, #0]
 801033a:	4605      	mov	r5, r0
 801033c:	4630      	mov	r0, r6
 801033e:	f7fc fcd9 	bl	800ccf4 <_malloc_r>
 8010342:	b948      	cbnz	r0, 8010358 <__smakebuf_r+0x44>
 8010344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010348:	059a      	lsls	r2, r3, #22
 801034a:	d4ef      	bmi.n	801032c <__smakebuf_r+0x18>
 801034c:	f023 0303 	bic.w	r3, r3, #3
 8010350:	f043 0302 	orr.w	r3, r3, #2
 8010354:	81a3      	strh	r3, [r4, #12]
 8010356:	e7e3      	b.n	8010320 <__smakebuf_r+0xc>
 8010358:	89a3      	ldrh	r3, [r4, #12]
 801035a:	6020      	str	r0, [r4, #0]
 801035c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010360:	81a3      	strh	r3, [r4, #12]
 8010362:	9b00      	ldr	r3, [sp, #0]
 8010364:	6163      	str	r3, [r4, #20]
 8010366:	9b01      	ldr	r3, [sp, #4]
 8010368:	6120      	str	r0, [r4, #16]
 801036a:	b15b      	cbz	r3, 8010384 <__smakebuf_r+0x70>
 801036c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010370:	4630      	mov	r0, r6
 8010372:	f000 f84d 	bl	8010410 <_isatty_r>
 8010376:	b128      	cbz	r0, 8010384 <__smakebuf_r+0x70>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	f023 0303 	bic.w	r3, r3, #3
 801037e:	f043 0301 	orr.w	r3, r3, #1
 8010382:	81a3      	strh	r3, [r4, #12]
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	431d      	orrs	r5, r3
 8010388:	81a5      	strh	r5, [r4, #12]
 801038a:	e7cf      	b.n	801032c <__smakebuf_r+0x18>

0801038c <_raise_r>:
 801038c:	291f      	cmp	r1, #31
 801038e:	b538      	push	{r3, r4, r5, lr}
 8010390:	4604      	mov	r4, r0
 8010392:	460d      	mov	r5, r1
 8010394:	d904      	bls.n	80103a0 <_raise_r+0x14>
 8010396:	2316      	movs	r3, #22
 8010398:	6003      	str	r3, [r0, #0]
 801039a:	f04f 30ff 	mov.w	r0, #4294967295
 801039e:	bd38      	pop	{r3, r4, r5, pc}
 80103a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80103a2:	b112      	cbz	r2, 80103aa <_raise_r+0x1e>
 80103a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103a8:	b94b      	cbnz	r3, 80103be <_raise_r+0x32>
 80103aa:	4620      	mov	r0, r4
 80103ac:	f000 f852 	bl	8010454 <_getpid_r>
 80103b0:	462a      	mov	r2, r5
 80103b2:	4601      	mov	r1, r0
 80103b4:	4620      	mov	r0, r4
 80103b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103ba:	f000 b839 	b.w	8010430 <_kill_r>
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d00a      	beq.n	80103d8 <_raise_r+0x4c>
 80103c2:	1c59      	adds	r1, r3, #1
 80103c4:	d103      	bne.n	80103ce <_raise_r+0x42>
 80103c6:	2316      	movs	r3, #22
 80103c8:	6003      	str	r3, [r0, #0]
 80103ca:	2001      	movs	r0, #1
 80103cc:	e7e7      	b.n	801039e <_raise_r+0x12>
 80103ce:	2400      	movs	r4, #0
 80103d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103d4:	4628      	mov	r0, r5
 80103d6:	4798      	blx	r3
 80103d8:	2000      	movs	r0, #0
 80103da:	e7e0      	b.n	801039e <_raise_r+0x12>

080103dc <raise>:
 80103dc:	4b02      	ldr	r3, [pc, #8]	; (80103e8 <raise+0xc>)
 80103de:	4601      	mov	r1, r0
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	f7ff bfd3 	b.w	801038c <_raise_r>
 80103e6:	bf00      	nop
 80103e8:	200002e4 	.word	0x200002e4

080103ec <_fstat_r>:
 80103ec:	b538      	push	{r3, r4, r5, lr}
 80103ee:	4d07      	ldr	r5, [pc, #28]	; (801040c <_fstat_r+0x20>)
 80103f0:	2300      	movs	r3, #0
 80103f2:	4604      	mov	r4, r0
 80103f4:	4608      	mov	r0, r1
 80103f6:	4611      	mov	r1, r2
 80103f8:	602b      	str	r3, [r5, #0]
 80103fa:	f7f1 fade 	bl	80019ba <_fstat>
 80103fe:	1c43      	adds	r3, r0, #1
 8010400:	d102      	bne.n	8010408 <_fstat_r+0x1c>
 8010402:	682b      	ldr	r3, [r5, #0]
 8010404:	b103      	cbz	r3, 8010408 <_fstat_r+0x1c>
 8010406:	6023      	str	r3, [r4, #0]
 8010408:	bd38      	pop	{r3, r4, r5, pc}
 801040a:	bf00      	nop
 801040c:	20001e04 	.word	0x20001e04

08010410 <_isatty_r>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	4d06      	ldr	r5, [pc, #24]	; (801042c <_isatty_r+0x1c>)
 8010414:	2300      	movs	r3, #0
 8010416:	4604      	mov	r4, r0
 8010418:	4608      	mov	r0, r1
 801041a:	602b      	str	r3, [r5, #0]
 801041c:	f7f1 fadd 	bl	80019da <_isatty>
 8010420:	1c43      	adds	r3, r0, #1
 8010422:	d102      	bne.n	801042a <_isatty_r+0x1a>
 8010424:	682b      	ldr	r3, [r5, #0]
 8010426:	b103      	cbz	r3, 801042a <_isatty_r+0x1a>
 8010428:	6023      	str	r3, [r4, #0]
 801042a:	bd38      	pop	{r3, r4, r5, pc}
 801042c:	20001e04 	.word	0x20001e04

08010430 <_kill_r>:
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	4d07      	ldr	r5, [pc, #28]	; (8010450 <_kill_r+0x20>)
 8010434:	2300      	movs	r3, #0
 8010436:	4604      	mov	r4, r0
 8010438:	4608      	mov	r0, r1
 801043a:	4611      	mov	r1, r2
 801043c:	602b      	str	r3, [r5, #0]
 801043e:	f7f1 fa5d 	bl	80018fc <_kill>
 8010442:	1c43      	adds	r3, r0, #1
 8010444:	d102      	bne.n	801044c <_kill_r+0x1c>
 8010446:	682b      	ldr	r3, [r5, #0]
 8010448:	b103      	cbz	r3, 801044c <_kill_r+0x1c>
 801044a:	6023      	str	r3, [r4, #0]
 801044c:	bd38      	pop	{r3, r4, r5, pc}
 801044e:	bf00      	nop
 8010450:	20001e04 	.word	0x20001e04

08010454 <_getpid_r>:
 8010454:	f7f1 ba4a 	b.w	80018ec <_getpid>

08010458 <_malloc_usable_size_r>:
 8010458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801045c:	1f18      	subs	r0, r3, #4
 801045e:	2b00      	cmp	r3, #0
 8010460:	bfbc      	itt	lt
 8010462:	580b      	ldrlt	r3, [r1, r0]
 8010464:	18c0      	addlt	r0, r0, r3
 8010466:	4770      	bx	lr

08010468 <_init>:
 8010468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046a:	bf00      	nop
 801046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801046e:	bc08      	pop	{r3}
 8010470:	469e      	mov	lr, r3
 8010472:	4770      	bx	lr

08010474 <_fini>:
 8010474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010476:	bf00      	nop
 8010478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801047a:	bc08      	pop	{r3}
 801047c:	469e      	mov	lr, r3
 801047e:	4770      	bx	lr
