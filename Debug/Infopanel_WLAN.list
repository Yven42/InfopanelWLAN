
Infopanel_WLAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014040  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000442e0  080141d0  080141d0  000241d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080584b0  080584b0  00070e54  2**0
                  CONTENTS
  4 .ARM          00000008  080584b0  080584b0  000684b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080584b8  080584b8  00070e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080584b8  080584b8  000684b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080584bc  080584bc  000684bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e54  20000000  080584c0  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000307c  20000e54  08059314  00070e54  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ed0  08059314  00073ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00070e54  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00070e84  2**0
                  CONTENTS, READONLY
 13 .debug_info   000287fd  00000000  00000000  00070ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063f8  00000000  00000000  000996c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002368  00000000  00000000  0009fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b11  00000000  00000000  000a1e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000300cd  00000000  00000000  000a3939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ed47  00000000  00000000  000d3a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011bdc8  00000000  00000000  0010274d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a87c  00000000  00000000  0021e518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00228d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000e54 	.word	0x20000e54
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080141b8 	.word	0x080141b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000e58 	.word	0x20000e58
 80001cc:	080141b8 	.word	0x080141b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <vApplicationGetIdleTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000e70 	.word	0x20000e70
 8000f14:	20000ec4 	.word	0x20000ec4

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f004 f9de 	bl	80052dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f824 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 fa1a 	bl	800135c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f28:	f000 f900 	bl	800112c <MX_SPI2_Init>
  MX_RTC_Init();
 8000f2c:	f000 f8d6 	bl	80010dc <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000f30:	f000 f9e4 	bl	80012fc <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000f34:	f000 f86e 	bl	8001014 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000f38:	f000 f936 	bl	80011a8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f3c:	f000 f982 	bl	8001244 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //VirtualEepromInit();
  VirtualEepromInitStatic();
 8000f40:	f002 fb2c 	bl	800359c <VirtualEepromInitStatic>

  //Reset Timer
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <main+0x50>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f06f 0201 	mvn.w	r2, #1
 8000f4c:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <main+0x50>)
 8000f50:	f008 fb18 	bl	8009584 <HAL_TIM_Base_Start_IT>

  HardwareResetCheck();
 8000f54:	f002 faa0 	bl	8003498 <HardwareResetCheck>

  StartWlanModule();
 8000f58:	f002 fac8 	bl	80034ec <StartWlanModule>

  Wifi_Init(osPriorityNormal);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f00b fe2b 	bl	800cbb8 <Wifi_Init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f62:	f00d f9bd 	bl	800e2e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <main+0x4e>
 8000f68:	200011b0 	.word	0x200011b0

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	; 0x58
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2244      	movs	r2, #68	; 0x44
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f010 fc37 	bl	80117ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f92:	f006 fa09 	bl	80073a8 <HAL_PWREx_ControlVoltageScaling>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f9c:	f000 fb34 	bl	8001608 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000faa:	2310      	movs	r3, #16
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fa3e 	bl	8007454 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000fde:	f000 fb13 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fe06 	bl	8007c0c <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001006:	f000 faff 	bl	8001608 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3758      	adds	r7, #88	; 0x58
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800102c:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <MX_ADC3_Init+0xc0>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800104a:	2204      	movs	r2, #4
 800104c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800105c:	2201      	movs	r2, #1
 800105e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800107e:	2200      	movs	r2, #0
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_ADC3_Init+0xbc>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800108a:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_ADC3_Init+0xbc>)
 800108c:	f004 fbd6 	bl	800583c <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001096:	f000 fab7 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_ADC3_Init+0xc4>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109e:	2306      	movs	r3, #6
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a6:	237f      	movs	r3, #127	; 0x7f
 80010a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010aa:	2304      	movs	r3, #4
 80010ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_ADC3_Init+0xbc>)
 80010b8:	f004 feb0 	bl	8005e1c <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010c2:	f000 faa1 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200010c4 	.word	0x200010c4
 80010d4:	50040200 	.word	0x50040200
 80010d8:	04300002 	.word	0x04300002

080010dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_RTC_Init+0x48>)
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <MX_RTC_Init+0x4c>)
 80010e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_RTC_Init+0x48>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_RTC_Init+0x48>)
 80010ee:	227f      	movs	r2, #127	; 0x7f
 80010f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_RTC_Init+0x48>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_RTC_Init+0x48>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_RTC_Init+0x48>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_RTC_Init+0x48>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_RTC_Init+0x48>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_RTC_Init+0x48>)
 8001112:	f007 fc5b 	bl	80089cc <HAL_RTC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800111c:	f000 fa74 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20001128 	.word	0x20001128
 8001128:	40002800 	.word	0x40002800

0800112c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_SPI2_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800113c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001146:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800114a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI2_Init+0x74>)
 800115a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI2_Init+0x74>)
 800117a:	2207      	movs	r2, #7
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI2_Init+0x74>)
 8001186:	2208      	movs	r2, #8
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_SPI2_Init+0x74>)
 800118c:	f007 fe25 	bl	8008dda <HAL_SPI_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fa37 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000114c 	.word	0x2000114c
 80011a4:	40003800 	.word	0x40003800

080011a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM2_Init+0x94>)
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM2_Init+0x94>)
 80011d0:	2250      	movs	r2, #80	; 0x50
 80011d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM2_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600000000;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM2_Init+0x94>)
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_TIM2_Init+0x98>)
 80011de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_TIM2_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM2_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_TIM2_Init+0x94>)
 80011ee:	f008 f971 	bl	80094d4 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f8:	f000 fa06 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_TIM2_Init+0x94>)
 800120a:	f008 fed7 	bl	8009fbc <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001214:	f000 f9f8 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_TIM2_Init+0x94>)
 8001226:	f009 fc01 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001230:	f000 f9ea 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200011b0 	.word	0x200011b0
 8001240:	23c34600 	.word	0x23c34600

08001244 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_TIM5_Init+0xb0>)
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <MX_TIM5_Init+0xb4>)
 800126c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40-1;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_TIM5_Init+0xb0>)
 8001270:	2227      	movs	r2, #39	; 0x27
 8001272:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_TIM5_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_TIM5_Init+0xb0>)
 800127c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001280:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_TIM5_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM5_Init+0xb0>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_TIM5_Init+0xb0>)
 8001290:	f008 f9e8 	bl	8009664 <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800129a:	f000 f9b5 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_TIM5_Init+0xb0>)
 80012ae:	f009 fbbd 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80012b8:	f000 f9a6 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80012c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	2204      	movs	r2, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM5_Init+0xb0>)
 80012d6:	f008 fd5d 	bl	8009d94 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80012e0:	f000 f992 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM5_Init+0xb0>)
 80012e6:	f000 fb07 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200011fc 	.word	0x200011fc
 80012f8:	40000c00 	.word	0x40000c00

080012fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <MX_USART3_UART_Init+0x5c>)
 8001304:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART3_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART3_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART3_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART3_UART_Init+0x58>)
 8001340:	f009 fc1a 	bl	800ab78 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800134a:	f000 f95d 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20001248 	.word	0x20001248
 8001358:	40004800 	.word	0x40004800

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <MX_GPIO_Init+0x17c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <MX_GPIO_Init+0x17c>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <MX_GPIO_Init+0x17c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <MX_GPIO_Init+0x17c>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <MX_GPIO_Init+0x17c>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <MX_GPIO_Init+0x17c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <MX_GPIO_Init+0x17c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <MX_GPIO_Init+0x17c>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <MX_GPIO_Init+0x17c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <MX_GPIO_Init+0x17c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <MX_GPIO_Init+0x17c>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <MX_GPIO_Init+0x17c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WLAN_POWER_GPIO_Port, WLAN_POWER_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f005 ff7d 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_EN_Battery_Pin|ENABLE_POLOLU_Pin|PWR_Display_Pin|RST_Pin
 80013de:	2200      	movs	r2, #0
 80013e0:	f242 0173 	movw	r1, #8307	; 0x2073
 80013e4:	483d      	ldr	r0, [pc, #244]	; (80014dc <MX_GPIO_Init+0x180>)
 80013e6:	f005 ff77 	bl	80072d8 <HAL_GPIO_WritePin>
                          |DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2104      	movs	r1, #4
 80013ee:	483b      	ldr	r0, [pc, #236]	; (80014dc <MX_GPIO_Init+0x180>)
 80013f0:	f005 ff72 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_Pin_GPIO_Port, Debug_Pin_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fa:	4839      	ldr	r0, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x184>)
 80013fc:	f005 ff6c 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_WLAN_Pin|RST_WLAN_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f005 ff65 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800140e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001414:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	482e      	ldr	r0, [pc, #184]	; (80014e0 <MX_GPIO_Init+0x184>)
 8001426:	f005 fd95 	bl	8006f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800142a:	230c      	movs	r3, #12
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143a:	2307      	movs	r3, #7
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f005 fd84 	bl	8006f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : WLAN_POWER_Pin EN_WLAN_Pin RST_WLAN_Pin */
  GPIO_InitStruct.Pin = WLAN_POWER_Pin|EN_WLAN_Pin|RST_WLAN_Pin;
 800144c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f005 fd74 	bl	8006f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_EN_Battery_Pin ENABLE_POLOLU_Pin DISPLAY_POWER_Pin PWR_Display_Pin
                           RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = ADC_EN_Battery_Pin|ENABLE_POLOLU_Pin|DISPLAY_POWER_Pin|PWR_Display_Pin
 800146c:	f242 0377 	movw	r3, #8311	; 0x2077
 8001470:	617b      	str	r3, [r7, #20]
                          |RST_Pin|DC_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <MX_GPIO_Init+0x180>)
 8001486:	f005 fd65 	bl	8006f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Debug_Pin_Pin */
  GPIO_InitStruct.Pin = Debug_Pin_Pin;
 800148a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Debug_Pin_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480f      	ldr	r0, [pc, #60]	; (80014e0 <MX_GPIO_Init+0x184>)
 80014a4:	f005 fd56 	bl	8006f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <MX_GPIO_Init+0x180>)
 80014bc:	f005 fd4a 	bl	8006f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2105      	movs	r1, #5
 80014c4:	2028      	movs	r0, #40	; 0x28
 80014c6:	f005 f9fc 	bl	80068c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ca:	2028      	movs	r0, #40	; 0x28
 80014cc:	f005 fa15 	bl	80068fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48000800 	.word	0x48000800

080014e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
	}
	else
	{

	}
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001502:	f7ff fd33 	bl	8000f6c <SystemClock_Config>
	HAL_ResumeTick();
 8001506:	f003 ff99 	bl	800543c <HAL_ResumeTick>
	MX_SPI2_Init();
 800150a:	f7ff fe0f 	bl	800112c <MX_SPI2_Init>
	DEV_Module_Init();
 800150e:	f002 f925 	bl	800375c <DEV_Module_Init>
	EPD_7IN5_V2_Init();
 8001512:	f002 fa43 	bl	800399c <EPD_7IN5_V2_Init>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <u16BatteryVoltage>:

uint16_t u16BatteryVoltage()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADC_EN_Battery_GPIO_Port, ADC_EN_Battery_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2101      	movs	r1, #1
 800152a:	4833      	ldr	r0, [pc, #204]	; (80015f8 <u16BatteryVoltage+0xd8>)
 800152c:	f005 fed4 	bl	80072d8 <HAL_GPIO_WritePin>
	for (int i=0; i<400000;i++);
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e002      	b.n	800153c <u16BatteryVoltage+0x1c>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <u16BatteryVoltage+0xdc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	ddf8      	ble.n	8001536 <u16BatteryVoltage+0x16>
	uint16_t u16Return = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	80fb      	strh	r3, [r7, #6]
	uint32_t u16ADC_Cache = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
	for (int iCounter = 0;iCounter<100;iCounter++)
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e01b      	b.n	800158a <u16BatteryVoltage+0x6a>
	{
		HAL_ADC_Start(&hadc3);
 8001552:	482b      	ldr	r0, [pc, #172]	; (8001600 <u16BatteryVoltage+0xe0>)
 8001554:	f004 fac2 	bl	8005adc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1);
 8001558:	2101      	movs	r1, #1
 800155a:	4829      	ldr	r0, [pc, #164]	; (8001600 <u16BatteryVoltage+0xe0>)
 800155c:	f004 fb78 	bl	8005c50 <HAL_ADC_PollForConversion>
		u16ADC_Cache += HAL_ADC_GetValue(&hadc3);
 8001560:	4827      	ldr	r0, [pc, #156]	; (8001600 <u16BatteryVoltage+0xe0>)
 8001562:	f004 fc4d 	bl	8005e00 <HAL_ADC_GetValue>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4413      	add	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
		for (int i=0; i<40000;i++);
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	e002      	b.n	800157a <u16BatteryVoltage+0x5a>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	3301      	adds	r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001580:	4293      	cmp	r3, r2
 8001582:	ddf7      	ble.n	8001574 <u16BatteryVoltage+0x54>
	for (int iCounter = 0;iCounter<100;iCounter++)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b63      	cmp	r3, #99	; 0x63
 800158e:	dde0      	ble.n	8001552 <u16BatteryVoltage+0x32>
	}

	HAL_GPIO_WritePin(ADC_EN_Battery_GPIO_Port, ADC_EN_Battery_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2101      	movs	r1, #1
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <u16BatteryVoltage+0xd8>)
 8001596:	f005 fe9f 	bl	80072d8 <HAL_GPIO_WritePin>

	u16Return = 1.836*(u16ADC_Cache/100.0)+162.179;
 800159a:	6938      	ldr	r0, [r7, #16]
 800159c:	f7fe ffb2 	bl	8000504 <__aeabi_ui2d>
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <u16BatteryVoltage+0xe4>)
 80015a6:	f7ff f951 	bl	800084c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	a30d      	add	r3, pc, #52	; (adr r3, 80015e8 <u16BatteryVoltage+0xc8>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f81e 	bl	80005f8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	a30a      	add	r3, pc, #40	; (adr r3, 80015f0 <u16BatteryVoltage+0xd0>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fe5f 	bl	800028c <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fae7 	bl	8000ba8 <__aeabi_d2uiz>
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]

	return u16Return;
 80015de:	88fb      	ldrh	r3, [r7, #6]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	89374bc7 	.word	0x89374bc7
 80015ec:	3ffd6041 	.word	0x3ffd6041
 80015f0:	5e353f7d 	.word	0x5e353f7d
 80015f4:	406445ba 	.word	0x406445ba
 80015f8:	48000400 	.word	0x48000400
 80015fc:	00061a7f 	.word	0x00061a7f
 8001600:	200010c4 	.word	0x200010c4
 8001604:	40590000 	.word	0x40590000

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	e7fe      	b.n	8001610 <Error_Handler+0x8>
	...

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_MspInit+0x4c>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_MspInit+0x4c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6613      	str	r3, [r2, #96]	; 0x60
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_MspInit+0x4c>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_MspInit+0x4c>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_MspInit+0x4c>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	210f      	movs	r1, #15
 800164e:	f06f 0001 	mvn.w	r0, #1
 8001652:	f005 f936 	bl	80068c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0ac      	sub	sp, #176	; 0xb0
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2288      	movs	r2, #136	; 0x88
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f010 f8b2 	bl	80117ee <memset>
  if(hadc->Instance==ADC3)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <HAL_ADC_MspInit+0xc8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d146      	bne.n	8001722 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800169a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800169e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016aa:	2308      	movs	r3, #8
 80016ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016ae:	2307      	movs	r3, #7
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 fcc5 	bl	8008054 <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016d0:	f7ff ff9a 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_ADC_MspInit+0xcc>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <HAL_ADC_MspInit+0xcc>)
 80016da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_ADC_MspInit+0xcc>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_ADC_MspInit+0xcc>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_ADC_MspInit+0xcc>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_ADC_MspInit+0xcc>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 8001704:	2301      	movs	r3, #1
 8001706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800170a:	230b      	movs	r3, #11
 800170c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_ADC_MspInit+0xd0>)
 800171e:	f005 fc19 	bl	8006f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	37b0      	adds	r7, #176	; 0xb0
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	50040200 	.word	0x50040200
 8001730:	40021000 	.word	0x40021000
 8001734:	48000800 	.word	0x48000800

08001738 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0a4      	sub	sp, #144	; 0x90
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	2288      	movs	r2, #136	; 0x88
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f010 f850 	bl	80117ee <memset>
  if(hrtc->Instance==RTC)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_RTC_MspInit+0x6c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d120      	bne.n	800179a <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800175e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f006 fc72 	bl	8008054 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001776:	f7ff ff47 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RTC_MspInit+0x70>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RTC_MspInit+0x70>)
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2105      	movs	r1, #5
 800178e:	2003      	movs	r0, #3
 8001790:	f005 f897 	bl	80068c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001794:	2003      	movs	r0, #3
 8001796:	f005 f8b0 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3790      	adds	r7, #144	; 0x90
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40002800 	.word	0x40002800
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a25      	ldr	r2, [pc, #148]	; (8001860 <HAL_SPI_MspInit+0xb4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d144      	bne.n	8001858 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_SPI_MspInit+0xb8>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001816:	230c      	movs	r3, #12
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001826:	2305      	movs	r3, #5
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <HAL_SPI_MspInit+0xbc>)
 8001832:	f005 fb8f 	bl	8006f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001848:	2305      	movs	r3, #5
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <HAL_SPI_MspInit+0xc0>)
 8001854:	f005 fb7e 	bl	8006f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40003800 	.word	0x40003800
 8001864:	40021000 	.word	0x40021000
 8001868:	48000800 	.word	0x48000800
 800186c:	48000400 	.word	0x48000400

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d113      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6593      	str	r3, [r2, #88]	; 0x58
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2105      	movs	r1, #5
 800189e:	201c      	movs	r0, #28
 80018a0:	f005 f80f 	bl	80068c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a4:	201c      	movs	r0, #28
 80018a6:	f005 f828 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_TIM_PWM_MspInit+0x38>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10b      	bne.n	80018e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40000c00 	.word	0x40000c00
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_TIM_MspPostInit+0x64>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d11c      	bne.n	8001954 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_TIM_MspPostInit+0x68>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_TIM_MspPostInit+0x68>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_TIM_MspPostInit+0x68>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = Buzzer_PWM_Pin;
 8001932:	2302      	movs	r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001942:	2302      	movs	r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_PWM_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f005 fb00 	bl	8006f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40000c00 	.word	0x40000c00
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ac      	sub	sp, #176	; 0xb0
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2288      	movs	r2, #136	; 0x88
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f00f ff32 	bl	80117ee <memset>
  if(huart->Instance==USART3)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_UART_MspInit+0xc0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d142      	bne.n	8001a1a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001994:	2304      	movs	r3, #4
 8001996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001998:	2300      	movs	r3, #0
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 fb57 	bl	8008054 <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019ac:	f7ff fe2c 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019e0:	2330      	movs	r3, #48	; 0x30
 80019e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019f8:	2307      	movs	r3, #7
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a02:	4619      	mov	r1, r3
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <HAL_UART_MspInit+0xc8>)
 8001a06:	f005 faa5 	bl	8006f54 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	2027      	movs	r0, #39	; 0x27
 8001a10:	f004 ff57 	bl	80068c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a14:	2027      	movs	r0, #39	; 0x27
 8001a16:	f004 ff70 	bl	80068fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	37b0      	adds	r7, #176	; 0xb0
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40004800 	.word	0x40004800
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f003 fc98 	bl	8005394 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a64:	f00e f94e 	bl	800fd04 <xTaskGetSchedulerState>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a6e:	f00e fd2b 	bl	80104c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <RTC_WKUP_IRQHandler+0x10>)
 8001a7e:	f007 f957 	bl	8008d30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001128 	.word	0x20001128

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <TIM2_IRQHandler+0x18>)
 8001a92:	f008 f877 	bl	8009b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  StandbyStart(0, 0);
 8001a96:	2100      	movs	r1, #0
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f001 fca3 	bl	80033e4 <StandbyStart>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200011b0 	.word	0x200011b0

08001aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USART3_IRQHandler+0x10>)
 8001aae:	f009 f987 	bl	800adc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001248 	.word	0x20001248

08001abc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001ac0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ac4:	f005 fc20 	bl	8007308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae6:	f00f ff75 	bl	80119d4 <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2216      	movs	r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
  return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0e:	e7fe      	b.n	8001b0e <_exit+0x12>

08001b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
  }

  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e009      	b.n	8001b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf1      	blt.n	8001b5c <_write+0x12>
  }
  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f00f feda 	bl	80119d4 <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20018000 	.word	0x20018000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	2000137c 	.word	0x2000137c
 8001c54:	20003ed0 	.word	0x20003ed0

08001c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c80:	f7ff ffea 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	; (8001cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <LoopForever+0xe>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	; (8001cc8 <LoopForever+0x16>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f00f fe99 	bl	80119e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cae:	f7ff f933 	bl	8000f18 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000e54 	.word	0x20000e54
  ldr r2, =_sidata
 8001cc0:	080584c0 	.word	0x080584c0
  ldr r2, =_sbss
 8001cc4:	20000e54 	.word	0x20000e54
  ldr r4, =_ebss
 8001cc8:	20003ed0 	.word	0x20003ed0

08001ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_2_IRQHandler>

08001cce <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8001cce:	b480      	push	{r7}
 8001cd0:	b087      	sub	sp, #28
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d801      	bhi.n	8001ce8 <jsmn_alloc_token+0x1a>
    return NULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e014      	b.n	8001d12 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	1c59      	adds	r1, r3, #1
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	6051      	str	r1, [r2, #4]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8001d10:	697b      	ldr	r3, [r7, #20]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	7afa      	ldrb	r2, [r7, #11]
 8001d32:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
  token->end = end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001d68:	e03f      	b.n	8001dea <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4413      	add	r3, r2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b7d      	cmp	r3, #125	; 0x7d
 8001d76:	d045      	beq.n	8001e04 <jsmn_parse_primitive+0xb0>
 8001d78:	2b7d      	cmp	r3, #125	; 0x7d
 8001d7a:	dc1c      	bgt.n	8001db6 <jsmn_parse_primitive+0x62>
 8001d7c:	2b5d      	cmp	r3, #93	; 0x5d
 8001d7e:	d041      	beq.n	8001e04 <jsmn_parse_primitive+0xb0>
 8001d80:	2b5d      	cmp	r3, #93	; 0x5d
 8001d82:	dc18      	bgt.n	8001db6 <jsmn_parse_primitive+0x62>
 8001d84:	2b3a      	cmp	r3, #58	; 0x3a
 8001d86:	dc16      	bgt.n	8001db6 <jsmn_parse_primitive+0x62>
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	da04      	bge.n	8001d96 <jsmn_parse_primitive+0x42>
 8001d8c:	2b0a      	cmp	r3, #10
 8001d8e:	dc10      	bgt.n	8001db2 <jsmn_parse_primitive+0x5e>
 8001d90:	2b09      	cmp	r3, #9
 8001d92:	da37      	bge.n	8001e04 <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8001d94:	e00f      	b.n	8001db6 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001d96:	3b20      	subs	r3, #32
 8001d98:	4a31      	ldr	r2, [pc, #196]	; (8001e60 <jsmn_parse_primitive+0x10c>)
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d129      	bne.n	8001e04 <jsmn_parse_primitive+0xb0>
      break;
 8001db0:	e001      	b.n	8001db6 <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 8001db2:	2b0d      	cmp	r3, #13
 8001db4:	d026      	beq.n	8001e04 <jsmn_parse_primitive+0xb0>
      break;
 8001db6:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b1f      	cmp	r3, #31
 8001dc4:	d906      	bls.n	8001dd4 <jsmn_parse_primitive+0x80>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b7e      	cmp	r3, #126	; 0x7e
 8001dd2:	d905      	bls.n	8001de0 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8001dda:	f06f 0301 	mvn.w	r3, #1
 8001dde:	e03a      	b.n	8001e56 <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d909      	bls.n	8001e08 <jsmn_parse_primitive+0xb4>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1b3      	bne.n	8001d6a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8001e02:	e001      	b.n	8001e08 <jsmn_parse_primitive+0xb4>
      goto found;
 8001e04:	bf00      	nop
 8001e06:	e000      	b.n	8001e0a <jsmn_parse_primitive+0xb6>
found:
 8001e08:	bf00      	nop
  if (tokens == NULL) {
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <jsmn_parse_primitive+0xca>
    parser->pos--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	601a      	str	r2, [r3, #0]
    return 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e01b      	b.n	8001e56 <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001e1e:	6a3a      	ldr	r2, [r7, #32]
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff ff53 	bl	8001cce <jsmn_alloc_token>
 8001e28:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e00c      	b.n	8001e56 <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	2108      	movs	r1, #8
 8001e44:	6938      	ldr	r0, [r7, #16]
 8001e46:	f7ff ff6a 	bl	8001d1e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	601a      	str	r2, [r3, #0]
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	04001001 	.word	0x04001001

08001e64 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001e82:	e0ba      	b.n	8001ffa <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	2b22      	cmp	r3, #34	; 0x22
 8001e94:	d11d      	bne.n	8001ed2 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <jsmn_parse_string+0x3c>
        return 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e0be      	b.n	800201e <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff ff12 	bl	8001cce <jsmn_alloc_token>
 8001eaa:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <jsmn_parse_string+0x5a>
        parser->pos = start;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebc:	e0af      	b.n	800201e <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	6938      	ldr	r0, [r7, #16]
 8001eca:	f7ff ff28 	bl	8001d1e <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e0a5      	b.n	800201e <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	2b5c      	cmp	r3, #92	; 0x5c
 8001ed6:	f040 808b 	bne.w	8001ff0 <jsmn_parse_string+0x18c>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	f240 8084 	bls.w	8001ff0 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b75      	cmp	r3, #117	; 0x75
 8001efe:	dc70      	bgt.n	8001fe2 <jsmn_parse_string+0x17e>
 8001f00:	2b5c      	cmp	r3, #92	; 0x5c
 8001f02:	da04      	bge.n	8001f0e <jsmn_parse_string+0xaa>
 8001f04:	2b22      	cmp	r3, #34	; 0x22
 8001f06:	d072      	beq.n	8001fee <jsmn_parse_string+0x18a>
 8001f08:	2b2f      	cmp	r3, #47	; 0x2f
 8001f0a:	d070      	beq.n	8001fee <jsmn_parse_string+0x18a>
 8001f0c:	e069      	b.n	8001fe2 <jsmn_parse_string+0x17e>
 8001f0e:	3b5c      	subs	r3, #92	; 0x5c
 8001f10:	2201      	movs	r2, #1
 8001f12:	409a      	lsls	r2, r3
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <jsmn_parse_string+0x1c4>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d163      	bne.n	8001fee <jsmn_parse_string+0x18a>
 8001f26:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d054      	beq.n	8001fe2 <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e037      	b.n	8001fb8 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b2f      	cmp	r3, #47	; 0x2f
 8001f54:	d906      	bls.n	8001f64 <jsmn_parse_string+0x100>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b39      	cmp	r3, #57	; 0x39
 8001f62:	d921      	bls.n	8001fa8 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d906      	bls.n	8001f80 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b46      	cmp	r3, #70	; 0x46
 8001f7e:	d913      	bls.n	8001fa8 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001f8a:	2b60      	cmp	r3, #96	; 0x60
 8001f8c:	d906      	bls.n	8001f9c <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b66      	cmp	r3, #102	; 0x66
 8001f9a:	d905      	bls.n	8001fa8 <jsmn_parse_string+0x144>
            parser->pos = start;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8001fa2:	f06f 0301 	mvn.w	r3, #1
 8001fa6:	e03a      	b.n	800201e <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]
             i++) {
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	dc0b      	bgt.n	8001fd6 <jsmn_parse_string+0x172>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d906      	bls.n	8001fd6 <jsmn_parse_string+0x172>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1b8      	bne.n	8001f48 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]
        break;
 8001fe0:	e006      	b.n	8001ff0 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8001fe8:	f06f 0301 	mvn.w	r3, #1
 8001fec:	e017      	b.n	800201e <jsmn_parse_string+0x1ba>
        break;
 8001fee:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d907      	bls.n	8002014 <jsmn_parse_string+0x1b0>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f af38 	bne.w	8001e84 <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 800201a:	f06f 0302 	mvn.w	r3, #2
}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	01440441 	.word	0x01440441

0800202c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len, jsmntok_t *tokens, const unsigned int num_tokens)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	; 0x30
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002040:	e176      	b.n	8002330 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	2b7d      	cmp	r3, #125	; 0x7d
 8002052:	d06c      	beq.n	800212e <jsmn_parse+0x102>
 8002054:	2b7d      	cmp	r3, #125	; 0x7d
 8002056:	f300 8136 	bgt.w	80022c6 <jsmn_parse+0x29a>
 800205a:	2b7b      	cmp	r3, #123	; 0x7b
 800205c:	d030      	beq.n	80020c0 <jsmn_parse+0x94>
 800205e:	2b7b      	cmp	r3, #123	; 0x7b
 8002060:	f300 8131 	bgt.w	80022c6 <jsmn_parse+0x29a>
 8002064:	2b5d      	cmp	r3, #93	; 0x5d
 8002066:	d062      	beq.n	800212e <jsmn_parse+0x102>
 8002068:	2b5d      	cmp	r3, #93	; 0x5d
 800206a:	f300 812c 	bgt.w	80022c6 <jsmn_parse+0x29a>
 800206e:	2b5b      	cmp	r3, #91	; 0x5b
 8002070:	d026      	beq.n	80020c0 <jsmn_parse+0x94>
 8002072:	2b5b      	cmp	r3, #91	; 0x5b
 8002074:	f300 8127 	bgt.w	80022c6 <jsmn_parse+0x29a>
 8002078:	2b3a      	cmp	r3, #58	; 0x3a
 800207a:	f000 80d6 	beq.w	800222a <jsmn_parse+0x1fe>
 800207e:	2b3a      	cmp	r3, #58	; 0x3a
 8002080:	f300 8121 	bgt.w	80022c6 <jsmn_parse+0x29a>
 8002084:	2b2c      	cmp	r3, #44	; 0x2c
 8002086:	f000 80d7 	beq.w	8002238 <jsmn_parse+0x20c>
 800208a:	2b2c      	cmp	r3, #44	; 0x2c
 800208c:	f300 811b 	bgt.w	80022c6 <jsmn_parse+0x29a>
 8002090:	2b20      	cmp	r3, #32
 8002092:	dc11      	bgt.n	80020b8 <jsmn_parse+0x8c>
 8002094:	2b09      	cmp	r3, #9
 8002096:	f2c0 8116 	blt.w	80022c6 <jsmn_parse+0x29a>
 800209a:	3b09      	subs	r3, #9
 800209c:	4a91      	ldr	r2, [pc, #580]	; (80022e4 <jsmn_parse+0x2b8>)
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f040 812d 	bne.w	8002310 <jsmn_parse+0x2e4>
 80020b6:	e106      	b.n	80022c6 <jsmn_parse+0x29a>
 80020b8:	2b22      	cmp	r3, #34	; 0x22
 80020ba:	f000 8092 	beq.w	80021e2 <jsmn_parse+0x1b6>
 80020be:	e102      	b.n	80022c6 <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	3301      	adds	r3, #1
 80020c4:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8123 	beq.w	8002314 <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 80020ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff fdfb 	bl	8001cce <jsmn_alloc_token>
 80020d8:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	e153      	b.n	800238e <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d00a      	beq.n	8002106 <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	2b7b      	cmp	r3, #123	; 0x7b
 800210a:	d101      	bne.n	8002110 <jsmn_parse+0xe4>
 800210c:	2201      	movs	r2, #1
 800210e:	e000      	b.n	8002112 <jsmn_parse+0xe6>
 8002110:	2202      	movs	r2, #2
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	3b01      	subs	r3, #1
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	609a      	str	r2, [r3, #8]
      break;
 800212c:	e0fb      	b.n	8002326 <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80f1 	beq.w	8002318 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	2b7d      	cmp	r3, #125	; 0x7d
 800213a:	d101      	bne.n	8002140 <jsmn_parse+0x114>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <jsmn_parse+0x116>
 8002140:	2302      	movs	r3, #2
 8002142:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	3b01      	subs	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	e024      	b.n	8002198 <jsmn_parse+0x16c>
        token = &tokens[i];
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d017      	beq.n	8002192 <jsmn_parse+0x166>
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d112      	bne.n	8002192 <jsmn_parse+0x166>
          if (token->type != type) {
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	7fba      	ldrb	r2, [r7, #30]
 8002172:	429a      	cmp	r2, r3
 8002174:	d002      	beq.n	800217c <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 8002176:	f06f 0301 	mvn.w	r3, #1
 800217a:	e108      	b.n	800238e <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f04f 32ff 	mov.w	r2, #4294967295
 8002182:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	461a      	mov	r2, r3
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	609a      	str	r2, [r3, #8]
          break;
 8002190:	e005      	b.n	800219e <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	3b01      	subs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	dad7      	bge.n	800214e <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d119      	bne.n	80021da <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 80021a6:	f06f 0301 	mvn.w	r3, #1
 80021aa:	e0f0      	b.n	800238e <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021be:	d009      	beq.n	80021d4 <jsmn_parse+0x1a8>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d104      	bne.n	80021d4 <jsmn_parse+0x1a8>
          parser->toksuper = i;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ce:	609a      	str	r2, [r3, #8]
          break;
 80021d0:	bf00      	nop
        }
      }
#endif
      break;
 80021d2:	e0a8      	b.n	8002326 <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3b01      	subs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	dae5      	bge.n	80021ac <jsmn_parse+0x180>
      break;
 80021e0:	e0a1      	b.n	8002326 <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fe39 	bl	8001e64 <jsmn_parse_string>
 80021f2:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da01      	bge.n	80021fe <jsmn_parse+0x1d2>
        return r;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	e0c7      	b.n	800238e <jsmn_parse+0x362>
      }
      count++;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	3301      	adds	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	f000 8086 	beq.w	800231c <jsmn_parse+0x2f0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8082 	beq.w	800231c <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4413      	add	r3, r2
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	3201      	adds	r2, #1
 8002226:	60da      	str	r2, [r3, #12]
      }
      break;
 8002228:	e078      	b.n	800231c <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	461a      	mov	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
      break;
 8002236:	e076      	b.n	8002326 <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d070      	beq.n	8002320 <jsmn_parse+0x2f4>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d06b      	beq.n	8002320 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8002254:	2b02      	cmp	r3, #2
 8002256:	d063      	beq.n	8002320 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8002264:	2b01      	cmp	r3, #1
 8002266:	d05b      	beq.n	8002320 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	3b01      	subs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e025      	b.n	80022be <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d006      	beq.n	800228e <jsmn_parse+0x262>
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d114      	bne.n	80022b8 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4413      	add	r3, r2
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d00c      	beq.n	80022b8 <jsmn_parse+0x28c>
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d104      	bne.n	80022b8 <jsmn_parse+0x28c>
              parser->toksuper = i;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	609a      	str	r2, [r3, #8]
              break;
 80022b4:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80022b6:	e033      	b.n	8002320 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	3b01      	subs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dad6      	bge.n	8002272 <jsmn_parse+0x246>
      break;
 80022c4:	e02c      	b.n	8002320 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff fd3f 	bl	8001d54 <jsmn_parse_primitive>
 80022d6:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da04      	bge.n	80022e8 <jsmn_parse+0x2bc>
        return r;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	e055      	b.n	800238e <jsmn_parse+0x362>
 80022e2:	bf00      	nop
 80022e4:	00800013 	.word	0x00800013
      }
      count++;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	3301      	adds	r3, #1
 80022ec:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f6:	d015      	beq.n	8002324 <jsmn_parse+0x2f8>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	3201      	adds	r2, #1
 800230c:	60da      	str	r2, [r3, #12]
      }
      break;
 800230e:	e009      	b.n	8002324 <jsmn_parse+0x2f8>
      break;
 8002310:	bf00      	nop
 8002312:	e008      	b.n	8002326 <jsmn_parse+0x2fa>
        break;
 8002314:	bf00      	nop
 8002316:	e006      	b.n	8002326 <jsmn_parse+0x2fa>
        break;
 8002318:	bf00      	nop
 800231a:	e004      	b.n	8002326 <jsmn_parse+0x2fa>
      break;
 800231c:	bf00      	nop
 800231e:	e002      	b.n	8002326 <jsmn_parse+0x2fa>
      break;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <jsmn_parse+0x2fa>
      break;
 8002324:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d907      	bls.n	800234a <jsmn_parse+0x31e>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f ae7c 	bne.w	8002042 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01d      	beq.n	800238c <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	3b01      	subs	r3, #1
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
 8002358:	e015      	b.n	8002386 <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d00a      	beq.n	8002380 <jsmn_parse+0x354>
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4413      	add	r3, r2
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 800237a:	f06f 0302 	mvn.w	r3, #2
 800237e:	e006      	b.n	800238e <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3b01      	subs	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	dae6      	bge.n	800235a <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 800238c:	6a3b      	ldr	r3, [r7, #32]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop

08002398 <jsmn_init>:
/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f04f 32ff 	mov.w	r2, #4294967295
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <Wifi_UserProcess>:
//#######################################################################################

//#######################################################################################

void Wifi_UserProcess(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  static uint8_t last=0;
  static WifiConnectionStatus_t TCP_State = WifiConnectionStatus_Disconnected;

  //New Connect
  if((Wifi.TcpIpConnections[0].status == WifiConnectionStatus_Connected) && (TCP_State == WifiConnectionStatus_Disconnected))
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <Wifi_UserProcess+0xd4>)
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	f893 3b1c 	ldrb.w	r3, [r3, #2844]	; 0xb1c
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d108      	bne.n	80023e4 <Wifi_UserProcess+0x24>
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <Wifi_UserProcess+0xd8>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d104      	bne.n	80023e4 <Wifi_UserProcess+0x24>
  {
	  TCP_State = WifiConnectionStatus_Connected;
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <Wifi_UserProcess+0xd8>)
 80023dc:	2203      	movs	r2, #3
 80023de:	701a      	strb	r2, [r3, #0]
	  u8Pull_Request();
 80023e0:	f000 f90a 	bl	80025f8 <u8Pull_Request>
  }
  if(Wifi.TcpIpConnections[0].status == WifiConnectionStatus_Disconnected)
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <Wifi_UserProcess+0xd4>)
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	f893 3b1c 	ldrb.w	r3, [r3, #2844]	; 0xb1c
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d102      	bne.n	80023f8 <Wifi_UserProcess+0x38>
  {
	  TCP_State = WifiConnectionStatus_Disconnected;
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <Wifi_UserProcess+0xd8>)
 80023f4:	2204      	movs	r2, #4
 80023f6:	701a      	strb	r2, [r3, #0]
  }

  if(strstr(Wifi.MyIP,"0.0.0.0")!=NULL)
 80023f8:	4928      	ldr	r1, [pc, #160]	; (800249c <Wifi_UserProcess+0xdc>)
 80023fa:	4829      	ldr	r0, [pc, #164]	; (80024a0 <Wifi_UserProcess+0xe0>)
 80023fc:	f00f fa7a 	bl	80118f4 <strstr>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <Wifi_UserProcess+0x4e>
  {
    if(last!=1)
	{

	}
    last=1;
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <Wifi_UserProcess+0xe4>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e013      	b.n	8002436 <Wifi_UserProcess+0x76>
  }
  else
  {
    if(last!=2)
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <Wifi_UserProcess+0xe4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d00c      	beq.n	8002430 <Wifi_UserProcess+0x70>
    {
    	Wifi_TcpIp_StartTcpConnection(1,Infopanel_MetaData.u8Server_IP , Infopanel_MetaData.u16Server_Port, 2000);
 8002416:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <Wifi_UserProcess+0xe8>)
 8002418:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800241c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002420:	4922      	ldr	r1, [pc, #136]	; (80024ac <Wifi_UserProcess+0xec>)
 8002422:	2001      	movs	r0, #1
 8002424:	f00b f992 	bl	800d74c <Wifi_TcpIp_StartTcpConnection>
    	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
    	osDelay(500);
 8002428:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800242c:	f00b ffab 	bl	800e386 <osDelay>
    	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
    	//Wifi_TcpIp_SetEnableTcpServer(1111);
    }
    last=2;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <Wifi_UserProcess+0xe4>)
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
  }

  if(Wifi.TcpIpConnections[0].status == WifiConnectionStatus_Disconnected)
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <Wifi_UserProcess+0xd4>)
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	f893 3b1c 	ldrb.w	r3, [r3, #2844]	; 0xb1c
 8002440:	2b04      	cmp	r3, #4
 8002442:	d10b      	bne.n	800245c <Wifi_UserProcess+0x9c>
  {
		Wifi_TcpIp_StartTcpConnection(1,Infopanel_MetaData.u8Server_IP , Infopanel_MetaData.u16Server_Port, 2000);
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <Wifi_UserProcess+0xe8>)
 8002446:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800244a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800244e:	4917      	ldr	r1, [pc, #92]	; (80024ac <Wifi_UserProcess+0xec>)
 8002450:	2001      	movs	r0, #1
 8002452:	f00b f97b 	bl	800d74c <Wifi_TcpIp_StartTcpConnection>
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
		osDelay(100);
 8002456:	2064      	movs	r0, #100	; 0x64
 8002458:	f00b ff95 	bl	800e386 <osDelay>
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
  }

  if( Wifi.GotNewData==true)
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <Wifi_UserProcess+0xd4>)
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	f893 3a19 	ldrb.w	r3, [r3, #2585]	; 0xa19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <Wifi_UserProcess+0xce>
  {
	  Wifi.GotNewData=false;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <Wifi_UserProcess+0xd4>)
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2a19 	strb.w	r2, [r3, #2585]	; 0xa19
	  HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2104      	movs	r1, #4
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <Wifi_UserProcess+0xf0>)
 800247c:	f004 ff2c 	bl	80072d8 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8002480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002484:	f00b ff7f 	bl	800e386 <osDelay>
	  //uint8_t u8Buffer[1024] = {0};
	  //strncpy((char *)u8Buffer,(const char *)Wifi.RxBufferForData,1024);
	  u8Use_Data(Wifi.RxBufferForData);
 8002488:	480a      	ldr	r0, [pc, #40]	; (80024b4 <Wifi_UserProcess+0xf4>)
 800248a:	f000 f8f1 	bl	8002670 <u8Use_Data>
	  HAL_SuspendTick();
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 100, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	  HAL_PWR_EnterSTANDBYMode();*/
  }
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200013ac 	.word	0x200013ac
 8002498:	20000004 	.word	0x20000004
 800249c:	080141d0 	.word	0x080141d0
 80024a0:	20002dc7 	.word	0x20002dc7
 80024a4:	20001380 	.word	0x20001380
 80024a8:	200012d0 	.word	0x200012d0
 80024ac:	20001367 	.word	0x20001367
 80024b0:	48000400 	.word	0x48000400
 80024b4:	200025b0 	.word	0x200025b0

080024b8 <Wifi_UserInit>:
}
//#######################################################################################


void Wifi_UserInit(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0d2      	sub	sp, #328	; 0x148
 80024bc:	af00      	add	r7, sp, #0
	if(Infopanel_MetaData.eState == CONFIG_MODE)
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <Wifi_UserInit+0xc8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d140      	bne.n	8002548 <Wifi_UserInit+0x90>
	{
		vConfig_Screen();
 80024c6:	f000 ff23 	bl	8003310 <vConfig_Screen>
		sEEPROM_Data_t Data;
		Data = WLAN_Web_Start(&Wifi);
 80024ca:	463b      	mov	r3, r7
 80024cc:	492d      	ldr	r1, [pc, #180]	; (8002584 <Wifi_UserInit+0xcc>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00b fd9a 	bl	800e008 <WLAN_Web_Start>
 80024d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80024d8:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80024dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024e0:	4611      	mov	r1, r2
 80024e2:	229c      	movs	r2, #156	; 0x9c
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00f faaa 	bl	8011a3e <memcpy>

		bool test = ee_format((bool)0);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f002 fdd2 	bl	8005094 <ee_format>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf14      	ite	ne
 80024f6:	2301      	movne	r3, #1
 80024f8:	2300      	moveq	r3, #0
 80024fa:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
		ee_write(0, sizeof(Data), (uint8_t*)&Data);
 80024fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002502:	461a      	mov	r2, r3
 8002504:	219c      	movs	r1, #156	; 0x9c
 8002506:	2000      	movs	r0, #0
 8002508:	f002 fdf0 	bl	80050ec <ee_write>
		ee_commit();
 800250c:	f002 fede 	bl	80052cc <ee_commit>
		vConfig_Done_Screen(&Data, Wifi.MAC_Adress);
 8002510:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002514:	491c      	ldr	r1, [pc, #112]	; (8002588 <Wifi_UserInit+0xd0>)
 8002516:	4618      	mov	r0, r3
 8002518:	f000 ff18 	bl	800334c <vConfig_Done_Screen>

		HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f004 fed7 	bl	80072d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f004 fed0 	bl	80072d8 <HAL_GPIO_WritePin>
		HAL_SuspendTick();
 8002538:	f002 ff70 	bl	800541c <HAL_SuspendTick>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <Wifi_UserInit+0xd4>)
 800253e:	221f      	movs	r2, #31
 8002540:	619a      	str	r2, [r3, #24]
		HAL_PWR_EnterSTANDBYMode();
 8002542:	f004 ff09 	bl	8007358 <HAL_PWR_EnterSTANDBYMode>
		{
			i++;
		}
	}

}
 8002546:	e016      	b.n	8002576 <Wifi_UserInit+0xbe>
		int i = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		Wifi_SetMode(WifiMode_Station);
 800254e:	2001      	movs	r0, #1
 8002550:	f00a fbc4 	bl	800ccdc <Wifi_SetMode>
		while (Wifi_Station_ConnectToAp(Infopanel_MetaData.u8WLAN_Name,Infopanel_MetaData.u8WLAN_Password,NULL) == false)
 8002554:	e004      	b.n	8002560 <Wifi_UserInit+0xa8>
			i++;
 8002556:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800255a:	3301      	adds	r3, #1
 800255c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		while (Wifi_Station_ConnectToAp(Infopanel_MetaData.u8WLAN_Name,Infopanel_MetaData.u8WLAN_Password,NULL) == false)
 8002560:	2200      	movs	r2, #0
 8002562:	490b      	ldr	r1, [pc, #44]	; (8002590 <Wifi_UserInit+0xd8>)
 8002564:	480b      	ldr	r0, [pc, #44]	; (8002594 <Wifi_UserInit+0xdc>)
 8002566:	f00a fd17 	bl	800cf98 <Wifi_Station_ConnectToAp>
 800256a:	4603      	mov	r3, r0
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ef      	bne.n	8002556 <Wifi_UserInit+0x9e>
}
 8002576:	bf00      	nop
 8002578:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200012d0 	.word	0x200012d0
 8002584:	200013ac 	.word	0x200013ac
 8002588:	20002f5e 	.word	0x20002f5e
 800258c:	40007000 	.word	0x40007000
 8002590:	200012f9 	.word	0x200012f9
 8002594:	200012e5 	.word	0x200012e5

08002598 <jsoneq>:
{
	return 0;
}

static int jsoneq(const char* json, jsmntok_t* tok, const char* s)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
    if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start && strncmp(json + tok->start, s, tok->end - tok->start) == 0)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11e      	bne.n	80025ea <jsoneq+0x52>
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fd fe5f 	bl	8000270 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4619      	mov	r1, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4299      	cmp	r1, r3
 80025c2:	d112      	bne.n	80025ea <jsoneq+0x52>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1898      	adds	r0, r3, r2
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	f00f f91c 	bl	8011818 <strncmp>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <jsoneq+0x52>
    {
        return 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e001      	b.n	80025ee <jsoneq+0x56>
    }
    return -1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <u8Pull_Request>:
{
	return 0;
}

uint8_t  u8Pull_Request()
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b0c5      	sub	sp, #276	; 0x114
 80025fc:	af04      	add	r7, sp, #16
	uint8_t cSendString [256];
	sprintf ((char *)cSendString, (const char *)"{\n \"version\": 1,\n \"msg_type\": 2,\n \"data\": {\n   \"name\": \"%s\",\n   \"nr\": \"%ld\",\n   \"domain\": \"%s\",\n   \"os_version\": \"0.20\",\n   \"type\": \"Solar\",\n   \"volt\": \"%.2lfV\",\n   \"status\": \"ok\"\n }\n}\n",Infopanel_MetaData.u8Device_Name, HAL_GetUIDw0(), Infopanel_MetaData.u8Domain,(float)u16BatteryVoltage()/1000.0);
 80025fe:	f002 ff2d 	bl	800545c <HAL_GetUIDw0>
 8002602:	4604      	mov	r4, r0
 8002604:	f7fe ff8c 	bl	8001520 <u16BatteryVoltage>
 8002608:	4603      	mov	r3, r0
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002612:	ee17 0a90 	vmov	r0, s15
 8002616:	f7fd ff97 	bl	8000548 <__aeabi_f2d>
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <u8Pull_Request+0x68>)
 8002620:	f7fe f914 	bl	800084c <__aeabi_ddiv>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4638      	mov	r0, r7
 800262a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <u8Pull_Request+0x6c>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4623      	mov	r3, r4
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <u8Pull_Request+0x70>)
 8002636:	490d      	ldr	r1, [pc, #52]	; (800266c <u8Pull_Request+0x74>)
 8002638:	f00f f848 	bl	80116cc <siprintf>
	Wifi_TcpIp_SendDataTcp(1, strlen((const char *)cSendString), (uint8_t *)cSendString);
 800263c:	463b      	mov	r3, r7
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd fe16 	bl	8000270 <strlen>
 8002644:	4603      	mov	r3, r0
 8002646:	b29b      	uxth	r3, r3
 8002648:	463a      	mov	r2, r7
 800264a:	4619      	mov	r1, r3
 800264c:	2001      	movs	r0, #1
 800264e:	f00b f987 	bl	800d960 <Wifi_TcpIp_SendDataTcp>
	return 0;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop
 8002660:	408f4000 	.word	0x408f4000
 8002664:	2000133f 	.word	0x2000133f
 8002668:	200012d1 	.word	0x200012d1
 800266c:	080141dc 	.word	0x080141dc

08002670 <u8Use_Data>:

uint8_t u8Use_Data(uint8_t* u8Data)
{
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	f6ad 5d68 	subw	sp, sp, #3432	; 0xd68
 8002676:	af90      	add	r7, sp, #576	; 0x240
 8002678:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800267c:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002680:	6018      	str	r0, [r3, #0]
	struct sCommunication Com = {0};
 8002682:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002686:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800268a:	4618      	mov	r0, r3
 800268c:	f44f 7312 	mov.w	r3, #584	; 0x248
 8002690:	461a      	mov	r2, r3
 8002692:	2100      	movs	r1, #0
 8002694:	f00f f8ab 	bl	80117ee <memset>
	unsigned char *u8Pixmap;
	u8Pixmap = (unsigned char *)malloc(6U);
 8002698:	2006      	movs	r0, #6
 800269a:	f00e f993 	bl	80109c4 <malloc>
 800269e:	4603      	mov	r3, r0
 80026a0:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
    int i;
    int r;
    jsmn_parser p;
    jsmntok_t t[128]; /* We expect no more than 128 tokens */
    jsmn_init(&p);
 80026a4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fe75 	bl	8002398 <jsmn_init>
    r = jsmn_parse(&p, (const char*)u8Data, (const size_t)strlen((const char *)u8Data), t, (const unsigned int)sizeof(t)/sizeof(t[0]));
 80026ae:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80026b2:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	f7fd fdda 	bl	8000270 <strlen>
 80026bc:	4604      	mov	r4, r0
 80026be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026c2:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 80026c6:	f6a2 3124 	subw	r1, r2, #2852	; 0xb24
 80026ca:	f607 00c8 	addw	r0, r7, #2248	; 0x8c8
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	9200      	str	r2, [sp, #0]
 80026d2:	4622      	mov	r2, r4
 80026d4:	6809      	ldr	r1, [r1, #0]
 80026d6:	f7ff fca9 	bl	800202c <jsmn_parse>
 80026da:	f8c7 0b1c 	str.w	r0, [r7, #2844]	; 0xb1c
    for (i = 1; i < r; i++)
 80026de:	2301      	movs	r3, #1
 80026e0:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 80026e4:	f000 bd72 	b.w	80031cc <u8Use_Data+0xb5c>
    {
        if (jsoneq((const char*)u8Data, &t[i], "msg_type") == 0)
 80026e8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80026ec:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	18d1      	adds	r1, r2, r3
 80026f4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80026f8:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80026fc:	4aad      	ldr	r2, [pc, #692]	; (80029b4 <u8Use_Data+0x344>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f7ff ff4a 	bl	8002598 <jsoneq>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d150      	bne.n	80027ac <u8Use_Data+0x13c>
        {
        	uint8_t u8Cache[30] = {0};
 800270a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800270e:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	615a      	str	r2, [r3, #20]
 8002726:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002728:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800272c:	3301      	adds	r3, #1
 800272e:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002732:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	4413      	add	r3, r2
 800273a:	3308      	adds	r3, #8
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002742:	3301      	adds	r3, #1
 8002744:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002748:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	440b      	add	r3, r1
 8002750:	3304      	adds	r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1ad1      	subs	r1, r2, r3
 8002756:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800275a:	3301      	adds	r3, #1
 800275c:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002760:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002772:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4413      	add	r3, r2
 800277a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800277e:	460a      	mov	r2, r1
 8002780:	498d      	ldr	r1, [pc, #564]	; (80029b8 <u8Use_Data+0x348>)
 8002782:	f00e ffa3 	bl	80116cc <siprintf>
        	Com.u8MSG_Type = atoi((const char *)u8Cache);
 8002786:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800278a:	4618      	mov	r0, r3
 800278c:	f00e f916 	bl	80109bc <atoi>
 8002790:	4603      	mov	r3, r0
 8002792:	b2da      	uxtb	r2, r3
 8002794:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002798:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800279c:	705a      	strb	r2, [r3, #1]
            i++;
 800279e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80027a2:	3301      	adds	r3, #1
 80027a4:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 80027a8:	f000 bd0b 	b.w	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "sleep_time") == 0)
 80027ac:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80027b0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	18d1      	adds	r1, r2, r3
 80027b8:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80027bc:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80027c0:	4a7e      	ldr	r2, [pc, #504]	; (80029bc <u8Use_Data+0x34c>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	f7ff fee8 	bl	8002598 <jsoneq>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8090 	bne.w	80028f0 <u8Use_Data+0x280>
        {
        	uint8_t u8Cache[30] = {0};
 80027d0:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80027d4:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	3304      	adds	r3, #4
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	615a      	str	r2, [r3, #20]
 80027ec:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80027ee:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80027f2:	3301      	adds	r3, #1
 80027f4:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 80027f8:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	3308      	adds	r3, #8
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002808:	3301      	adds	r3, #1
 800280a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800280e:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	440b      	add	r3, r1
 8002816:	3304      	adds	r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1ad1      	subs	r1, r2, r3
 800281c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002820:	3301      	adds	r3, #1
 8002822:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002826:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002838:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002844:	460a      	mov	r2, r1
 8002846:	495c      	ldr	r1, [pc, #368]	; (80029b8 <u8Use_Data+0x348>)
 8002848:	f00e ff40 	bl	80116cc <siprintf>

			uint8_t u8CacheHou[10] = {0};
 800284c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002850:	f6a3 23ac 	subw	r3, r3, #2732	; 0xaac
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	809a      	strh	r2, [r3, #4]
			uint8_t u8CacheMin[5] = {0};
 8002860:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002864:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	2200      	movs	r2, #0
 800286e:	711a      	strb	r2, [r3, #4]
			uint8_t u8CacheSec[5] = {0};
 8002870:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002874:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	711a      	strb	r2, [r3, #4]
			sscanf((const char *)u8Cache, "%9[0-9]:%2[0-9]:%2[0-9]", u8CacheHou, u8CacheMin, u8CacheSec);
 8002880:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002884:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002888:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800288c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	460b      	mov	r3, r1
 8002894:	494a      	ldr	r1, [pc, #296]	; (80029c0 <u8Use_Data+0x350>)
 8002896:	f00e ff39 	bl	801170c <siscanf>
			Com.u32Sleep_Time = (uint32_t)atoi((const char *)u8CacheSec)+(uint32_t)atoi((const char *)u8CacheMin)*60+(uint32_t)atoi((const char *)u8CacheHou)*3600;
 800289a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800289e:	4618      	mov	r0, r3
 80028a0:	f00e f88c 	bl	80109bc <atoi>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461d      	mov	r5, r3
 80028a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00e f885 	bl	80109bc <atoi>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80028ba:	fb03 f402 	mul.w	r4, r3, r2
 80028be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00e f87a 	bl	80109bc <atoi>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4423      	add	r3, r4
 80028d6:	18ea      	adds	r2, r5, r3
 80028d8:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80028dc:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80028e0:	605a      	str	r2, [r3, #4]
			i++;
 80028e2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80028e6:	3301      	adds	r3, #1
 80028e8:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 80028ec:	f000 bc69 	b.w	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "version") == 0)
 80028f0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80028f4:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	18d1      	adds	r1, r2, r3
 80028fc:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002900:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002904:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <u8Use_Data+0x354>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	f7ff fe46 	bl	8002598 <jsoneq>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d15a      	bne.n	80029c8 <u8Use_Data+0x358>
        {
        	uint8_t u8Cache[30] = {0};
 8002912:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002916:	f6a3 23dc 	subw	r3, r3, #2780	; 0xadc
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	3304      	adds	r3, #4
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
 800292c:	615a      	str	r2, [r3, #20]
 800292e:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002930:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002934:	3301      	adds	r3, #1
 8002936:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 800293a:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	4413      	add	r3, r2
 8002942:	3308      	adds	r3, #8
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800294a:	3301      	adds	r3, #1
 800294c:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002950:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	440b      	add	r3, r1
 8002958:	3304      	adds	r3, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1ad1      	subs	r1, r2, r3
 800295e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002962:	3301      	adds	r3, #1
 8002964:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002968:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4413      	add	r3, r2
 8002970:	3304      	adds	r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800297a:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4413      	add	r3, r2
 8002982:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002986:	460a      	mov	r2, r1
 8002988:	490b      	ldr	r1, [pc, #44]	; (80029b8 <u8Use_Data+0x348>)
 800298a:	f00e fe9f 	bl	80116cc <siprintf>
        	Com.u8Version = (uint8_t)atoi((const char *)u8Cache);
 800298e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002992:	4618      	mov	r0, r3
 8002994:	f00e f812 	bl	80109bc <atoi>
 8002998:	4603      	mov	r3, r0
 800299a:	b2da      	uxtb	r2, r3
 800299c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80029a0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80029a4:	701a      	strb	r2, [r3, #0]
            i++;
 80029a6:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80029aa:	3301      	adds	r3, #1
 80029ac:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 80029b0:	f000 bc07 	b.w	80031c2 <u8Use_Data+0xb52>
 80029b4:	08014298 	.word	0x08014298
 80029b8:	080142a4 	.word	0x080142a4
 80029bc:	080142ac 	.word	0x080142ac
 80029c0:	080142b8 	.word	0x080142b8
 80029c4:	080142d0 	.word	0x080142d0
        }
        else if (jsoneq((const char*)u8Data, &t[i], "type") == 0)
 80029c8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80029cc:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	18d1      	adds	r1, r2, r3
 80029d4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80029d8:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80029dc:	4abd      	ldr	r2, [pc, #756]	; (8002cd4 <u8Use_Data+0x664>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f7ff fdda 	bl	8002598 <jsoneq>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d14f      	bne.n	8002a8a <u8Use_Data+0x41a>
        {
        	uint8_t u8Cache[30] = {0};
 80029ea:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80029ee:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
 8002a04:	615a      	str	r2, [r3, #20]
 8002a06:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002a08:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002a12:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002a22:	3301      	adds	r3, #1
 8002a24:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002a28:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	440b      	add	r3, r1
 8002a30:	3304      	adds	r3, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1ad1      	subs	r1, r2, r3
 8002a36:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002a40:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002a52:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a5e:	460a      	mov	r2, r1
 8002a60:	499d      	ldr	r1, [pc, #628]	; (8002cd8 <u8Use_Data+0x668>)
 8002a62:	f00e fe33 	bl	80116cc <siprintf>
        	Com.u8Type = (uint8_t)atoi((const char *)u8Cache);
 8002a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00d ffa6 	bl	80109bc <atoi>
 8002a70:	4603      	mov	r3, r0
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002a78:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002a7c:	721a      	strb	r2, [r3, #8]
            i++;
 8002a7e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002a88:	e39b      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l1") == 0)
 8002a8a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002a8e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	18d1      	adds	r1, r2, r3
 8002a96:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002a9a:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002a9e:	4a8f      	ldr	r2, [pc, #572]	; (8002cdc <u8Use_Data+0x66c>)
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	f7ff fd79 	bl	8002598 <jsoneq>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d137      	bne.n	8002b1c <u8Use_Data+0x4ac>
        {
        	sprintf((char*)Com.u8L1,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002aac:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002ab6:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	3308      	adds	r3, #8
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002acc:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	1ad1      	subs	r1, r2, r3
 8002ada:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002ae4:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002af6:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	441a      	add	r2, r3
 8002afe:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002b02:	f103 001e 	add.w	r0, r3, #30
 8002b06:	4613      	mov	r3, r2
 8002b08:	460a      	mov	r2, r1
 8002b0a:	4973      	ldr	r1, [pc, #460]	; (8002cd8 <u8Use_Data+0x668>)
 8002b0c:	f00e fdde 	bl	80116cc <siprintf>
            i++;
 8002b10:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002b1a:	e352      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l2") == 0)
 8002b1c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002b20:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	18d1      	adds	r1, r2, r3
 8002b28:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002b2c:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002b30:	4a6b      	ldr	r2, [pc, #428]	; (8002ce0 <u8Use_Data+0x670>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	f7ff fd30 	bl	8002598 <jsoneq>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d137      	bne.n	8002bae <u8Use_Data+0x53e>
        {
        	sprintf((char*)Com.u8L2,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002b3e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002b42:	3301      	adds	r3, #1
 8002b44:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002b48:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	3308      	adds	r3, #8
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002b5e:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	440b      	add	r3, r1
 8002b66:	3304      	adds	r3, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1ad1      	subs	r1, r2, r3
 8002b6c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002b70:	3301      	adds	r3, #1
 8002b72:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002b76:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002b88:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	441a      	add	r2, r3
 8002b90:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002b94:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002b98:	4613      	mov	r3, r2
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	494e      	ldr	r1, [pc, #312]	; (8002cd8 <u8Use_Data+0x668>)
 8002b9e:	f00e fd95 	bl	80116cc <siprintf>
            i++;
 8002ba2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002bac:	e309      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l3") == 0)
 8002bae:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002bb2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	18d1      	adds	r1, r2, r3
 8002bba:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002bbe:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002bc2:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <u8Use_Data+0x674>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f7ff fce7 	bl	8002598 <jsoneq>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d137      	bne.n	8002c40 <u8Use_Data+0x5d0>
        {
        	sprintf((char*)Com.u8L3,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002bd0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002bda:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	4413      	add	r3, r2
 8002be2:	3308      	adds	r3, #8
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002bea:	3301      	adds	r3, #1
 8002bec:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002bf0:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1ad1      	subs	r1, r2, r3
 8002bfe:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002c02:	3301      	adds	r3, #1
 8002c04:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002c08:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4413      	add	r3, r2
 8002c10:	3304      	adds	r3, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002c1a:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	441a      	add	r2, r3
 8002c22:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002c26:	f103 0082 	add.w	r0, r3, #130	; 0x82
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	492a      	ldr	r1, [pc, #168]	; (8002cd8 <u8Use_Data+0x668>)
 8002c30:	f00e fd4c 	bl	80116cc <siprintf>
            i++;
 8002c34:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002c3e:	e2c0      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l4") == 0)
 8002c40:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002c44:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	18d1      	adds	r1, r2, r3
 8002c4c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002c50:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002c54:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <u8Use_Data+0x678>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	f7ff fc9e 	bl	8002598 <jsoneq>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d144      	bne.n	8002cec <u8Use_Data+0x67c>
        {
        	sprintf((char*)Com.u8L4,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002c62:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002c66:	3301      	adds	r3, #1
 8002c68:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002c6c:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	3308      	adds	r3, #8
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002c82:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	440b      	add	r3, r1
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1ad1      	subs	r1, r2, r3
 8002c90:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002c94:	3301      	adds	r3, #1
 8002c96:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002c9a:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002cac:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002cb8:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	4905      	ldr	r1, [pc, #20]	; (8002cd8 <u8Use_Data+0x668>)
 8002cc2:	f00e fd03 	bl	80116cc <siprintf>
            i++;
 8002cc6:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002cd0:	e277      	b.n	80031c2 <u8Use_Data+0xb52>
 8002cd2:	bf00      	nop
 8002cd4:	080142d8 	.word	0x080142d8
 8002cd8:	080142a4 	.word	0x080142a4
 8002cdc:	080142e0 	.word	0x080142e0
 8002ce0:	080142e4 	.word	0x080142e4
 8002ce4:	080142e8 	.word	0x080142e8
 8002ce8:	080142ec 	.word	0x080142ec
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l5") == 0)
 8002cec:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002cf0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	18d1      	adds	r1, r2, r3
 8002cf8:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002cfc:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002d00:	4ad5      	ldr	r2, [pc, #852]	; (8003058 <u8Use_Data+0x9e8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	f7ff fc48 	bl	8002598 <jsoneq>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d137      	bne.n	8002d7e <u8Use_Data+0x70e>
        {
        	sprintf((char*)Com.u8L5,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002d0e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002d12:	3301      	adds	r3, #1
 8002d14:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002d18:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	3308      	adds	r3, #8
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002d2e:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	440b      	add	r3, r1
 8002d36:	3304      	adds	r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1ad1      	subs	r1, r2, r3
 8002d3c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002d40:	3301      	adds	r3, #1
 8002d42:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002d46:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002d58:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	441a      	add	r2, r3
 8002d60:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002d64:	f103 00e6 	add.w	r0, r3, #230	; 0xe6
 8002d68:	4613      	mov	r3, r2
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	49bb      	ldr	r1, [pc, #748]	; (800305c <u8Use_Data+0x9ec>)
 8002d6e:	f00e fcad 	bl	80116cc <siprintf>
            i++;
 8002d72:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002d76:	3301      	adds	r3, #1
 8002d78:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002d7c:	e221      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l6") == 0)
 8002d7e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002d82:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	18d1      	adds	r1, r2, r3
 8002d8a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002d8e:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002d92:	4ab3      	ldr	r2, [pc, #716]	; (8003060 <u8Use_Data+0x9f0>)
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	f7ff fbff 	bl	8002598 <jsoneq>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d137      	bne.n	8002e10 <u8Use_Data+0x7a0>
        {
        	sprintf((char*)Com.u8L6,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002da0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002da4:	3301      	adds	r3, #1
 8002da6:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002daa:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	4413      	add	r3, r2
 8002db2:	3308      	adds	r3, #8
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002dc0:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3304      	adds	r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1ad1      	subs	r1, r2, r3
 8002dce:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002dd8:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002dea:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	441a      	add	r2, r3
 8002df2:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002df6:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	4997      	ldr	r1, [pc, #604]	; (800305c <u8Use_Data+0x9ec>)
 8002e00:	f00e fc64 	bl	80116cc <siprintf>
            i++;
 8002e04:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002e0e:	e1d8      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l7") == 0)
 8002e10:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002e14:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	18d1      	adds	r1, r2, r3
 8002e1c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002e20:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002e24:	4a8f      	ldr	r2, [pc, #572]	; (8003064 <u8Use_Data+0x9f4>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f7ff fbb6 	bl	8002598 <jsoneq>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d137      	bne.n	8002ea2 <u8Use_Data+0x832>
        {
        	sprintf((char*)Com.u8L7,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002e32:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002e36:	3301      	adds	r3, #1
 8002e38:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002e3c:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4413      	add	r3, r2
 8002e44:	3308      	adds	r3, #8
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002e52:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	440b      	add	r3, r1
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	1ad1      	subs	r1, r2, r3
 8002e60:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002e64:	3301      	adds	r3, #1
 8002e66:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002e6a:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002e7c:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	441a      	add	r2, r3
 8002e84:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002e88:	f503 70a5 	add.w	r0, r3, #330	; 0x14a
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	460a      	mov	r2, r1
 8002e90:	4972      	ldr	r1, [pc, #456]	; (800305c <u8Use_Data+0x9ec>)
 8002e92:	f00e fc1b 	bl	80116cc <siprintf>
            i++;
 8002e96:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002ea0:	e18f      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l8") == 0)
 8002ea2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002ea6:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	18d1      	adds	r1, r2, r3
 8002eae:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002eb2:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002eb6:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <u8Use_Data+0x9f8>)
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f7ff fb6d 	bl	8002598 <jsoneq>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d137      	bne.n	8002f34 <u8Use_Data+0x8c4>
        {
        	sprintf((char*)Com.u8L8,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002ec4:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002ece:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002ee4:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	440b      	add	r3, r1
 8002eec:	3304      	adds	r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1ad1      	subs	r1, r2, r3
 8002ef2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002efc:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4413      	add	r3, r2
 8002f04:	3304      	adds	r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002f0e:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	441a      	add	r2, r3
 8002f16:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002f1a:	f503 70be 	add.w	r0, r3, #380	; 0x17c
 8002f1e:	4613      	mov	r3, r2
 8002f20:	460a      	mov	r2, r1
 8002f22:	494e      	ldr	r1, [pc, #312]	; (800305c <u8Use_Data+0x9ec>)
 8002f24:	f00e fbd2 	bl	80116cc <siprintf>
            i++;
 8002f28:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002f32:	e146      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l9") == 0)
 8002f34:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002f38:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	18d1      	adds	r1, r2, r3
 8002f40:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002f44:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002f48:	4a48      	ldr	r2, [pc, #288]	; (800306c <u8Use_Data+0x9fc>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	f7ff fb24 	bl	8002598 <jsoneq>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d137      	bne.n	8002fc6 <u8Use_Data+0x956>
        {
        	sprintf((char*)Com.u8L9,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002f56:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002f60:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	3308      	adds	r3, #8
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002f70:	3301      	adds	r3, #1
 8002f72:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002f76:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1ad1      	subs	r1, r2, r3
 8002f84:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002f8e:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002fa0:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	441a      	add	r2, r3
 8002fa8:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8002fac:	f503 70d7 	add.w	r0, r3, #430	; 0x1ae
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	4929      	ldr	r1, [pc, #164]	; (800305c <u8Use_Data+0x9ec>)
 8002fb6:	f00e fb89 	bl	80116cc <siprintf>
            i++;
 8002fba:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8002fc4:	e0fd      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l10") == 0)
 8002fc6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002fca:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	18d1      	adds	r1, r2, r3
 8002fd2:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8002fd6:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8002fda:	4a25      	ldr	r2, [pc, #148]	; (8003070 <u8Use_Data+0xa00>)
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	f7ff fadb 	bl	8002598 <jsoneq>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d145      	bne.n	8003074 <u8Use_Data+0xa04>
        {
        	sprintf((char*)Com.u8L10,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002fe8:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002fec:	3301      	adds	r3, #1
 8002fee:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8002ff2:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8003002:	3301      	adds	r3, #1
 8003004:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8003008:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	440b      	add	r3, r1
 8003010:	3304      	adds	r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	1ad1      	subs	r1, r2, r3
 8003016:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800301a:	3301      	adds	r3, #1
 800301c:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8003020:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003032:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	441a      	add	r2, r3
 800303a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800303e:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 8003042:	4613      	mov	r3, r2
 8003044:	460a      	mov	r2, r1
 8003046:	4905      	ldr	r1, [pc, #20]	; (800305c <u8Use_Data+0x9ec>)
 8003048:	f00e fb40 	bl	80116cc <siprintf>
            i++;
 800304c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8003050:	3301      	adds	r3, #1
 8003052:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8003056:	e0b4      	b.n	80031c2 <u8Use_Data+0xb52>
 8003058:	080142f0 	.word	0x080142f0
 800305c:	080142a4 	.word	0x080142a4
 8003060:	080142f4 	.word	0x080142f4
 8003064:	080142f8 	.word	0x080142f8
 8003068:	080142fc 	.word	0x080142fc
 800306c:	08014300 	.word	0x08014300
 8003070:	08014304 	.word	0x08014304
        }
        else if (jsoneq((const char*)u8Data, &t[i], "g_id") == 0)
 8003074:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003078:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	18d1      	adds	r1, r2, r3
 8003080:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003084:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8003088:	4a9d      	ldr	r2, [pc, #628]	; (8003300 <u8Use_Data+0xc90>)
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	f7ff fa84 	bl	8002598 <jsoneq>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d150      	bne.n	8003138 <u8Use_Data+0xac8>
        {
        	uint8_t u8Cache[30] = {0};
 8003096:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800309a:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
 80030b0:	615a      	str	r2, [r3, #20]
 80030b2:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80030b4:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80030b8:	3301      	adds	r3, #1
 80030ba:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 80030be:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	4413      	add	r3, r2
 80030c6:	3308      	adds	r3, #8
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80030ce:	3301      	adds	r3, #1
 80030d0:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80030d4:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	440b      	add	r3, r1
 80030dc:	3304      	adds	r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1ad1      	subs	r1, r2, r3
 80030e2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80030e6:	3301      	adds	r3, #1
 80030e8:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 80030ec:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80030fe:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4413      	add	r3, r2
 8003106:	f107 000c 	add.w	r0, r7, #12
 800310a:	460a      	mov	r2, r1
 800310c:	497d      	ldr	r1, [pc, #500]	; (8003304 <u8Use_Data+0xc94>)
 800310e:	f00e fadd 	bl	80116cc <siprintf>
        	Com.u8G_ID = (uint8_t)atoi((const char *)u8Cache);
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	4618      	mov	r0, r3
 8003118:	f00d fc50 	bl	80109bc <atoi>
 800311c:	4603      	mov	r3, r0
 800311e:	b2da      	uxtb	r2, r3
 8003120:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003124:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003128:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
            i++;
 800312c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8003130:	3301      	adds	r3, #1
 8003132:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8003136:	e044      	b.n	80031c2 <u8Use_Data+0xb52>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "template") == 0)
 8003138:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800313c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	18d1      	adds	r1, r2, r3
 8003144:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003148:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 800314c:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <u8Use_Data+0xc98>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	f7ff fa22 	bl	8002598 <jsoneq>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d133      	bne.n	80031c2 <u8Use_Data+0xb52>
        {
        	sprintf((char*)u8Pixmap,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 800315a:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800315e:	3301      	adds	r3, #1
 8003160:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8003164:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4413      	add	r3, r2
 800316c:	3308      	adds	r3, #8
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8003174:	3301      	adds	r3, #1
 8003176:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800317a:	f5a1 6126 	sub.w	r1, r1, #2656	; 0xa60
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3304      	adds	r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1ad1      	subs	r1, r2, r3
 8003188:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800318c:	3301      	adds	r3, #1
 800318e:	f607 3228 	addw	r2, r7, #2856	; 0xb28
 8003192:	f5a2 6226 	sub.w	r2, r2, #2656	; 0xa60
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80031a4:	f6a3 3324 	subw	r3, r3, #2852	; 0xb24
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	460a      	mov	r2, r1
 80031ae:	4955      	ldr	r1, [pc, #340]	; (8003304 <u8Use_Data+0xc94>)
 80031b0:	f8d7 0b20 	ldr.w	r0, [r7, #2848]	; 0xb20
 80031b4:	f00e fa8a 	bl	80116cc <siprintf>
            i++;
 80031b8:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80031bc:	3301      	adds	r3, #1
 80031be:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
    for (i = 1; i < r; i++)
 80031c2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80031c6:	3301      	adds	r3, #1
 80031c8:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 80031cc:	f8d7 2b24 	ldr.w	r2, [r7, #2852]	; 0xb24
 80031d0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f6ff aa87 	blt.w	80026e8 <u8Use_Data+0x78>
        }
    }
	HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_RESET);
 80031da:	2200      	movs	r2, #0
 80031dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f004 f878 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_RESET);
 80031e8:	2200      	movs	r2, #0
 80031ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f2:	f004 f871 	bl	80072d8 <HAL_GPIO_WritePin>

    if(Com.u8Version == 1)
 80031f6:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80031fa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d14d      	bne.n	80032a0 <u8Use_Data+0xc30>
    {
    	if((Com.u8MSG_Type == 3) && (Com.u8Type == 1))//Print Office Screen
 8003204:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003208:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d117      	bne.n	8003242 <u8Use_Data+0xbd2>
 8003212:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003216:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800321a:	7a1b      	ldrb	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d110      	bne.n	8003242 <u8Use_Data+0xbd2>
		{
    		DisplayOutput(Office, Com);
 8003220:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003224:	f5a3 7415 	sub.w	r4, r3, #596	; 0x254
 8003228:	4668      	mov	r0, sp
 800322a:	f104 030c 	add.w	r3, r4, #12
 800322e:	f44f 720f 	mov.w	r2, #572	; 0x23c
 8003232:	4619      	mov	r1, r3
 8003234:	f00e fc03 	bl	8011a3e <memcpy>
 8003238:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800323c:	2000      	movs	r0, #0
 800323e:	f000 fa41 	bl	80036c4 <DisplayOutput>
		}
		if((Com.u8MSG_Type == 3) && (Com.u8Type == 2))//Print LectureRoom Screen
 8003242:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003246:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d117      	bne.n	8003280 <u8Use_Data+0xc10>
 8003250:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003254:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003258:	7a1b      	ldrb	r3, [r3, #8]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d110      	bne.n	8003280 <u8Use_Data+0xc10>
		{
			DisplayOutput(LectureRoom, Com);
 800325e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003262:	f5a3 7415 	sub.w	r4, r3, #596	; 0x254
 8003266:	4668      	mov	r0, sp
 8003268:	f104 030c 	add.w	r3, r4, #12
 800326c:	f44f 720f 	mov.w	r2, #572	; 0x23c
 8003270:	4619      	mov	r1, r3
 8003272:	f00e fbe4 	bl	8011a3e <memcpy>
 8003276:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800327a:	2001      	movs	r0, #1
 800327c:	f000 fa22 	bl	80036c4 <DisplayOutput>
		}
		//sleep mode
		if(Com.u8MSG_Type == 3)
 8003280:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003284:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003288:	785b      	ldrb	r3, [r3, #1]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d108      	bne.n	80032a0 <u8Use_Data+0xc30>
		{
			StandbyStart(Com.u32Sleep_Time, true);
 800328e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003292:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f8a2 	bl	80033e4 <StandbyStart>
		}
    }
    if(Com.u8Version == 2)
 80032a0:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80032a4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d122      	bne.n	80032f4 <u8Use_Data+0xc84>
    {
		HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 80032ae:	2201      	movs	r2, #1
 80032b0:	2104      	movs	r1, #4
 80032b2:	4816      	ldr	r0, [pc, #88]	; (800330c <u8Use_Data+0xc9c>)
 80032b4:	f004 f810 	bl	80072d8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80032b8:	2064      	movs	r0, #100	; 0x64
 80032ba:	f002 f88b 	bl	80053d4 <HAL_Delay>
		DEV_Module_Init();
 80032be:	f000 fa4d 	bl	800375c <DEV_Module_Init>
		HAL_Delay(100);
 80032c2:	2064      	movs	r0, #100	; 0x64
 80032c4:	f002 f886 	bl	80053d4 <HAL_Delay>
		EPD_7IN5_V2_Init();
 80032c8:	f000 fb68 	bl	800399c <EPD_7IN5_V2_Init>
		vPrint_Pixmap(u8Pixmap);
 80032cc:	f8d7 0b20 	ldr.w	r0, [r7, #2848]	; 0xb20
 80032d0:	f001 fda6 	bl	8004e20 <vPrint_Pixmap>
		HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2104      	movs	r1, #4
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <u8Use_Data+0xc9c>)
 80032da:	f003 fffd 	bl	80072d8 <HAL_GPIO_WritePin>
		DEV_Module_Exit();
 80032de:	f000 fa53 	bl	8003788 <DEV_Module_Exit>

		StandbyStart(Com.u32Sleep_Time, true);
 80032e2:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80032e6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f878 	bl	80033e4 <StandbyStart>
    }

	return 0;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	f607 3728 	addw	r7, r7, #2856	; 0xb28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003300:	08014308 	.word	0x08014308
 8003304:	080142a4 	.word	0x080142a4
 8003308:	08014310 	.word	0x08014310
 800330c:	48000400 	.word	0x48000400

08003310 <vConfig_Screen>:

void vConfig_Screen()
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 8003314:	2201      	movs	r2, #1
 8003316:	2104      	movs	r1, #4
 8003318:	480b      	ldr	r0, [pc, #44]	; (8003348 <vConfig_Screen+0x38>)
 800331a:	f003 ffdd 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800331e:	2064      	movs	r0, #100	; 0x64
 8003320:	f002 f858 	bl	80053d4 <HAL_Delay>
	DEV_Module_Init();
 8003324:	f000 fa1a 	bl	800375c <DEV_Module_Init>
	HAL_Delay(100);
 8003328:	2064      	movs	r0, #100	; 0x64
 800332a:	f002 f853 	bl	80053d4 <HAL_Delay>
	EPD_7IN5_V2_Init();
 800332e:	f000 fb35 	bl	800399c <EPD_7IN5_V2_Init>
	vPrint_Config_Screen();
 8003332:	f001 fa9f 	bl	8004874 <vPrint_Config_Screen>
	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2104      	movs	r1, #4
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <vConfig_Screen+0x38>)
 800333c:	f003 ffcc 	bl	80072d8 <HAL_GPIO_WritePin>
	DEV_Module_Exit();
 8003340:	f000 fa22 	bl	8003788 <DEV_Module_Exit>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	48000400 	.word	0x48000400

0800334c <vConfig_Done_Screen>:

void vConfig_Done_Screen(sEEPROM_Data_t* pData, uint8_t* pu8MAC)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 8003356:	2201      	movs	r2, #1
 8003358:	2104      	movs	r1, #4
 800335a:	480e      	ldr	r0, [pc, #56]	; (8003394 <vConfig_Done_Screen+0x48>)
 800335c:	f003 ffbc 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003360:	2064      	movs	r0, #100	; 0x64
 8003362:	f002 f837 	bl	80053d4 <HAL_Delay>
	DEV_Module_Init();
 8003366:	f000 f9f9 	bl	800375c <DEV_Module_Init>
	HAL_Delay(100);
 800336a:	2064      	movs	r0, #100	; 0x64
 800336c:	f002 f832 	bl	80053d4 <HAL_Delay>
	EPD_7IN5_V2_Init();
 8003370:	f000 fb14 	bl	800399c <EPD_7IN5_V2_Init>
	vPrint_Config_Done_Screen(pData, pu8MAC);
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f001 fb20 	bl	80049bc <vPrint_Config_Done_Screen>
	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 800337c:	2200      	movs	r2, #0
 800337e:	2104      	movs	r1, #4
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <vConfig_Done_Screen+0x48>)
 8003382:	f003 ffa9 	bl	80072d8 <HAL_GPIO_WritePin>
	DEV_Module_Exit();
 8003386:	f000 f9ff 	bl	8003788 <DEV_Module_Exit>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	48000400 	.word	0x48000400

08003398 <_Standby>:


uint32_t BackupRegister;

static void _Standby(uint32_t Seconds)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_RESET);
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033aa:	f003 ff95 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_RESET);
 80033ae:	2200      	movs	r2, #0
 80033b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b8:	f003 ff8e 	bl	80072d8 <HAL_GPIO_WritePin>

	HAL_SuspendTick();
 80033bc:	f002 f82e 	bl	800541c <HAL_SuspendTick>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, Seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 80033c0:	2204      	movs	r2, #4
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4805      	ldr	r0, [pc, #20]	; (80033dc <_Standby+0x44>)
 80033c6:	f005 fc1f 	bl	8008c08 <HAL_RTCEx_SetWakeUpTimer_IT>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <_Standby+0x48>)
 80033cc:	221f      	movs	r2, #31
 80033ce:	619a      	str	r2, [r3, #24]
	HAL_PWR_EnterSTANDBYMode();
 80033d0:	f003 ffc2 	bl	8007358 <HAL_PWR_EnterSTANDBYMode>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20001128 	.word	0x20001128
 80033e0:	40007000 	.word	0x40007000

080033e4 <StandbyStart>:

void StandbyStart(uint32_t Seconds, uint8_t Normal)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
	// Zugriff auf Backup-Register aktivieren
	HAL_PWR_EnableBkUpAccess();
 80033f0:	f003 ffa2 	bl	8007338 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BACKUPRESET_FORCE();
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <StandbyStart+0xa4>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	4a23      	ldr	r2, [pc, #140]	; (8003488 <StandbyStart+0xa4>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_BACKUPRESET_RELEASE();
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <StandbyStart+0xa4>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <StandbyStart+0xa4>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_RTC_ENABLE();
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <StandbyStart+0xa4>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <StandbyStart+0xa4>)
 800341c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	if(Normal == 1)
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d109      	bne.n	800343e <StandbyStart+0x5a>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x1000);
 800342a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342e:	2101      	movs	r1, #1
 8003430:	4816      	ldr	r0, [pc, #88]	; (800348c <StandbyStart+0xa8>)
 8003432:	f005 fca3 	bl	8008d7c <HAL_RTCEx_BKUPWrite>
		_Standby(Seconds);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffae 	bl	8003398 <_Standby>
			BackupRegister++;
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, BackupRegister);
			_Standby(3600); //the device will try again in one hour
		}
	}
}
 800343c:	e020      	b.n	8003480 <StandbyStart+0x9c>
		BackupRegister = BackupRegister & 0xF0FF;
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <StandbyStart+0xac>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8003446:	4013      	ands	r3, r2
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <StandbyStart+0xac>)
 800344a:	6013      	str	r3, [r2, #0]
		if (BackupRegister > (0x1000 + Connection_Attempts - 1))
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <StandbyStart+0xac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f241 0202 	movw	r2, #4098	; 0x1002
 8003454:	4293      	cmp	r3, r2
 8003456:	d903      	bls.n	8003460 <StandbyStart+0x7c>
			_Standby(86400); //the device tries again after one day
 8003458:	480e      	ldr	r0, [pc, #56]	; (8003494 <StandbyStart+0xb0>)
 800345a:	f7ff ff9d 	bl	8003398 <_Standby>
}
 800345e:	e00f      	b.n	8003480 <StandbyStart+0x9c>
			BackupRegister++;
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <StandbyStart+0xac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <StandbyStart+0xac>)
 8003468:	6013      	str	r3, [r2, #0]
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, BackupRegister);
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <StandbyStart+0xac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	2101      	movs	r1, #1
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <StandbyStart+0xa8>)
 8003474:	f005 fc82 	bl	8008d7c <HAL_RTCEx_BKUPWrite>
			_Standby(3600); //the device will try again in one hour
 8003478:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800347c:	f7ff ff8c 	bl	8003398 <_Standby>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	20001128 	.word	0x20001128
 8003490:	20001384 	.word	0x20001384
 8003494:	00015180 	.word	0x00015180

08003498 <HardwareResetCheck>:

void HardwareResetCheck(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); // Zugriff auf Backup-Register aktivieren
 800349c:	f003 ff4c 	bl	8007338 <HAL_PWR_EnableBkUpAccess>
	BackupRegister = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80034a0:	2101      	movs	r1, #1
 80034a2:	4810      	ldr	r0, [pc, #64]	; (80034e4 <HardwareResetCheck+0x4c>)
 80034a4:	f005 fc83 	bl	8008dae <HAL_RTCEx_BKUPRead>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HardwareResetCheck+0x50>)
 80034ac:	6013      	str	r3, [r2, #0]
	if ((BackupRegister & 0x0100) > 0)
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HardwareResetCheck+0x50>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HardwareResetCheck+0x36>
	{
	  //Hardware reset detected
	  Buzzer(200);
 80034ba:	20c8      	movs	r0, #200	; 0xc8
 80034bc:	f000 f858 	bl	8003570 <Buzzer>
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x1000);
 80034c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c4:	2101      	movs	r1, #1
 80034c6:	4807      	ldr	r0, [pc, #28]	; (80034e4 <HardwareResetCheck+0x4c>)
 80034c8:	f005 fc58 	bl	8008d7c <HAL_RTCEx_BKUPWrite>
	}
	else
	{
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, BackupRegister | 0x1100);
	}
}
 80034cc:	e008      	b.n	80034e0 <HardwareResetCheck+0x48>
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, BackupRegister | 0x1100);
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HardwareResetCheck+0x50>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80034d6:	461a      	mov	r2, r3
 80034d8:	2101      	movs	r1, #1
 80034da:	4802      	ldr	r0, [pc, #8]	; (80034e4 <HardwareResetCheck+0x4c>)
 80034dc:	f005 fc4e 	bl	8008d7c <HAL_RTCEx_BKUPWrite>
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20001128 	.word	0x20001128
 80034e8:	20001384 	.word	0x20001384

080034ec <StartWlanModule>:

void StartWlanModule()
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WLAN_POWER_GPIO_Port, WLAN_POWER_Pin, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fa:	f003 feed 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80034fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003502:	f001 ff67 	bl	80053d4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_RESET);
 8003506:	2200      	movs	r2, #0
 8003508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800350c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003510:	f003 fee2 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_RESET);
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800351a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351e:	f003 fedb 	bl	80072d8 <HAL_GPIO_WritePin>
	osDelay(1000);
 8003522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003526:	f00a ff2e 	bl	800e386 <osDelay>
	for (int i=0; i<4000000;i++);
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	e002      	b.n	8003536 <StartWlanModule+0x4a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3301      	adds	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a0c      	ldr	r2, [pc, #48]	; (800356c <StartWlanModule+0x80>)
 800353a:	4293      	cmp	r3, r2
 800353c:	ddf8      	ble.n	8003530 <StartWlanModule+0x44>
	HAL_GPIO_WritePin(EN_WLAN_GPIO_Port, EN_WLAN_Pin, GPIO_PIN_SET);
 800353e:	2201      	movs	r2, #1
 8003540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003548:	f003 fec6 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_WLAN_GPIO_Port, RST_WLAN_Pin, GPIO_PIN_SET);
 800354c:	2201      	movs	r2, #1
 800354e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003556:	f003 febf 	bl	80072d8 <HAL_GPIO_WritePin>
	osDelay(500);
 800355a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800355e:	f00a ff12 	bl	800e386 <osDelay>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	003d08ff 	.word	0x003d08ff

08003570 <Buzzer>:

void Buzzer(uint32_t MilliSecond)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim5,TIM_CHANNEL_2);
 8003578:	2104      	movs	r1, #4
 800357a:	4807      	ldr	r0, [pc, #28]	; (8003598 <Buzzer+0x28>)
 800357c:	f006 f8ca 	bl	8009714 <HAL_TIM_PWM_Start_IT>
	HAL_Delay(MilliSecond);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 ff27 	bl	80053d4 <HAL_Delay>
	HAL_TIM_PWM_Stop_IT(&htim5,TIM_CHANNEL_2);
 8003586:	2104      	movs	r1, #4
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <Buzzer+0x28>)
 800358a:	f006 fa17 	bl	80099bc <HAL_TIM_PWM_Stop_IT>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200011fc 	.word	0x200011fc

0800359c <VirtualEepromInitStatic>:
		Infopanel_MetaData.u16Server_Port = Data.u8Server_Port;
	}
}

void VirtualEepromInitStatic()
{
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	b0ab      	sub	sp, #172	; 0xac
 80035a0:	af02      	add	r7, sp, #8
	sEEPROM_Data_t Data;
	strcpy((char*)Data.u8Device_Name,(char*)"Beta");
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <VirtualEepromInitStatic+0xfc>)
 80035a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035aa:	6018      	str	r0, [r3, #0]
 80035ac:	3304      	adds	r3, #4
 80035ae:	7019      	strb	r1, [r3, #0]
	strcpy((char*)Data.u8WLAN_Name,(char*)"door-info");
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	3314      	adds	r3, #20
 80035b4:	4a39      	ldr	r2, [pc, #228]	; (800369c <VirtualEepromInitStatic+0x100>)
 80035b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80035b8:	c303      	stmia	r3!, {r0, r1}
 80035ba:	801a      	strh	r2, [r3, #0]
	strcpy((char*)Data.u8WLAN_Password,(char*)"xeos4Aev8ohvaht8pohl0Jasobiyahjuuqu6cohl7ao3os0OoShoh1mi0je3ahT");
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	3328      	adds	r3, #40	; 0x28
 80035c0:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <VirtualEepromInitStatic+0x104>)
 80035c2:	461c      	mov	r4, r3
 80035c4:	4615      	mov	r5, r2
 80035c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80035d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Data.u8Server_IP[0] = 141;
 80035da:	238d      	movs	r3, #141	; 0x8d
 80035dc:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	Data.u8Server_IP[1] = 79;
 80035e0:	234f      	movs	r3, #79	; 0x4f
 80035e2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	Data.u8Server_IP[2] = 71;
 80035e6:	2347      	movs	r3, #71	; 0x47
 80035e8:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	Data.u8Server_IP[3] = 207;
 80035ec:	23cf      	movs	r3, #207	; 0xcf
 80035ee:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	Data.u8Server_Port = 1234;
 80035f2:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80035f6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	strcpy((char*)Data.u8Domain,(char*)"aa94229c-e0f8-4a73-9461-a295d0390b7c");
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	336e      	adds	r3, #110	; 0x6e
 80035fe:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <VirtualEepromInitStatic+0x108>)
 8003600:	4614      	mov	r4, r2
 8003602:	469c      	mov	ip, r3
 8003604:	f104 0e20 	add.w	lr, r4, #32
 8003608:	4665      	mov	r5, ip
 800360a:	4626      	mov	r6, r4
 800360c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800360e:	6028      	str	r0, [r5, #0]
 8003610:	6069      	str	r1, [r5, #4]
 8003612:	60aa      	str	r2, [r5, #8]
 8003614:	60eb      	str	r3, [r5, #12]
 8003616:	3410      	adds	r4, #16
 8003618:	f10c 0c10 	add.w	ip, ip, #16
 800361c:	4574      	cmp	r4, lr
 800361e:	d1f3      	bne.n	8003608 <VirtualEepromInitStatic+0x6c>
 8003620:	4663      	mov	r3, ip
 8003622:	4622      	mov	r2, r4
 8003624:	6810      	ldr	r0, [r2, #0]
 8003626:	6018      	str	r0, [r3, #0]
 8003628:	7912      	ldrb	r2, [r2, #4]
 800362a:	711a      	strb	r2, [r3, #4]

	Infopanel_MetaData.eState = NORMAL_MODE;
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <VirtualEepromInitStatic+0x10c>)
 800362e:	2202      	movs	r2, #2
 8003630:	701a      	strb	r2, [r3, #0]
	strcpy((char*)Infopanel_MetaData.u8Device_Name,(char*)Data.u8Device_Name);
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	4619      	mov	r1, r3
 8003636:	481d      	ldr	r0, [pc, #116]	; (80036ac <VirtualEepromInitStatic+0x110>)
 8003638:	f00e f9f9 	bl	8011a2e <strcpy>
	strcpy((char*)Infopanel_MetaData.u8WLAN_Name,(char*)Data.u8WLAN_Name);
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	3314      	adds	r3, #20
 8003640:	4619      	mov	r1, r3
 8003642:	481b      	ldr	r0, [pc, #108]	; (80036b0 <VirtualEepromInitStatic+0x114>)
 8003644:	f00e f9f3 	bl	8011a2e <strcpy>
	strcpy((char*)Infopanel_MetaData.u8WLAN_Password,(char*)Data.u8WLAN_Password);
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	3328      	adds	r3, #40	; 0x28
 800364c:	4619      	mov	r1, r3
 800364e:	4819      	ldr	r0, [pc, #100]	; (80036b4 <VirtualEepromInitStatic+0x118>)
 8003650:	f00e f9ed 	bl	8011a2e <strcpy>
	strcpy((char*)Infopanel_MetaData.u8Domain,(char*)Data.u8Domain);
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	336e      	adds	r3, #110	; 0x6e
 8003658:	4619      	mov	r1, r3
 800365a:	4817      	ldr	r0, [pc, #92]	; (80036b8 <VirtualEepromInitStatic+0x11c>)
 800365c:	f00e f9e7 	bl	8011a2e <strcpy>
	sprintf((char *)Infopanel_MetaData.u8Server_IP,"%d.%d.%d.%d",Data.u8Server_IP[0],Data.u8Server_IP[1],Data.u8Server_IP[2],Data.u8Server_IP[3]);
 8003660:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8003664:	4619      	mov	r1, r3
 8003666:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800366a:	4618      	mov	r0, r3
 800366c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003670:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8003674:	9201      	str	r2, [sp, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4603      	mov	r3, r0
 800367a:	460a      	mov	r2, r1
 800367c:	490f      	ldr	r1, [pc, #60]	; (80036bc <VirtualEepromInitStatic+0x120>)
 800367e:	4810      	ldr	r0, [pc, #64]	; (80036c0 <VirtualEepromInitStatic+0x124>)
 8003680:	f00e f824 	bl	80116cc <siprintf>
	Infopanel_MetaData.u16Server_Port = Data.u8Server_Port;
 8003684:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <VirtualEepromInitStatic+0x10c>)
 800368a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800368e:	bf00      	nop
 8003690:	37a4      	adds	r7, #164	; 0xa4
 8003692:	46bd      	mov	sp, r7
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003696:	bf00      	nop
 8003698:	08014328 	.word	0x08014328
 800369c:	08014330 	.word	0x08014330
 80036a0:	0801433c 	.word	0x0801433c
 80036a4:	0801437c 	.word	0x0801437c
 80036a8:	200012d0 	.word	0x200012d0
 80036ac:	200012d1 	.word	0x200012d1
 80036b0:	200012e5 	.word	0x200012e5
 80036b4:	200012f9 	.word	0x200012f9
 80036b8:	2000133f 	.word	0x2000133f
 80036bc:	0801431c 	.word	0x0801431c
 80036c0:	20001367 	.word	0x20001367

080036c4 <DisplayOutput>:

void DisplayOutput(DriplayPrintMode_t Mode, struct sCommunication Com)
{
 80036c4:	b084      	sub	sp, #16
 80036c6:	b590      	push	{r4, r7, lr}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4604      	mov	r4, r0
 80036ce:	f107 001c 	add.w	r0, r7, #28
 80036d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80036d6:	4623      	mov	r3, r4
 80036d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 80036da:	2201      	movs	r2, #1
 80036dc:	2104      	movs	r1, #4
 80036de:	4815      	ldr	r0, [pc, #84]	; (8003734 <DisplayOutput+0x70>)
 80036e0:	f003 fdfa 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80036e4:	2064      	movs	r0, #100	; 0x64
 80036e6:	f001 fe75 	bl	80053d4 <HAL_Delay>
	DEV_Module_Init();
 80036ea:	f000 f837 	bl	800375c <DEV_Module_Init>
	HAL_Delay(100);
 80036ee:	2064      	movs	r0, #100	; 0x64
 80036f0:	f001 fe70 	bl	80053d4 <HAL_Delay>
	EPD_7IN5_V2_Init();
 80036f4:	f000 f952 	bl	800399c <EPD_7IN5_V2_Init>

	switch(Mode)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <DisplayOutput+0x40>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d005      	beq.n	800370e <DisplayOutput+0x4a>
 8003702:	e009      	b.n	8003718 <DisplayOutput+0x54>
	{
		case Office:
			vPrint_Skin_Office(&Com);
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fa17 	bl	8004b3c <vPrint_Skin_Office>
		case LectureRoom:
			vPrint_Skin_Lecture_Room(&Com);
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fbb4 	bl	8004e80 <vPrint_Skin_Lecture_Room>
	}

	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 8003718:	2200      	movs	r2, #0
 800371a:	2104      	movs	r1, #4
 800371c:	4805      	ldr	r0, [pc, #20]	; (8003734 <DisplayOutput+0x70>)
 800371e:	f003 fddb 	bl	80072d8 <HAL_GPIO_WritePin>
	DEV_Module_Exit();
 8003722:	f000 f831 	bl	8003788 <DEV_Module_Exit>
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003730:	b004      	add	sp, #16
 8003732:	4770      	bx	lr
 8003734:	48000400 	.word	0x48000400

08003738 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 8003742:	1df9      	adds	r1, r7, #7
 8003744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003748:	2201      	movs	r2, #1
 800374a:	4803      	ldr	r0, [pc, #12]	; (8003758 <DEV_SPI_WriteByte+0x20>)
 800374c:	f005 fbe8 	bl	8008f20 <HAL_SPI_Transmit>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000114c 	.word	0x2000114c

0800375c <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2120      	movs	r1, #32
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <DEV_Module_Init+0x28>)
 8003766:	f003 fdb7 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <DEV_Module_Init+0x28>)
 8003770:	f003 fdb2 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003774:	2201      	movs	r2, #1
 8003776:	2110      	movs	r1, #16
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <DEV_Module_Init+0x28>)
 800377a:	f003 fdad 	bl	80072d8 <HAL_GPIO_WritePin>
		return 0;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	48000400 	.word	0x48000400

08003788 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	2120      	movs	r1, #32
 8003790:	4807      	ldr	r0, [pc, #28]	; (80037b0 <DEV_Module_Exit+0x28>)
 8003792:	f003 fda1 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	4805      	ldr	r0, [pc, #20]	; (80037b0 <DEV_Module_Exit+0x28>)
 800379c:	f003 fd9c 	bl	80072d8 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2110      	movs	r1, #16
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <DEV_Module_Exit+0x28>)
 80037a6:	f003 fd97 	bl	80072d8 <HAL_GPIO_WritePin>
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	48000400 	.word	0x48000400

080037b4 <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80037b8:	2201      	movs	r2, #1
 80037ba:	2110      	movs	r1, #16
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <EPD_Reset+0x38>)
 80037be:	f003 fd8b 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80037c2:	20c8      	movs	r0, #200	; 0xc8
 80037c4:	f001 fe06 	bl	80053d4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2110      	movs	r1, #16
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <EPD_Reset+0x38>)
 80037ce:	f003 fd83 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80037d2:	2002      	movs	r0, #2
 80037d4:	f001 fdfe 	bl	80053d4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80037d8:	2201      	movs	r2, #1
 80037da:	2110      	movs	r1, #16
 80037dc:	4803      	ldr	r0, [pc, #12]	; (80037ec <EPD_Reset+0x38>)
 80037de:	f003 fd7b 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80037e2:	20c8      	movs	r0, #200	; 0xc8
 80037e4:	f001 fdf6 	bl	80053d4 <HAL_Delay>
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	48000400 	.word	0x48000400

080037f0 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(UBYTE Reg)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2120      	movs	r1, #32
 80037fe:	480a      	ldr	r0, [pc, #40]	; (8003828 <EPD_SendCommand+0x38>)
 8003800:	f003 fd6a 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <EPD_SendCommand+0x38>)
 800380a:	f003 fd65 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff91 	bl	8003738 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8003816:	2201      	movs	r2, #1
 8003818:	2140      	movs	r1, #64	; 0x40
 800381a:	4803      	ldr	r0, [pc, #12]	; (8003828 <EPD_SendCommand+0x38>)
 800381c:	f003 fd5c 	bl	80072d8 <HAL_GPIO_WritePin>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	48000400 	.word	0x48000400

0800382c <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(UBYTE Data)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8003836:	2201      	movs	r2, #1
 8003838:	2120      	movs	r1, #32
 800383a:	480a      	ldr	r0, [pc, #40]	; (8003864 <EPD_SendData+0x38>)
 800383c:	f003 fd4c 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	4807      	ldr	r0, [pc, #28]	; (8003864 <EPD_SendData+0x38>)
 8003846:	f003 fd47 	bl	80072d8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff73 	bl	8003738 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8003852:	2201      	movs	r2, #1
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	4803      	ldr	r0, [pc, #12]	; (8003864 <EPD_SendData+0x38>)
 8003858:	f003 fd3e 	bl	80072d8 <HAL_GPIO_WritePin>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	48000400 	.word	0x48000400

08003868 <EPD_WaitUntilIdle>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_WaitUntilIdle(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
    unsigned char busy;
	do{
		EPD_SendCommand(0x71);
 800386e:	2071      	movs	r0, #113	; 0x71
 8003870:	f7ff ffbe 	bl	80037f0 <EPD_SendCommand>
		busy = DEV_Digital_Read(EPD_BUSY_PIN);
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	480c      	ldr	r0, [pc, #48]	; (80038a8 <EPD_WaitUntilIdle+0x40>)
 8003878:	f003 fd16 	bl	80072a8 <HAL_GPIO_ReadPin>
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
		busy =!(busy & 0x01);        
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	71fb      	strb	r3, [r7, #7]
	}while(busy);   
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ea      	bne.n	800386e <EPD_WaitUntilIdle+0x6>
	DEV_Delay_ms(200);      
 8003898:	20c8      	movs	r0, #200	; 0xc8
 800389a:	f001 fd9b 	bl	80053d4 <HAL_Delay>
		
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	48000400 	.word	0x48000400

080038ac <EPD_7IN5_V2_LUT>:

static void EPD_7IN5_V2_LUT(UBYTE* lut_vcom,  UBYTE* lut_ww, UBYTE* lut_bw, UBYTE* lut_wb, UBYTE* lut_bb)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
	UBYTE count;

	EPD_SendCommand(0x20); //VCOM	
 80038ba:	2020      	movs	r0, #32
 80038bc:	f7ff ff98 	bl	80037f0 <EPD_SendCommand>
	for(count=0; count<42; count++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]
 80038c4:	e009      	b.n	80038da <EPD_7IN5_V2_LUT+0x2e>
		EPD_SendData(lut_vcom[count]);
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ffac 	bl	800382c <EPD_SendData>
	for(count=0; count<42; count++)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	3301      	adds	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b29      	cmp	r3, #41	; 0x29
 80038de:	d9f2      	bls.n	80038c6 <EPD_7IN5_V2_LUT+0x1a>

	EPD_SendCommand(0x21); //LUTBW
 80038e0:	2021      	movs	r0, #33	; 0x21
 80038e2:	f7ff ff85 	bl	80037f0 <EPD_SendCommand>
	for(count=0; count<42; count++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
 80038ea:	e009      	b.n	8003900 <EPD_7IN5_V2_LUT+0x54>
		EPD_SendData(lut_ww[count]);
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff99 	bl	800382c <EPD_SendData>
	for(count=0; count<42; count++)
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	3301      	adds	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b29      	cmp	r3, #41	; 0x29
 8003904:	d9f2      	bls.n	80038ec <EPD_7IN5_V2_LUT+0x40>

	EPD_SendCommand(0x22); //LUTBW
 8003906:	2022      	movs	r0, #34	; 0x22
 8003908:	f7ff ff72 	bl	80037f0 <EPD_SendCommand>
	for(count=0; count<42; count++)
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
 8003910:	e009      	b.n	8003926 <EPD_7IN5_V2_LUT+0x7a>
		EPD_SendData(lut_bw[count]);
 8003912:	7dfb      	ldrb	r3, [r7, #23]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff86 	bl	800382c <EPD_SendData>
	for(count=0; count<42; count++)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	3301      	adds	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b29      	cmp	r3, #41	; 0x29
 800392a:	d9f2      	bls.n	8003912 <EPD_7IN5_V2_LUT+0x66>

	EPD_SendCommand(0x23); //LUTWB
 800392c:	2023      	movs	r0, #35	; 0x23
 800392e:	f7ff ff5f 	bl	80037f0 <EPD_SendCommand>
	for(count=0; count<42; count++)
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]
 8003936:	e009      	b.n	800394c <EPD_7IN5_V2_LUT+0xa0>
		EPD_SendData(lut_wb[count]);
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4413      	add	r3, r2
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff73 	bl	800382c <EPD_SendData>
	for(count=0; count<42; count++)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	3301      	adds	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b29      	cmp	r3, #41	; 0x29
 8003950:	d9f2      	bls.n	8003938 <EPD_7IN5_V2_LUT+0x8c>

	EPD_SendCommand(0x24); //LUTBB
 8003952:	2024      	movs	r0, #36	; 0x24
 8003954:	f7ff ff4c 	bl	80037f0 <EPD_SendCommand>
	for(count=0; count<42; count++)
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
 800395c:	e009      	b.n	8003972 <EPD_7IN5_V2_LUT+0xc6>
		EPD_SendData(lut_bb[count]);
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff60 	bl	800382c <EPD_SendData>
	for(count=0; count<42; count++)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	3301      	adds	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b29      	cmp	r3, #41	; 0x29
 8003976:	d9f2      	bls.n	800395e <EPD_7IN5_V2_LUT+0xb2>
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <EPD_7IN5_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_7IN5_V2_TurnOnDisplay(void)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	af00      	add	r7, sp, #0
    EPD_SendCommand(0x12);			//DISPLAY REFRESH
 8003986:	2012      	movs	r0, #18
 8003988:	f7ff ff32 	bl	80037f0 <EPD_SendCommand>
    HAL_Delay(100);//DEV_Delay_ms(100);	        //!!!The delay here is necessary, 200uS at least!!!
 800398c:	2064      	movs	r0, #100	; 0x64
 800398e:	f001 fd21 	bl	80053d4 <HAL_Delay>
    EPD_WaitUntilIdle();
 8003992:	f7ff ff69 	bl	8003868 <EPD_WaitUntilIdle>
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <EPD_7IN5_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
UBYTE EPD_7IN5_V2_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af02      	add	r7, sp, #8
    EPD_Reset();
 80039a2:	f7ff ff07 	bl	80037b4 <EPD_Reset>
    // EPD_SendData(0x07);

    // EPD_SendCommand(0X60);			//TCON SETTING
    // EPD_SendData(0x22);

	EPD_SendCommand(0x01);  // power setting
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7ff ff22 	bl	80037f0 <EPD_SendCommand>
	EPD_SendData(0x17);  // 1-0=11: internal power
 80039ac:	2017      	movs	r0, #23
 80039ae:	f7ff ff3d 	bl	800382c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+6));  // VGH&VGL
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <EPD_7IN5_V2_Init+0x118>)
 80039b4:	799b      	ldrb	r3, [r3, #6]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff38 	bl	800382c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+1));  // VSH
 80039bc:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <EPD_7IN5_V2_Init+0x118>)
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff33 	bl	800382c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+2));  //  VSL
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <EPD_7IN5_V2_Init+0x118>)
 80039c8:	789b      	ldrb	r3, [r3, #2]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff2e 	bl	800382c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+3));  //  VSHR
 80039d0:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <EPD_7IN5_V2_Init+0x118>)
 80039d2:	78db      	ldrb	r3, [r3, #3]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff29 	bl	800382c <EPD_SendData>
	
	EPD_SendCommand(0x82);  // VCOM DC Setting
 80039da:	2082      	movs	r0, #130	; 0x82
 80039dc:	f7ff ff08 	bl	80037f0 <EPD_SendCommand>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+4));  // VCOM
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <EPD_7IN5_V2_Init+0x118>)
 80039e2:	791b      	ldrb	r3, [r3, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff21 	bl	800382c <EPD_SendData>

	EPD_SendCommand(0x06);  // Booster Setting
 80039ea:	2006      	movs	r0, #6
 80039ec:	f7ff ff00 	bl	80037f0 <EPD_SendCommand>
	EPD_SendData(0x27);
 80039f0:	2027      	movs	r0, #39	; 0x27
 80039f2:	f7ff ff1b 	bl	800382c <EPD_SendData>
	EPD_SendData(0x27);
 80039f6:	2027      	movs	r0, #39	; 0x27
 80039f8:	f7ff ff18 	bl	800382c <EPD_SendData>
	EPD_SendData(0x2F);
 80039fc:	202f      	movs	r0, #47	; 0x2f
 80039fe:	f7ff ff15 	bl	800382c <EPD_SendData>
	EPD_SendData(0x17);
 8003a02:	2017      	movs	r0, #23
 8003a04:	f7ff ff12 	bl	800382c <EPD_SendData>
	
	EPD_SendCommand(0x30);   // OSC Setting
 8003a08:	2030      	movs	r0, #48	; 0x30
 8003a0a:	f7ff fef1 	bl	80037f0 <EPD_SendCommand>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+0));  // 2-0=100: N=4  ; 5-3=111: M=7  ;  3C=50Hz     3A=100HZ
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <EPD_7IN5_V2_Init+0x118>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff0a 	bl	800382c <EPD_SendData>

    EPD_SendCommand(0x04); //POWER ON
 8003a18:	2004      	movs	r0, #4
 8003a1a:	f7ff fee9 	bl	80037f0 <EPD_SendCommand>
    DEV_Delay_ms(100);
 8003a1e:	2064      	movs	r0, #100	; 0x64
 8003a20:	f001 fcd8 	bl	80053d4 <HAL_Delay>
    EPD_WaitUntilIdle();
 8003a24:	f7ff ff20 	bl	8003868 <EPD_WaitUntilIdle>

    EPD_SendCommand(0X00);			//PANNEL SETTING
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7ff fee1 	bl	80037f0 <EPD_SendCommand>
    EPD_SendData(0x3F);   //KW-3f   KWR-2F	BWROTP 0f	BWOTP 1f
 8003a2e:	203f      	movs	r0, #63	; 0x3f
 8003a30:	f7ff fefc 	bl	800382c <EPD_SendData>

    EPD_SendCommand(0x61);        	//tres
 8003a34:	2061      	movs	r0, #97	; 0x61
 8003a36:	f7ff fedb 	bl	80037f0 <EPD_SendCommand>
    EPD_SendData(0x03);		//source 800
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f7ff fef6 	bl	800382c <EPD_SendData>
    EPD_SendData(0x20);
 8003a40:	2020      	movs	r0, #32
 8003a42:	f7ff fef3 	bl	800382c <EPD_SendData>
    EPD_SendData(0x01);		//gate 480
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7ff fef0 	bl	800382c <EPD_SendData>
    EPD_SendData(0xE0);
 8003a4c:	20e0      	movs	r0, #224	; 0xe0
 8003a4e:	f7ff feed 	bl	800382c <EPD_SendData>

    EPD_SendCommand(0X15);
 8003a52:	2015      	movs	r0, #21
 8003a54:	f7ff fecc 	bl	80037f0 <EPD_SendCommand>
    EPD_SendData(0x00);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f7ff fee7 	bl	800382c <EPD_SendData>

    EPD_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
 8003a5e:	2050      	movs	r0, #80	; 0x50
 8003a60:	f7ff fec6 	bl	80037f0 <EPD_SendCommand>
    EPD_SendData(0x10);
 8003a64:	2010      	movs	r0, #16
 8003a66:	f7ff fee1 	bl	800382c <EPD_SendData>
    EPD_SendData(0x00);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7ff fede 	bl	800382c <EPD_SendData>

    EPD_SendCommand(0X60);			//TCON SETTING
 8003a70:	2060      	movs	r0, #96	; 0x60
 8003a72:	f7ff febd 	bl	80037f0 <EPD_SendCommand>
    EPD_SendData(0x22);
 8003a76:	2022      	movs	r0, #34	; 0x22
 8003a78:	f7ff fed8 	bl	800382c <EPD_SendData>

    EPD_SendCommand(0x65);  // Resolution setting
 8003a7c:	2065      	movs	r0, #101	; 0x65
 8003a7e:	f7ff feb7 	bl	80037f0 <EPD_SendCommand>
    EPD_SendData(0x00);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f7ff fed2 	bl	800382c <EPD_SendData>
    EPD_SendData(0x00);//800*480
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f7ff fecf 	bl	800382c <EPD_SendData>
    EPD_SendData(0x00);
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7ff fecc 	bl	800382c <EPD_SendData>
    EPD_SendData(0x00);
 8003a94:	2000      	movs	r0, #0
 8003a96:	f7ff fec9 	bl	800382c <EPD_SendData>
	
	EPD_7IN5_V2_LUT(LUT_VCOM_7IN5_V2, LUT_WW_7IN5_V2, LUT_BW_7IN5_V2, LUT_WB_7IN5_V2, LUT_BB_7IN5_V2);
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <EPD_7IN5_V2_Init+0x11c>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <EPD_7IN5_V2_Init+0x120>)
 8003aa0:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <EPD_7IN5_V2_Init+0x124>)
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <EPD_7IN5_V2_Init+0x128>)
 8003aa4:	4808      	ldr	r0, [pc, #32]	; (8003ac8 <EPD_7IN5_V2_Init+0x12c>)
 8003aa6:	f7ff ff01 	bl	80038ac <EPD_7IN5_V2_LUT>

    return 0;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000008 	.word	0x20000008
 8003ab8:	200000c0 	.word	0x200000c0
 8003abc:	20000094 	.word	0x20000094
 8003ac0:	20000068 	.word	0x20000068
 8003ac4:	2000003c 	.word	0x2000003c
 8003ac8:	20000010 	.word	0x20000010

08003acc <EPD_7IN5_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_7IN5_V2_Display(const UBYTE *blackimage)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    UDOUBLE Width, Height;
    Width =(EPD_7IN5_V2_WIDTH % 8 == 0)?(EPD_7IN5_V2_WIDTH / 8 ):(EPD_7IN5_V2_WIDTH / 8 + 1);
 8003ad4:	2364      	movs	r3, #100	; 0x64
 8003ad6:	60fb      	str	r3, [r7, #12]
    Height = EPD_7IN5_V2_HEIGHT;
 8003ad8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003adc:	60bb      	str	r3, [r7, #8]
    
	//send black data
    EPD_SendCommand(0x13);
 8003ade:	2013      	movs	r0, #19
 8003ae0:	f7ff fe86 	bl	80037f0 <EPD_SendCommand>
    for (UDOUBLE j = 0; j < Height; j++) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e01a      	b.n	8003b20 <EPD_7IN5_V2_Display+0x54>
        for (UDOUBLE i = 0; i < Width; i++) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e010      	b.n	8003b12 <EPD_7IN5_V2_Display+0x46>
            EPD_SendData(~blackimage[i + j * Width]);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	fb03 f202 	mul.w	r2, r3, r2
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fe90 	bl	800382c <EPD_SendData>
        for (UDOUBLE i = 0; i < Width; i++) {
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d3ea      	bcc.n	8003af0 <EPD_7IN5_V2_Display+0x24>
    for (UDOUBLE j = 0; j < Height; j++) {
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d3e0      	bcc.n	8003aea <EPD_7IN5_V2_Display+0x1e>
        }
    }
    EPD_7IN5_V2_TurnOnDisplay();
 8003b28:	f7ff ff2b 	bl	8003982 <EPD_7IN5_V2_TurnOnDisplay>
}
 8003b2c:	bf00      	nop
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	460b      	mov	r3, r1
 8003b48:	813b      	strh	r3, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8003b54:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8003b5a:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8003b60:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b62:	893b      	ldrh	r3, [r7, #8]
 8003b64:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8003b66:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b68:	8b3b      	ldrh	r3, [r7, #24]
 8003b6a:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b6e:	2202      	movs	r2, #2
 8003b70:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8003b72:	897b      	ldrh	r3, [r7, #10]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <Paint_NewImage+0x52>
 8003b7e:	897b      	ldrh	r3, [r7, #10]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	e004      	b.n	8003b90 <Paint_NewImage+0x5c>
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b92:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b96:	893b      	ldrh	r3, [r7, #8]
 8003b98:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <Paint_NewImage+0xa8>)
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <Paint_NewImage+0xa8>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <Paint_NewImage+0x7e>
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	2bb4      	cmp	r3, #180	; 0xb4
 8003bb0:	d106      	bne.n	8003bc0 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <Paint_NewImage+0xa8>)
 8003bb4:	897b      	ldrh	r3, [r7, #10]
 8003bb6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <Paint_NewImage+0xa8>)
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	80d3      	strh	r3, [r2, #6]
 8003bbe:	e006      	b.n	8003bce <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8003bc0:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <Paint_NewImage+0xa8>)
 8003bc2:	893b      	ldrh	r3, [r7, #8]
 8003bc4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <Paint_NewImage+0xa8>)
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	80d3      	strh	r3, [r2, #6]
    }
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20001388 	.word	0x20001388

08003be0 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <Paint_SelectImage+0x1c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20001388 	.word	0x20001388

08003c00 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b08b      	sub	sp, #44	; 0x2c
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	80bb      	strh	r3, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8003c12:	4ba0      	ldr	r3, [pc, #640]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c14:	889b      	ldrh	r3, [r3, #4]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	f200 812f 	bhi.w	8003e7c <Paint_SetPixel+0x27c>
 8003c1e:	4b9d      	ldr	r3, [pc, #628]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c20:	88db      	ldrh	r3, [r3, #6]
 8003c22:	88ba      	ldrh	r2, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	f200 8129 	bhi.w	8003e7c <Paint_SetPixel+0x27c>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8003c2a:	4b9a      	ldr	r3, [pc, #616]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c2c:	89db      	ldrh	r3, [r3, #14]
 8003c2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003c32:	d02b      	beq.n	8003c8c <Paint_SetPixel+0x8c>
 8003c34:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003c38:	f300 8122 	bgt.w	8003e80 <Paint_SetPixel+0x280>
 8003c3c:	2bb4      	cmp	r3, #180	; 0xb4
 8003c3e:	d016      	beq.n	8003c6e <Paint_SetPixel+0x6e>
 8003c40:	2bb4      	cmp	r3, #180	; 0xb4
 8003c42:	f300 811d 	bgt.w	8003e80 <Paint_SetPixel+0x280>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <Paint_SetPixel+0x50>
 8003c4a:	2b5a      	cmp	r3, #90	; 0x5a
 8003c4c:	d005      	beq.n	8003c5a <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8003c4e:	e117      	b.n	8003e80 <Paint_SetPixel+0x280>
        X = Xpoint;
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8003c54:	88bb      	ldrh	r3, [r7, #4]
 8003c56:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003c58:	e022      	b.n	8003ca0 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 8003c5a:	4b8e      	ldr	r3, [pc, #568]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c5c:	891a      	ldrh	r2, [r3, #8]
 8003c5e:	88bb      	ldrh	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003c6c:	e018      	b.n	8003ca0 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 8003c6e:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c70:	891a      	ldrh	r2, [r3, #8]
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8003c7c:	4b85      	ldr	r3, [pc, #532]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c7e:	895a      	ldrh	r2, [r3, #10]
 8003c80:	88bb      	ldrh	r3, [r7, #4]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003c8a:	e009      	b.n	8003ca0 <Paint_SetPixel+0xa0>
        X = Ypoint;
 8003c8c:	88bb      	ldrh	r3, [r7, #4]
 8003c8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8003c90:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <Paint_SetPixel+0x294>)
 8003c92:	895a      	ldrh	r2, [r3, #10]
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003c9e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8003ca0:	4b7c      	ldr	r3, [pc, #496]	; (8003e94 <Paint_SetPixel+0x294>)
 8003ca2:	8a1b      	ldrh	r3, [r3, #16]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	f200 80ed 	bhi.w	8003e84 <Paint_SetPixel+0x284>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <Paint_SetPixel+0xb0>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cff 	.word	0x08003cff
 8003cb4:	08003cc1 	.word	0x08003cc1
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003ce1 	.word	0x08003ce1
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8003cc0:	4b74      	ldr	r3, [pc, #464]	; (8003e94 <Paint_SetPixel+0x294>)
 8003cc2:	891a      	ldrh	r2, [r3, #8]
 8003cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8003cce:	e017      	b.n	8003d00 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <Paint_SetPixel+0x294>)
 8003cd2:	895a      	ldrh	r2, [r3, #10]
 8003cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003cde:	e00f      	b.n	8003d00 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <Paint_SetPixel+0x294>)
 8003ce2:	891a      	ldrh	r2, [r3, #8]
 8003ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8003cee:	4b69      	ldr	r3, [pc, #420]	; (8003e94 <Paint_SetPixel+0x294>)
 8003cf0:	895a      	ldrh	r2, [r3, #10]
 8003cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8003cfc:	e000      	b.n	8003d00 <Paint_SetPixel+0x100>
        break;
 8003cfe:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d02:	891b      	ldrh	r3, [r3, #8]
 8003d04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d06:	429a      	cmp	r2, r3
 8003d08:	f200 80be 	bhi.w	8003e88 <Paint_SetPixel+0x288>
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d0e:	895b      	ldrh	r3, [r3, #10]
 8003d10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d12:	429a      	cmp	r2, r3
 8003d14:	f200 80b8 	bhi.w	8003e88 <Paint_SetPixel+0x288>
        return;
    }
    
    if(Paint.Scale == 2){
 8003d18:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d1a:	8adb      	ldrh	r3, [r3, #22]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d139      	bne.n	8003d94 <Paint_SetPixel+0x194>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8003d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d2a:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d2c:	8a52      	ldrh	r2, [r2, #18]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	440b      	add	r3, r1
 8003d34:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8003d36:	4b57      	ldr	r3, [pc, #348]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d113      	bne.n	8003d70 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8003d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	fa42 f303 	asr.w	r3, r2, r3
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	b25a      	sxtb	r2, r3
 8003d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b259      	sxtb	r1, r3
 8003d62:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2ca      	uxtb	r2, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e08c      	b.n	8003e8a <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8003d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	fa42 f303 	asr.w	r3, r2, r3
 8003d7c:	b25a      	sxtb	r2, r3
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b259      	sxtb	r1, r3
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	b2ca      	uxtb	r2, r1
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e07a      	b.n	8003e8a <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8003d94:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <Paint_SetPixel+0x294>)
 8003d96:	8adb      	ldrh	r3, [r3, #22]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d137      	bne.n	8003e0c <Paint_SetPixel+0x20c>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8003d9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4619      	mov	r1, r3
 8003da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <Paint_SetPixel+0x294>)
 8003da8:	8a52      	ldrh	r2, [r2, #18]
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	440b      	add	r3, r1
 8003db0:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <Paint_SetPixel+0x294>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8003dc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	22c0      	movs	r2, #192	; 0xc0
 8003dd0:	fa42 f303 	asr.w	r3, r2, r3
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	b25a      	sxtb	r2, r3
 8003dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dde:	4013      	ands	r3, r2
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	019a      	lsls	r2, r3, #6
 8003de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa42 f303 	asr.w	r3, r2, r3
 8003df4:	b25a      	sxtb	r2, r3
 8003df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b259      	sxtb	r1, r3
 8003dfe:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <Paint_SetPixel+0x294>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4413      	add	r3, r2
 8003e06:	b2ca      	uxtb	r2, r1
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e03e      	b.n	8003e8a <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <Paint_SetPixel+0x294>)
 8003e0e:	8adb      	ldrh	r3, [r3, #22]
 8003e10:	2b07      	cmp	r3, #7
 8003e12:	d13a      	bne.n	8003e8a <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8003e14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <Paint_SetPixel+0x294>)
 8003e20:	8a52      	ldrh	r2, [r2, #18]
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	440b      	add	r3, r1
 8003e28:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <Paint_SetPixel+0x294>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4413      	add	r3, r2
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8003e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	22f0      	movs	r2, #240	; 0xf0
 8003e40:	fa42 f303 	asr.w	r3, r2, r3
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	b25a      	sxtb	r2, r3
 8003e4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	b25b      	sxtb	r3, r3
 8003e52:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	011a      	lsls	r2, r3, #4
 8003e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	fa42 f303 	asr.w	r3, r2, r3
 8003e64:	b25a      	sxtb	r2, r3
 8003e66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b259      	sxtb	r1, r3
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <Paint_SetPixel+0x294>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	4413      	add	r3, r2
 8003e76:	b2ca      	uxtb	r2, r1
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e006      	b.n	8003e8a <Paint_SetPixel+0x28a>
        return;
 8003e7c:	bf00      	nop
 8003e7e:	e004      	b.n	8003e8a <Paint_SetPixel+0x28a>
        return;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <Paint_SetPixel+0x28a>
        return;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <Paint_SetPixel+0x28a>
        return;
 8003e88:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8003e8a:	372c      	adds	r7, #44	; 0x2c
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	20001388 	.word	0x20001388

08003e98 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8003ea2:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <Paint_Clear+0x13c>)
 8003ea4:	8adb      	ldrh	r3, [r3, #22]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d125      	bne.n	8003ef6 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003eaa:	2300      	movs	r3, #0
 8003eac:	83fb      	strh	r3, [r7, #30]
 8003eae:	e01c      	b.n	8003eea <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	83bb      	strh	r3, [r7, #28]
 8003eb4:	e011      	b.n	8003eda <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003eb6:	8bba      	ldrh	r2, [r7, #28]
 8003eb8:	8bfb      	ldrh	r3, [r7, #30]
 8003eba:	4946      	ldr	r1, [pc, #280]	; (8003fd4 <Paint_Clear+0x13c>)
 8003ebc:	8a49      	ldrh	r1, [r1, #18]
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8003ec6:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <Paint_Clear+0x13c>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4413      	add	r3, r2
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8003ed4:	8bbb      	ldrh	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	83bb      	strh	r3, [r7, #28]
 8003eda:	4b3e      	ldr	r3, [pc, #248]	; (8003fd4 <Paint_Clear+0x13c>)
 8003edc:	8a5b      	ldrh	r3, [r3, #18]
 8003ede:	8bba      	ldrh	r2, [r7, #28]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d3e8      	bcc.n	8003eb6 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003ee4:	8bfb      	ldrh	r3, [r7, #30]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	83fb      	strh	r3, [r7, #30]
 8003eea:	4b3a      	ldr	r3, [pc, #232]	; (8003fd4 <Paint_Clear+0x13c>)
 8003eec:	8a9b      	ldrh	r3, [r3, #20]
 8003eee:	8bfa      	ldrh	r2, [r7, #30]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3dd      	bcc.n	8003eb0 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8003ef4:	e068      	b.n	8003fc8 <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 8003ef6:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <Paint_Clear+0x13c>)
 8003ef8:	8adb      	ldrh	r3, [r3, #22]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d135      	bne.n	8003f6a <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	837b      	strh	r3, [r7, #26]
 8003f02:	e02c      	b.n	8003f5e <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003f04:	2300      	movs	r3, #0
 8003f06:	833b      	strh	r3, [r7, #24]
 8003f08:	e021      	b.n	8003f4e <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003f0a:	8b3a      	ldrh	r2, [r7, #24]
 8003f0c:	8b7b      	ldrh	r3, [r7, #26]
 8003f0e:	4931      	ldr	r1, [pc, #196]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f10:	8a49      	ldrh	r1, [r1, #18]
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	019b      	lsls	r3, r3, #6
 8003f1e:	b25a      	sxtb	r2, r3
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b25a      	sxtb	r2, r3
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b25a      	sxtb	r2, r3
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	b259      	sxtb	r1, r3
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	b2ca      	uxtb	r2, r1
 8003f46:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003f48:	8b3b      	ldrh	r3, [r7, #24]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	833b      	strh	r3, [r7, #24]
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f50:	8a5b      	ldrh	r3, [r3, #18]
 8003f52:	8b3a      	ldrh	r2, [r7, #24]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3d8      	bcc.n	8003f0a <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003f58:	8b7b      	ldrh	r3, [r7, #26]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	837b      	strh	r3, [r7, #26]
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f60:	8a9b      	ldrh	r3, [r3, #20]
 8003f62:	8b7a      	ldrh	r2, [r7, #26]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d3cd      	bcc.n	8003f04 <Paint_Clear+0x6c>
}
 8003f68:	e02e      	b.n	8003fc8 <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f6c:	8adb      	ldrh	r3, [r3, #22]
 8003f6e:	2b07      	cmp	r3, #7
 8003f70:	d12a      	bne.n	8003fc8 <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003f72:	2300      	movs	r3, #0
 8003f74:	82fb      	strh	r3, [r7, #22]
 8003f76:	e022      	b.n	8003fbe <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003f78:	2300      	movs	r3, #0
 8003f7a:	82bb      	strh	r3, [r7, #20]
 8003f7c:	e017      	b.n	8003fae <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003f7e:	8aba      	ldrh	r2, [r7, #20]
 8003f80:	8afb      	ldrh	r3, [r7, #22]
 8003f82:	4914      	ldr	r1, [pc, #80]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f84:	8a49      	ldrh	r1, [r1, #18]
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	b25a      	sxtb	r2, r3
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	b259      	sxtb	r1, r3
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <Paint_Clear+0x13c>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	b2ca      	uxtb	r2, r1
 8003fa6:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003fa8:	8abb      	ldrh	r3, [r7, #20]
 8003faa:	3301      	adds	r3, #1
 8003fac:	82bb      	strh	r3, [r7, #20]
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <Paint_Clear+0x13c>)
 8003fb0:	8a5b      	ldrh	r3, [r3, #18]
 8003fb2:	8aba      	ldrh	r2, [r7, #20]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d3e2      	bcc.n	8003f7e <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003fb8:	8afb      	ldrh	r3, [r7, #22]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	82fb      	strh	r3, [r7, #22]
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <Paint_Clear+0x13c>)
 8003fc0:	8a9b      	ldrh	r3, [r3, #20]
 8003fc2:	8afa      	ldrh	r2, [r7, #22]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3d7      	bcc.n	8003f78 <Paint_Clear+0xe0>
}
 8003fc8:	bf00      	nop
 8003fca:	3724      	adds	r7, #36	; 0x24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20001388 	.word	0x20001388

08003fd8 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	80fb      	strh	r3, [r7, #6]
 8003fea:	4603      	mov	r3, r0
 8003fec:	80bb      	strh	r3, [r7, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	807b      	strh	r3, [r7, #2]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8003ff6:	4b48      	ldr	r3, [pc, #288]	; (8004118 <Paint_DrawPoint+0x140>)
 8003ff8:	889b      	ldrh	r3, [r3, #4]
 8003ffa:	88fa      	ldrh	r2, [r7, #6]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d804      	bhi.n	800400a <Paint_DrawPoint+0x32>
 8004000:	4b45      	ldr	r3, [pc, #276]	; (8004118 <Paint_DrawPoint+0x140>)
 8004002:	88db      	ldrh	r3, [r3, #6]
 8004004:	88ba      	ldrh	r2, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90e      	bls.n	8004028 <Paint_DrawPoint+0x50>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	4a42      	ldr	r2, [pc, #264]	; (8004118 <Paint_DrawPoint+0x140>)
 800400e:	8892      	ldrh	r2, [r2, #4]
 8004010:	4619      	mov	r1, r3
 8004012:	4842      	ldr	r0, [pc, #264]	; (800411c <Paint_DrawPoint+0x144>)
 8004014:	f00d fb48 	bl	80116a8 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8004018:	88bb      	ldrh	r3, [r7, #4]
 800401a:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <Paint_DrawPoint+0x140>)
 800401c:	88d2      	ldrh	r2, [r2, #6]
 800401e:	4619      	mov	r1, r3
 8004020:	483f      	ldr	r0, [pc, #252]	; (8004120 <Paint_DrawPoint+0x148>)
 8004022:	f00d fb41 	bl	80116a8 <iprintf>
        return;
 8004026:	e074      	b.n	8004112 <Paint_DrawPoint+0x13a>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8004028:	f897 3020 	ldrb.w	r3, [r7, #32]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d144      	bne.n	80040ba <Paint_DrawPoint+0xe2>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8004030:	2300      	movs	r3, #0
 8004032:	81fb      	strh	r3, [r7, #14]
 8004034:	e039      	b.n	80040aa <Paint_DrawPoint+0xd2>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004036:	2300      	movs	r3, #0
 8004038:	81bb      	strh	r3, [r7, #12]
 800403a:	e029      	b.n	8004090 <Paint_DrawPoint+0xb8>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004042:	441a      	add	r2, r3
 8004044:	787b      	ldrb	r3, [r7, #1]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	db28      	blt.n	800409e <Paint_DrawPoint+0xc6>
 800404c:	88ba      	ldrh	r2, [r7, #4]
 800404e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004052:	441a      	add	r2, r3
 8004054:	787b      	ldrb	r3, [r7, #1]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	db20      	blt.n	800409e <Paint_DrawPoint+0xc6>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800405c:	89fa      	ldrh	r2, [r7, #14]
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	4413      	add	r3, r2
 8004062:	b29a      	uxth	r2, r3
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	b29b      	uxth	r3, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	b298      	uxth	r0, r3
 800406c:	89ba      	ldrh	r2, [r7, #12]
 800406e:	88bb      	ldrh	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	b29a      	uxth	r2, r3
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	b29b      	uxth	r3, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	b29b      	uxth	r3, r3
 800407c:	887a      	ldrh	r2, [r7, #2]
 800407e:	4619      	mov	r1, r3
 8004080:	f7ff fdbe 	bl	8003c00 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004084:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004088:	b29b      	uxth	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	81bb      	strh	r3, [r7, #12]
 8004090:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004094:	787b      	ldrb	r3, [r7, #1]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	429a      	cmp	r2, r3
 800409c:	dbce      	blt.n	800403c <Paint_DrawPoint+0x64>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800409e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	81fb      	strh	r3, [r7, #14]
 80040aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80040ae:	787b      	ldrb	r3, [r7, #1]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	dbbe      	blt.n	8004036 <Paint_DrawPoint+0x5e>
 80040b8:	e02b      	b.n	8004112 <Paint_DrawPoint+0x13a>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	81fb      	strh	r3, [r7, #14]
 80040be:	e023      	b.n	8004108 <Paint_DrawPoint+0x130>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80040c0:	2300      	movs	r3, #0
 80040c2:	81bb      	strh	r3, [r7, #12]
 80040c4:	e015      	b.n	80040f2 <Paint_DrawPoint+0x11a>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80040c6:	89fa      	ldrh	r2, [r7, #14]
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b298      	uxth	r0, r3
 80040d2:	89ba      	ldrh	r2, [r7, #12]
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29b      	uxth	r3, r3
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7ff fd8d 	bl	8003c00 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80040e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3301      	adds	r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	81bb      	strh	r3, [r7, #12]
 80040f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80040f6:	787b      	ldrb	r3, [r7, #1]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	dbe4      	blt.n	80040c6 <Paint_DrawPoint+0xee>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80040fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004100:	b29b      	uxth	r3, r3
 8004102:	3301      	adds	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	81fb      	strh	r3, [r7, #14]
 8004108:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	429a      	cmp	r2, r3
 8004110:	dbd6      	blt.n	80040c0 <Paint_DrawPoint+0xe8>
            }
        }
    }
}
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	20001388 	.word	0x20001388
 800411c:	080143a4 	.word	0x080143a4
 8004120:	080143c8 	.word	0x080143c8

08004124 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08d      	sub	sp, #52	; 0x34
 8004128:	af02      	add	r7, sp, #8
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4623      	mov	r3, r4
 8004134:	80fb      	strh	r3, [r7, #6]
 8004136:	4603      	mov	r3, r0
 8004138:	80bb      	strh	r3, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	807b      	strh	r3, [r7, #2]
 800413e:	4613      	mov	r3, r2
 8004140:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004142:	4b4b      	ldr	r3, [pc, #300]	; (8004270 <Paint_DrawLine+0x14c>)
 8004144:	889b      	ldrh	r3, [r3, #4]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	429a      	cmp	r2, r3
 800414a:	f200 8088 	bhi.w	800425e <Paint_DrawLine+0x13a>
 800414e:	4b48      	ldr	r3, [pc, #288]	; (8004270 <Paint_DrawLine+0x14c>)
 8004150:	88db      	ldrh	r3, [r3, #6]
 8004152:	88ba      	ldrh	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	f200 8082 	bhi.w	800425e <Paint_DrawLine+0x13a>
        Xend > Paint.Width || Yend > Paint.Height) {
 800415a:	4b45      	ldr	r3, [pc, #276]	; (8004270 <Paint_DrawLine+0x14c>)
 800415c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	429a      	cmp	r2, r3
 8004162:	d87c      	bhi.n	800425e <Paint_DrawLine+0x13a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8004164:	4b42      	ldr	r3, [pc, #264]	; (8004270 <Paint_DrawLine+0x14c>)
 8004166:	88db      	ldrh	r3, [r3, #6]
 8004168:	883a      	ldrh	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d877      	bhi.n	800425e <Paint_DrawLine+0x13a>
        return;
    }

    UWORD Xpoint = Xstart;
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8004172:	88bb      	ldrh	r3, [r7, #4]
 8004174:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	bfb8      	it	lt
 8004180:	425b      	neglt	r3, r3
 8004182:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8004184:	883a      	ldrh	r2, [r7, #0]
 8004186:	88bb      	ldrh	r3, [r7, #4]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	bfb8      	it	lt
 800418e:	425b      	neglt	r3, r3
 8004190:	425b      	negs	r3, r3
 8004192:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8004194:	88fa      	ldrh	r2, [r7, #6]
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	429a      	cmp	r2, r3
 800419a:	d201      	bcs.n	80041a0 <Paint_DrawLine+0x7c>
 800419c:	2301      	movs	r3, #1
 800419e:	e001      	b.n	80041a4 <Paint_DrawLine+0x80>
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80041a6:	88ba      	ldrh	r2, [r7, #4]
 80041a8:	883b      	ldrh	r3, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d201      	bcs.n	80041b2 <Paint_DrawLine+0x8e>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e001      	b.n	80041b6 <Paint_DrawLine+0x92>
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80041c4:	7ffb      	ldrb	r3, [r7, #31]
 80041c6:	3301      	adds	r3, #1
 80041c8:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80041ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d117      	bne.n	8004202 <Paint_DrawLine+0xde>
 80041d2:	7ffa      	ldrb	r2, [r7, #31]
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <Paint_DrawLine+0x150>)
 80041d6:	fba3 1302 	umull	r1, r3, r3, r2
 80041da:	0859      	lsrs	r1, r3, #1
 80041dc:	460b      	mov	r3, r1
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	440b      	add	r3, r1
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <Paint_DrawLine+0xde>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80041ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80041ee:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80041f0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80041f2:	2201      	movs	r2, #1
 80041f4:	9200      	str	r2, [sp, #0]
 80041f6:	22ff      	movs	r2, #255	; 0xff
 80041f8:	f7ff feee 	bl	8003fd8 <Paint_DrawPoint>
            Dotted_Len = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e008      	b.n	8004214 <Paint_DrawLine+0xf0>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8004202:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004206:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004208:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800420a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800420c:	2401      	movs	r4, #1
 800420e:	9400      	str	r4, [sp, #0]
 8004210:	f7ff fee2 	bl	8003fd8 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	429a      	cmp	r2, r3
 800421c:	dc0c      	bgt.n	8004238 <Paint_DrawLine+0x114>
            if (Xpoint == Xend)
 800421e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004220:	887b      	ldrh	r3, [r7, #2]
 8004222:	429a      	cmp	r2, r3
 8004224:	d01d      	beq.n	8004262 <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4413      	add	r3, r2
 800422c:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	b29a      	uxth	r2, r3
 8004232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004234:	4413      	add	r3, r2
 8004236:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	429a      	cmp	r2, r3
 8004240:	dbc0      	blt.n	80041c4 <Paint_DrawLine+0xa0>
            if (Ypoint == Yend)
 8004242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004244:	883b      	ldrh	r3, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d00d      	beq.n	8004266 <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	b29a      	uxth	r2, r3
 8004256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004258:	4413      	add	r3, r2
 800425a:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800425c:	e7b2      	b.n	80041c4 <Paint_DrawLine+0xa0>
        return;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <Paint_DrawLine+0x144>
                break;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <Paint_DrawLine+0x144>
                break;
 8004266:	bf00      	nop
        }
    }
}
 8004268:	372c      	adds	r7, #44	; 0x2c
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}
 800426e:	bf00      	nop
 8004270:	20001388 	.word	0x20001388
 8004274:	aaaaaaab 	.word	0xaaaaaaab

08004278 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af04      	add	r7, sp, #16
 800427e:	4604      	mov	r4, r0
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4623      	mov	r3, r4
 8004288:	80fb      	strh	r3, [r7, #6]
 800428a:	4603      	mov	r3, r0
 800428c:	80bb      	strh	r3, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]
 8004292:	4613      	mov	r3, r2
 8004294:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <Paint_DrawRectangle+0xfc>)
 8004298:	889b      	ldrh	r3, [r3, #4]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	429a      	cmp	r2, r3
 800429e:	d864      	bhi.n	800436a <Paint_DrawRectangle+0xf2>
 80042a0:	4b34      	ldr	r3, [pc, #208]	; (8004374 <Paint_DrawRectangle+0xfc>)
 80042a2:	88db      	ldrh	r3, [r3, #6]
 80042a4:	88ba      	ldrh	r2, [r7, #4]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d85f      	bhi.n	800436a <Paint_DrawRectangle+0xf2>
        Xend > Paint.Width || Yend > Paint.Height) {
 80042aa:	4b32      	ldr	r3, [pc, #200]	; (8004374 <Paint_DrawRectangle+0xfc>)
 80042ac:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d85a      	bhi.n	800436a <Paint_DrawRectangle+0xf2>
        Xend > Paint.Width || Yend > Paint.Height) {
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <Paint_DrawRectangle+0xfc>)
 80042b6:	88db      	ldrh	r3, [r3, #6]
 80042b8:	883a      	ldrh	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d855      	bhi.n	800436a <Paint_DrawRectangle+0xf2>
        return;
    }

    if (Draw_Fill) {
 80042be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d018      	beq.n	80042f8 <Paint_DrawRectangle+0x80>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80042c6:	88bb      	ldrh	r3, [r7, #4]
 80042c8:	81fb      	strh	r3, [r7, #14]
 80042ca:	e010      	b.n	80042ee <Paint_DrawRectangle+0x76>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 80042cc:	89fc      	ldrh	r4, [r7, #14]
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	89f9      	ldrh	r1, [r7, #14]
 80042d2:	88f8      	ldrh	r0, [r7, #6]
 80042d4:	2300      	movs	r3, #0
 80042d6:	9302      	str	r3, [sp, #8]
 80042d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	8c3b      	ldrh	r3, [r7, #32]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4623      	mov	r3, r4
 80042e4:	f7ff ff1e 	bl	8004124 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	3301      	adds	r3, #1
 80042ec:	81fb      	strh	r3, [r7, #14]
 80042ee:	89fa      	ldrh	r2, [r7, #14]
 80042f0:	883b      	ldrh	r3, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d3ea      	bcc.n	80042cc <Paint_DrawRectangle+0x54>
 80042f6:	e039      	b.n	800436c <Paint_DrawRectangle+0xf4>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80042f8:	88bc      	ldrh	r4, [r7, #4]
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	88b9      	ldrh	r1, [r7, #4]
 80042fe:	88f8      	ldrh	r0, [r7, #6]
 8004300:	2300      	movs	r3, #0
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	8c3b      	ldrh	r3, [r7, #32]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4623      	mov	r3, r4
 8004310:	f7ff ff08 	bl	8004124 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 8004314:	883c      	ldrh	r4, [r7, #0]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	88b9      	ldrh	r1, [r7, #4]
 800431a:	88f8      	ldrh	r0, [r7, #6]
 800431c:	2300      	movs	r3, #0
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	8c3b      	ldrh	r3, [r7, #32]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4623      	mov	r3, r4
 800432c:	f7ff fefa 	bl	8004124 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8004330:	88bc      	ldrh	r4, [r7, #4]
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	8839      	ldrh	r1, [r7, #0]
 8004336:	8878      	ldrh	r0, [r7, #2]
 8004338:	2300      	movs	r3, #0
 800433a:	9302      	str	r3, [sp, #8]
 800433c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	8c3b      	ldrh	r3, [r7, #32]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4623      	mov	r3, r4
 8004348:	f7ff feec 	bl	8004124 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800434c:	883c      	ldrh	r4, [r7, #0]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	8839      	ldrh	r1, [r7, #0]
 8004352:	8878      	ldrh	r0, [r7, #2]
 8004354:	2300      	movs	r3, #0
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	8c3b      	ldrh	r3, [r7, #32]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4623      	mov	r3, r4
 8004364:	f7ff fede 	bl	8004124 <Paint_DrawLine>
 8004368:	e000      	b.n	800436c <Paint_DrawRectangle+0xf4>
        return;
 800436a:	bf00      	nop
    }
}
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}
 8004372:	bf00      	nop
 8004374:	20001388 	.word	0x20001388

08004378 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	4603      	mov	r3, r0
 8004382:	81fb      	strh	r3, [r7, #14]
 8004384:	460b      	mov	r3, r1
 8004386:	81bb      	strh	r3, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800438c:	4b4c      	ldr	r3, [pc, #304]	; (80044c0 <Paint_DrawChar+0x148>)
 800438e:	889b      	ldrh	r3, [r3, #4]
 8004390:	89fa      	ldrh	r2, [r7, #14]
 8004392:	429a      	cmp	r2, r3
 8004394:	f200 808f 	bhi.w	80044b6 <Paint_DrawChar+0x13e>
 8004398:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <Paint_DrawChar+0x148>)
 800439a:	88db      	ldrh	r3, [r3, #6]
 800439c:	89ba      	ldrh	r2, [r7, #12]
 800439e:	429a      	cmp	r2, r3
 80043a0:	f200 8089 	bhi.w	80044b6 <Paint_DrawChar+0x13e>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80043a4:	7afb      	ldrb	r3, [r7, #11]
 80043a6:	3b20      	subs	r3, #32
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	88d2      	ldrh	r2, [r2, #6]
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	8892      	ldrh	r2, [r2, #4]
 80043b4:	08d2      	lsrs	r2, r2, #3
 80043b6:	b292      	uxth	r2, r2
 80043b8:	4611      	mov	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	8892      	ldrh	r2, [r2, #4]
 80043be:	f002 0207 	and.w	r2, r2, #7
 80043c2:	b292      	uxth	r2, r2
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	bf14      	ite	ne
 80043c8:	2201      	movne	r2, #1
 80043ca:	2200      	moveq	r2, #0
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	440a      	add	r2, r1
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4413      	add	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80043e0:	2300      	movs	r3, #0
 80043e2:	83fb      	strh	r3, [r7, #30]
 80043e4:	e061      	b.n	80044aa <Paint_DrawChar+0x132>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80043e6:	2300      	movs	r3, #0
 80043e8:	83bb      	strh	r3, [r7, #28]
 80043ea:	e04c      	b.n	8004486 <Paint_DrawChar+0x10e>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80043ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80043ee:	2bff      	cmp	r3, #255	; 0xff
 80043f0:	d118      	bne.n	8004424 <Paint_DrawChar+0xac>
                if (*ptr & (0x80 >> (Column % 8)))
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	8bbb      	ldrh	r3, [r7, #28]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	fa42 f303 	asr.w	r3, r2, r3
 8004404:	400b      	ands	r3, r1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d031      	beq.n	800446e <Paint_DrawChar+0xf6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800440a:	89fa      	ldrh	r2, [r7, #14]
 800440c:	8bbb      	ldrh	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	b298      	uxth	r0, r3
 8004412:	89ba      	ldrh	r2, [r7, #12]
 8004414:	8bfb      	ldrh	r3, [r7, #30]
 8004416:	4413      	add	r3, r2
 8004418:	b29b      	uxth	r3, r3
 800441a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800441c:	4619      	mov	r1, r3
 800441e:	f7ff fbef 	bl	8003c00 <Paint_SetPixel>
 8004422:	e024      	b.n	800446e <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	8bbb      	ldrh	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	2280      	movs	r2, #128	; 0x80
 8004432:	fa42 f303 	asr.w	r3, r2, r3
 8004436:	400b      	ands	r3, r1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <Paint_DrawChar+0xde>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800443c:	89fa      	ldrh	r2, [r7, #14]
 800443e:	8bbb      	ldrh	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	b298      	uxth	r0, r3
 8004444:	89ba      	ldrh	r2, [r7, #12]
 8004446:	8bfb      	ldrh	r3, [r7, #30]
 8004448:	4413      	add	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800444e:	4619      	mov	r1, r3
 8004450:	f7ff fbd6 	bl	8003c00 <Paint_SetPixel>
 8004454:	e00b      	b.n	800446e <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004456:	89fa      	ldrh	r2, [r7, #14]
 8004458:	8bbb      	ldrh	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	b298      	uxth	r0, r3
 800445e:	89ba      	ldrh	r2, [r7, #12]
 8004460:	8bfb      	ldrh	r3, [r7, #30]
 8004462:	4413      	add	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004468:	4619      	mov	r1, r3
 800446a:	f7ff fbc9 	bl	8003c00 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800446e:	8bbb      	ldrh	r3, [r7, #28]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b07      	cmp	r3, #7
 8004478:	d102      	bne.n	8004480 <Paint_DrawChar+0x108>
                ptr++;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3301      	adds	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004480:	8bbb      	ldrh	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	83bb      	strh	r3, [r7, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	889b      	ldrh	r3, [r3, #4]
 800448a:	8bba      	ldrh	r2, [r7, #28]
 800448c:	429a      	cmp	r2, r3
 800448e:	d3ad      	bcc.n	80043ec <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	889b      	ldrh	r3, [r3, #4]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <Paint_DrawChar+0x12c>
            ptr++;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3301      	adds	r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80044a4:	8bfb      	ldrh	r3, [r7, #30]
 80044a6:	3301      	adds	r3, #1
 80044a8:	83fb      	strh	r3, [r7, #30]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	88db      	ldrh	r3, [r3, #6]
 80044ae:	8bfa      	ldrh	r2, [r7, #30]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d398      	bcc.n	80043e6 <Paint_DrawChar+0x6e>
 80044b4:	e000      	b.n	80044b8 <Paint_DrawChar+0x140>
        return;
 80044b6:	bf00      	nop
    }// Write all
}
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20001388 	.word	0x20001388

080044c4 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60ba      	str	r2, [r7, #8]
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	4603      	mov	r3, r0
 80044d0:	81fb      	strh	r3, [r7, #14]
 80044d2:	460b      	mov	r3, r1
 80044d4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80044d6:	89fb      	ldrh	r3, [r7, #14]
 80044d8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80044da:	89bb      	ldrh	r3, [r7, #12]
 80044dc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80044de:	4b21      	ldr	r3, [pc, #132]	; (8004564 <Paint_DrawString_EN+0xa0>)
 80044e0:	889b      	ldrh	r3, [r3, #4]
 80044e2:	89fa      	ldrh	r2, [r7, #14]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d838      	bhi.n	800455a <Paint_DrawString_EN+0x96>
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <Paint_DrawString_EN+0xa0>)
 80044ea:	88db      	ldrh	r3, [r3, #6]
 80044ec:	89ba      	ldrh	r2, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d833      	bhi.n	800455a <Paint_DrawString_EN+0x96>
        return;
    }

    while (* pString != '\0') {
 80044f2:	e02d      	b.n	8004550 <Paint_DrawString_EN+0x8c>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80044f4:	8afb      	ldrh	r3, [r7, #22]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	8892      	ldrh	r2, [r2, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <Paint_DrawString_EN+0xa0>)
 80044fe:	8892      	ldrh	r2, [r2, #4]
 8004500:	4293      	cmp	r3, r2
 8004502:	dd06      	ble.n	8004512 <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8004504:	89fb      	ldrh	r3, [r7, #14]
 8004506:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	88da      	ldrh	r2, [r3, #6]
 800450c:	8abb      	ldrh	r3, [r7, #20]
 800450e:	4413      	add	r3, r2
 8004510:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004512:	8abb      	ldrh	r3, [r7, #20]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	88d2      	ldrh	r2, [r2, #6]
 8004518:	4413      	add	r3, r2
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <Paint_DrawString_EN+0xa0>)
 800451c:	88d2      	ldrh	r2, [r2, #6]
 800451e:	4293      	cmp	r3, r2
 8004520:	dd03      	ble.n	800452a <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8004522:	89fb      	ldrh	r3, [r7, #14]
 8004524:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004526:	89bb      	ldrh	r3, [r7, #12]
 8004528:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	8ab9      	ldrh	r1, [r7, #20]
 8004530:	8af8      	ldrh	r0, [r7, #22]
 8004532:	8c3b      	ldrh	r3, [r7, #32]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f7ff ff1c 	bl	8004378 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3301      	adds	r3, #1
 8004544:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	889a      	ldrh	r2, [r3, #4]
 800454a:	8afb      	ldrh	r3, [r7, #22]
 800454c:	4413      	add	r3, r2
 800454e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1cd      	bne.n	80044f4 <Paint_DrawString_EN+0x30>
 8004558:	e000      	b.n	800455c <Paint_DrawString_EN+0x98>
        return;
 800455a:	bf00      	nop
    }
}
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20001388 	.word	0x20001388

08004568 <Paint_DrawBitMap_Paste>:
    flipColor: Whether the color is reversed
info:
    Use this function to paste image data into a buffer
******************************************************************************/
void Paint_DrawBitMap_Paste(const unsigned char* image_buffer, UWORD xStart, UWORD yStart, UWORD imageWidth, UWORD imageHeight, UBYTE flipColor)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4603      	mov	r3, r0
 8004578:	817b      	strh	r3, [r7, #10]
 800457a:	460b      	mov	r3, r1
 800457c:	813b      	strh	r3, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
    UBYTE color, srcImage;
    UWORD x, y;
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <Paint_DrawBitMap_Paste+0x2e>
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	b29b      	uxth	r3, r3
 8004594:	e004      	b.n	80045a0 <Paint_DrawBitMap_Paste+0x38>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	b29b      	uxth	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	b29b      	uxth	r3, r3
 80045a0:	833b      	strh	r3, [r7, #24]
    
    for (y = 0; y < imageHeight; y++) {
 80045a2:	2300      	movs	r3, #0
 80045a4:	837b      	strh	r3, [r7, #26]
 80045a6:	e047      	b.n	8004638 <Paint_DrawBitMap_Paste+0xd0>
        for (x = 0; x < imageWidth; x++) {
 80045a8:	2300      	movs	r3, #0
 80045aa:	83bb      	strh	r3, [r7, #28]
 80045ac:	e03d      	b.n	800462a <Paint_DrawBitMap_Paste+0xc2>
            srcImage = image_buffer[y*width + x/8];
 80045ae:	8b7b      	ldrh	r3, [r7, #26]
 80045b0:	8b3a      	ldrh	r2, [r7, #24]
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	8bba      	ldrh	r2, [r7, #28]
 80045b8:	08d2      	lsrs	r2, r2, #3
 80045ba:	b292      	uxth	r2, r2
 80045bc:	4413      	add	r3, r2
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	75fb      	strb	r3, [r7, #23]
            if(flipColor)
 80045c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <Paint_DrawBitMap_Paste+0x86>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
 80045d0:	7dfa      	ldrb	r2, [r7, #23]
 80045d2:	8bbb      	ldrh	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e00d      	b.n	800460a <Paint_DrawBitMap_Paste+0xa2>
            else
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 80045ee:	7dfa      	ldrb	r2, [r7, #23]
 80045f0:	8bbb      	ldrh	r3, [r7, #28]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	77fb      	strb	r3, [r7, #31]
            Paint_SetPixel(x+xStart, y+yStart, color);
 800460a:	8bba      	ldrh	r2, [r7, #28]
 800460c:	897b      	ldrh	r3, [r7, #10]
 800460e:	4413      	add	r3, r2
 8004610:	b298      	uxth	r0, r3
 8004612:	8b7a      	ldrh	r2, [r7, #26]
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	4413      	add	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	7ffa      	ldrb	r2, [r7, #31]
 800461c:	b292      	uxth	r2, r2
 800461e:	4619      	mov	r1, r3
 8004620:	f7ff faee 	bl	8003c00 <Paint_SetPixel>
        for (x = 0; x < imageWidth; x++) {
 8004624:	8bbb      	ldrh	r3, [r7, #28]
 8004626:	3301      	adds	r3, #1
 8004628:	83bb      	strh	r3, [r7, #28]
 800462a:	8bba      	ldrh	r2, [r7, #28]
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3bd      	bcc.n	80045ae <Paint_DrawBitMap_Paste+0x46>
    for (y = 0; y < imageHeight; y++) {
 8004632:	8b7b      	ldrh	r3, [r7, #26]
 8004634:	3301      	adds	r3, #1
 8004636:	837b      	strh	r3, [r7, #26]
 8004638:	8b7a      	ldrh	r2, [r7, #26]
 800463a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800463c:	429a      	cmp	r2, r3
 800463e:	d3b3      	bcc.n	80045a8 <Paint_DrawBitMap_Paste+0x40>
        }
    }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UmlautCheck>:
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

void UmlautCheck(uint8_t* String)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b092      	sub	sp, #72	; 0x48
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    uint8_t* StringWork = String;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t CachString[51] = {0};
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	f107 0310 	add.w	r3, r7, #16
 8004660:	222f      	movs	r2, #47	; 0x2f
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f00d f8c2 	bl	80117ee <memset>
    uint8_t* pCachString = CachString;
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	643b      	str	r3, [r7, #64]	; 0x40

    while (*StringWork)
 8004670:	e0f0      	b.n	8004854 <UmlautCheck+0x208>
    {
        // Prüfen auf die Unicode-Sequenz \u0026
        if (*StringWork == '\\' && *(StringWork + 1) == 'u' &&
 8004672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b5c      	cmp	r3, #92	; 0x5c
 8004678:	d11f      	bne.n	80046ba <UmlautCheck+0x6e>
 800467a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467c:	3301      	adds	r3, #1
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b75      	cmp	r3, #117	; 0x75
 8004682:	d11a      	bne.n	80046ba <UmlautCheck+0x6e>
            *(StringWork + 2) == '0' && *(StringWork + 3) == '0' &&
 8004684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004686:	3302      	adds	r3, #2
 8004688:	781b      	ldrb	r3, [r3, #0]
        if (*StringWork == '\\' && *(StringWork + 1) == 'u' &&
 800468a:	2b30      	cmp	r3, #48	; 0x30
 800468c:	d115      	bne.n	80046ba <UmlautCheck+0x6e>
            *(StringWork + 2) == '0' && *(StringWork + 3) == '0' &&
 800468e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004690:	3303      	adds	r3, #3
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d110      	bne.n	80046ba <UmlautCheck+0x6e>
            *(StringWork + 4) == '2' && *(StringWork + 5) == '6')
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	3304      	adds	r3, #4
 800469c:	781b      	ldrb	r3, [r3, #0]
            *(StringWork + 2) == '0' && *(StringWork + 3) == '0' &&
 800469e:	2b32      	cmp	r3, #50	; 0x32
 80046a0:	d10b      	bne.n	80046ba <UmlautCheck+0x6e>
            *(StringWork + 4) == '2' && *(StringWork + 5) == '6')
 80046a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a4:	3305      	adds	r3, #5
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b36      	cmp	r3, #54	; 0x36
 80046aa:	d106      	bne.n	80046ba <UmlautCheck+0x6e>
        {
            *pCachString = '&'; // Ersetze \u0026 durch &
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	2226      	movs	r2, #38	; 0x26
 80046b0:	701a      	strb	r2, [r3, #0]
            //pCachString++;
            StringWork += 5; // Überspringe die gesamte Sequenz
 80046b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b4:	3305      	adds	r3, #5
 80046b6:	647b      	str	r3, [r7, #68]	; 0x44
 80046b8:	e0c6      	b.n	8004848 <UmlautCheck+0x1fc>
        }
        else if (*StringWork >= 127)
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b7e      	cmp	r3, #126	; 0x7e
 80046c0:	f240 80be 	bls.w	8004840 <UmlautCheck+0x1f4>
        {
        	if (*StringWork == 195)
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2bc3      	cmp	r3, #195	; 0xc3
 80046ca:	f040 8081 	bne.w	80047d0 <UmlautCheck+0x184>
			{
				StringWork++;
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	3301      	adds	r3, #1
 80046d2:	647b      	str	r3, [r7, #68]	; 0x44
				switch (*StringWork)
 80046d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b84      	cmp	r3, #132	; 0x84
 80046da:	d05d      	beq.n	8004798 <UmlautCheck+0x14c>
 80046dc:	2b84      	cmp	r3, #132	; 0x84
 80046de:	db73      	blt.n	80047c8 <UmlautCheck+0x17c>
 80046e0:	2bbc      	cmp	r3, #188	; 0xbc
 80046e2:	dc71      	bgt.n	80047c8 <UmlautCheck+0x17c>
 80046e4:	2b96      	cmp	r3, #150	; 0x96
 80046e6:	db6f      	blt.n	80047c8 <UmlautCheck+0x17c>
 80046e8:	3b96      	subs	r3, #150	; 0x96
 80046ea:	2b26      	cmp	r3, #38	; 0x26
 80046ec:	d86c      	bhi.n	80047c8 <UmlautCheck+0x17c>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UmlautCheck+0xa8>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	080047a9 	.word	0x080047a9
 80046f8:	080047c9 	.word	0x080047c9
 80046fc:	080047c9 	.word	0x080047c9
 8004700:	080047c9 	.word	0x080047c9
 8004704:	080047c9 	.word	0x080047c9
 8004708:	080047c9 	.word	0x080047c9
 800470c:	080047b9 	.word	0x080047b9
 8004710:	080047c9 	.word	0x080047c9
 8004714:	080047c9 	.word	0x080047c9
 8004718:	080047c1 	.word	0x080047c1
 800471c:	080047c9 	.word	0x080047c9
 8004720:	080047c9 	.word	0x080047c9
 8004724:	080047c9 	.word	0x080047c9
 8004728:	080047c9 	.word	0x080047c9
 800472c:	08004791 	.word	0x08004791
 8004730:	080047c9 	.word	0x080047c9
 8004734:	080047c9 	.word	0x080047c9
 8004738:	080047c9 	.word	0x080047c9
 800473c:	080047c9 	.word	0x080047c9
 8004740:	080047c9 	.word	0x080047c9
 8004744:	080047c9 	.word	0x080047c9
 8004748:	080047c9 	.word	0x080047c9
 800474c:	080047c9 	.word	0x080047c9
 8004750:	080047c9 	.word	0x080047c9
 8004754:	080047c9 	.word	0x080047c9
 8004758:	080047c9 	.word	0x080047c9
 800475c:	080047c9 	.word	0x080047c9
 8004760:	080047c9 	.word	0x080047c9
 8004764:	080047c9 	.word	0x080047c9
 8004768:	080047c9 	.word	0x080047c9
 800476c:	080047c9 	.word	0x080047c9
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047a1 	.word	0x080047a1
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047c9 	.word	0x080047c9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047b1 	.word	0x080047b1
				{
					case 0xa4: // ä
						*pCachString = 127;
 8004790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004792:	227f      	movs	r2, #127	; 0x7f
 8004794:	701a      	strb	r2, [r3, #0]
						break;
 8004796:	e057      	b.n	8004848 <UmlautCheck+0x1fc>
					case 0x84: // Ä
						*pCachString = 128;
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	701a      	strb	r2, [r3, #0]
						break;
 800479e:	e053      	b.n	8004848 <UmlautCheck+0x1fc>
					case 0xb6: // ö
						*pCachString = 129;
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	2281      	movs	r2, #129	; 0x81
 80047a4:	701a      	strb	r2, [r3, #0]
						break;
 80047a6:	e04f      	b.n	8004848 <UmlautCheck+0x1fc>
					case 0x96: // Ö
						*pCachString = 130;
 80047a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047aa:	2282      	movs	r2, #130	; 0x82
 80047ac:	701a      	strb	r2, [r3, #0]
						break;
 80047ae:	e04b      	b.n	8004848 <UmlautCheck+0x1fc>
					case 0xbc: // ü
						*pCachString = 131;
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	2283      	movs	r2, #131	; 0x83
 80047b4:	701a      	strb	r2, [r3, #0]
						break;
 80047b6:	e047      	b.n	8004848 <UmlautCheck+0x1fc>
					case 0x9c: // Ü
						*pCachString = 132;
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	2284      	movs	r2, #132	; 0x84
 80047bc:	701a      	strb	r2, [r3, #0]
						break;
 80047be:	e043      	b.n	8004848 <UmlautCheck+0x1fc>
					case 0x9f: // ß
						*pCachString = 133;
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	2285      	movs	r2, #133	; 0x85
 80047c4:	701a      	strb	r2, [r3, #0]
						break;
 80047c6:	e03f      	b.n	8004848 <UmlautCheck+0x1fc>
					default:
						*pCachString = 32; // Alle anderen durch Leerzeichen ersetzen
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	2220      	movs	r2, #32
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e03b      	b.n	8004848 <UmlautCheck+0x1fc>
				}
			}
        	else if (*StringWork == 132) //ä
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b84      	cmp	r3, #132	; 0x84
 80047d6:	d103      	bne.n	80047e0 <UmlautCheck+0x194>
        	{
        		*pCachString = 127;
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	227f      	movs	r2, #127	; 0x7f
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e033      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 142) //Ä
 80047e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b8e      	cmp	r3, #142	; 0x8e
 80047e6:	d103      	bne.n	80047f0 <UmlautCheck+0x1a4>
        	{
        		*pCachString = 128;
 80047e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e02b      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 148) //ö
 80047f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b94      	cmp	r3, #148	; 0x94
 80047f6:	d103      	bne.n	8004800 <UmlautCheck+0x1b4>
        	{
        		*pCachString = 129;
 80047f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fa:	2281      	movs	r2, #129	; 0x81
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e023      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 153) //Ö
 8004800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b99      	cmp	r3, #153	; 0x99
 8004806:	d103      	bne.n	8004810 <UmlautCheck+0x1c4>
        	{
        		*pCachString = 130;
 8004808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480a:	2282      	movs	r2, #130	; 0x82
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e01b      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 154) //Ü
 8004810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b9a      	cmp	r3, #154	; 0x9a
 8004816:	d103      	bne.n	8004820 <UmlautCheck+0x1d4>
        	{
        		*pCachString = 132;
 8004818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481a:	2284      	movs	r2, #132	; 0x84
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e013      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 129) //ü
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b81      	cmp	r3, #129	; 0x81
 8004826:	d103      	bne.n	8004830 <UmlautCheck+0x1e4>
        	{
        		*pCachString = 131;
 8004828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482a:	2283      	movs	r2, #131	; 0x83
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e00b      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 225) //ß
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2be1      	cmp	r3, #225	; 0xe1
 8004836:	d107      	bne.n	8004848 <UmlautCheck+0x1fc>
        	{
        		*pCachString = 133;
 8004838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483a:	2285      	movs	r2, #133	; 0x85
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e003      	b.n	8004848 <UmlautCheck+0x1fc>
        	}
        }
        else
        {
            *pCachString = *StringWork;
 8004840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004846:	701a      	strb	r2, [r3, #0]
        }

        pCachString++;
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	3301      	adds	r3, #1
 800484c:	643b      	str	r3, [r7, #64]	; 0x40
        StringWork++;
 800484e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004850:	3301      	adds	r3, #1
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
    while (*StringWork)
 8004854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f af0a 	bne.w	8004672 <UmlautCheck+0x26>
    }

    strcpy((char*)String, (char*)CachString);
 800485e:	f107 030c 	add.w	r3, r7, #12
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f00d f8e2 	bl	8011a2e <strcpy>
}
 800486a:	bf00      	nop
 800486c:	3748      	adds	r7, #72	; 0x48
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop

08004874 <vPrint_Config_Screen>:


void vPrint_Config_Screen()
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af04      	add	r7, sp, #16
	UBYTE *BlackImage;
	BlackImage = (UBYTE *)malloc(4736U);
 800487a:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 800487e:	f00c f8a1 	bl	80109c4 <malloc>
 8004882:	4603      	mov	r3, r0
 8004884:	607b      	str	r3, [r7, #4]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8004886:	23ff      	movs	r3, #255	; 0xff
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004890:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff f94d 	bl	8003b34 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff f9a0 	bl	8003be0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 80048a0:	20ff      	movs	r0, #255	; 0xff
 80048a2:	f7ff faf9 	bl	8003e98 <Paint_Clear>

	Paint_DrawRectangle(0, 0, 800, 70, BLACK, 1, DRAW_FILL_FULL);
 80048a6:	2301      	movs	r3, #1
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	2301      	movs	r3, #1
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2346      	movs	r3, #70	; 0x46
 80048b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80048b8:	2100      	movs	r1, #0
 80048ba:	2000      	movs	r0, #0
 80048bc:	f7ff fcdc 	bl	8004278 <Paint_DrawRectangle>
	Paint_DrawString_EN(40, 20, "Konfiguration Infopanel", &Font_Lucida_24b, BLACK, WHITE);
 80048c0:	23ff      	movs	r3, #255	; 0xff
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4b31      	ldr	r3, [pc, #196]	; (8004990 <vPrint_Config_Screen+0x11c>)
 80048ca:	4a32      	ldr	r2, [pc, #200]	; (8004994 <vPrint_Config_Screen+0x120>)
 80048cc:	2114      	movs	r1, #20
 80048ce:	2028      	movs	r0, #40	; 0x28
 80048d0:	f7ff fdf8 	bl	80044c4 <Paint_DrawString_EN>

	Paint_DrawString_EN(40, 120, "1. Stellen Sie sicher, dass der Modusschalter auf Konfig steht", &Font_Lucida_12, WHITE, BLACK);
 80048d4:	2300      	movs	r3, #0
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	23ff      	movs	r3, #255	; 0xff
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <vPrint_Config_Screen+0x124>)
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <vPrint_Config_Screen+0x128>)
 80048e0:	2178      	movs	r1, #120	; 0x78
 80048e2:	2028      	movs	r0, #40	; 0x28
 80048e4:	f7ff fdee 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 160, "2. Verbinden Sie sich mit dem WLAN des Infopanels", &Font_Lucida_12, WHITE, BLACK);
 80048e8:	2300      	movs	r3, #0
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	23ff      	movs	r3, #255	; 0xff
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	4b29      	ldr	r3, [pc, #164]	; (8004998 <vPrint_Config_Screen+0x124>)
 80048f2:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <vPrint_Config_Screen+0x12c>)
 80048f4:	21a0      	movs	r1, #160	; 0xa0
 80048f6:	2028      	movs	r0, #40	; 0x28
 80048f8:	f7ff fde4 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 200, " - WLAN-Name: Infopanel-Konfig", &Font_Lucida_12, WHITE, BLACK);
 80048fc:	2300      	movs	r3, #0
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	23ff      	movs	r3, #255	; 0xff
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <vPrint_Config_Screen+0x124>)
 8004906:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <vPrint_Config_Screen+0x130>)
 8004908:	21c8      	movs	r1, #200	; 0xc8
 800490a:	2028      	movs	r0, #40	; 0x28
 800490c:	f7ff fdda 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 240, " - Passwort : infopanel", &Font_Lucida_12, WHITE, BLACK);
 8004910:	2300      	movs	r3, #0
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	23ff      	movs	r3, #255	; 0xff
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <vPrint_Config_Screen+0x124>)
 800491a:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <vPrint_Config_Screen+0x134>)
 800491c:	21f0      	movs	r1, #240	; 0xf0
 800491e:	2028      	movs	r0, #40	; 0x28
 8004920:	f7ff fdd0 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 280, "3. Rufen Sie im Browser die Seite http://192.168.4.1 auf", &Font_Lucida_12, WHITE, BLACK);
 8004924:	2300      	movs	r3, #0
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	23ff      	movs	r3, #255	; 0xff
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <vPrint_Config_Screen+0x124>)
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <vPrint_Config_Screen+0x138>)
 8004930:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004934:	2028      	movs	r0, #40	; 0x28
 8004936:	f7ff fdc5 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 320, "4. Geben Sie die Daten ein und klicken Sie auf Senden", &Font_Lucida_12, WHITE, BLACK);
 800493a:	2300      	movs	r3, #0
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	23ff      	movs	r3, #255	; 0xff
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <vPrint_Config_Screen+0x124>)
 8004944:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <vPrint_Config_Screen+0x13c>)
 8004946:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800494a:	2028      	movs	r0, #40	; 0x28
 800494c:	f7ff fdba 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 360, "5. Wenn die Daten auf dem Display erscheinen, ist die Konfiguration fertig", &Font_Lucida_12, WHITE, BLACK);
 8004950:	2300      	movs	r3, #0
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	23ff      	movs	r3, #255	; 0xff
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <vPrint_Config_Screen+0x124>)
 800495a:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <vPrint_Config_Screen+0x140>)
 800495c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004960:	2028      	movs	r0, #40	; 0x28
 8004962:	f7ff fdaf 	bl	80044c4 <Paint_DrawString_EN>
	Paint_DrawString_EN(40, 400, "6. Stellen Sie den Modusschalter nun auf Betrieb", &Font_Lucida_12, WHITE, BLACK);
 8004966:	2300      	movs	r3, #0
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	23ff      	movs	r3, #255	; 0xff
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <vPrint_Config_Screen+0x124>)
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <vPrint_Config_Screen+0x144>)
 8004972:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004976:	2028      	movs	r0, #40	; 0x28
 8004978:	f7ff fda4 	bl	80044c4 <Paint_DrawString_EN>
	EPD_7IN5_V2_Display(BlackImage);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff f8a5 	bl	8003acc <EPD_7IN5_V2_Display>
	free(BlackImage);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f00c f826 	bl	80109d4 <free>
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000c70 	.word	0x20000c70
 8004994:	080143fc 	.word	0x080143fc
 8004998:	20000c58 	.word	0x20000c58
 800499c:	08014414 	.word	0x08014414
 80049a0:	08014454 	.word	0x08014454
 80049a4:	08014488 	.word	0x08014488
 80049a8:	080144a8 	.word	0x080144a8
 80049ac:	080144c0 	.word	0x080144c0
 80049b0:	080144fc 	.word	0x080144fc
 80049b4:	08014534 	.word	0x08014534
 80049b8:	08014580 	.word	0x08014580

080049bc <vPrint_Config_Done_Screen>:
void vPrint_Config_Done_Screen(sEEPROM_Data_t* pData, uint8_t* pu8MAC)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b095      	sub	sp, #84	; 0x54
 80049c0:	af04      	add	r7, sp, #16
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	UBYTE *BlackImage;
	uint8_t cBuffer [50];
	BlackImage = (UBYTE *)malloc(4736U);
 80049c6:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 80049ca:	f00b fffb 	bl	80109c4 <malloc>
 80049ce:	4603      	mov	r3, r0
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 80049d2:	23ff      	movs	r3, #255	; 0xff
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2300      	movs	r3, #0
 80049d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049dc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80049e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049e2:	f7ff f8a7 	bl	8003b34 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 80049e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049e8:	f7ff f8fa 	bl	8003be0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 80049ec:	20ff      	movs	r0, #255	; 0xff
 80049ee:	f7ff fa53 	bl	8003e98 <Paint_Clear>

	Paint_DrawRectangle(0, 0, 800, 140, BLACK, 1, DRAW_FILL_FULL);
 80049f2:	2301      	movs	r3, #1
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	2301      	movs	r3, #1
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	238c      	movs	r3, #140	; 0x8c
 8004a00:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004a04:	2100      	movs	r1, #0
 8004a06:	2000      	movs	r0, #0
 8004a08:	f7ff fc36 	bl	8004278 <Paint_DrawRectangle>
	Paint_DrawString_EN(40, 20, pData->u8Device_Name, &Font_Lucida_80b, BLACK, WHITE);
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	23ff      	movs	r3, #255	; 0xff
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	2300      	movs	r3, #0
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <vPrint_Config_Done_Screen+0x164>)
 8004a18:	2114      	movs	r1, #20
 8004a1a:	2028      	movs	r0, #40	; 0x28
 8004a1c:	f7ff fd52 	bl	80044c4 <Paint_DrawString_EN>

    sprintf((char *)cBuffer,"WLAN-Name      : %s", pData->u8WLAN_Name);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 0214 	add.w	r2, r3, #20
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	493e      	ldr	r1, [pc, #248]	; (8004b24 <vPrint_Config_Done_Screen+0x168>)
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f00c fe4d 	bl	80116cc <siprintf>
    Paint_DrawString_EN(40, 180, cBuffer, &Font_Lucida_18, WHITE, BLACK);
 8004a32:	f107 0208 	add.w	r2, r7, #8
 8004a36:	2300      	movs	r3, #0
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	23ff      	movs	r3, #255	; 0xff
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <vPrint_Config_Done_Screen+0x16c>)
 8004a40:	21b4      	movs	r1, #180	; 0xb4
 8004a42:	2028      	movs	r0, #40	; 0x28
 8004a44:	f7ff fd3e 	bl	80044c4 <Paint_DrawString_EN>

    sprintf((char *)cBuffer,"TCP-Server-IP  : %d.%d.%d.%d", pData->u8Server_IP[0], pData->u8Server_IP[1], pData->u8Server_IP[2], pData->u8Server_IP[3]);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004a4e:	4619      	mov	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004a56:	461c      	mov	r4, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004a66:	f107 0008 	add.w	r0, r7, #8
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	9200      	str	r2, [sp, #0]
 8004a6e:	4623      	mov	r3, r4
 8004a70:	460a      	mov	r2, r1
 8004a72:	492e      	ldr	r1, [pc, #184]	; (8004b2c <vPrint_Config_Done_Screen+0x170>)
 8004a74:	f00c fe2a 	bl	80116cc <siprintf>
    Paint_DrawString_EN(40, 220, cBuffer, &Font_Lucida_18, WHITE, BLACK);
 8004a78:	f107 0208 	add.w	r2, r7, #8
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	23ff      	movs	r3, #255	; 0xff
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <vPrint_Config_Done_Screen+0x16c>)
 8004a86:	21dc      	movs	r1, #220	; 0xdc
 8004a88:	2028      	movs	r0, #40	; 0x28
 8004a8a:	f7ff fd1b 	bl	80044c4 <Paint_DrawString_EN>

    sprintf((char *)cBuffer,"TCP-Server-Port: %d", pData->u8Server_Port);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004a94:	461a      	mov	r2, r3
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	4925      	ldr	r1, [pc, #148]	; (8004b30 <vPrint_Config_Done_Screen+0x174>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f00c fe15 	bl	80116cc <siprintf>
    Paint_DrawString_EN(40, 260, cBuffer, &Font_Lucida_18, WHITE, BLACK);
 8004aa2:	f107 0208 	add.w	r2, r7, #8
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	23ff      	movs	r3, #255	; 0xff
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <vPrint_Config_Done_Screen+0x16c>)
 8004ab0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004ab4:	2028      	movs	r0, #40	; 0x28
 8004ab6:	f7ff fd05 	bl	80044c4 <Paint_DrawString_EN>

    sprintf((char *)cBuffer,"Domain         : %s", pData->u8Domain);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	491b      	ldr	r1, [pc, #108]	; (8004b34 <vPrint_Config_Done_Screen+0x178>)
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f00c fe00 	bl	80116cc <siprintf>
    Paint_DrawString_EN(40, 300, cBuffer, &Font_Lucida_18, WHITE, BLACK);
 8004acc:	f107 0208 	add.w	r2, r7, #8
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	23ff      	movs	r3, #255	; 0xff
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <vPrint_Config_Done_Screen+0x16c>)
 8004ada:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004ade:	2028      	movs	r0, #40	; 0x28
 8004ae0:	f7ff fcf0 	bl	80044c4 <Paint_DrawString_EN>

    sprintf((char *)cBuffer,"MAC-Adresse    : %s", pu8MAC);
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	4913      	ldr	r1, [pc, #76]	; (8004b38 <vPrint_Config_Done_Screen+0x17c>)
 8004aec:	4618      	mov	r0, r3
 8004aee:	f00c fded 	bl	80116cc <siprintf>
    Paint_DrawString_EN(40, 340, cBuffer, &Font_Lucida_18, WHITE, BLACK);
 8004af2:	f107 0208 	add.w	r2, r7, #8
 8004af6:	2300      	movs	r3, #0
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	23ff      	movs	r3, #255	; 0xff
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <vPrint_Config_Done_Screen+0x16c>)
 8004b00:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004b04:	2028      	movs	r0, #40	; 0x28
 8004b06:	f7ff fcdd 	bl	80044c4 <Paint_DrawString_EN>

	EPD_7IN5_V2_Display(BlackImage);
 8004b0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b0c:	f7fe ffde 	bl	8003acc <EPD_7IN5_V2_Display>
	free(BlackImage);
 8004b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b12:	f00b ff5f 	bl	80109d4 <free>
}
 8004b16:	bf00      	nop
 8004b18:	3744      	adds	r7, #68	; 0x44
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd90      	pop	{r4, r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000c80 	.word	0x20000c80
 8004b24:	080145b4 	.word	0x080145b4
 8004b28:	20000c60 	.word	0x20000c60
 8004b2c:	080145c8 	.word	0x080145c8
 8004b30:	080145e8 	.word	0x080145e8
 8004b34:	080145fc 	.word	0x080145fc
 8004b38:	08014610 	.word	0x08014610

08004b3c <vPrint_Skin_Office>:


void vPrint_Skin_Office(struct sCommunication* Com)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 8004b44:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8004b48:	f00b ff3c 	bl	80109c4 <malloc>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8004b50:	23ff      	movs	r3, #255	; 0xff
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b5a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7fe ffe8 	bl	8003b34 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff f83b 	bl	8003be0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8004b6a:	20ff      	movs	r0, #255	; 0xff
 8004b6c:	f7ff f994 	bl	8003e98 <Paint_Clear>
	////
	Paint_DrawBitMap_Paste(Background_Office, 0, 0, 800, 480, BLACK);
 8004b70:	2300      	movs	r3, #0
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	489d      	ldr	r0, [pc, #628]	; (8004df8 <vPrint_Skin_Office+0x2bc>)
 8004b84:	f7ff fcf0 	bl	8004568 <Paint_DrawBitMap_Paste>

	//Room Nr.
	UmlautCheck(Com->u8L1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	331e      	adds	r3, #30
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fd5d 	bl	800464c <UmlautCheck>
	Com->u8L1[5]=0x00;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Paint_DrawString_EN(40, 33, (const char *)Com->u8L1, &Font_Lucida_80b, BLACK, WHITE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f103 021e 	add.w	r2, r3, #30
 8004ba0:	23ff      	movs	r3, #255	; 0xff
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4b94      	ldr	r3, [pc, #592]	; (8004dfc <vPrint_Skin_Office+0x2c0>)
 8004baa:	2121      	movs	r1, #33	; 0x21
 8004bac:	2028      	movs	r0, #40	; 0x28
 8004bae:	f7ff fc89 	bl	80044c4 <Paint_DrawString_EN>

	//Name
	UmlautCheck(Com->u8L2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3350      	adds	r3, #80	; 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fd48 	bl	800464c <UmlautCheck>
	Com->u8L2[34]=0x00;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	Paint_DrawString_EN(40, 170, (const char *)Com->u8L2, &Font_Lucida_24b, WHITE, BLACK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	23ff      	movs	r3, #255	; 0xff
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4b8b      	ldr	r3, [pc, #556]	; (8004e00 <vPrint_Skin_Office+0x2c4>)
 8004bd4:	21aa      	movs	r1, #170	; 0xaa
 8004bd6:	2028      	movs	r0, #40	; 0x28
 8004bd8:	f7ff fc74 	bl	80044c4 <Paint_DrawString_EN>

	//Name2
	UmlautCheck(Com->u8L3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3382      	adds	r3, #130	; 0x82
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fd33 	bl	800464c <UmlautCheck>
	Com->u8L3[34]=0x00;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Paint_DrawString_EN(40, 205, (const char *)Com->u8L3, &Font_Lucida_24b, WHITE, BLACK);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f103 0282 	add.w	r2, r3, #130	; 0x82
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	23ff      	movs	r3, #255	; 0xff
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4b80      	ldr	r3, [pc, #512]	; (8004e00 <vPrint_Skin_Office+0x2c4>)
 8004bfe:	21cd      	movs	r1, #205	; 0xcd
 8004c00:	2028      	movs	r0, #40	; 0x28
 8004c02:	f7ff fc5f 	bl	80044c4 <Paint_DrawString_EN>

	//Person Point 1
	UmlautCheck(Com->u8L4);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	33b4      	adds	r3, #180	; 0xb4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fd1e 	bl	800464c <UmlautCheck>
	Com->u8L4[32]=0x00;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	Paint_DrawString_EN(40, 245, (const char *)Com->u8L4, &Font_Lucida_18, WHITE, BLACK);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	23ff      	movs	r3, #255	; 0xff
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4b77      	ldr	r3, [pc, #476]	; (8004e04 <vPrint_Skin_Office+0x2c8>)
 8004c28:	21f5      	movs	r1, #245	; 0xf5
 8004c2a:	2028      	movs	r0, #40	; 0x28
 8004c2c:	f7ff fc4a 	bl	80044c4 <Paint_DrawString_EN>

	//Person Point 2
	UmlautCheck(Com->u8L5);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	33e6      	adds	r3, #230	; 0xe6
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fd09 	bl	800464c <UmlautCheck>
	Com->u8L5[32]=0x00;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	Paint_DrawString_EN(40, 273, (const char *)Com->u8L5, &Font_Lucida_18, WHITE, BLACK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f103 02e6 	add.w	r2, r3, #230	; 0xe6
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	23ff      	movs	r3, #255	; 0xff
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <vPrint_Skin_Office+0x2c8>)
 8004c52:	f240 1111 	movw	r1, #273	; 0x111
 8004c56:	2028      	movs	r0, #40	; 0x28
 8004c58:	f7ff fc34 	bl	80044c4 <Paint_DrawString_EN>

	//Person Point 3
	UmlautCheck(Com->u8L6);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fcf2 	bl	800464c <UmlautCheck>
	Com->u8L6[32]=0x00;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	Paint_DrawString_EN(40, 301, (const char *)Com->u8L6, &Font_Lucida_18, WHITE, BLACK);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8004c76:	2300      	movs	r3, #0
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	23ff      	movs	r3, #255	; 0xff
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <vPrint_Skin_Office+0x2c8>)
 8004c80:	f240 112d 	movw	r1, #301	; 0x12d
 8004c84:	2028      	movs	r0, #40	; 0x28
 8004c86:	f7ff fc1d 	bl	80044c4 <Paint_DrawString_EN>

	//Person Point 4
	UmlautCheck(Com->u8L7);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fcdb 	bl	800464c <UmlautCheck>
	Com->u8L7[32]=0x00;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
	Paint_DrawString_EN(40, 329, (const char *)Com->u8L7, &Font_Lucida_18, WHITE, BLACK);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f503 72a5 	add.w	r2, r3, #330	; 0x14a
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	23ff      	movs	r3, #255	; 0xff
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <vPrint_Skin_Office+0x2c8>)
 8004cae:	f240 1149 	movw	r1, #329	; 0x149
 8004cb2:	2028      	movs	r0, #40	; 0x28
 8004cb4:	f7ff fc06 	bl	80044c4 <Paint_DrawString_EN>

	//Info Bar
	UmlautCheck(Com->u8L8);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fcc4 	bl	800464c <UmlautCheck>
	Com->u8L8[32]=0x00;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
	Paint_DrawString_EN(40, 363, (const char *)Com->u8L8, &Font_Lucida_18b, BLACK, WHITE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 8004cd2:	23ff      	movs	r3, #255	; 0xff
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4b4b      	ldr	r3, [pc, #300]	; (8004e08 <vPrint_Skin_Office+0x2cc>)
 8004cdc:	f240 116b 	movw	r1, #363	; 0x16b
 8004ce0:	2028      	movs	r0, #40	; 0x28
 8004ce2:	f7ff fbef 	bl	80044c4 <Paint_DrawString_EN>

	//Info1
	UmlautCheck(Com->u8L9);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fcad 	bl	800464c <UmlautCheck>
	Com->u8L9[32]=0x00;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
	Paint_DrawString_EN(40, 400, (const char *)Com->u8L9, &Font_Lucida_18, WHITE, BLACK);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 72d7 	add.w	r2, r3, #430	; 0x1ae
 8004d00:	2300      	movs	r3, #0
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	23ff      	movs	r3, #255	; 0xff
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <vPrint_Skin_Office+0x2c8>)
 8004d0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d0e:	2028      	movs	r0, #40	; 0x28
 8004d10:	f7ff fbd8 	bl	80044c4 <Paint_DrawString_EN>

	//Info2
	UmlautCheck(Com->u8L10);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fc96 	bl	800464c <UmlautCheck>
	Com->u8L10[32]=0x00;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	Paint_DrawString_EN(40, 430, (const char *)Com->u8L10, &Font_Lucida_18, WHITE, BLACK);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	23ff      	movs	r3, #255	; 0xff
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <vPrint_Skin_Office+0x2c8>)
 8004d38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004d3c:	2028      	movs	r0, #40	; 0x28
 8004d3e:	f7ff fbc1 	bl	80044c4 <Paint_DrawString_EN>

	if (Com->u8G_ID == 9)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004d48:	2b09      	cmp	r3, #9
 8004d4a:	d10a      	bne.n	8004d62 <vPrint_Skin_Office+0x226>
	{
		Paint_DrawBitMap_Paste(QR_Code_A212, 561, 243, 224, 224, BLACK);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	23e0      	movs	r3, #224	; 0xe0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	23e0      	movs	r3, #224	; 0xe0
 8004d56:	22f3      	movs	r2, #243	; 0xf3
 8004d58:	f240 2131 	movw	r1, #561	; 0x231
 8004d5c:	482b      	ldr	r0, [pc, #172]	; (8004e0c <vPrint_Skin_Office+0x2d0>)
 8004d5e:	f7ff fc03 	bl	8004568 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d10a      	bne.n	8004d82 <vPrint_Skin_Office+0x246>
	{
		Paint_DrawBitMap_Paste(piktogramm_buero, 561, 243, 224, 224, BLACK);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	23e0      	movs	r3, #224	; 0xe0
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	23e0      	movs	r3, #224	; 0xe0
 8004d76:	22f3      	movs	r2, #243	; 0xf3
 8004d78:	f240 2131 	movw	r1, #561	; 0x231
 8004d7c:	4824      	ldr	r0, [pc, #144]	; (8004e10 <vPrint_Skin_Office+0x2d4>)
 8004d7e:	f7ff fbf3 	bl	8004568 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d10a      	bne.n	8004da2 <vPrint_Skin_Office+0x266>
	{
		Paint_DrawBitMap_Paste(piktogramm_chip, 561, 243, 224, 224, BLACK);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	23e0      	movs	r3, #224	; 0xe0
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	23e0      	movs	r3, #224	; 0xe0
 8004d96:	22f3      	movs	r2, #243	; 0xf3
 8004d98:	f240 2131 	movw	r1, #561	; 0x231
 8004d9c:	481d      	ldr	r0, [pc, #116]	; (8004e14 <vPrint_Skin_Office+0x2d8>)
 8004d9e:	f7ff fbe3 	bl	8004568 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 3)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d10a      	bne.n	8004dc2 <vPrint_Skin_Office+0x286>
	{
		Paint_DrawBitMap_Paste(piktogramm_leise, 561, 243, 224, 224, BLACK);
 8004dac:	2300      	movs	r3, #0
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	23e0      	movs	r3, #224	; 0xe0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	23e0      	movs	r3, #224	; 0xe0
 8004db6:	22f3      	movs	r2, #243	; 0xf3
 8004db8:	f240 2131 	movw	r1, #561	; 0x231
 8004dbc:	4816      	ldr	r0, [pc, #88]	; (8004e18 <vPrint_Skin_Office+0x2dc>)
 8004dbe:	f7ff fbd3 	bl	8004568 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 4)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d10a      	bne.n	8004de2 <vPrint_Skin_Office+0x2a6>
	{
		Paint_DrawBitMap_Paste(piktogramm_vorlesung, 561, 243, 224, 224, BLACK);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	23e0      	movs	r3, #224	; 0xe0
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	23e0      	movs	r3, #224	; 0xe0
 8004dd6:	22f3      	movs	r2, #243	; 0xf3
 8004dd8:	f240 2131 	movw	r1, #561	; 0x231
 8004ddc:	480f      	ldr	r0, [pc, #60]	; (8004e1c <vPrint_Skin_Office+0x2e0>)
 8004dde:	f7ff fbc3 	bl	8004568 <Paint_DrawBitMap_Paste>
	}

	//Paint_DrawLine(0, 0, 800, 480, 0x00, DOT_PIXEL_5X5, LINE_STYLE_SOLID);
	////
	EPD_7IN5_V2_Display(BlackImage);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7fe fe72 	bl	8003acc <EPD_7IN5_V2_Display>
	free(BlackImage);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f00b fdf3 	bl	80109d4 <free>
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	080282d4 	.word	0x080282d4
 8004dfc:	20000c80 	.word	0x20000c80
 8004e00:	20000c70 	.word	0x20000c70
 8004e04:	20000c60 	.word	0x20000c60
 8004e08:	20000c68 	.word	0x20000c68
 8004e0c:	08014cd4 	.word	0x08014cd4
 8004e10:	08016554 	.word	0x08016554
 8004e14:	08019654 	.word	0x08019654
 8004e18:	0801aed4 	.word	0x0801aed4
 8004e1c:	08017dd4 	.word	0x08017dd4

08004e20 <vPrint_Pixmap>:

void vPrint_Pixmap(unsigned char* u8Pixmap)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 8004e28:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8004e2c:	f00b fdca 	bl	80109c4 <malloc>
 8004e30:	4603      	mov	r3, r0
 8004e32:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8004e34:	23ff      	movs	r3, #255	; 0xff
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004e3e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7fe fe76 	bl	8003b34 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7fe fec9 	bl	8003be0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8004e4e:	20ff      	movs	r0, #255	; 0xff
 8004e50:	f7ff f822 	bl	8003e98 <Paint_Clear>

	Paint_DrawBitMap_Paste(u8Pixmap, 0, 0, 800, 480, BLACK);
 8004e54:	2300      	movs	r3, #0
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fb7e 	bl	8004568 <Paint_DrawBitMap_Paste>

	EPD_7IN5_V2_Display(BlackImage);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7fe fe2d 	bl	8003acc <EPD_7IN5_V2_Display>
	free(BlackImage);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f00b fdae 	bl	80109d4 <free>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <vPrint_Skin_Lecture_Room>:

void vPrint_Skin_Lecture_Room(struct sCommunication* Com)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 8004e88:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8004e8c:	f00b fd9a 	bl	80109c4 <malloc>
 8004e90:	4603      	mov	r3, r0
 8004e92:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8004e94:	23ff      	movs	r3, #255	; 0xff
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004e9e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7fe fe46 	bl	8003b34 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7fe fe99 	bl	8003be0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8004eae:	20ff      	movs	r0, #255	; 0xff
 8004eb0:	f7fe fff2 	bl	8003e98 <Paint_Clear>
	////

	Paint_DrawBitMap_Paste(Background_Lecture_Room, 0, 0, 800, 480, BLACK);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	486e      	ldr	r0, [pc, #440]	; (8005080 <vPrint_Skin_Lecture_Room+0x200>)
 8004ec8:	f7ff fb4e 	bl	8004568 <Paint_DrawBitMap_Paste>

	//Room Nr.
	UmlautCheck(Com->u8L1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	331e      	adds	r3, #30
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fbbb 	bl	800464c <UmlautCheck>

	//strcpy(Com->u8L1, "A212");

	Com->u8L1[5] = 0;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Paint_DrawString_EN(40, 33, (const char *)Com->u8L1, &Font_Lucida_80b, BLACK, WHITE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f103 021e 	add.w	r2, r3, #30
 8004ee4:	23ff      	movs	r3, #255	; 0xff
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4b65      	ldr	r3, [pc, #404]	; (8005084 <vPrint_Skin_Lecture_Room+0x204>)
 8004eee:	2121      	movs	r1, #33	; 0x21
 8004ef0:	2028      	movs	r0, #40	; 0x28
 8004ef2:	f7ff fae7 	bl	80044c4 <Paint_DrawString_EN>

	//1. Clock
	Com->u8L2[14] = 0;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Paint_DrawString_EN(40, 175, (const char *)Com->u8L2, &Font_Lucida_24b, WHITE, BLACK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8004f04:	2300      	movs	r3, #0
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	23ff      	movs	r3, #255	; 0xff
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <vPrint_Skin_Lecture_Room+0x208>)
 8004f0e:	21af      	movs	r1, #175	; 0xaf
 8004f10:	2028      	movs	r0, #40	; 0x28
 8004f12:	f7ff fad7 	bl	80044c4 <Paint_DrawString_EN>
	//1. Titel
	UmlautCheck(Com->u8L3);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3382      	adds	r3, #130	; 0x82
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fb96 	bl	800464c <UmlautCheck>
	Com->u8L3[28] = 0;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	Paint_DrawString_EN(40, 217, (const char *)Com->u8L3, &Font_Lucida_30b, WHITE, BLACK);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f103 0282 	add.w	r2, r3, #130	; 0x82
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	23ff      	movs	r3, #255	; 0xff
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4b55      	ldr	r3, [pc, #340]	; (800508c <vPrint_Skin_Lecture_Room+0x20c>)
 8004f38:	21d9      	movs	r1, #217	; 0xd9
 8004f3a:	2028      	movs	r0, #40	; 0x28
 8004f3c:	f7ff fac2 	bl	80044c4 <Paint_DrawString_EN>
	//1. Name
	UmlautCheck(Com->u8L4);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	33b4      	adds	r3, #180	; 0xb4
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fb81 	bl	800464c <UmlautCheck>
	Com->u8L4[28] = 0;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	Paint_DrawString_EN(330, 182, (const char *)Com->u8L4, &Font_Lucida_18, WHITE, BLACK);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	23ff      	movs	r3, #255	; 0xff
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4b4b      	ldr	r3, [pc, #300]	; (8005090 <vPrint_Skin_Lecture_Room+0x210>)
 8004f62:	21b6      	movs	r1, #182	; 0xb6
 8004f64:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004f68:	f7ff faac 	bl	80044c4 <Paint_DrawString_EN>


	//2. Clock
	Com->u8L5[14] = 0;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	Paint_DrawString_EN(40, 275, (const char *)Com->u8L5, &Font_Lucida_24b, WHITE, BLACK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f103 02e6 	add.w	r2, r3, #230	; 0xe6
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	23ff      	movs	r3, #255	; 0xff
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <vPrint_Skin_Lecture_Room+0x208>)
 8004f84:	f240 1113 	movw	r1, #275	; 0x113
 8004f88:	2028      	movs	r0, #40	; 0x28
 8004f8a:	f7ff fa9b 	bl	80044c4 <Paint_DrawString_EN>
	//2. Titel
	UmlautCheck(Com->u8L6);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fb59 	bl	800464c <UmlautCheck>
	Com->u8L6[28] = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	Paint_DrawString_EN(40, 317, (const char *)Com->u8L6, &Font_Lucida_30b, WHITE, BLACK);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	23ff      	movs	r3, #255	; 0xff
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	4b36      	ldr	r3, [pc, #216]	; (800508c <vPrint_Skin_Lecture_Room+0x20c>)
 8004fb2:	f240 113d 	movw	r1, #317	; 0x13d
 8004fb6:	2028      	movs	r0, #40	; 0x28
 8004fb8:	f7ff fa84 	bl	80044c4 <Paint_DrawString_EN>
	//2. Name
	UmlautCheck(Com->u8L7);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fb42 	bl	800464c <UmlautCheck>
	Com->u8L7[28] = 0;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Paint_DrawString_EN(330, 282, (const char *)Com->u8L7, &Font_Lucida_18, WHITE, BLACK);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f503 72a5 	add.w	r2, r3, #330	; 0x14a
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	23ff      	movs	r3, #255	; 0xff
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <vPrint_Skin_Lecture_Room+0x210>)
 8004fe0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004fe4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004fe8:	f7ff fa6c 	bl	80044c4 <Paint_DrawString_EN>


	//3. Clock
	Com->u8L8[14] = 0;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	Paint_DrawString_EN(40, 375, (const char *)Com->u8L8, &Font_Lucida_24b, WHITE, BLACK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	23ff      	movs	r3, #255	; 0xff
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <vPrint_Skin_Lecture_Room+0x208>)
 8005004:	f240 1177 	movw	r1, #375	; 0x177
 8005008:	2028      	movs	r0, #40	; 0x28
 800500a:	f7ff fa5b 	bl	80044c4 <Paint_DrawString_EN>
	//3. Titel
	UmlautCheck(Com->u8L9);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fb19 	bl	800464c <UmlautCheck>
	Com->u8L9[28] = 0;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	Paint_DrawString_EN(40, 417, (const char *)Com->u8L9, &Font_Lucida_30b, WHITE, BLACK);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f503 72d7 	add.w	r2, r3, #430	; 0x1ae
 8005028:	2300      	movs	r3, #0
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	23ff      	movs	r3, #255	; 0xff
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <vPrint_Skin_Lecture_Room+0x20c>)
 8005032:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005036:	2028      	movs	r0, #40	; 0x28
 8005038:	f7ff fa44 	bl	80044c4 <Paint_DrawString_EN>
	//3. Name
	UmlautCheck(Com->u8L10);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fb02 	bl	800464c <UmlautCheck>
	Com->u8L10[28] = 0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
	Paint_DrawString_EN(330, 382, (const char *)Com->u8L10, &Font_Lucida_18, WHITE, BLACK);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8005056:	2300      	movs	r3, #0
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	23ff      	movs	r3, #255	; 0xff
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <vPrint_Skin_Lecture_Room+0x210>)
 8005060:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005064:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8005068:	f7ff fa2c 	bl	80044c4 <Paint_DrawString_EN>


	//Paint_DrawLine(0, 0, 800, 480, 0x00, DOT_PIXEL_5X5, LINE_STYLE_SOLID);
	////
	EPD_7IN5_V2_Display(BlackImage);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7fe fd2d 	bl	8003acc <EPD_7IN5_V2_Display>
	free(BlackImage);
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f00b fcae 	bl	80109d4 <free>
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	0801c754 	.word	0x0801c754
 8005084:	20000c80 	.word	0x20000c80
 8005088:	20000c70 	.word	0x20000c70
 800508c:	20000c78 	.word	0x20000c78
 8005090:	20000c60 	.word	0x20000c60

08005094 <ee_format>:
  return true;
#endif
}
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 800509e:	f001 fd31 	bl	8006b04 <HAL_FLASH_Unlock>
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
  flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
#elif _EE_PAGE_OR_SECTOR == PAGE_NUM
  flashErase.NbPages = 1;
 80050a2:	2301      	movs	r3, #1
 80050a4:	61bb      	str	r3, [r7, #24]
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
 80050a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80050aa:	617b      	str	r3, [r7, #20]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 80050b0:	2302      	movs	r3, #2
 80050b2:	613b      	str	r3, [r7, #16]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 80050b4:	f107 021c 	add.w	r2, r7, #28
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 fe04 	bl	8006ccc <HAL_FLASHEx_Erase>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <ee_format+0x4a>
  {
    HAL_FLASH_Lock();
 80050ca:	f001 fd3d 	bl	8006b48 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d001      	beq.n	80050da <ee_format+0x46>
      return false;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e004      	b.n	80050e4 <ee_format+0x50>
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
#endif
      return true;
 80050da:	2301      	movs	r3, #1
 80050dc:	e002      	b.n	80050e4 <ee_format+0x50>
    }
  }
  HAL_FLASH_Lock();
 80050de:	f001 fd33 	bl	8006b48 <HAL_FLASH_Lock>
  return false;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <ee_write>:
  }
  return true;
}
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	b0a1      	sub	sp, #132	; 0x84
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	66f8      	str	r0, [r7, #108]	; 0x6c
 80050f6:	66b9      	str	r1, [r7, #104]	; 0x68
 80050f8:	667a      	str	r2, [r7, #100]	; 0x64
  if ((startVirtualAddress + len) > _EE_SIZE)
 80050fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050fe:	4413      	add	r3, r2
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005104:	d901      	bls.n	800510a <ee_write+0x1e>
    return false;
 8005106:	2300      	movs	r3, #0
 8005108:	e0db      	b.n	80052c2 <ee_write+0x1d6>
  if (data == NULL)
 800510a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <ee_write+0x28>
    return false;
 8005110:	2300      	movs	r3, #0
 8005112:	e0d6      	b.n	80052c2 <ee_write+0x1d6>
  HAL_FLASH_Unlock();
 8005114:	f001 fcf6 	bl	8006b04 <HAL_FLASH_Unlock>
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8005118:	2300      	movs	r3, #0
 800511a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800511c:	e0c9      	b.n	80052b2 <ee_write+0x1c6>
  {
    uint64_t data64 = data[i];
 800511e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005122:	4413      	add	r3, r2
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2200      	movs	r2, #0
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	627a      	str	r2, [r7, #36]	; 0x24
 800512e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005132:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    data64 += data[i + 1] * 0x100;
 8005136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513c:	4413      	add	r3, r2
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	17da      	asrs	r2, r3, #31
 8005144:	65bb      	str	r3, [r7, #88]	; 0x58
 8005146:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005148:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800514c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800514e:	1851      	adds	r1, r2, r1
 8005150:	61b9      	str	r1, [r7, #24]
 8005152:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005154:	414b      	adcs	r3, r1
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    data64 += data[i + 2] * 0x10000;
 8005160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005166:	4413      	add	r3, r2
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	17da      	asrs	r2, r3, #31
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
 8005170:	657a      	str	r2, [r7, #84]	; 0x54
 8005172:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005178:	1851      	adds	r1, r2, r1
 800517a:	6139      	str	r1, [r7, #16]
 800517c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800517e:	414b      	adcs	r3, r1
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005186:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    data64 += data[i + 3] * 0x1000000;
 800518a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800518c:	1cda      	adds	r2, r3, #3
 800518e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	17da      	asrs	r2, r3, #31
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
 800519a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800519c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80051a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051a2:	1851      	adds	r1, r2, r1
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051a8:	414b      	adcs	r3, r1
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    data64 += data[i + 4] * 0x100000000;
 80051b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ba:	4413      	add	r3, r2
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2200      	movs	r2, #0
 80051c2:	643b      	str	r3, [r7, #64]	; 0x40
 80051c4:	647a      	str	r2, [r7, #68]	; 0x44
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051d0:	000b      	movs	r3, r1
 80051d2:	2200      	movs	r2, #0
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80051dc:	1816      	adds	r6, r2, r0
 80051de:	603e      	str	r6, [r7, #0]
 80051e0:	414b      	adcs	r3, r1
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    data64 += data[i + 5] * 0x10000000000;
 80051ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051ee:	1d5a      	adds	r2, r3, #5
 80051f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f2:	4413      	add	r3, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80051fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005208:	020b      	lsls	r3, r1, #8
 800520a:	2200      	movs	r2, #0
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005214:	eb12 0a00 	adds.w	sl, r2, r0
 8005218:	eb43 0b01 	adc.w	fp, r3, r1
 800521c:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
    data64 += data[i + 6] * 0x1000000000000;
 8005220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005222:	1d9a      	adds	r2, r3, #6
 8005224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005226:	4413      	add	r3, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2200      	movs	r2, #0
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
 8005230:	637a      	str	r2, [r7, #52]	; 0x34
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800523c:	040b      	lsls	r3, r1, #16
 800523e:	2200      	movs	r2, #0
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005248:	eb12 0800 	adds.w	r8, r2, r0
 800524c:	eb43 0901 	adc.w	r9, r3, r1
 8005250:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
    data64 += data[i + 7] * 0x100000000000000;
 8005254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005256:	1dda      	adds	r2, r3, #7
 8005258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800525a:	4413      	add	r3, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2200      	movs	r2, #0
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
 8005264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005270:	060b      	lsls	r3, r1, #24
 8005272:	2200      	movs	r2, #0
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800527c:	1814      	adds	r4, r2, r0
 800527e:	eb43 0501 	adc.w	r5, r3, r1
 8005282:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8005286:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	4413      	add	r3, r2
 800528c:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8005290:	f501 2102 	add.w	r1, r1, #532480	; 0x82000
 8005294:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005298:	2000      	movs	r0, #0
 800529a:	f001 fbc7 	bl	8006a2c <HAL_FLASH_Program>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <ee_write+0x1c0>
    {
      HAL_FLASH_Lock();
 80052a4:	f001 fc50 	bl	8006b48 <HAL_FLASH_Lock>
      return false;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e00a      	b.n	80052c2 <ee_write+0x1d6>
  for (uint32_t i = 0; i < len; i += 8)
 80052ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ae:	3308      	adds	r3, #8
 80052b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f4ff af31 	bcc.w	800511e <ee_write+0x32>
    }
  }
#endif
  HAL_FLASH_Lock();
 80052bc:	f001 fc44 	bl	8006b48 <HAL_FLASH_Lock>
  return true;
 80052c0:	2301      	movs	r3, #1
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3784      	adds	r7, #132	; 0x84
 80052c6:	46bd      	mov	sp, r7
 80052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052cc <ee_commit>:
  return false;
#endif
}
//##########################################################################################################
bool  ee_commit(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
    return false;
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
#else
  return false;
 80052d0:	2300      	movs	r3, #0
#endif
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <HAL_Init+0x3c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a0b      	ldr	r2, [pc, #44]	; (8005318 <HAL_Init+0x3c>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052f2:	2003      	movs	r0, #3
 80052f4:	f001 fada 	bl	80068ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052f8:	200f      	movs	r0, #15
 80052fa:	f000 f80f 	bl	800531c <HAL_InitTick>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	71fb      	strb	r3, [r7, #7]
 8005308:	e001      	b.n	800530e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800530a:	f7fc f983 	bl	8001614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800530e:	79fb      	ldrb	r3, [r7, #7]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40022000 	.word	0x40022000

0800531c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <HAL_InitTick+0x6c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d023      	beq.n	8005378 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005330:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_InitTick+0x70>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_InitTick+0x6c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	4619      	mov	r1, r3
 800533a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800533e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005342:	fbb2 f3f3 	udiv	r3, r2, r3
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fae5 	bl	8006916 <HAL_SYSTICK_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10f      	bne.n	8005372 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b0f      	cmp	r3, #15
 8005356:	d809      	bhi.n	800536c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005358:	2200      	movs	r2, #0
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	f001 faaf 	bl	80068c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005364:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <HAL_InitTick+0x74>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e007      	b.n	800537c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
 8005370:	e004      	b.n	800537c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	e001      	b.n	800537c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200000f0 	.word	0x200000f0
 800538c:	20000000 	.word	0x20000000
 8005390:	200000ec 	.word	0x200000ec

08005394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_IncTick+0x20>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_IncTick+0x24>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <HAL_IncTick+0x24>)
 80053a6:	6013      	str	r3, [r2, #0]
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	200000f0 	.word	0x200000f0
 80053b8:	200013a0 	.word	0x200013a0

080053bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return uwTick;
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <HAL_GetTick+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	200013a0 	.word	0x200013a0

080053d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7ff ffee 	bl	80053bc <HAL_GetTick>
 80053e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d005      	beq.n	80053fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_Delay+0x44>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053fa:	bf00      	nop
 80053fc:	f7ff ffde 	bl	80053bc <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d8f7      	bhi.n	80053fc <HAL_Delay+0x28>
  {
  }
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200000f0 	.word	0x200000f0

0800541c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_SuspendTick+0x1c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_SuspendTick+0x1c>)
 8005426:	f023 0302 	bic.w	r3, r3, #2
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e010 	.word	0xe000e010

0800543c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_ResumeTick+0x1c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a04      	ldr	r2, [pc, #16]	; (8005458 <HAL_ResumeTick+0x1c>)
 8005446:	f043 0302 	orr.w	r3, r3, #2
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	e000e010 	.word	0xe000e010

0800545c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <HAL_GetUIDw0+0x14>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	1fff7590 	.word	0x1fff7590

08005474 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3360      	adds	r3, #96	; 0x60
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <LL_ADC_SetOffset+0x44>)
 80054fe:	4013      	ands	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	4313      	orrs	r3, r2
 800550c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	03fff000 	.word	0x03fff000

08005524 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3360      	adds	r3, #96	; 0x60
 8005532:	461a      	mov	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3360      	adds	r3, #96	; 0x60
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	431a      	orrs	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3330      	adds	r3, #48	; 0x30
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	4413      	add	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	211f      	movs	r1, #31
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0e9b      	lsrs	r3, r3, #26
 80055e4:	f003 011f 	and.w	r1, r3, #31
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	431a      	orrs	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3314      	adds	r3, #20
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0e5b      	lsrs	r3, r3, #25
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	0d1b      	lsrs	r3, r3, #20
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2107      	movs	r1, #7
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	401a      	ands	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	0d1b      	lsrs	r3, r3, #20
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	431a      	orrs	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005674:	43db      	mvns	r3, r3
 8005676:	401a      	ands	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f003 0318 	and.w	r3, r3, #24
 800567e:	4908      	ldr	r1, [pc, #32]	; (80056a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005680:	40d9      	lsrs	r1, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	400b      	ands	r3, r1
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	431a      	orrs	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	0007ffff 	.word	0x0007ffff

080056a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 031f 	and.w	r3, r3, #31
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80056ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6093      	str	r3, [r2, #8]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005714:	d101      	bne.n	800571a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800573c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005764:	d101      	bne.n	800576a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <LL_ADC_IsEnabled+0x18>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <LL_ADC_IsEnabled+0x1a>
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057da:	f043 0204 	orr.w	r2, r3, #4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d101      	bne.n	8005806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b08      	cmp	r3, #8
 8005826:	d101      	bne.n	800582c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e130      	b.n	8005ab8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	2b00      	cmp	r3, #0
 8005862:	d109      	bne.n	8005878 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fb fefd 	bl	8001664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff3f 	bl	8005700 <LL_ADC_IsDeepPowerDownEnabled>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff25 	bl	80056dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff ff5a 	bl	8005750 <LL_ADC_IsInternalRegulatorEnabled>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d115      	bne.n	80058ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff ff3e 	bl	8005728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058ac:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <HAL_ADC_Init+0x284>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	099b      	lsrs	r3, r3, #6
 80058b2:	4a84      	ldr	r2, [pc, #528]	; (8005ac4 <HAL_ADC_Init+0x288>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	099b      	lsrs	r3, r3, #6
 80058ba:	3301      	adds	r3, #1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80058c0:	e002      	b.n	80058c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f9      	bne.n	80058c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff ff3c 	bl	8005750 <LL_ADC_IsInternalRegulatorEnabled>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f043 0210 	orr.w	r2, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff ff75 	bl	80057ee <LL_ADC_REG_IsConversionOngoing>
 8005904:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 80c9 	bne.w	8005aa6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 80c5 	bne.w	8005aa6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005924:	f043 0202 	orr.w	r2, r3, #2
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff ff35 	bl	80057a0 <LL_ADC_IsEnabled>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d115      	bne.n	8005968 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800593c:	4862      	ldr	r0, [pc, #392]	; (8005ac8 <HAL_ADC_Init+0x28c>)
 800593e:	f7ff ff2f 	bl	80057a0 <LL_ADC_IsEnabled>
 8005942:	4604      	mov	r4, r0
 8005944:	4861      	ldr	r0, [pc, #388]	; (8005acc <HAL_ADC_Init+0x290>)
 8005946:	f7ff ff2b 	bl	80057a0 <LL_ADC_IsEnabled>
 800594a:	4603      	mov	r3, r0
 800594c:	431c      	orrs	r4, r3
 800594e:	4860      	ldr	r0, [pc, #384]	; (8005ad0 <HAL_ADC_Init+0x294>)
 8005950:	f7ff ff26 	bl	80057a0 <LL_ADC_IsEnabled>
 8005954:	4603      	mov	r3, r0
 8005956:	4323      	orrs	r3, r4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d105      	bne.n	8005968 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4619      	mov	r1, r3
 8005962:	485c      	ldr	r0, [pc, #368]	; (8005ad4 <HAL_ADC_Init+0x298>)
 8005964:	f7ff fd86 	bl	8005474 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	7e5b      	ldrb	r3, [r3, #25]
 800596c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005972:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005978:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800597e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005986:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d106      	bne.n	80059a4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	3b01      	subs	r3, #1
 800599c:	045b      	lsls	r3, r3, #17
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	4b44      	ldr	r3, [pc, #272]	; (8005ad8 <HAL_ADC_Init+0x29c>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	69b9      	ldr	r1, [r7, #24]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff ff1b 	bl	8005814 <LL_ADC_INJ_IsConversionOngoing>
 80059de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d13d      	bne.n	8005a62 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d13a      	bne.n	8005a62 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80059f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a08:	f023 0302 	bic.w	r3, r3, #2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	69b9      	ldr	r1, [r7, #24]
 8005a12:	430b      	orrs	r3, r1
 8005a14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d118      	bne.n	8005a52 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a2a:	f023 0304 	bic.w	r3, r3, #4
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a36:	4311      	orrs	r1, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a42:	430a      	orrs	r2, r1
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	611a      	str	r2, [r3, #16]
 8005a50:	e007      	b.n	8005a62 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d10c      	bne.n	8005a84 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	f023 010f 	bic.w	r1, r3, #15
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	1e5a      	subs	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
 8005a82:	e007      	b.n	8005a94 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 020f 	bic.w	r2, r2, #15
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	f043 0201 	orr.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
 8005aa4:	e007      	b.n	8005ab6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	f043 0210 	orr.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3724      	adds	r7, #36	; 0x24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}
 8005ac0:	20000000 	.word	0x20000000
 8005ac4:	053e2d63 	.word	0x053e2d63
 8005ac8:	50040000 	.word	0x50040000
 8005acc:	50040100 	.word	0x50040100
 8005ad0:	50040200 	.word	0x50040200
 8005ad4:	50040300 	.word	0x50040300
 8005ad8:	fff0c007 	.word	0xfff0c007

08005adc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ae4:	4857      	ldr	r0, [pc, #348]	; (8005c44 <HAL_ADC_Start+0x168>)
 8005ae6:	f7ff fddd 	bl	80056a4 <LL_ADC_GetMultimode>
 8005aea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff fe7c 	bl	80057ee <LL_ADC_REG_IsConversionOngoing>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f040 809c 	bne.w	8005c36 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_ADC_Start+0x30>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e097      	b.n	8005c3c <HAL_ADC_Start+0x160>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fd73 	bl	8006600 <ADC_Enable>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 8083 	bne.w	8005c2c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a42      	ldr	r2, [pc, #264]	; (8005c48 <HAL_ADC_Start+0x16c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d002      	beq.n	8005b4a <HAL_ADC_Start+0x6e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	e000      	b.n	8005b4c <HAL_ADC_Start+0x70>
 8005b4a:	4b40      	ldr	r3, [pc, #256]	; (8005c4c <HAL_ADC_Start+0x170>)
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d002      	beq.n	8005b5a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b72:	d106      	bne.n	8005b82 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b78:	f023 0206 	bic.w	r2, r3, #6
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b80:	e002      	b.n	8005b88 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	221c      	movs	r2, #28
 8005b8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <HAL_ADC_Start+0x16c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d002      	beq.n	8005ba8 <HAL_ADC_Start+0xcc>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	e000      	b.n	8005baa <HAL_ADC_Start+0xce>
 8005ba8:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <HAL_ADC_Start+0x170>)
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d008      	beq.n	8005bc4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d002      	beq.n	8005bc4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d114      	bne.n	8005bee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fded 	bl	80057c6 <LL_ADC_REG_StartConversion>
 8005bec:	e025      	b.n	8005c3a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <HAL_ADC_Start+0x16c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d002      	beq.n	8005c0a <HAL_ADC_Start+0x12e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	e000      	b.n	8005c0c <HAL_ADC_Start+0x130>
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <HAL_ADC_Start+0x170>)
 8005c0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00f      	beq.n	8005c3a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
 8005c2a:	e006      	b.n	8005c3a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005c34:	e001      	b.n	8005c3a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
 8005c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	50040300 	.word	0x50040300
 8005c48:	50040100 	.word	0x50040100
 8005c4c:	50040000 	.word	0x50040000

08005c50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c5a:	4866      	ldr	r0, [pc, #408]	; (8005df4 <HAL_ADC_PollForConversion+0x1a4>)
 8005c5c:	f7ff fd22 	bl	80056a4 <LL_ADC_GetMultimode>
 8005c60:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d102      	bne.n	8005c70 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	e02a      	b.n	8005cc6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d002      	beq.n	8005c82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d111      	bne.n	8005ca6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0a4      	b.n	8005dea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005ca4:	e00f      	b.n	8005cc6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005ca6:	4853      	ldr	r0, [pc, #332]	; (8005df4 <HAL_ADC_PollForConversion+0x1a4>)
 8005ca8:	f7ff fd0a 	bl	80056c0 <LL_ADC_GetMultiDMATransfer>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e093      	b.n	8005dea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005cc6:	f7ff fb79 	bl	80053bc <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005ccc:	e021      	b.n	8005d12 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d01d      	beq.n	8005d12 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005cd6:	f7ff fb71 	bl	80053bc <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <HAL_ADC_PollForConversion+0x9c>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d112      	bne.n	8005d12 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e06b      	b.n	8005dea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0d6      	beq.n	8005cce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fc28 	bl	8005586 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01c      	beq.n	8005d76 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7e5b      	ldrb	r3, [r3, #25]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d118      	bne.n	8005d76 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d111      	bne.n	8005d76 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f043 0201 	orr.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1f      	ldr	r2, [pc, #124]	; (8005df8 <HAL_ADC_PollForConversion+0x1a8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d002      	beq.n	8005d86 <HAL_ADC_PollForConversion+0x136>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	e000      	b.n	8005d88 <HAL_ADC_PollForConversion+0x138>
 8005d86:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_ADC_PollForConversion+0x1ac>)
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d008      	beq.n	8005da2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d002      	beq.n	8005da2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	d104      	bne.n	8005dac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	e00c      	b.n	8005dc6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <HAL_ADC_PollForConversion+0x1a8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d002      	beq.n	8005dbc <HAL_ADC_PollForConversion+0x16c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	e000      	b.n	8005dbe <HAL_ADC_PollForConversion+0x16e>
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <HAL_ADC_PollForConversion+0x1ac>)
 8005dbe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d104      	bne.n	8005dd6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e008      	b.n	8005de8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	220c      	movs	r2, #12
 8005de6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	50040300 	.word	0x50040300
 8005df8:	50040100 	.word	0x50040100
 8005dfc:	50040000 	.word	0x50040000

08005e00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b0b6      	sub	sp, #216	; 0xd8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_ADC_ConfigChannel+0x22>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e3c9      	b.n	80065d2 <HAL_ADC_ConfigChannel+0x7b6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fccf 	bl	80057ee <LL_ADC_REG_IsConversionOngoing>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 83aa 	bne.w	80065ac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d824      	bhi.n	8005eb2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	3b02      	subs	r3, #2
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d81b      	bhi.n	8005eaa <HAL_ADC_ConfigChannel+0x8e>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <HAL_ADC_ConfigChannel+0x5c>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08005e91 	.word	0x08005e91
 8005e80:	08005e99 	.word	0x08005e99
 8005e84:	08005ea1 	.word	0x08005ea1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005e88:	230c      	movs	r3, #12
 8005e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005e8e:	e010      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005e90:	2312      	movs	r3, #18
 8005e92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005e96:	e00c      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005e98:	2318      	movs	r3, #24
 8005e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005e9e:	e008      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005ea8:	e003      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005eaa:	2306      	movs	r3, #6
 8005eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005eb0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005ec0:	f7ff fb74 	bl	80055ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fc90 	bl	80057ee <LL_ADC_REG_IsConversionOngoing>
 8005ece:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fc9c 	bl	8005814 <LL_ADC_INJ_IsConversionOngoing>
 8005edc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 81a4 	bne.w	8006232 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 819f 	bne.w	8006232 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f7ff fb7f 	bl	8005604 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d00a      	beq.n	8005f3e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6919      	ldr	r1, [r3, #16]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f38:	f7ff fad0 	bl	80054dc <LL_ADC_SetOffset>
 8005f3c:	e179      	b.n	8006232 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff faed 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x14e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fae2 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8005f60:	4603      	mov	r3, r0
 8005f62:	0e9b      	lsrs	r3, r3, #26
 8005f64:	f003 021f 	and.w	r2, r3, #31
 8005f68:	e01e      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x18c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fad7 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f80:	fa93 f3a3 	rbit	r3, r3
 8005f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8005f98:	2320      	movs	r3, #32
 8005f9a:	e004      	b.n	8005fa6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fa0:	fab3 f383 	clz	r3, r3
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x1a4>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	0e9b      	lsrs	r3, r3, #26
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	e018      	b.n	8005ff2 <HAL_ADC_ConfigChannel+0x1d6>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fcc:	fa93 f3a3 	rbit	r3, r3
 8005fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	e004      	b.n	8005ff2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fec:	fab3 f383 	clz	r3, r3
 8005ff0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d106      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff faa6 	bl	8005550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fa8a 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006010:	4603      	mov	r3, r0
 8006012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x214>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fa7f 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006026:	4603      	mov	r3, r0
 8006028:	0e9b      	lsrs	r3, r3, #26
 800602a:	f003 021f 	and.w	r2, r3, #31
 800602e:	e01e      	b.n	800606e <HAL_ADC_ConfigChannel+0x252>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fa74 	bl	8005524 <LL_ADC_GetOffsetChannel>
 800603c:	4603      	mov	r3, r0
 800603e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006046:	fa93 f3a3 	rbit	r3, r3
 800604a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800604e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800605e:	2320      	movs	r3, #32
 8006060:	e004      	b.n	800606c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006066:	fab3 f383 	clz	r3, r3
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006076:	2b00      	cmp	r3, #0
 8006078:	d105      	bne.n	8006086 <HAL_ADC_ConfigChannel+0x26a>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	0e9b      	lsrs	r3, r3, #26
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	e018      	b.n	80060b8 <HAL_ADC_ConfigChannel+0x29c>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006092:	fa93 f3a3 	rbit	r3, r3
 8006096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800609a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800609e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80060a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80060aa:	2320      	movs	r3, #32
 80060ac:	e004      	b.n	80060b8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80060ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060b2:	fab3 f383 	clz	r3, r3
 80060b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d106      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fa43 	bl	8005550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fa27 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x2da>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2102      	movs	r1, #2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fa1c 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80060ec:	4603      	mov	r3, r0
 80060ee:	0e9b      	lsrs	r3, r3, #26
 80060f0:	f003 021f 	and.w	r2, r3, #31
 80060f4:	e01e      	b.n	8006134 <HAL_ADC_ConfigChannel+0x318>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2102      	movs	r1, #2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fa11 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006102:	4603      	mov	r3, r0
 8006104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800610c:	fa93 f3a3 	rbit	r3, r3
 8006110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800611c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006124:	2320      	movs	r3, #32
 8006126:	e004      	b.n	8006132 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800612c:	fab3 f383 	clz	r3, r3
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <HAL_ADC_ConfigChannel+0x330>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	0e9b      	lsrs	r3, r3, #26
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	e014      	b.n	8006176 <HAL_ADC_ConfigChannel+0x35a>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006154:	fa93 f3a3 	rbit	r3, r3
 8006158:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800615a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006168:	2320      	movs	r3, #32
 800616a:	e004      	b.n	8006176 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800616c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006170:	fab3 f383 	clz	r3, r3
 8006174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006176:	429a      	cmp	r2, r3
 8006178:	d106      	bne.n	8006188 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	2102      	movs	r1, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff f9e4 	bl	8005550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2103      	movs	r1, #3
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff f9c8 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006194:	4603      	mov	r3, r0
 8006196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x398>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2103      	movs	r1, #3
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff f9bd 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80061aa:	4603      	mov	r3, r0
 80061ac:	0e9b      	lsrs	r3, r3, #26
 80061ae:	f003 021f 	and.w	r2, r3, #31
 80061b2:	e017      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x3c8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2103      	movs	r1, #3
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff f9b2 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80061c0:	4603      	mov	r3, r0
 80061c2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c6:	fa93 f3a3 	rbit	r3, r3
 80061ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80061d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80061d6:	2320      	movs	r3, #32
 80061d8:	e003      	b.n	80061e2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80061da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061dc:	fab3 f383 	clz	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x3e0>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	0e9b      	lsrs	r3, r3, #26
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	e011      	b.n	8006220 <HAL_ADC_ConfigChannel+0x404>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006204:	fa93 f3a3 	rbit	r3, r3
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800620a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800620c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800620e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006214:	2320      	movs	r3, #32
 8006216:	e003      	b.n	8006220 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800621a:	fab3 f383 	clz	r3, r3
 800621e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006220:	429a      	cmp	r2, r3
 8006222:	d106      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	2103      	movs	r1, #3
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff f98f 	bl	8005550 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fab2 	bl	80057a0 <LL_ADC_IsEnabled>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 8140 	bne.w	80064c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6819      	ldr	r1, [r3, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	461a      	mov	r2, r3
 8006252:	f7ff fa03 	bl	800565c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4a8f      	ldr	r2, [pc, #572]	; (8006498 <HAL_ADC_ConfigChannel+0x67c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	f040 8131 	bne.w	80064c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <HAL_ADC_ConfigChannel+0x46e>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	0e9b      	lsrs	r3, r3, #26
 8006278:	3301      	adds	r3, #1
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2b09      	cmp	r3, #9
 8006280:	bf94      	ite	ls
 8006282:	2301      	movls	r3, #1
 8006284:	2300      	movhi	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e019      	b.n	80062be <HAL_ADC_ConfigChannel+0x4a2>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006292:	fa93 f3a3 	rbit	r3, r3
 8006296:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800629c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80062a2:	2320      	movs	r3, #32
 80062a4:	e003      	b.n	80062ae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80062a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a8:	fab3 f383 	clz	r3, r3
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	3301      	adds	r3, #1
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2b09      	cmp	r3, #9
 80062b6:	bf94      	ite	ls
 80062b8:	2301      	movls	r3, #1
 80062ba:	2300      	movhi	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d079      	beq.n	80063b6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <HAL_ADC_ConfigChannel+0x4c2>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0e9b      	lsrs	r3, r3, #26
 80062d4:	3301      	adds	r3, #1
 80062d6:	069b      	lsls	r3, r3, #26
 80062d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062dc:	e015      	b.n	800630a <HAL_ADC_ConfigChannel+0x4ee>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e6:	fa93 f3a3 	rbit	r3, r3
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80062ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80062f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80062f6:	2320      	movs	r3, #32
 80062f8:	e003      	b.n	8006302 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80062fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fc:	fab3 f383 	clz	r3, r3
 8006300:	b2db      	uxtb	r3, r3
 8006302:	3301      	adds	r3, #1
 8006304:	069b      	lsls	r3, r3, #26
 8006306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_ADC_ConfigChannel+0x50e>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	0e9b      	lsrs	r3, r3, #26
 800631c:	3301      	adds	r3, #1
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2101      	movs	r1, #1
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	e017      	b.n	800635a <HAL_ADC_ConfigChannel+0x53e>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800633c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006342:	2320      	movs	r3, #32
 8006344:	e003      	b.n	800634e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006348:	fab3 f383 	clz	r3, r3
 800634c:	b2db      	uxtb	r3, r3
 800634e:	3301      	adds	r3, #1
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f303 	lsl.w	r3, r1, r3
 800635a:	ea42 0103 	orr.w	r1, r2, r3
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <HAL_ADC_ConfigChannel+0x564>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	0e9b      	lsrs	r3, r3, #26
 8006370:	3301      	adds	r3, #1
 8006372:	f003 021f 	and.w	r2, r3, #31
 8006376:	4613      	mov	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	051b      	lsls	r3, r3, #20
 800637e:	e018      	b.n	80063b2 <HAL_ADC_ConfigChannel+0x596>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	fa93 f3a3 	rbit	r3, r3
 800638c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8006398:	2320      	movs	r3, #32
 800639a:	e003      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	fab3 f383 	clz	r3, r3
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	3301      	adds	r3, #1
 80063a6:	f003 021f 	and.w	r2, r3, #31
 80063aa:	4613      	mov	r3, r2
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4413      	add	r3, r2
 80063b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063b2:	430b      	orrs	r3, r1
 80063b4:	e081      	b.n	80064ba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x5b6>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	0e9b      	lsrs	r3, r3, #26
 80063c8:	3301      	adds	r3, #1
 80063ca:	069b      	lsls	r3, r3, #26
 80063cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063d0:	e015      	b.n	80063fe <HAL_ADC_ConfigChannel+0x5e2>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	fa93 f3a3 	rbit	r3, r3
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80063ea:	2320      	movs	r3, #32
 80063ec:	e003      	b.n	80063f6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	fab3 f383 	clz	r3, r3
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	3301      	adds	r3, #1
 80063f8:	069b      	lsls	r3, r3, #26
 80063fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <HAL_ADC_ConfigChannel+0x602>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	0e9b      	lsrs	r3, r3, #26
 8006410:	3301      	adds	r3, #1
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2101      	movs	r1, #1
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	e017      	b.n	800644e <HAL_ADC_ConfigChannel+0x632>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	fa93 f3a3 	rbit	r3, r3
 800642a:	61bb      	str	r3, [r7, #24]
  return result;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8006436:	2320      	movs	r3, #32
 8006438:	e003      	b.n	8006442 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	fab3 f383 	clz	r3, r3
 8006440:	b2db      	uxtb	r3, r3
 8006442:	3301      	adds	r3, #1
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	ea42 0103 	orr.w	r1, r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10d      	bne.n	800647a <HAL_ADC_ConfigChannel+0x65e>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	0e9b      	lsrs	r3, r3, #26
 8006464:	3301      	adds	r3, #1
 8006466:	f003 021f 	and.w	r2, r3, #31
 800646a:	4613      	mov	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4413      	add	r3, r2
 8006470:	3b1e      	subs	r3, #30
 8006472:	051b      	lsls	r3, r3, #20
 8006474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006478:	e01e      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x69c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	fa93 f3a3 	rbit	r3, r3
 8006486:	60fb      	str	r3, [r7, #12]
  return result;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8006492:	2320      	movs	r3, #32
 8006494:	e006      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x688>
 8006496:	bf00      	nop
 8006498:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	fab3 f383 	clz	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	3301      	adds	r3, #1
 80064a6:	f003 021f 	and.w	r2, r3, #31
 80064aa:	4613      	mov	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	3b1e      	subs	r3, #30
 80064b2:	051b      	lsls	r3, r3, #20
 80064b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064be:	4619      	mov	r1, r3
 80064c0:	f7ff f8a0 	bl	8005604 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b44      	ldr	r3, [pc, #272]	; (80065dc <HAL_ADC_ConfigChannel+0x7c0>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d07a      	beq.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064d0:	4843      	ldr	r0, [pc, #268]	; (80065e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80064d2:	f7fe fff5 	bl	80054c0 <LL_ADC_GetCommonPathInternalCh>
 80064d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a41      	ldr	r2, [pc, #260]	; (80065e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d12c      	bne.n	800653e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d126      	bne.n	800653e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <HAL_ADC_ConfigChannel+0x7cc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_ADC_ConfigChannel+0x6e8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a3b      	ldr	r2, [pc, #236]	; (80065ec <HAL_ADC_ConfigChannel+0x7d0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d15d      	bne.n	80065c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800650c:	4619      	mov	r1, r3
 800650e:	4834      	ldr	r0, [pc, #208]	; (80065e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8006510:	f7fe ffc3 	bl	800549a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006514:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	099b      	lsrs	r3, r3, #6
 800651a:	4a36      	ldr	r2, [pc, #216]	; (80065f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	099b      	lsrs	r3, r3, #6
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	4613      	mov	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800652e:	e002      	b.n	8006536 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3b01      	subs	r3, #1
 8006534:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f9      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800653c:	e040      	b.n	80065c0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d118      	bne.n	800657a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800654c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d112      	bne.n	800657a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a23      	ldr	r2, [pc, #140]	; (80065e8 <HAL_ADC_ConfigChannel+0x7cc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_ADC_ConfigChannel+0x74c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_ADC_ConfigChannel+0x7d0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d12d      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800656c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006570:	4619      	mov	r1, r3
 8006572:	481b      	ldr	r0, [pc, #108]	; (80065e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8006574:	f7fe ff91 	bl	800549a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006578:	e024      	b.n	80065c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <HAL_ADC_ConfigChannel+0x7e0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d120      	bne.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d11a      	bne.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d115      	bne.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800659a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800659e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065a2:	4619      	mov	r1, r3
 80065a4:	480e      	ldr	r0, [pc, #56]	; (80065e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80065a6:	f7fe ff78 	bl	800549a <LL_ADC_SetCommonPathInternalCh>
 80065aa:	e00c      	b.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b0:	f043 0220 	orr.w	r2, r3, #32
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80065be:	e002      	b.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80065ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	37d8      	adds	r7, #216	; 0xd8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	80080000 	.word	0x80080000
 80065e0:	50040300 	.word	0x50040300
 80065e4:	c7520000 	.word	0xc7520000
 80065e8:	50040000 	.word	0x50040000
 80065ec:	50040200 	.word	0x50040200
 80065f0:	20000000 	.word	0x20000000
 80065f4:	053e2d63 	.word	0x053e2d63
 80065f8:	cb840000 	.word	0xcb840000
 80065fc:	80000001 	.word	0x80000001

08006600 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff f8c5 	bl	80057a0 <LL_ADC_IsEnabled>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d169      	bne.n	80066f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	4b36      	ldr	r3, [pc, #216]	; (80066fc <ADC_Enable+0xfc>)
 8006624:	4013      	ands	r3, r2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	f043 0210 	orr.w	r2, r3, #16
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e055      	b.n	80066f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff f894 	bl	8005778 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006650:	482b      	ldr	r0, [pc, #172]	; (8006700 <ADC_Enable+0x100>)
 8006652:	f7fe ff35 	bl	80054c0 <LL_ADC_GetCommonPathInternalCh>
 8006656:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800665c:	2b00      	cmp	r3, #0
 800665e:	d013      	beq.n	8006688 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <ADC_Enable+0x104>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	099b      	lsrs	r3, r3, #6
 8006666:	4a28      	ldr	r2, [pc, #160]	; (8006708 <ADC_Enable+0x108>)
 8006668:	fba2 2303 	umull	r2, r3, r2, r3
 800666c:	099b      	lsrs	r3, r3, #6
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800667a:	e002      	b.n	8006682 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	3b01      	subs	r3, #1
 8006680:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f9      	bne.n	800667c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006688:	f7fe fe98 	bl	80053bc <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800668e:	e028      	b.n	80066e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff f883 	bl	80057a0 <LL_ADC_IsEnabled>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff f867 	bl	8005778 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80066aa:	f7fe fe87 	bl	80053bc <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d914      	bls.n	80066e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d00d      	beq.n	80066e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f043 0210 	orr.w	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f043 0201 	orr.w	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e007      	b.n	80066f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d1cf      	bne.n	8006690 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	8000003f 	.word	0x8000003f
 8006700:	50040300 	.word	0x50040300
 8006704:	20000000 	.word	0x20000000
 8006708:	053e2d63 	.word	0x053e2d63

0800670c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <__NVIC_SetPriorityGrouping+0x44>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006728:	4013      	ands	r3, r2
 800672a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800673e:	4a04      	ldr	r2, [pc, #16]	; (8006750 <__NVIC_SetPriorityGrouping+0x44>)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	60d3      	str	r3, [r2, #12]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	e000ed00 	.word	0xe000ed00

08006754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <__NVIC_GetPriorityGrouping+0x18>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	f003 0307 	and.w	r3, r3, #7
}
 8006762:	4618      	mov	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	e000ed00 	.word	0xe000ed00

08006770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800677a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677e:	2b00      	cmp	r3, #0
 8006780:	db0b      	blt.n	800679a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	f003 021f 	and.w	r2, r3, #31
 8006788:	4907      	ldr	r1, [pc, #28]	; (80067a8 <__NVIC_EnableIRQ+0x38>)
 800678a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	2001      	movs	r0, #1
 8006792:	fa00 f202 	lsl.w	r2, r0, r2
 8006796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000e100 	.word	0xe000e100

080067ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	db0a      	blt.n	80067d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	490c      	ldr	r1, [pc, #48]	; (80067f8 <__NVIC_SetPriority+0x4c>)
 80067c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ca:	0112      	lsls	r2, r2, #4
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	440b      	add	r3, r1
 80067d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067d4:	e00a      	b.n	80067ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4908      	ldr	r1, [pc, #32]	; (80067fc <__NVIC_SetPriority+0x50>)
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	3b04      	subs	r3, #4
 80067e4:	0112      	lsls	r2, r2, #4
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	440b      	add	r3, r1
 80067ea:	761a      	strb	r2, [r3, #24]
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	e000e100 	.word	0xe000e100
 80067fc:	e000ed00 	.word	0xe000ed00

08006800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006800:	b480      	push	{r7}
 8006802:	b089      	sub	sp, #36	; 0x24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f1c3 0307 	rsb	r3, r3, #7
 800681a:	2b04      	cmp	r3, #4
 800681c:	bf28      	it	cs
 800681e:	2304      	movcs	r3, #4
 8006820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	3304      	adds	r3, #4
 8006826:	2b06      	cmp	r3, #6
 8006828:	d902      	bls.n	8006830 <NVIC_EncodePriority+0x30>
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	3b03      	subs	r3, #3
 800682e:	e000      	b.n	8006832 <NVIC_EncodePriority+0x32>
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006834:	f04f 32ff 	mov.w	r2, #4294967295
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	43da      	mvns	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	401a      	ands	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006848:	f04f 31ff 	mov.w	r1, #4294967295
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	43d9      	mvns	r1, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006858:	4313      	orrs	r3, r2
         );
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	; 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3b01      	subs	r3, #1
 8006874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006878:	d301      	bcc.n	800687e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800687a:	2301      	movs	r3, #1
 800687c:	e00f      	b.n	800689e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800687e:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <SysTick_Config+0x40>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3b01      	subs	r3, #1
 8006884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006886:	210f      	movs	r1, #15
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	f7ff ff8e 	bl	80067ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <SysTick_Config+0x40>)
 8006892:	2200      	movs	r2, #0
 8006894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <SysTick_Config+0x40>)
 8006898:	2207      	movs	r2, #7
 800689a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	e000e010 	.word	0xe000e010

080068ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff29 	bl	800670c <__NVIC_SetPriorityGrouping>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	4603      	mov	r3, r0
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068d4:	f7ff ff3e 	bl	8006754 <__NVIC_GetPriorityGrouping>
 80068d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	6978      	ldr	r0, [r7, #20]
 80068e0:	f7ff ff8e 	bl	8006800 <NVIC_EncodePriority>
 80068e4:	4602      	mov	r2, r0
 80068e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff ff5d 	bl	80067ac <__NVIC_SetPriority>
}
 80068f2:	bf00      	nop
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4603      	mov	r3, r0
 8006902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff ff31 	bl	8006770 <__NVIC_EnableIRQ>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff ffa2 	bl	8006868 <SysTick_Config>
 8006924:	4603      	mov	r3, r0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d008      	beq.n	8006958 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2204      	movs	r2, #4
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e022      	b.n	800699e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 020e 	bic.w	r2, r2, #14
 8006966:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	f003 021c 	and.w	r2, r3, #28
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	2101      	movs	r1, #1
 8006986:	fa01 f202 	lsl.w	r2, r1, r2
 800698a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d005      	beq.n	80069ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2204      	movs	r2, #4
 80069c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	e029      	b.n	8006a22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 020e 	bic.w	r2, r2, #14
 80069dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0201 	bic.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	f003 021c 	and.w	r2, r3, #28
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2101      	movs	r1, #1
 80069fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006a00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
    }
  }
  return status;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <HAL_FLASH_Program+0xd0>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_FLASH_Program+0x1e>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e053      	b.n	8006af2 <HAL_FLASH_Program+0xc6>
 8006a4a:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <HAL_FLASH_Program+0xd0>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a54:	f000 f888 	bl	8006b68 <FLASH_WaitForLastOperation>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d143      	bne.n	8006aea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <HAL_FLASH_Program+0xd0>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006a68:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <HAL_FLASH_Program+0xd4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006a74:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <HAL_FLASH_Program+0xd4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <HAL_FLASH_Program+0xd4>)
 8006a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a7e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006a80:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <HAL_FLASH_Program+0xd0>)
 8006a82:	2202      	movs	r2, #2
 8006a84:	771a      	strb	r2, [r3, #28]
 8006a86:	e002      	b.n	8006a8e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006a88:	4b1c      	ldr	r3, [pc, #112]	; (8006afc <HAL_FLASH_Program+0xd0>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	68b8      	ldr	r0, [r7, #8]
 8006a9a:	f000 f8bb 	bl	8006c14 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e010      	b.n	8006ac6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d002      	beq.n	8006ab0 <HAL_FLASH_Program+0x84>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d10a      	bne.n	8006ac6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	68b8      	ldr	r0, [r7, #8]
 8006ab6:	f000 f8d3 	bl	8006c60 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d102      	bne.n	8006ac6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ac4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ac6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006aca:	f000 f84d 	bl	8006b68 <FLASH_WaitForLastOperation>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d006      	beq.n	8006ae6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006ad8:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <HAL_FLASH_Program+0xd4>)
 8006ada:	695a      	ldr	r2, [r3, #20]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	4907      	ldr	r1, [pc, #28]	; (8006b00 <HAL_FLASH_Program+0xd4>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006ae6:	f000 f9eb 	bl	8006ec0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <HAL_FLASH_Program+0xd0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]

  return status;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200000f4 	.word	0x200000f4
 8006b00:	40022000 	.word	0x40022000

08006b04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006b0e:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <HAL_FLASH_Unlock+0x38>)
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	da0b      	bge.n	8006b2e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006b16:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <HAL_FLASH_Unlock+0x38>)
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <HAL_FLASH_Unlock+0x3c>)
 8006b1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <HAL_FLASH_Unlock+0x38>)
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <HAL_FLASH_Unlock+0x40>)
 8006b20:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006b22:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <HAL_FLASH_Unlock+0x38>)
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da01      	bge.n	8006b2e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40022000 	.word	0x40022000
 8006b40:	45670123 	.word	0x45670123
 8006b44:	cdef89ab 	.word	0xcdef89ab

08006b48 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <HAL_FLASH_Lock+0x1c>)
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	4a04      	ldr	r2, [pc, #16]	; (8006b64 <HAL_FLASH_Lock+0x1c>)
 8006b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b56:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40022000 	.word	0x40022000

08006b68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006b70:	f7fe fc24 	bl	80053bc <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006b76:	e00d      	b.n	8006b94 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d009      	beq.n	8006b94 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006b80:	f7fe fc1c 	bl	80053bc <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d801      	bhi.n	8006b94 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e037      	b.n	8006c04 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006b94:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1eb      	bne.n	8006b78 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01e      	beq.n	8006bf0 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006bb2:	4b17      	ldr	r3, [pc, #92]	; (8006c10 <FLASH_WaitForLastOperation+0xa8>)
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <FLASH_WaitForLastOperation+0xa8>)
 8006bbc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <FLASH_WaitForLastOperation+0x70>
 8006bc8:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bd2:	490e      	ldr	r1, [pc, #56]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	618b      	str	r3, [r1, #24]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <FLASH_WaitForLastOperation+0x84>
 8006be2:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006bea:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e009      	b.n	8006c04 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <FLASH_WaitForLastOperation+0xa4>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40022000 	.word	0x40022000
 8006c10:	200000f4 	.word	0x200000f4

08006c14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <FLASH_Program_DoubleWord+0x48>)
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <FLASH_Program_DoubleWord+0x48>)
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006c32:	f3bf 8f6f 	isb	sy
}
 8006c36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	000a      	movs	r2, r1
 8006c46:	2300      	movs	r3, #0
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	3104      	adds	r1, #4
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	600b      	str	r3, [r1, #0]
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	40022000 	.word	0x40022000

08006c60 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <FLASH_Program_Fast+0x68>)
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <FLASH_Program_Fast+0x68>)
 8006c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c82:	f3ef 8310 	mrs	r3, PRIMASK
 8006c86:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c88:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c8c:	b672      	cpsid	i
}
 8006c8e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	617b      	str	r3, [r7, #20]
    row_index--;
 8006ca4:	7ffb      	ldrb	r3, [r7, #31]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006caa:	7ffb      	ldrb	r3, [r7, #31]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ef      	bne.n	8006c90 <FLASH_Program_Fast+0x30>
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f383 8810 	msr	PRIMASK, r3
}
 8006cba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006cbc:	bf00      	nop
 8006cbe:	3724      	adds	r7, #36	; 0x24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40022000 	.word	0x40022000

08006ccc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006cd6:	4b49      	ldr	r3, [pc, #292]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_FLASHEx_Erase+0x16>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e087      	b.n	8006df2 <HAL_FLASHEx_Erase+0x126>
 8006ce2:	4b46      	ldr	r3, [pc, #280]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ce8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cec:	f7ff ff3c 	bl	8006b68 <FLASH_WaitForLastOperation>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d177      	bne.n	8006dea <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006cfa:	4b40      	ldr	r3, [pc, #256]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006d00:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d013      	beq.n	8006d34 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006d0c:	4b3c      	ldr	r3, [pc, #240]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006d18:	4b39      	ldr	r3, [pc, #228]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a38      	ldr	r2, [pc, #224]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d22:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006d24:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006d26:	2203      	movs	r2, #3
 8006d28:	771a      	strb	r2, [r3, #28]
 8006d2a:	e016      	b.n	8006d5a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006d2c:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	771a      	strb	r2, [r3, #28]
 8006d32:	e012      	b.n	8006d5a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006d34:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006d40:	4b2f      	ldr	r3, [pc, #188]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2e      	ldr	r2, [pc, #184]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d4a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006d4c:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006d4e:	2202      	movs	r2, #2
 8006d50:	771a      	strb	r2, [r3, #28]
 8006d52:	e002      	b.n	8006d5a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d113      	bne.n	8006d8a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 f84c 	bl	8006e04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d70:	f7ff fefa 	bl	8006b68 <FLASH_WaitForLastOperation>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006d78:	4b21      	ldr	r3, [pc, #132]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006d7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d82:	f023 0304 	bic.w	r3, r3, #4
 8006d86:	6153      	str	r3, [r2, #20]
 8006d88:	e02d      	b.n	8006de6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d90:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	60bb      	str	r3, [r7, #8]
 8006d98:	e01d      	b.n	8006dd6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68b8      	ldr	r0, [r7, #8]
 8006da2:	f000 f857 	bl	8006e54 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006da6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006daa:	f7ff fedd 	bl	8006b68 <FLASH_WaitForLastOperation>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	4a12      	ldr	r2, [pc, #72]	; (8006e00 <HAL_FLASHEx_Erase+0x134>)
 8006db8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dbc:	f023 0302 	bic.w	r3, r3, #2
 8006dc0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	601a      	str	r2, [r3, #0]
          break;
 8006dce:	e00a      	b.n	8006de6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d3d9      	bcc.n	8006d9a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006de6:	f000 f86b 	bl	8006ec0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <HAL_FLASHEx_Erase+0x130>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]

  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200000f4 	.word	0x200000f4
 8006e00:	40022000 	.word	0x40022000

08006e04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006e16:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <FLASH_MassErase+0x4c>)
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <FLASH_MassErase+0x4c>)
 8006e1c:	f043 0304 	orr.w	r3, r3, #4
 8006e20:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8006e2c:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <FLASH_MassErase+0x4c>)
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	4a07      	ldr	r2, [pc, #28]	; (8006e50 <FLASH_MassErase+0x4c>)
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e36:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <FLASH_MassErase+0x4c>)
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <FLASH_MassErase+0x4c>)
 8006e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e42:	6153      	str	r3, [r2, #20]
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40022000 	.word	0x40022000

08006e54 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e72:	6153      	str	r3, [r2, #20]
 8006e74:	e005      	b.n	8006e82 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e80:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006e82:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006e92:	490a      	ldr	r1, [pc, #40]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	4a07      	ldr	r2, [pc, #28]	; (8006ebc <FLASH_PageErase+0x68>)
 8006e9e:	f043 0302 	orr.w	r3, r3, #2
 8006ea2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <FLASH_PageErase+0x68>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <FLASH_PageErase+0x68>)
 8006eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eae:	6153      	str	r3, [r2, #20]
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	40022000 	.word	0x40022000

08006ec0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006ec6:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <FLASH_FlushCaches+0x8c>)
 8006ec8:	7f1b      	ldrb	r3, [r3, #28]
 8006eca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d002      	beq.n	8006ed8 <FLASH_FlushCaches+0x18>
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d117      	bne.n	8006f08 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006ede:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006eea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006efc:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f06:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d002      	beq.n	8006f14 <FLASH_FlushCaches+0x54>
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d111      	bne.n	8006f38 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006f14:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a07      	ldr	r2, [pc, #28]	; (8006f50 <FLASH_FlushCaches+0x90>)
 8006f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f36:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <FLASH_FlushCaches+0x8c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	771a      	strb	r2, [r3, #28]
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	200000f4 	.word	0x200000f4
 8006f50:	40022000 	.word	0x40022000

08006f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f62:	e17f      	b.n	8007264 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	2101      	movs	r1, #1
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8171 	beq.w	800725e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d005      	beq.n	8006f94 <HAL_GPIO_Init+0x40>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d130      	bne.n	8006ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fca:	2201      	movs	r2, #1
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	f003 0201 	and.w	r2, r3, #1
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d118      	bne.n	8007034 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007008:	2201      	movs	r2, #1
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4013      	ands	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	08db      	lsrs	r3, r3, #3
 800701e:	f003 0201 	and.w	r2, r3, #1
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	2b03      	cmp	r3, #3
 800703e:	d017      	beq.n	8007070 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	2203      	movs	r2, #3
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4013      	ands	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d123      	bne.n	80070c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	08da      	lsrs	r2, r3, #3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3208      	adds	r2, #8
 8007084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007088:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	220f      	movs	r2, #15
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	43db      	mvns	r3, r3
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4013      	ands	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	08da      	lsrs	r2, r3, #3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3208      	adds	r2, #8
 80070be:	6939      	ldr	r1, [r7, #16]
 80070c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	2203      	movs	r2, #3
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	43db      	mvns	r3, r3
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4013      	ands	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 0203 	and.w	r2, r3, #3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80ac 	beq.w	800725e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007106:	4b5f      	ldr	r3, [pc, #380]	; (8007284 <HAL_GPIO_Init+0x330>)
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	4a5e      	ldr	r2, [pc, #376]	; (8007284 <HAL_GPIO_Init+0x330>)
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	6613      	str	r3, [r2, #96]	; 0x60
 8007112:	4b5c      	ldr	r3, [pc, #368]	; (8007284 <HAL_GPIO_Init+0x330>)
 8007114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800711e:	4a5a      	ldr	r2, [pc, #360]	; (8007288 <HAL_GPIO_Init+0x334>)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	089b      	lsrs	r3, r3, #2
 8007124:	3302      	adds	r3, #2
 8007126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	220f      	movs	r2, #15
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	43db      	mvns	r3, r3
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4013      	ands	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007148:	d025      	beq.n	8007196 <HAL_GPIO_Init+0x242>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a4f      	ldr	r2, [pc, #316]	; (800728c <HAL_GPIO_Init+0x338>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01f      	beq.n	8007192 <HAL_GPIO_Init+0x23e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a4e      	ldr	r2, [pc, #312]	; (8007290 <HAL_GPIO_Init+0x33c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d019      	beq.n	800718e <HAL_GPIO_Init+0x23a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a4d      	ldr	r2, [pc, #308]	; (8007294 <HAL_GPIO_Init+0x340>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d013      	beq.n	800718a <HAL_GPIO_Init+0x236>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a4c      	ldr	r2, [pc, #304]	; (8007298 <HAL_GPIO_Init+0x344>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00d      	beq.n	8007186 <HAL_GPIO_Init+0x232>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a4b      	ldr	r2, [pc, #300]	; (800729c <HAL_GPIO_Init+0x348>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d007      	beq.n	8007182 <HAL_GPIO_Init+0x22e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a4a      	ldr	r2, [pc, #296]	; (80072a0 <HAL_GPIO_Init+0x34c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <HAL_GPIO_Init+0x22a>
 800717a:	2306      	movs	r3, #6
 800717c:	e00c      	b.n	8007198 <HAL_GPIO_Init+0x244>
 800717e:	2307      	movs	r3, #7
 8007180:	e00a      	b.n	8007198 <HAL_GPIO_Init+0x244>
 8007182:	2305      	movs	r3, #5
 8007184:	e008      	b.n	8007198 <HAL_GPIO_Init+0x244>
 8007186:	2304      	movs	r3, #4
 8007188:	e006      	b.n	8007198 <HAL_GPIO_Init+0x244>
 800718a:	2303      	movs	r3, #3
 800718c:	e004      	b.n	8007198 <HAL_GPIO_Init+0x244>
 800718e:	2302      	movs	r3, #2
 8007190:	e002      	b.n	8007198 <HAL_GPIO_Init+0x244>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <HAL_GPIO_Init+0x244>
 8007196:	2300      	movs	r3, #0
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	f002 0203 	and.w	r2, r2, #3
 800719e:	0092      	lsls	r2, r2, #2
 80071a0:	4093      	lsls	r3, r2
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071a8:	4937      	ldr	r1, [pc, #220]	; (8007288 <HAL_GPIO_Init+0x334>)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	3302      	adds	r3, #2
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071b6:	4b3b      	ldr	r3, [pc, #236]	; (80072a4 <HAL_GPIO_Init+0x350>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	43db      	mvns	r3, r3
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4013      	ands	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80071da:	4a32      	ldr	r2, [pc, #200]	; (80072a4 <HAL_GPIO_Init+0x350>)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80071e0:	4b30      	ldr	r3, [pc, #192]	; (80072a4 <HAL_GPIO_Init+0x350>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	43db      	mvns	r3, r3
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4013      	ands	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_GPIO_Init+0x350>)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800720a:	4b26      	ldr	r3, [pc, #152]	; (80072a4 <HAL_GPIO_Init+0x350>)
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	43db      	mvns	r3, r3
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4013      	ands	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <HAL_GPIO_Init+0x350>)
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007234:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <HAL_GPIO_Init+0x350>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	43db      	mvns	r3, r3
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4013      	ands	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007258:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <HAL_GPIO_Init+0x350>)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3301      	adds	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	f47f ae78 	bne.w	8006f64 <HAL_GPIO_Init+0x10>
  }
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
 8007288:	40010000 	.word	0x40010000
 800728c:	48000400 	.word	0x48000400
 8007290:	48000800 	.word	0x48000800
 8007294:	48000c00 	.word	0x48000c00
 8007298:	48001000 	.word	0x48001000
 800729c:	48001400 	.word	0x48001400
 80072a0:	48001800 	.word	0x48001800
 80072a4:	40010400 	.word	0x40010400

080072a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	887b      	ldrh	r3, [r7, #2]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	e001      	b.n	80072ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	807b      	strh	r3, [r7, #2]
 80072e4:	4613      	mov	r3, r2
 80072e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072e8:	787b      	ldrb	r3, [r7, #1]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072f4:	e002      	b.n	80072fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072f6:	887a      	ldrh	r2, [r7, #2]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800731e:	4a05      	ldr	r2, [pc, #20]	; (8007334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	4618      	mov	r0, r3
 8007328:	f7fa f8dc 	bl	80014e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40010400 	.word	0x40010400

08007338 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a04      	ldr	r2, [pc, #16]	; (8007354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007346:	6013      	str	r3, [r2, #0]
}
 8007348:	bf00      	nop
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40007000 	.word	0x40007000

08007358 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f023 0307 	bic.w	r3, r3, #7
 8007364:	4a07      	ldr	r2, [pc, #28]	; (8007384 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007366:	f043 0303 	orr.w	r3, r3, #3
 800736a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	4a05      	ldr	r2, [pc, #20]	; (8007388 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8007372:	f043 0304 	orr.w	r3, r3, #4
 8007376:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007378:	bf30      	wfi
}
 800737a:	bf00      	nop
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40007000 	.word	0x40007000
 8007388:	e000ed00 	.word	0xe000ed00

0800738c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007390:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40007000 	.word	0x40007000

080073a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b6:	d130      	bne.n	800741a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80073b8:	4b23      	ldr	r3, [pc, #140]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c4:	d038      	beq.n	8007438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073c6:	4b20      	ldr	r3, [pc, #128]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073ce:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2232      	movs	r2, #50	; 0x32
 80073dc:	fb02 f303 	mul.w	r3, r2, r3
 80073e0:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	0c9b      	lsrs	r3, r3, #18
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073ec:	e002      	b.n	80073f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073f4:	4b14      	ldr	r3, [pc, #80]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d102      	bne.n	8007408 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f2      	bne.n	80073ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007408:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007414:	d110      	bne.n	8007438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e00f      	b.n	800743a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d007      	beq.n	8007438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007428:	4b07      	ldr	r3, [pc, #28]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007430:	4a05      	ldr	r2, [pc, #20]	; (8007448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40007000 	.word	0x40007000
 800744c:	20000000 	.word	0x20000000
 8007450:	431bde83 	.word	0x431bde83

08007454 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e3ca      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007466:	4b97      	ldr	r3, [pc, #604]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007470:	4b94      	ldr	r3, [pc, #592]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80e4 	beq.w	8007650 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <HAL_RCC_OscConfig+0x4a>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b0c      	cmp	r3, #12
 8007492:	f040 808b 	bne.w	80075ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b01      	cmp	r3, #1
 800749a:	f040 8087 	bne.w	80075ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800749e:	4b89      	ldr	r3, [pc, #548]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_RCC_OscConfig+0x62>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e3a2      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	4b82      	ldr	r3, [pc, #520]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <HAL_RCC_OscConfig+0x7c>
 80074c6:	4b7f      	ldr	r3, [pc, #508]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074ce:	e005      	b.n	80074dc <HAL_RCC_OscConfig+0x88>
 80074d0:	4b7c      	ldr	r3, [pc, #496]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80074d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074d6:	091b      	lsrs	r3, r3, #4
 80074d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d223      	bcs.n	8007528 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fd55 	bl	8007f94 <RCC_SetFlashLatencyFromMSIRange>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e383      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074f4:	4b73      	ldr	r3, [pc, #460]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a72      	ldr	r2, [pc, #456]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80074fa:	f043 0308 	orr.w	r3, r3, #8
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	4b70      	ldr	r3, [pc, #448]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	496d      	ldr	r1, [pc, #436]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 800750e:	4313      	orrs	r3, r2
 8007510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007512:	4b6c      	ldr	r3, [pc, #432]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	4968      	ldr	r1, [pc, #416]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007522:	4313      	orrs	r3, r2
 8007524:	604b      	str	r3, [r1, #4]
 8007526:	e025      	b.n	8007574 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007528:	4b66      	ldr	r3, [pc, #408]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a65      	ldr	r2, [pc, #404]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 800752e:	f043 0308 	orr.w	r3, r3, #8
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4b63      	ldr	r3, [pc, #396]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	4960      	ldr	r1, [pc, #384]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007546:	4b5f      	ldr	r3, [pc, #380]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	495b      	ldr	r1, [pc, #364]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007556:	4313      	orrs	r3, r2
 8007558:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fd15 	bl	8007f94 <RCC_SetFlashLatencyFromMSIRange>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e343      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007574:	f000 fc4a 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 8007578:	4602      	mov	r2, r0
 800757a:	4b52      	ldr	r3, [pc, #328]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	4950      	ldr	r1, [pc, #320]	; (80076c8 <HAL_RCC_OscConfig+0x274>)
 8007586:	5ccb      	ldrb	r3, [r1, r3]
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	4a4e      	ldr	r2, [pc, #312]	; (80076cc <HAL_RCC_OscConfig+0x278>)
 8007592:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007594:	4b4e      	ldr	r3, [pc, #312]	; (80076d0 <HAL_RCC_OscConfig+0x27c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fd febf 	bl	800531c <HAL_InitTick>
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d052      	beq.n	800764e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	e327      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d032      	beq.n	800761a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075b4:	4b43      	ldr	r3, [pc, #268]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a42      	ldr	r2, [pc, #264]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80075c0:	f7fd fefc 	bl	80053bc <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80075c8:	f7fd fef8 	bl	80053bc <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e310      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075da:	4b3a      	ldr	r3, [pc, #232]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f0      	beq.n	80075c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075e6:	4b37      	ldr	r3, [pc, #220]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a36      	ldr	r2, [pc, #216]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80075ec:	f043 0308 	orr.w	r3, r3, #8
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	4931      	ldr	r1, [pc, #196]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007600:	4313      	orrs	r3, r2
 8007602:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007604:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	492c      	ldr	r1, [pc, #176]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007614:	4313      	orrs	r3, r2
 8007616:	604b      	str	r3, [r1, #4]
 8007618:	e01a      	b.n	8007650 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800761a:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a29      	ldr	r2, [pc, #164]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007626:	f7fd fec9 	bl	80053bc <HAL_GetTick>
 800762a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800762c:	e008      	b.n	8007640 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800762e:	f7fd fec5 	bl	80053bc <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e2dd      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007640:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f0      	bne.n	800762e <HAL_RCC_OscConfig+0x1da>
 800764c:	e000      	b.n	8007650 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800764e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d074      	beq.n	8007746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	2b08      	cmp	r3, #8
 8007660:	d005      	beq.n	800766e <HAL_RCC_OscConfig+0x21a>
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d10e      	bne.n	8007686 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b03      	cmp	r3, #3
 800766c:	d10b      	bne.n	8007686 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766e:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d064      	beq.n	8007744 <HAL_RCC_OscConfig+0x2f0>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d160      	bne.n	8007744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e2ba      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768e:	d106      	bne.n	800769e <HAL_RCC_OscConfig+0x24a>
 8007690:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a0b      	ldr	r2, [pc, #44]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 8007696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e026      	b.n	80076ec <HAL_RCC_OscConfig+0x298>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076a6:	d115      	bne.n	80076d4 <HAL_RCC_OscConfig+0x280>
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80076ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a02      	ldr	r2, [pc, #8]	; (80076c4 <HAL_RCC_OscConfig+0x270>)
 80076ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e014      	b.n	80076ec <HAL_RCC_OscConfig+0x298>
 80076c2:	bf00      	nop
 80076c4:	40021000 	.word	0x40021000
 80076c8:	08014c8c 	.word	0x08014c8c
 80076cc:	20000000 	.word	0x20000000
 80076d0:	200000ec 	.word	0x200000ec
 80076d4:	4ba0      	ldr	r3, [pc, #640]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a9f      	ldr	r2, [pc, #636]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80076da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	4b9d      	ldr	r3, [pc, #628]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a9c      	ldr	r2, [pc, #624]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80076e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d013      	beq.n	800771c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f4:	f7fd fe62 	bl	80053bc <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076fc:	f7fd fe5e 	bl	80053bc <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b64      	cmp	r3, #100	; 0x64
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e276      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800770e:	4b92      	ldr	r3, [pc, #584]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f0      	beq.n	80076fc <HAL_RCC_OscConfig+0x2a8>
 800771a:	e014      	b.n	8007746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fd fe4e 	bl	80053bc <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007724:	f7fd fe4a 	bl	80053bc <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b64      	cmp	r3, #100	; 0x64
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e262      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007736:	4b88      	ldr	r3, [pc, #544]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x2d0>
 8007742:	e000      	b.n	8007746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d060      	beq.n	8007814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b04      	cmp	r3, #4
 8007756:	d005      	beq.n	8007764 <HAL_RCC_OscConfig+0x310>
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b0c      	cmp	r3, #12
 800775c:	d119      	bne.n	8007792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d116      	bne.n	8007792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007764:	4b7c      	ldr	r3, [pc, #496]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <HAL_RCC_OscConfig+0x328>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e23f      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777c:	4b76      	ldr	r3, [pc, #472]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	4973      	ldr	r1, [pc, #460]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800778c:	4313      	orrs	r3, r2
 800778e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007790:	e040      	b.n	8007814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d023      	beq.n	80077e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800779a:	4b6f      	ldr	r3, [pc, #444]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a6e      	ldr	r2, [pc, #440]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80077a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a6:	f7fd fe09 	bl	80053bc <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ae:	f7fd fe05 	bl	80053bc <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e21d      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077c0:	4b65      	ldr	r3, [pc, #404]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0f0      	beq.n	80077ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077cc:	4b62      	ldr	r3, [pc, #392]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	061b      	lsls	r3, r3, #24
 80077da:	495f      	ldr	r1, [pc, #380]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	604b      	str	r3, [r1, #4]
 80077e0:	e018      	b.n	8007814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077e2:	4b5d      	ldr	r3, [pc, #372]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a5c      	ldr	r2, [pc, #368]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80077e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ee:	f7fd fde5 	bl	80053bc <HAL_GetTick>
 80077f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80077f4:	e008      	b.n	8007808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f6:	f7fd fde1 	bl	80053bc <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e1f9      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007808:	4b53      	ldr	r3, [pc, #332]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f0      	bne.n	80077f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d03c      	beq.n	800789a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01c      	beq.n	8007862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007828:	4b4b      	ldr	r3, [pc, #300]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800782a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800782e:	4a4a      	ldr	r2, [pc, #296]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007830:	f043 0301 	orr.w	r3, r3, #1
 8007834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007838:	f7fd fdc0 	bl	80053bc <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007840:	f7fd fdbc 	bl	80053bc <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e1d4      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007852:	4b41      	ldr	r3, [pc, #260]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0ef      	beq.n	8007840 <HAL_RCC_OscConfig+0x3ec>
 8007860:	e01b      	b.n	800789a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007862:	4b3d      	ldr	r3, [pc, #244]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007868:	4a3b      	ldr	r2, [pc, #236]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007872:	f7fd fda3 	bl	80053bc <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007878:	e008      	b.n	800788c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800787a:	f7fd fd9f 	bl	80053bc <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e1b7      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800788c:	4b32      	ldr	r3, [pc, #200]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800788e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1ef      	bne.n	800787a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80a6 	beq.w	80079f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078a8:	2300      	movs	r3, #0
 80078aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078ac:	4b2a      	ldr	r3, [pc, #168]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80078ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10d      	bne.n	80078d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078b8:	4b27      	ldr	r3, [pc, #156]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80078ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078bc:	4a26      	ldr	r2, [pc, #152]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80078be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c2:	6593      	str	r3, [r2, #88]	; 0x58
 80078c4:	4b24      	ldr	r3, [pc, #144]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 80078c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078d0:	2301      	movs	r3, #1
 80078d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d4:	4b21      	ldr	r3, [pc, #132]	; (800795c <HAL_RCC_OscConfig+0x508>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d118      	bne.n	8007912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078e0:	4b1e      	ldr	r3, [pc, #120]	; (800795c <HAL_RCC_OscConfig+0x508>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1d      	ldr	r2, [pc, #116]	; (800795c <HAL_RCC_OscConfig+0x508>)
 80078e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ec:	f7fd fd66 	bl	80053bc <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f4:	f7fd fd62 	bl	80053bc <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e17a      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007906:	4b15      	ldr	r3, [pc, #84]	; (800795c <HAL_RCC_OscConfig+0x508>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0f0      	beq.n	80078f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d108      	bne.n	800792c <HAL_RCC_OscConfig+0x4d8>
 800791a:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800792a:	e029      	b.n	8007980 <HAL_RCC_OscConfig+0x52c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b05      	cmp	r3, #5
 8007932:	d115      	bne.n	8007960 <HAL_RCC_OscConfig+0x50c>
 8007934:	4b08      	ldr	r3, [pc, #32]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	4a07      	ldr	r2, [pc, #28]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800793c:	f043 0304 	orr.w	r3, r3, #4
 8007940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794a:	4a03      	ldr	r2, [pc, #12]	; (8007958 <HAL_RCC_OscConfig+0x504>)
 800794c:	f043 0301 	orr.w	r3, r3, #1
 8007950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007954:	e014      	b.n	8007980 <HAL_RCC_OscConfig+0x52c>
 8007956:	bf00      	nop
 8007958:	40021000 	.word	0x40021000
 800795c:	40007000 	.word	0x40007000
 8007960:	4b9c      	ldr	r3, [pc, #624]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	4a9b      	ldr	r2, [pc, #620]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007970:	4b98      	ldr	r3, [pc, #608]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007976:	4a97      	ldr	r2, [pc, #604]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007978:	f023 0304 	bic.w	r3, r3, #4
 800797c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d016      	beq.n	80079b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007988:	f7fd fd18 	bl	80053bc <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800798e:	e00a      	b.n	80079a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007990:	f7fd fd14 	bl	80053bc <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	f241 3288 	movw	r2, #5000	; 0x1388
 800799e:	4293      	cmp	r3, r2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e12a      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079a6:	4b8b      	ldr	r3, [pc, #556]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 80079a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0ed      	beq.n	8007990 <HAL_RCC_OscConfig+0x53c>
 80079b4:	e015      	b.n	80079e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b6:	f7fd fd01 	bl	80053bc <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079bc:	e00a      	b.n	80079d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079be:	f7fd fcfd 	bl	80053bc <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d901      	bls.n	80079d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e113      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079d4:	4b7f      	ldr	r3, [pc, #508]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1ed      	bne.n	80079be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079e2:	7ffb      	ldrb	r3, [r7, #31]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d105      	bne.n	80079f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e8:	4b7a      	ldr	r3, [pc, #488]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 80079ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ec:	4a79      	ldr	r2, [pc, #484]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 80079ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80fe 	beq.w	8007bfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	f040 80d0 	bne.w	8007ba8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007a08:	4b72      	ldr	r3, [pc, #456]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f003 0203 	and.w	r2, r3, #3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d130      	bne.n	8007a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	3b01      	subs	r3, #1
 8007a28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d127      	bne.n	8007a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d11f      	bne.n	8007a7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a48:	2a07      	cmp	r2, #7
 8007a4a:	bf14      	ite	ne
 8007a4c:	2201      	movne	r2, #1
 8007a4e:	2200      	moveq	r2, #0
 8007a50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d113      	bne.n	8007a7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	3b01      	subs	r3, #1
 8007a64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d109      	bne.n	8007a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	3b01      	subs	r3, #1
 8007a78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d06e      	beq.n	8007b5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b0c      	cmp	r3, #12
 8007a82:	d069      	beq.n	8007b58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a84:	4b53      	ldr	r3, [pc, #332]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007a90:	4b50      	ldr	r3, [pc, #320]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0ad      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007aa0:	4b4c      	ldr	r3, [pc, #304]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a4b      	ldr	r2, [pc, #300]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aaa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007aac:	f7fd fc86 	bl	80053bc <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab4:	f7fd fc82 	bl	80053bc <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e09a      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ac6:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ad2:	4b40      	ldr	r3, [pc, #256]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	4b40      	ldr	r3, [pc, #256]	; (8007bd8 <HAL_RCC_OscConfig+0x784>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ae2:	3a01      	subs	r2, #1
 8007ae4:	0112      	lsls	r2, r2, #4
 8007ae6:	4311      	orrs	r1, r2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007aec:	0212      	lsls	r2, r2, #8
 8007aee:	4311      	orrs	r1, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007af4:	0852      	lsrs	r2, r2, #1
 8007af6:	3a01      	subs	r2, #1
 8007af8:	0552      	lsls	r2, r2, #21
 8007afa:	4311      	orrs	r1, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b00:	0852      	lsrs	r2, r2, #1
 8007b02:	3a01      	subs	r2, #1
 8007b04:	0652      	lsls	r2, r2, #25
 8007b06:	4311      	orrs	r1, r2
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b0c:	0912      	lsrs	r2, r2, #4
 8007b0e:	0452      	lsls	r2, r2, #17
 8007b10:	430a      	orrs	r2, r1
 8007b12:	4930      	ldr	r1, [pc, #192]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b18:	4b2e      	ldr	r3, [pc, #184]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2d      	ldr	r2, [pc, #180]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b30:	f7fd fc44 	bl	80053bc <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b38:	f7fd fc40 	bl	80053bc <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e058      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b4a:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b56:	e050      	b.n	8007bfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e04f      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d148      	bne.n	8007bfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a19      	ldr	r2, [pc, #100]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b80:	f7fd fc1c 	bl	80053bc <HAL_GetTick>
 8007b84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b88:	f7fd fc18 	bl	80053bc <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e030      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0x734>
 8007ba6:	e028      	b.n	8007bfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	d023      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a08      	ldr	r2, [pc, #32]	; (8007bd4 <HAL_RCC_OscConfig+0x780>)
 8007bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bba:	f7fd fbff 	bl	80053bc <HAL_GetTick>
 8007bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bc0:	e00c      	b.n	8007bdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc2:	f7fd fbfb 	bl	80053bc <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d905      	bls.n	8007bdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e013      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_RCC_OscConfig+0x7b0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1ec      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <HAL_RCC_OscConfig+0x7b0>)
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	4905      	ldr	r1, [pc, #20]	; (8007c04 <HAL_RCC_OscConfig+0x7b0>)
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <HAL_RCC_OscConfig+0x7b4>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60cb      	str	r3, [r1, #12]
 8007bf4:	e001      	b.n	8007bfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e000      	b.n	8007bfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40021000 	.word	0x40021000
 8007c08:	feeefffc 	.word	0xfeeefffc

08007c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0e7      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c20:	4b75      	ldr	r3, [pc, #468]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d910      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2e:	4b72      	ldr	r3, [pc, #456]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f023 0207 	bic.w	r2, r3, #7
 8007c36:	4970      	ldr	r1, [pc, #448]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c3e:	4b6e      	ldr	r3, [pc, #440]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d001      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e0cf      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	4b66      	ldr	r3, [pc, #408]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d908      	bls.n	8007c7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c6c:	4b63      	ldr	r3, [pc, #396]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4960      	ldr	r1, [pc, #384]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04c      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d107      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c92:	4b5a      	ldr	r3, [pc, #360]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d121      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e0a6      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d107      	bne.n	8007cba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007caa:	4b54      	ldr	r3, [pc, #336]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d115      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e09a      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007cc2:	4b4e      	ldr	r3, [pc, #312]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e08e      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cd2:	4b4a      	ldr	r3, [pc, #296]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e086      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ce2:	4b46      	ldr	r3, [pc, #280]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 0203 	bic.w	r2, r3, #3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	4943      	ldr	r1, [pc, #268]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf4:	f7fd fb62 	bl	80053bc <HAL_GetTick>
 8007cf8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cfa:	e00a      	b.n	8007d12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cfc:	f7fd fb5e 	bl	80053bc <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e06e      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d12:	4b3a      	ldr	r3, [pc, #232]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 020c 	and.w	r2, r3, #12
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d1eb      	bne.n	8007cfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d010      	beq.n	8007d52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	4b31      	ldr	r3, [pc, #196]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d208      	bcs.n	8007d52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d40:	4b2e      	ldr	r3, [pc, #184]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	492b      	ldr	r1, [pc, #172]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d52:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d210      	bcs.n	8007d82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f023 0207 	bic.w	r2, r3, #7
 8007d68:	4923      	ldr	r1, [pc, #140]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <HAL_RCC_ClockConfig+0x1ec>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d001      	beq.n	8007d82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e036      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d8e:	4b1b      	ldr	r3, [pc, #108]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	4918      	ldr	r1, [pc, #96]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d009      	beq.n	8007dc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dac:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	4910      	ldr	r1, [pc, #64]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dc0:	f000 f824 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <HAL_RCC_ClockConfig+0x1f0>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	091b      	lsrs	r3, r3, #4
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	490b      	ldr	r1, [pc, #44]	; (8007e00 <HAL_RCC_ClockConfig+0x1f4>)
 8007dd2:	5ccb      	ldrb	r3, [r1, r3]
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ddc:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <HAL_RCC_ClockConfig+0x1f8>)
 8007dde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <HAL_RCC_ClockConfig+0x1fc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fd fa99 	bl	800531c <HAL_InitTick>
 8007dea:	4603      	mov	r3, r0
 8007dec:	72fb      	strb	r3, [r7, #11]

  return status;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40022000 	.word	0x40022000
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	08014c8c 	.word	0x08014c8c
 8007e04:	20000000 	.word	0x20000000
 8007e08:	200000ec 	.word	0x200000ec

08007e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b089      	sub	sp, #36	; 0x24
 8007e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 030c 	and.w	r3, r3, #12
 8007e22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e24:	4b3b      	ldr	r3, [pc, #236]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_RCC_GetSysClockFreq+0x34>
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b0c      	cmp	r3, #12
 8007e38:	d121      	bne.n	8007e7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d11e      	bne.n	8007e7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e40:	4b34      	ldr	r3, [pc, #208]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d107      	bne.n	8007e5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e4c:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e52:	0a1b      	lsrs	r3, r3, #8
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	e005      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e5c:	4b2d      	ldr	r3, [pc, #180]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	091b      	lsrs	r3, r3, #4
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e68:	4a2b      	ldr	r2, [pc, #172]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10d      	bne.n	8007e94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e7c:	e00a      	b.n	8007e94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d102      	bne.n	8007e8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e84:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8007e86:	61bb      	str	r3, [r7, #24]
 8007e88:	e004      	b.n	8007e94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e90:	4b23      	ldr	r3, [pc, #140]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b0c      	cmp	r3, #12
 8007e98:	d134      	bne.n	8007f04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e9a:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0xac>
 8007eb0:	e005      	b.n	8007ebe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007eb2:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8007eb4:	617b      	str	r3, [r7, #20]
      break;
 8007eb6:	e005      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007eb8:	4b19      	ldr	r3, [pc, #100]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8007eba:	617b      	str	r3, [r7, #20]
      break;
 8007ebc:	e002      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	617b      	str	r3, [r7, #20]
      break;
 8007ec2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ec4:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	091b      	lsrs	r3, r3, #4
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	3301      	adds	r3, #1
 8007ed0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ed2:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	fb03 f202 	mul.w	r2, r3, r2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007eea:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	0e5b      	lsrs	r3, r3, #25
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007f04:	69bb      	ldr	r3, [r7, #24]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3724      	adds	r7, #36	; 0x24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40021000 	.word	0x40021000
 8007f18:	08014ca4 	.word	0x08014ca4
 8007f1c:	00f42400 	.word	0x00f42400
 8007f20:	007a1200 	.word	0x007a1200

08007f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	20000000 	.word	0x20000000

08007f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f40:	f7ff fff0 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007f44:	4602      	mov	r2, r0
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	4904      	ldr	r1, [pc, #16]	; (8007f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f52:	5ccb      	ldrb	r3, [r1, r3]
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40021000 	.word	0x40021000
 8007f64:	08014c9c 	.word	0x08014c9c

08007f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f6c:	f7ff ffda 	bl	8007f24 <HAL_RCC_GetHCLKFreq>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	0adb      	lsrs	r3, r3, #11
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	4904      	ldr	r1, [pc, #16]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f7e:	5ccb      	ldrb	r3, [r1, r3]
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	08014c9c 	.word	0x08014c9c

08007f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fa0:	4b2a      	ldr	r3, [pc, #168]	; (800804c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fac:	f7ff f9ee 	bl	800738c <HAL_PWREx_GetVoltageRange>
 8007fb0:	6178      	str	r0, [r7, #20]
 8007fb2:	e014      	b.n	8007fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb8:	4a24      	ldr	r2, [pc, #144]	; (800804c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8007fc0:	4b22      	ldr	r3, [pc, #136]	; (800804c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007fcc:	f7ff f9de 	bl	800738c <HAL_PWREx_GetVoltageRange>
 8007fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007fd2:	4b1e      	ldr	r3, [pc, #120]	; (800804c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd6:	4a1d      	ldr	r2, [pc, #116]	; (800804c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe4:	d10b      	bne.n	8007ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d919      	bls.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2ba0      	cmp	r3, #160	; 0xa0
 8007ff0:	d902      	bls.n	8007ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	e013      	b.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	e010      	b.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d902      	bls.n	800800a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008004:	2303      	movs	r3, #3
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	e00a      	b.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b80      	cmp	r3, #128	; 0x80
 800800e:	d102      	bne.n	8008016 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008010:	2302      	movs	r3, #2
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	e004      	b.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b70      	cmp	r3, #112	; 0x70
 800801a:	d101      	bne.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800801c:	2301      	movs	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008020:	4b0b      	ldr	r3, [pc, #44]	; (8008050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f023 0207 	bic.w	r2, r3, #7
 8008028:	4909      	ldr	r1, [pc, #36]	; (8008050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	d001      	beq.n	8008042 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	40021000 	.word	0x40021000
 8008050:	40022000 	.word	0x40022000

08008054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800805c:	2300      	movs	r3, #0
 800805e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008060:	2300      	movs	r3, #0
 8008062:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800806c:	2b00      	cmp	r3, #0
 800806e:	d041      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008074:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008078:	d02a      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800807a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800807e:	d824      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008084:	d008      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800808a:	d81e      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008094:	d010      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008096:	e018      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008098:	4b86      	ldr	r3, [pc, #536]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	4a85      	ldr	r2, [pc, #532]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800809e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080a4:	e015      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3304      	adds	r3, #4
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fabb 	bl	8008628 <RCCEx_PLLSAI1_Config>
 80080b2:	4603      	mov	r3, r0
 80080b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080b6:	e00c      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3320      	adds	r3, #32
 80080bc:	2100      	movs	r1, #0
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fba6 	bl	8008810 <RCCEx_PLLSAI2_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080c8:	e003      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	74fb      	strb	r3, [r7, #19]
      break;
 80080ce:	e000      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80080d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d2:	7cfb      	ldrb	r3, [r7, #19]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080d8:	4b76      	ldr	r3, [pc, #472]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e6:	4973      	ldr	r1, [pc, #460]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80080ee:	e001      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	7cfb      	ldrb	r3, [r7, #19]
 80080f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d041      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008108:	d02a      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800810a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800810e:	d824      	bhi.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008114:	d008      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800811a:	d81e      	bhi.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008124:	d010      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008126:	e018      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008128:	4b62      	ldr	r3, [pc, #392]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	4a61      	ldr	r2, [pc, #388]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800812e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008132:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008134:	e015      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3304      	adds	r3, #4
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fa73 	bl	8008628 <RCCEx_PLLSAI1_Config>
 8008142:	4603      	mov	r3, r0
 8008144:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008146:	e00c      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3320      	adds	r3, #32
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fb5e 	bl	8008810 <RCCEx_PLLSAI2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008158:	e003      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	74fb      	strb	r3, [r7, #19]
      break;
 800815e:	e000      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008162:	7cfb      	ldrb	r3, [r7, #19]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10b      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008168:	4b52      	ldr	r3, [pc, #328]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008176:	494f      	ldr	r1, [pc, #316]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008178:	4313      	orrs	r3, r2
 800817a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800817e:	e001      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008180:	7cfb      	ldrb	r3, [r7, #19]
 8008182:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80a0 	beq.w	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008192:	2300      	movs	r3, #0
 8008194:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008196:	4b47      	ldr	r3, [pc, #284]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80081a6:	2300      	movs	r3, #0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ac:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b0:	4a40      	ldr	r2, [pc, #256]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b6:	6593      	str	r3, [r2, #88]	; 0x58
 80081b8:	4b3e      	ldr	r3, [pc, #248]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c0:	60bb      	str	r3, [r7, #8]
 80081c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c4:	2301      	movs	r3, #1
 80081c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081c8:	4b3b      	ldr	r3, [pc, #236]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3a      	ldr	r2, [pc, #232]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d4:	f7fd f8f2 	bl	80053bc <HAL_GetTick>
 80081d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081da:	e009      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081dc:	f7fd f8ee 	bl	80053bc <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d902      	bls.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	74fb      	strb	r3, [r7, #19]
        break;
 80081ee:	e005      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081f0:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0ef      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80081fc:	7cfb      	ldrb	r3, [r7, #19]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d15c      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008202:	4b2c      	ldr	r3, [pc, #176]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01f      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	429a      	cmp	r2, r3
 800821e:	d019      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008220:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800822c:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008232:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800823c:	4b1d      	ldr	r3, [pc, #116]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800824c:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d016      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825e:	f7fd f8ad 	bl	80053bc <HAL_GetTick>
 8008262:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008264:	e00b      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008266:	f7fd f8a9 	bl	80053bc <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 3288 	movw	r2, #5000	; 0x1388
 8008274:	4293      	cmp	r3, r2
 8008276:	d902      	bls.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	74fb      	strb	r3, [r7, #19]
            break;
 800827c:	e006      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800827e:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0ec      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800828c:	7cfb      	ldrb	r3, [r7, #19]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10c      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a2:	4904      	ldr	r1, [pc, #16]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082aa:	e009      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082ac:	7cfb      	ldrb	r3, [r7, #19]
 80082ae:	74bb      	strb	r3, [r7, #18]
 80082b0:	e006      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80082b2:	bf00      	nop
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082c0:	7c7b      	ldrb	r3, [r7, #17]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d105      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c6:	4b9e      	ldr	r3, [pc, #632]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	4a9d      	ldr	r2, [pc, #628]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082de:	4b98      	ldr	r3, [pc, #608]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e4:	f023 0203 	bic.w	r2, r3, #3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	4994      	ldr	r1, [pc, #592]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008300:	4b8f      	ldr	r3, [pc, #572]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	f023 020c 	bic.w	r2, r3, #12
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	498c      	ldr	r1, [pc, #560]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008322:	4b87      	ldr	r3, [pc, #540]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	4983      	ldr	r1, [pc, #524]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008344:	4b7e      	ldr	r3, [pc, #504]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008352:	497b      	ldr	r1, [pc, #492]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008366:	4b76      	ldr	r3, [pc, #472]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008374:	4972      	ldr	r1, [pc, #456]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008388:	4b6d      	ldr	r3, [pc, #436]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008396:	496a      	ldr	r1, [pc, #424]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008398:	4313      	orrs	r3, r2
 800839a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083aa:	4b65      	ldr	r3, [pc, #404]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b8:	4961      	ldr	r1, [pc, #388]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083cc:	4b5c      	ldr	r3, [pc, #368]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083da:	4959      	ldr	r1, [pc, #356]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083ee:	4b54      	ldr	r3, [pc, #336]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	4950      	ldr	r1, [pc, #320]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008410:	4b4b      	ldr	r3, [pc, #300]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	4948      	ldr	r1, [pc, #288]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008420:	4313      	orrs	r3, r2
 8008422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008432:	4b43      	ldr	r3, [pc, #268]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	493f      	ldr	r1, [pc, #252]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d028      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008454:	4b3a      	ldr	r3, [pc, #232]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008462:	4937      	ldr	r1, [pc, #220]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008464:	4313      	orrs	r3, r2
 8008466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008472:	d106      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008474:	4b32      	ldr	r3, [pc, #200]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4a31      	ldr	r2, [pc, #196]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800847a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800847e:	60d3      	str	r3, [r2, #12]
 8008480:	e011      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800848a:	d10c      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3304      	adds	r3, #4
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f8c8 	bl	8008628 <RCCEx_PLLSAI1_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800849c:	7cfb      	ldrb	r3, [r7, #19]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80084a2:	7cfb      	ldrb	r3, [r7, #19]
 80084a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d028      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084b2:	4b23      	ldr	r3, [pc, #140]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c0:	491f      	ldr	r1, [pc, #124]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084d0:	d106      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084d2:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4a1a      	ldr	r2, [pc, #104]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084dc:	60d3      	str	r3, [r2, #12]
 80084de:	e011      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084e8:	d10c      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2101      	movs	r1, #1
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f899 	bl	8008628 <RCCEx_PLLSAI1_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084fa:	7cfb      	ldrb	r3, [r7, #19]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008500:	7cfb      	ldrb	r3, [r7, #19]
 8008502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02b      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851e:	4908      	ldr	r1, [pc, #32]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008520:	4313      	orrs	r3, r2
 8008522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800852e:	d109      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008530:	4b03      	ldr	r3, [pc, #12]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	4a02      	ldr	r2, [pc, #8]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800853a:	60d3      	str	r3, [r2, #12]
 800853c:	e014      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800853e:	bf00      	nop
 8008540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800854c:	d10c      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3304      	adds	r3, #4
 8008552:	2101      	movs	r1, #1
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f867 	bl	8008628 <RCCEx_PLLSAI1_Config>
 800855a:	4603      	mov	r3, r0
 800855c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800855e:	7cfb      	ldrb	r3, [r7, #19]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008564:	7cfb      	ldrb	r3, [r7, #19]
 8008566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02f      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008574:	4b2b      	ldr	r3, [pc, #172]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008582:	4928      	ldr	r1, [pc, #160]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008592:	d10d      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	2102      	movs	r1, #2
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f844 	bl	8008628 <RCCEx_PLLSAI1_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085a4:	7cfb      	ldrb	r3, [r7, #19]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d014      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80085aa:	7cfb      	ldrb	r3, [r7, #19]
 80085ac:	74bb      	strb	r3, [r7, #18]
 80085ae:	e011      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b8:	d10c      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3320      	adds	r3, #32
 80085be:	2102      	movs	r1, #2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f925 	bl	8008810 <RCCEx_PLLSAI2_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085ca:	7cfb      	ldrb	r3, [r7, #19]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80085d0:	7cfb      	ldrb	r3, [r7, #19]
 80085d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085e0:	4b10      	ldr	r3, [pc, #64]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ee:	490d      	ldr	r1, [pc, #52]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008602:	4b08      	ldr	r3, [pc, #32]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008612:	4904      	ldr	r1, [pc, #16]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008614:	4313      	orrs	r3, r2
 8008616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800861a:	7cbb      	ldrb	r3, [r7, #18]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40021000 	.word	0x40021000

08008628 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008636:	4b75      	ldr	r3, [pc, #468]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d018      	beq.n	8008674 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008642:	4b72      	ldr	r3, [pc, #456]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f003 0203 	and.w	r2, r3, #3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d10d      	bne.n	800866e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
       ||
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800865a:	4b6c      	ldr	r3, [pc, #432]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	091b      	lsrs	r3, r3, #4
 8008660:	f003 0307 	and.w	r3, r3, #7
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
       ||
 800866a:	429a      	cmp	r2, r3
 800866c:	d047      	beq.n	80086fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	e044      	b.n	80086fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b03      	cmp	r3, #3
 800867a:	d018      	beq.n	80086ae <RCCEx_PLLSAI1_Config+0x86>
 800867c:	2b03      	cmp	r3, #3
 800867e:	d825      	bhi.n	80086cc <RCCEx_PLLSAI1_Config+0xa4>
 8008680:	2b01      	cmp	r3, #1
 8008682:	d002      	beq.n	800868a <RCCEx_PLLSAI1_Config+0x62>
 8008684:	2b02      	cmp	r3, #2
 8008686:	d009      	beq.n	800869c <RCCEx_PLLSAI1_Config+0x74>
 8008688:	e020      	b.n	80086cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800868a:	4b60      	ldr	r3, [pc, #384]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d11d      	bne.n	80086d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800869a:	e01a      	b.n	80086d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800869c:	4b5b      	ldr	r3, [pc, #364]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d116      	bne.n	80086d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086ac:	e013      	b.n	80086d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80086ae:	4b57      	ldr	r3, [pc, #348]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10f      	bne.n	80086da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086ba:	4b54      	ldr	r3, [pc, #336]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086ca:	e006      	b.n	80086da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	73fb      	strb	r3, [r7, #15]
      break;
 80086d0:	e004      	b.n	80086dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086d2:	bf00      	nop
 80086d4:	e002      	b.n	80086dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086da:	bf00      	nop
    }

    if(status == HAL_OK)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80086e2:	4b4a      	ldr	r3, [pc, #296]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6819      	ldr	r1, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	430b      	orrs	r3, r1
 80086f8:	4944      	ldr	r1, [pc, #272]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d17d      	bne.n	8008800 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008704:	4b41      	ldr	r3, [pc, #260]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a40      	ldr	r2, [pc, #256]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 800870a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800870e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008710:	f7fc fe54 	bl	80053bc <HAL_GetTick>
 8008714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008716:	e009      	b.n	800872c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008718:	f7fc fe50 	bl	80053bc <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d902      	bls.n	800872c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	73fb      	strb	r3, [r7, #15]
        break;
 800872a:	e005      	b.n	8008738 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800872c:	4b37      	ldr	r3, [pc, #220]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1ef      	bne.n	8008718 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d160      	bne.n	8008800 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d111      	bne.n	8008768 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008744:	4b31      	ldr	r3, [pc, #196]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800874c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6892      	ldr	r2, [r2, #8]
 8008754:	0211      	lsls	r1, r2, #8
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68d2      	ldr	r2, [r2, #12]
 800875a:	0912      	lsrs	r2, r2, #4
 800875c:	0452      	lsls	r2, r2, #17
 800875e:	430a      	orrs	r2, r1
 8008760:	492a      	ldr	r1, [pc, #168]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008762:	4313      	orrs	r3, r2
 8008764:	610b      	str	r3, [r1, #16]
 8008766:	e027      	b.n	80087b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d112      	bne.n	8008794 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800876e:	4b27      	ldr	r3, [pc, #156]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008776:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6892      	ldr	r2, [r2, #8]
 800877e:	0211      	lsls	r1, r2, #8
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6912      	ldr	r2, [r2, #16]
 8008784:	0852      	lsrs	r2, r2, #1
 8008786:	3a01      	subs	r2, #1
 8008788:	0552      	lsls	r2, r2, #21
 800878a:	430a      	orrs	r2, r1
 800878c:	491f      	ldr	r1, [pc, #124]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 800878e:	4313      	orrs	r3, r2
 8008790:	610b      	str	r3, [r1, #16]
 8008792:	e011      	b.n	80087b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008794:	4b1d      	ldr	r3, [pc, #116]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800879c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6892      	ldr	r2, [r2, #8]
 80087a4:	0211      	lsls	r1, r2, #8
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6952      	ldr	r2, [r2, #20]
 80087aa:	0852      	lsrs	r2, r2, #1
 80087ac:	3a01      	subs	r2, #1
 80087ae:	0652      	lsls	r2, r2, #25
 80087b0:	430a      	orrs	r2, r1
 80087b2:	4916      	ldr	r1, [pc, #88]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80087b8:	4b14      	ldr	r3, [pc, #80]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a13      	ldr	r2, [pc, #76]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c4:	f7fc fdfa 	bl	80053bc <HAL_GetTick>
 80087c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087ca:	e009      	b.n	80087e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087cc:	f7fc fdf6 	bl	80053bc <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d902      	bls.n	80087e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	73fb      	strb	r3, [r7, #15]
          break;
 80087de:	e005      	b.n	80087ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0ef      	beq.n	80087cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f4:	691a      	ldr	r2, [r3, #16]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	4904      	ldr	r1, [pc, #16]	; (800880c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	40021000 	.word	0x40021000

08008810 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800881e:	4b6a      	ldr	r3, [pc, #424]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d018      	beq.n	800885c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800882a:	4b67      	ldr	r3, [pc, #412]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0203 	and.w	r2, r3, #3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d10d      	bne.n	8008856 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
       ||
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008842:	4b61      	ldr	r3, [pc, #388]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	091b      	lsrs	r3, r3, #4
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
       ||
 8008852:	429a      	cmp	r2, r3
 8008854:	d047      	beq.n	80088e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	73fb      	strb	r3, [r7, #15]
 800885a:	e044      	b.n	80088e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b03      	cmp	r3, #3
 8008862:	d018      	beq.n	8008896 <RCCEx_PLLSAI2_Config+0x86>
 8008864:	2b03      	cmp	r3, #3
 8008866:	d825      	bhi.n	80088b4 <RCCEx_PLLSAI2_Config+0xa4>
 8008868:	2b01      	cmp	r3, #1
 800886a:	d002      	beq.n	8008872 <RCCEx_PLLSAI2_Config+0x62>
 800886c:	2b02      	cmp	r3, #2
 800886e:	d009      	beq.n	8008884 <RCCEx_PLLSAI2_Config+0x74>
 8008870:	e020      	b.n	80088b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008872:	4b55      	ldr	r3, [pc, #340]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d11d      	bne.n	80088ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008882:	e01a      	b.n	80088ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008884:	4b50      	ldr	r3, [pc, #320]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800888c:	2b00      	cmp	r3, #0
 800888e:	d116      	bne.n	80088be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008894:	e013      	b.n	80088be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008896:	4b4c      	ldr	r3, [pc, #304]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10f      	bne.n	80088c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80088a2:	4b49      	ldr	r3, [pc, #292]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80088b2:	e006      	b.n	80088c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
      break;
 80088b8:	e004      	b.n	80088c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088ba:	bf00      	nop
 80088bc:	e002      	b.n	80088c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088be:	bf00      	nop
 80088c0:	e000      	b.n	80088c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10d      	bne.n	80088e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80088ca:	4b3f      	ldr	r3, [pc, #252]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6819      	ldr	r1, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	3b01      	subs	r3, #1
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	430b      	orrs	r3, r1
 80088e0:	4939      	ldr	r1, [pc, #228]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d167      	bne.n	80089bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80088ec:	4b36      	ldr	r3, [pc, #216]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a35      	ldr	r2, [pc, #212]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f8:	f7fc fd60 	bl	80053bc <HAL_GetTick>
 80088fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088fe:	e009      	b.n	8008914 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008900:	f7fc fd5c 	bl	80053bc <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d902      	bls.n	8008914 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	73fb      	strb	r3, [r7, #15]
        break;
 8008912:	e005      	b.n	8008920 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008914:	4b2c      	ldr	r3, [pc, #176]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1ef      	bne.n	8008900 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d14a      	bne.n	80089bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d111      	bne.n	8008950 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800892c:	4b26      	ldr	r3, [pc, #152]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	6892      	ldr	r2, [r2, #8]
 800893c:	0211      	lsls	r1, r2, #8
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	68d2      	ldr	r2, [r2, #12]
 8008942:	0912      	lsrs	r2, r2, #4
 8008944:	0452      	lsls	r2, r2, #17
 8008946:	430a      	orrs	r2, r1
 8008948:	491f      	ldr	r1, [pc, #124]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800894a:	4313      	orrs	r3, r2
 800894c:	614b      	str	r3, [r1, #20]
 800894e:	e011      	b.n	8008974 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008950:	4b1d      	ldr	r3, [pc, #116]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6892      	ldr	r2, [r2, #8]
 8008960:	0211      	lsls	r1, r2, #8
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6912      	ldr	r2, [r2, #16]
 8008966:	0852      	lsrs	r2, r2, #1
 8008968:	3a01      	subs	r2, #1
 800896a:	0652      	lsls	r2, r2, #25
 800896c:	430a      	orrs	r2, r1
 800896e:	4916      	ldr	r1, [pc, #88]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008970:	4313      	orrs	r3, r2
 8008972:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008974:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800897a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800897e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008980:	f7fc fd1c 	bl	80053bc <HAL_GetTick>
 8008984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008986:	e009      	b.n	800899c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008988:	f7fc fd18 	bl	80053bc <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d902      	bls.n	800899c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	73fb      	strb	r3, [r7, #15]
          break;
 800899a:	e005      	b.n	80089a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d0ef      	beq.n	8008988 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80089ae:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b0:	695a      	ldr	r2, [r3, #20]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	4904      	ldr	r1, [pc, #16]	; (80089c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	40021000 	.word	0x40021000

080089cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d079      	beq.n	8008ad2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7f8 fea0 	bl	8001738 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0310 	and.w	r3, r3, #16
 8008a0a:	2b10      	cmp	r3, #16
 8008a0c:	d058      	beq.n	8008ac0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	22ca      	movs	r2, #202	; 0xca
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2253      	movs	r2, #83	; 0x53
 8008a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f880 	bl	8008b24 <RTC_EnterInitMode>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d127      	bne.n	8008a7e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6812      	ldr	r2, [r2, #0]
 8008a38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a40:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6899      	ldr	r1, [r3, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68d2      	ldr	r2, [r2, #12]
 8008a68:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6919      	ldr	r1, [r3, #16]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	041a      	lsls	r2, r3, #16
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f884 	bl	8008b8c <RTC_ExitInitMode>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d113      	bne.n	8008ab6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0203 	bic.w	r2, r2, #3
 8008a9c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	431a      	orrs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	22ff      	movs	r2, #255	; 0xff
 8008abc:	625a      	str	r2, [r3, #36]	; 0x24
 8008abe:	e001      	b.n	8008ac4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d103      	bne.n	8008ad2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <HAL_RTC_WaitForSynchro+0x44>)
 8008aea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008aec:	f7fc fc66 	bl	80053bc <HAL_GetTick>
 8008af0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008af2:	e009      	b.n	8008b08 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008af4:	f7fc fc62 	bl	80053bc <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b02:	d901      	bls.n	8008b08 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e007      	b.n	8008b18 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0ee      	beq.n	8008af4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	0003ff5f 	.word	0x0003ff5f

08008b24 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d120      	bne.n	8008b80 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f04f 32ff 	mov.w	r2, #4294967295
 8008b46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008b48:	f7fc fc38 	bl	80053bc <HAL_GetTick>
 8008b4c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008b4e:	e00d      	b.n	8008b6c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008b50:	f7fc fc34 	bl	80053bc <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b5e:	d905      	bls.n	8008b6c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2203      	movs	r2, #3
 8008b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <RTC_EnterInitMode+0x5c>
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d1e7      	bne.n	8008b50 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008b98:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	4a19      	ldr	r2, [pc, #100]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008ba4:	4b17      	ldr	r3, [pc, #92]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10c      	bne.n	8008bca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff ff93 	bl	8008adc <HAL_RTC_WaitForSynchro>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01e      	beq.n	8008bfa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	73fb      	strb	r3, [r7, #15]
 8008bc8:	e017      	b.n	8008bfa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008bca:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	4a0d      	ldr	r2, [pc, #52]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008bd0:	f023 0320 	bic.w	r3, r3, #32
 8008bd4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff ff80 	bl	8008adc <HAL_RTC_WaitForSynchro>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2203      	movs	r2, #3
 8008be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008bee:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <RTC_ExitInitMode+0x78>)
 8008bf4:	f043 0320 	orr.w	r3, r3, #32
 8008bf8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	40002800 	.word	0x40002800

08008c08 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e07f      	b.n	8008d22 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	22ca      	movs	r2, #202	; 0xca
 8008c38:	625a      	str	r2, [r3, #36]	; 0x24
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2253      	movs	r2, #83	; 0x53
 8008c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c50:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008c62:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d120      	bne.n	8008cb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8008c72:	f7fc fba3 	bl	80053bc <HAL_GetTick>
 8008c76:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008c78:	e015      	b.n	8008ca6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c7a:	f7fc fb9f 	bl	80053bc <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c88:	d90d      	bls.n	8008ca6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	22ff      	movs	r2, #255	; 0xff
 8008c90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2203      	movs	r2, #3
 8008c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e03d      	b.n	8008d22 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0e2      	beq.n	8008c7a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f023 0107 	bic.w	r1, r3, #7
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008cd0:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cda:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008cdc:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	4a12      	ldr	r2, [pc, #72]	; (8008d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ce6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cf6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40010400 	.word	0x40010400

08008d30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008d3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d3e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008d5e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7f8 fbca 	bl	80014fa <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40010400 	.word	0x40010400

08008d7c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3350      	adds	r3, #80	; 0x50
 8008d8e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	009a      	lsls	r2, r3, #2
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	4413      	add	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6013      	str	r3, [r2, #0]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3350      	adds	r3, #80	; 0x50
 8008dbe:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e095      	b.n	8008f18 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d108      	bne.n	8008e06 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dfc:	d009      	beq.n	8008e12 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	61da      	str	r2, [r3, #28]
 8008e04:	e005      	b.n	8008e12 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7f8 fcbd 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e52:	d902      	bls.n	8008e5a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e002      	b.n	8008e60 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e68:	d007      	beq.n	8008e7a <HAL_SPI_Init+0xa0>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e72:	d002      	beq.n	8008e7a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	ea42 0103 	orr.w	r1, r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	f003 0204 	and.w	r2, r3, #4
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	f003 0310 	and.w	r3, r3, #16
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ef6:	ea42 0103 	orr.w	r1, r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f30:	f7fc fa44 	bl	80053bc <HAL_GetTick>
 8008f34:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d001      	beq.n	8008f4a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008f46:	2302      	movs	r3, #2
 8008f48:	e15c      	b.n	8009204 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_SPI_Transmit+0x36>
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e154      	b.n	8009204 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_SPI_Transmit+0x48>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e14d      	b.n	8009204 <HAL_SPI_Transmit+0x2e4>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2203      	movs	r2, #3
 8008f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	88fa      	ldrh	r2, [r7, #6]
 8008f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fba:	d10f      	bne.n	8008fdc <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe6:	2b40      	cmp	r3, #64	; 0x40
 8008fe8:	d007      	beq.n	8008ffa <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009002:	d952      	bls.n	80090aa <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <HAL_SPI_Transmit+0xf2>
 800900c:	8b7b      	ldrh	r3, [r7, #26]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d145      	bne.n	800909e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	881a      	ldrh	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	1c9a      	adds	r2, r3, #2
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800902c:	b29b      	uxth	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009036:	e032      	b.n	800909e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b02      	cmp	r3, #2
 8009044:	d112      	bne.n	800906c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	881a      	ldrh	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	1c9a      	adds	r2, r3, #2
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	87da      	strh	r2, [r3, #62]	; 0x3e
 800906a:	e018      	b.n	800909e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800906c:	f7fc f9a6 	bl	80053bc <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d803      	bhi.n	8009084 <HAL_SPI_Transmit+0x164>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009082:	d102      	bne.n	800908a <HAL_SPI_Transmit+0x16a>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d109      	bne.n	800909e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e0b2      	b.n	8009204 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1c7      	bne.n	8009038 <HAL_SPI_Transmit+0x118>
 80090a8:	e083      	b.n	80091b2 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <HAL_SPI_Transmit+0x198>
 80090b2:	8b7b      	ldrh	r3, [r7, #26]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d177      	bne.n	80091a8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d912      	bls.n	80090e8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	881a      	ldrh	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	1c9a      	adds	r2, r3, #2
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	3b02      	subs	r3, #2
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090e6:	e05f      	b.n	80091a8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	7812      	ldrb	r2, [r2, #0]
 80090f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800910e:	e04b      	b.n	80091a8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b02      	cmp	r3, #2
 800911c:	d12b      	bne.n	8009176 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009122:	b29b      	uxth	r3, r3
 8009124:	2b01      	cmp	r3, #1
 8009126:	d912      	bls.n	800914e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	881a      	ldrh	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	1c9a      	adds	r2, r3, #2
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009142:	b29b      	uxth	r3, r3
 8009144:	3b02      	subs	r3, #2
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800914c:	e02c      	b.n	80091a8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	7812      	ldrb	r2, [r2, #0]
 800915a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009174:	e018      	b.n	80091a8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009176:	f7fc f921 	bl	80053bc <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d803      	bhi.n	800918e <HAL_SPI_Transmit+0x26e>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d102      	bne.n	8009194 <HAL_SPI_Transmit+0x274>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e02d      	b.n	8009204 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1ae      	bne.n	8009110 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f946 	bl	8009448 <SPI_EndRxTxTransaction>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2220      	movs	r2, #32
 80091c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009202:	2300      	movs	r3, #0
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3720      	adds	r7, #32
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	4613      	mov	r3, r2
 800921a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800921c:	f7fc f8ce 	bl	80053bc <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	4413      	add	r3, r2
 800922a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800922c:	f7fc f8c6 	bl	80053bc <HAL_GetTick>
 8009230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009232:	4b39      	ldr	r3, [pc, #228]	; (8009318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	015b      	lsls	r3, r3, #5
 8009238:	0d1b      	lsrs	r3, r3, #20
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009242:	e054      	b.n	80092ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d050      	beq.n	80092ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800924c:	f7fc f8b6 	bl	80053bc <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	429a      	cmp	r2, r3
 800925a:	d902      	bls.n	8009262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d13d      	bne.n	80092de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800927a:	d111      	bne.n	80092a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009284:	d004      	beq.n	8009290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800928e:	d107      	bne.n	80092a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800929e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a8:	d10f      	bne.n	80092ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e017      	b.n	800930e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4013      	ands	r3, r2
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	429a      	cmp	r2, r3
 800930a:	d19b      	bne.n	8009244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3720      	adds	r7, #32
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000000 	.word	0x20000000

0800931c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	; 0x28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800932e:	f7fc f845 	bl	80053bc <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	4413      	add	r3, r2
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800933e:	f7fc f83d 	bl	80053bc <HAL_GetTick>
 8009342:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	330c      	adds	r3, #12
 800934a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800934c:	4b3d      	ldr	r3, [pc, #244]	; (8009444 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	00da      	lsls	r2, r3, #3
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	0d1b      	lsrs	r3, r3, #20
 800935c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935e:	fb02 f303 	mul.w	r3, r2, r3
 8009362:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009364:	e060      	b.n	8009428 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800936c:	d107      	bne.n	800937e <SPI_WaitFifoStateUntilTimeout+0x62>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800937c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d050      	beq.n	8009428 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009386:	f7fc f819 	bl	80053bc <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009392:	429a      	cmp	r2, r3
 8009394:	d902      	bls.n	800939c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	2b00      	cmp	r3, #0
 800939a:	d13d      	bne.n	8009418 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093b4:	d111      	bne.n	80093da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093be:	d004      	beq.n	80093ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093c8:	d107      	bne.n	80093da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093e2:	d10f      	bne.n	8009404 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009402:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e010      	b.n	800943a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	3b01      	subs	r3, #1
 8009426:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	4013      	ands	r3, r2
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d196      	bne.n	8009366 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3728      	adds	r7, #40	; 0x28
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000000 	.word	0x20000000

08009448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af02      	add	r7, sp, #8
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff ff5b 	bl	800931c <SPI_WaitFifoStateUntilTimeout>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e027      	b.n	80094cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2200      	movs	r2, #0
 8009484:	2180      	movs	r1, #128	; 0x80
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff fec0 	bl	800920c <SPI_WaitFlagStateUntilTimeout>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009496:	f043 0220 	orr.w	r2, r3, #32
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e014      	b.n	80094cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7ff ff34 	bl	800931c <SPI_WaitFifoStateUntilTimeout>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094be:	f043 0220 	orr.w	r2, r3, #32
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e000      	b.n	80094cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e049      	b.n	800957a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7f8 f9b8 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f000 fe4e 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b01      	cmp	r3, #1
 8009596:	d001      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e04f      	b.n	800963c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0201 	orr.w	r2, r2, #1
 80095b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a23      	ldr	r2, [pc, #140]	; (8009648 <HAL_TIM_Base_Start_IT+0xc4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d01d      	beq.n	80095fa <HAL_TIM_Base_Start_IT+0x76>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c6:	d018      	beq.n	80095fa <HAL_TIM_Base_Start_IT+0x76>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1f      	ldr	r2, [pc, #124]	; (800964c <HAL_TIM_Base_Start_IT+0xc8>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d013      	beq.n	80095fa <HAL_TIM_Base_Start_IT+0x76>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a1e      	ldr	r2, [pc, #120]	; (8009650 <HAL_TIM_Base_Start_IT+0xcc>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00e      	beq.n	80095fa <HAL_TIM_Base_Start_IT+0x76>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1c      	ldr	r2, [pc, #112]	; (8009654 <HAL_TIM_Base_Start_IT+0xd0>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d009      	beq.n	80095fa <HAL_TIM_Base_Start_IT+0x76>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1b      	ldr	r2, [pc, #108]	; (8009658 <HAL_TIM_Base_Start_IT+0xd4>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d004      	beq.n	80095fa <HAL_TIM_Base_Start_IT+0x76>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a19      	ldr	r2, [pc, #100]	; (800965c <HAL_TIM_Base_Start_IT+0xd8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d115      	bne.n	8009626 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <HAL_TIM_Base_Start_IT+0xdc>)
 8009602:	4013      	ands	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b06      	cmp	r3, #6
 800960a:	d015      	beq.n	8009638 <HAL_TIM_Base_Start_IT+0xb4>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009612:	d011      	beq.n	8009638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009624:	e008      	b.n	8009638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0201 	orr.w	r2, r2, #1
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	e000      	b.n	800963a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	40012c00 	.word	0x40012c00
 800964c:	40000400 	.word	0x40000400
 8009650:	40000800 	.word	0x40000800
 8009654:	40000c00 	.word	0x40000c00
 8009658:	40013400 	.word	0x40013400
 800965c:	40014000 	.word	0x40014000
 8009660:	00010007 	.word	0x00010007

08009664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e049      	b.n	800970a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d106      	bne.n	8009690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7f8 f914 	bl	80018b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2202      	movs	r2, #2
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	4610      	mov	r0, r2
 80096a4:	f000 fd86 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <HAL_TIM_PWM_Start_IT+0x28>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b01      	cmp	r3, #1
 8009732:	bf14      	ite	ne
 8009734:	2301      	movne	r3, #1
 8009736:	2300      	moveq	r3, #0
 8009738:	b2db      	uxtb	r3, r3
 800973a:	e03c      	b.n	80097b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b04      	cmp	r3, #4
 8009740:	d109      	bne.n	8009756 <HAL_TIM_PWM_Start_IT+0x42>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b01      	cmp	r3, #1
 800974c:	bf14      	ite	ne
 800974e:	2301      	movne	r3, #1
 8009750:	2300      	moveq	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	e02f      	b.n	80097b6 <HAL_TIM_PWM_Start_IT+0xa2>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b08      	cmp	r3, #8
 800975a:	d109      	bne.n	8009770 <HAL_TIM_PWM_Start_IT+0x5c>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b01      	cmp	r3, #1
 8009766:	bf14      	ite	ne
 8009768:	2301      	movne	r3, #1
 800976a:	2300      	moveq	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	e022      	b.n	80097b6 <HAL_TIM_PWM_Start_IT+0xa2>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b0c      	cmp	r3, #12
 8009774:	d109      	bne.n	800978a <HAL_TIM_PWM_Start_IT+0x76>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b01      	cmp	r3, #1
 8009780:	bf14      	ite	ne
 8009782:	2301      	movne	r3, #1
 8009784:	2300      	moveq	r3, #0
 8009786:	b2db      	uxtb	r3, r3
 8009788:	e015      	b.n	80097b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b10      	cmp	r3, #16
 800978e:	d109      	bne.n	80097a4 <HAL_TIM_PWM_Start_IT+0x90>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b01      	cmp	r3, #1
 800979a:	bf14      	ite	ne
 800979c:	2301      	movne	r3, #1
 800979e:	2300      	moveq	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	e008      	b.n	80097b6 <HAL_TIM_PWM_Start_IT+0xa2>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2300      	moveq	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0e7      	b.n	800998e <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_PWM_Start_IT+0xba>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097cc:	e023      	b.n	8009816 <HAL_TIM_PWM_Start_IT+0x102>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d104      	bne.n	80097de <HAL_TIM_PWM_Start_IT+0xca>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097dc:	e01b      	b.n	8009816 <HAL_TIM_PWM_Start_IT+0x102>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d104      	bne.n	80097ee <HAL_TIM_PWM_Start_IT+0xda>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ec:	e013      	b.n	8009816 <HAL_TIM_PWM_Start_IT+0x102>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b0c      	cmp	r3, #12
 80097f2:	d104      	bne.n	80097fe <HAL_TIM_PWM_Start_IT+0xea>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097fc:	e00b      	b.n	8009816 <HAL_TIM_PWM_Start_IT+0x102>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b10      	cmp	r3, #16
 8009802:	d104      	bne.n	800980e <HAL_TIM_PWM_Start_IT+0xfa>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800980c:	e003      	b.n	8009816 <HAL_TIM_PWM_Start_IT+0x102>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b0c      	cmp	r3, #12
 800981a:	d841      	bhi.n	80098a0 <HAL_TIM_PWM_Start_IT+0x18c>
 800981c:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <HAL_TIM_PWM_Start_IT+0x110>)
 800981e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009822:	bf00      	nop
 8009824:	08009859 	.word	0x08009859
 8009828:	080098a1 	.word	0x080098a1
 800982c:	080098a1 	.word	0x080098a1
 8009830:	080098a1 	.word	0x080098a1
 8009834:	0800986b 	.word	0x0800986b
 8009838:	080098a1 	.word	0x080098a1
 800983c:	080098a1 	.word	0x080098a1
 8009840:	080098a1 	.word	0x080098a1
 8009844:	0800987d 	.word	0x0800987d
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098a1 	.word	0x080098a1
 8009850:	080098a1 	.word	0x080098a1
 8009854:	0800988f 	.word	0x0800988f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0202 	orr.w	r2, r2, #2
 8009866:	60da      	str	r2, [r3, #12]
      break;
 8009868:	e01d      	b.n	80098a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f042 0204 	orr.w	r2, r2, #4
 8009878:	60da      	str	r2, [r3, #12]
      break;
 800987a:	e014      	b.n	80098a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0208 	orr.w	r2, r2, #8
 800988a:	60da      	str	r2, [r3, #12]
      break;
 800988c:	e00b      	b.n	80098a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f042 0210 	orr.w	r2, r2, #16
 800989c:	60da      	str	r2, [r3, #12]
      break;
 800989e:	e002      	b.n	80098a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	73fb      	strb	r3, [r7, #15]
      break;
 80098a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d16f      	bne.n	800998c <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2201      	movs	r2, #1
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 f893 	bl	800a9e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a36      	ldr	r2, [pc, #216]	; (8009998 <HAL_TIM_PWM_Start_IT+0x284>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d013      	beq.n	80098ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a34      	ldr	r2, [pc, #208]	; (800999c <HAL_TIM_PWM_Start_IT+0x288>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00e      	beq.n	80098ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a33      	ldr	r2, [pc, #204]	; (80099a0 <HAL_TIM_PWM_Start_IT+0x28c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d009      	beq.n	80098ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a31      	ldr	r2, [pc, #196]	; (80099a4 <HAL_TIM_PWM_Start_IT+0x290>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d004      	beq.n	80098ec <HAL_TIM_PWM_Start_IT+0x1d8>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a30      	ldr	r2, [pc, #192]	; (80099a8 <HAL_TIM_PWM_Start_IT+0x294>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d101      	bne.n	80098f0 <HAL_TIM_PWM_Start_IT+0x1dc>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e000      	b.n	80098f2 <HAL_TIM_PWM_Start_IT+0x1de>
 80098f0:	2300      	movs	r3, #0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a23      	ldr	r2, [pc, #140]	; (8009998 <HAL_TIM_PWM_Start_IT+0x284>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d01d      	beq.n	800994c <HAL_TIM_PWM_Start_IT+0x238>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009918:	d018      	beq.n	800994c <HAL_TIM_PWM_Start_IT+0x238>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a23      	ldr	r2, [pc, #140]	; (80099ac <HAL_TIM_PWM_Start_IT+0x298>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <HAL_TIM_PWM_Start_IT+0x238>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a21      	ldr	r2, [pc, #132]	; (80099b0 <HAL_TIM_PWM_Start_IT+0x29c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00e      	beq.n	800994c <HAL_TIM_PWM_Start_IT+0x238>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a20      	ldr	r2, [pc, #128]	; (80099b4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d009      	beq.n	800994c <HAL_TIM_PWM_Start_IT+0x238>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a17      	ldr	r2, [pc, #92]	; (800999c <HAL_TIM_PWM_Start_IT+0x288>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <HAL_TIM_PWM_Start_IT+0x238>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d115      	bne.n	8009978 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8009954:	4013      	ands	r3, r2
 8009956:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b06      	cmp	r3, #6
 800995c:	d015      	beq.n	800998a <HAL_TIM_PWM_Start_IT+0x276>
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009964:	d011      	beq.n	800998a <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f042 0201 	orr.w	r2, r2, #1
 8009974:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009976:	e008      	b.n	800998a <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e000      	b.n	800998c <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	40012c00 	.word	0x40012c00
 800999c:	40013400 	.word	0x40013400
 80099a0:	40014000 	.word	0x40014000
 80099a4:	40014400 	.word	0x40014400
 80099a8:	40014800 	.word	0x40014800
 80099ac:	40000400 	.word	0x40000400
 80099b0:	40000800 	.word	0x40000800
 80099b4:	40000c00 	.word	0x40000c00
 80099b8:	00010007 	.word	0x00010007

080099bc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b0c      	cmp	r3, #12
 80099ce:	d841      	bhi.n	8009a54 <HAL_TIM_PWM_Stop_IT+0x98>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a0d 	.word	0x08009a0d
 80099dc:	08009a55 	.word	0x08009a55
 80099e0:	08009a55 	.word	0x08009a55
 80099e4:	08009a55 	.word	0x08009a55
 80099e8:	08009a1f 	.word	0x08009a1f
 80099ec:	08009a55 	.word	0x08009a55
 80099f0:	08009a55 	.word	0x08009a55
 80099f4:	08009a55 	.word	0x08009a55
 80099f8:	08009a31 	.word	0x08009a31
 80099fc:	08009a55 	.word	0x08009a55
 8009a00:	08009a55 	.word	0x08009a55
 8009a04:	08009a55 	.word	0x08009a55
 8009a08:	08009a43 	.word	0x08009a43
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0202 	bic.w	r2, r2, #2
 8009a1a:	60da      	str	r2, [r3, #12]
      break;
 8009a1c:	e01d      	b.n	8009a5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0204 	bic.w	r2, r2, #4
 8009a2c:	60da      	str	r2, [r3, #12]
      break;
 8009a2e:	e014      	b.n	8009a5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 0208 	bic.w	r2, r2, #8
 8009a3e:	60da      	str	r2, [r3, #12]
      break;
 8009a40:	e00b      	b.n	8009a5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0210 	bic.w	r2, r2, #16
 8009a50:	60da      	str	r2, [r3, #12]
      break;
 8009a52:	e002      	b.n	8009a5a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
      break;
 8009a58:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 8081 	bne.w	8009b64 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2200      	movs	r2, #0
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 ffb8 	bl	800a9e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a3e      	ldr	r2, [pc, #248]	; (8009b70 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d013      	beq.n	8009aa2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a3d      	ldr	r2, [pc, #244]	; (8009b74 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00e      	beq.n	8009aa2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a3b      	ldr	r2, [pc, #236]	; (8009b78 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d009      	beq.n	8009aa2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a3a      	ldr	r2, [pc, #232]	; (8009b7c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d004      	beq.n	8009aa2 <HAL_TIM_PWM_Stop_IT+0xe6>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a38      	ldr	r2, [pc, #224]	; (8009b80 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d101      	bne.n	8009aa6 <HAL_TIM_PWM_Stop_IT+0xea>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <HAL_TIM_PWM_Stop_IT+0xec>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d017      	beq.n	8009adc <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6a1a      	ldr	r2, [r3, #32]
 8009ab2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10f      	bne.n	8009adc <HAL_TIM_PWM_Stop_IT+0x120>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6a1a      	ldr	r2, [r3, #32]
 8009ac2:	f240 4344 	movw	r3, #1092	; 0x444
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d107      	bne.n	8009adc <HAL_TIM_PWM_Stop_IT+0x120>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ada:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6a1a      	ldr	r2, [r3, #32]
 8009ae2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10f      	bne.n	8009b0c <HAL_TIM_PWM_Stop_IT+0x150>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6a1a      	ldr	r2, [r3, #32]
 8009af2:	f240 4344 	movw	r3, #1092	; 0x444
 8009af6:	4013      	ands	r3, r2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d107      	bne.n	8009b0c <HAL_TIM_PWM_Stop_IT+0x150>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 0201 	bic.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <HAL_TIM_PWM_Stop_IT+0x160>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b1a:	e023      	b.n	8009b64 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d104      	bne.n	8009b2c <HAL_TIM_PWM_Stop_IT+0x170>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b2a:	e01b      	b.n	8009b64 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b08      	cmp	r3, #8
 8009b30:	d104      	bne.n	8009b3c <HAL_TIM_PWM_Stop_IT+0x180>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b3a:	e013      	b.n	8009b64 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b0c      	cmp	r3, #12
 8009b40:	d104      	bne.n	8009b4c <HAL_TIM_PWM_Stop_IT+0x190>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b4a:	e00b      	b.n	8009b64 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2b10      	cmp	r3, #16
 8009b50:	d104      	bne.n	8009b5c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b5a:	e003      	b.n	8009b64 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	40012c00 	.word	0x40012c00
 8009b74:	40013400 	.word	0x40013400
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	40014400 	.word	0x40014400
 8009b80:	40014800 	.word	0x40014800

08009b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d020      	beq.n	8009be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0202 	mvn.w	r2, #2
 8009bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fad1 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fac3 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fad4 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f003 0304 	and.w	r3, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d020      	beq.n	8009c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01b      	beq.n	8009c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0204 	mvn.w	r2, #4
 8009c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 faab 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 8009c20:	e005      	b.n	8009c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa9d 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 faae 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 0308 	and.w	r3, r3, #8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d020      	beq.n	8009c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d01b      	beq.n	8009c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0208 	mvn.w	r2, #8
 8009c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2204      	movs	r2, #4
 8009c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa85 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 8009c6c:	e005      	b.n	8009c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa77 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa88 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d020      	beq.n	8009ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f003 0310 	and.w	r3, r3, #16
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d01b      	beq.n	8009ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f06f 0210 	mvn.w	r2, #16
 8009c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa5f 	bl	800a176 <HAL_TIM_IC_CaptureCallback>
 8009cb8:	e005      	b.n	8009cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa51 	bl	800a162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa62 	bl	800a18a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00c      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f06f 0201 	mvn.w	r2, #1
 8009ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa2f 	bl	800a14e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d104      	bne.n	8009d04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00c      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 ff19 	bl	800ab50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00c      	beq.n	8009d42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d007      	beq.n	8009d42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 ff11 	bl	800ab64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00c      	beq.n	8009d66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa1c 	bl	800a19e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f06f 0220 	mvn.w	r2, #32
 8009d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fed9 	bl	800ab3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e0ff      	b.n	8009fb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b14      	cmp	r3, #20
 8009dbe:	f200 80f0 	bhi.w	8009fa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009e1d 	.word	0x08009e1d
 8009dcc:	08009fa3 	.word	0x08009fa3
 8009dd0:	08009fa3 	.word	0x08009fa3
 8009dd4:	08009fa3 	.word	0x08009fa3
 8009dd8:	08009e5d 	.word	0x08009e5d
 8009ddc:	08009fa3 	.word	0x08009fa3
 8009de0:	08009fa3 	.word	0x08009fa3
 8009de4:	08009fa3 	.word	0x08009fa3
 8009de8:	08009e9f 	.word	0x08009e9f
 8009dec:	08009fa3 	.word	0x08009fa3
 8009df0:	08009fa3 	.word	0x08009fa3
 8009df4:	08009fa3 	.word	0x08009fa3
 8009df8:	08009edf 	.word	0x08009edf
 8009dfc:	08009fa3 	.word	0x08009fa3
 8009e00:	08009fa3 	.word	0x08009fa3
 8009e04:	08009fa3 	.word	0x08009fa3
 8009e08:	08009f21 	.word	0x08009f21
 8009e0c:	08009fa3 	.word	0x08009fa3
 8009e10:	08009fa3 	.word	0x08009fa3
 8009e14:	08009fa3 	.word	0x08009fa3
 8009e18:	08009f61 	.word	0x08009f61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fa6c 	bl	800a300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0208 	orr.w	r2, r2, #8
 8009e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0204 	bic.w	r2, r2, #4
 8009e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6999      	ldr	r1, [r3, #24]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	691a      	ldr	r2, [r3, #16]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	619a      	str	r2, [r3, #24]
      break;
 8009e5a:	e0a5      	b.n	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fadc 	bl	800a420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	699a      	ldr	r2, [r3, #24]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699a      	ldr	r2, [r3, #24]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6999      	ldr	r1, [r3, #24]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	021a      	lsls	r2, r3, #8
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	619a      	str	r2, [r3, #24]
      break;
 8009e9c:	e084      	b.n	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fb45 	bl	800a534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69da      	ldr	r2, [r3, #28]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 0208 	orr.w	r2, r2, #8
 8009eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	69da      	ldr	r2, [r3, #28]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0204 	bic.w	r2, r2, #4
 8009ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69d9      	ldr	r1, [r3, #28]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	61da      	str	r2, [r3, #28]
      break;
 8009edc:	e064      	b.n	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fbad 	bl	800a644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69da      	ldr	r2, [r3, #28]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69d9      	ldr	r1, [r3, #28]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	021a      	lsls	r2, r3, #8
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	61da      	str	r2, [r3, #28]
      break;
 8009f1e:	e043      	b.n	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68b9      	ldr	r1, [r7, #8]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fbf6 	bl	800a718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f042 0208 	orr.w	r2, r2, #8
 8009f3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0204 	bic.w	r2, r2, #4
 8009f4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	691a      	ldr	r2, [r3, #16]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f5e:	e023      	b.n	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68b9      	ldr	r1, [r7, #8]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fc3a 	bl	800a7e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	021a      	lsls	r2, r3, #8
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fa0:	e002      	b.n	8009fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop

08009fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e0b6      	b.n	800a146 <HAL_TIM_ConfigClockSource+0x18a>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ff6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a014:	d03e      	beq.n	800a094 <HAL_TIM_ConfigClockSource+0xd8>
 800a016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01a:	f200 8087 	bhi.w	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a022:	f000 8086 	beq.w	800a132 <HAL_TIM_ConfigClockSource+0x176>
 800a026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a02a:	d87f      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a02c:	2b70      	cmp	r3, #112	; 0x70
 800a02e:	d01a      	beq.n	800a066 <HAL_TIM_ConfigClockSource+0xaa>
 800a030:	2b70      	cmp	r3, #112	; 0x70
 800a032:	d87b      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a034:	2b60      	cmp	r3, #96	; 0x60
 800a036:	d050      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x11e>
 800a038:	2b60      	cmp	r3, #96	; 0x60
 800a03a:	d877      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a03c:	2b50      	cmp	r3, #80	; 0x50
 800a03e:	d03c      	beq.n	800a0ba <HAL_TIM_ConfigClockSource+0xfe>
 800a040:	2b50      	cmp	r3, #80	; 0x50
 800a042:	d873      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d058      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0x13e>
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d86f      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a04c:	2b30      	cmp	r3, #48	; 0x30
 800a04e:	d064      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15e>
 800a050:	2b30      	cmp	r3, #48	; 0x30
 800a052:	d86b      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d060      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15e>
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d867      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d05c      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15e>
 800a060:	2b10      	cmp	r3, #16
 800a062:	d05a      	beq.n	800a11a <HAL_TIM_ConfigClockSource+0x15e>
 800a064:	e062      	b.n	800a12c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a076:	f000 fc93 	bl	800a9a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	609a      	str	r2, [r3, #8]
      break;
 800a092:	e04f      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0a4:	f000 fc7c 	bl	800a9a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0b6:	609a      	str	r2, [r3, #8]
      break;
 800a0b8:	e03c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f000 fbf0 	bl	800a8ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2150      	movs	r1, #80	; 0x50
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fc49 	bl	800a96a <TIM_ITRx_SetConfig>
      break;
 800a0d8:	e02c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f000 fc0f 	bl	800a90a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2160      	movs	r1, #96	; 0x60
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fc39 	bl	800a96a <TIM_ITRx_SetConfig>
      break;
 800a0f8:	e01c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a106:	461a      	mov	r2, r3
 800a108:	f000 fbd0 	bl	800a8ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2140      	movs	r1, #64	; 0x40
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fc29 	bl	800a96a <TIM_ITRx_SetConfig>
      break;
 800a118:	e00c      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f000 fc20 	bl	800a96a <TIM_ITRx_SetConfig>
      break;
 800a12a:	e003      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	73fb      	strb	r3, [r7, #15]
      break;
 800a130:	e000      	b.n	800a134 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a17e:	bf00      	nop
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a6:	bf00      	nop
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
	...

0800a1b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a46      	ldr	r2, [pc, #280]	; (800a2e0 <TIM_Base_SetConfig+0x12c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d013      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d2:	d00f      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a43      	ldr	r2, [pc, #268]	; (800a2e4 <TIM_Base_SetConfig+0x130>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00b      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a42      	ldr	r2, [pc, #264]	; (800a2e8 <TIM_Base_SetConfig+0x134>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d007      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a41      	ldr	r2, [pc, #260]	; (800a2ec <TIM_Base_SetConfig+0x138>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d003      	beq.n	800a1f4 <TIM_Base_SetConfig+0x40>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a40      	ldr	r2, [pc, #256]	; (800a2f0 <TIM_Base_SetConfig+0x13c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d108      	bne.n	800a206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a35      	ldr	r2, [pc, #212]	; (800a2e0 <TIM_Base_SetConfig+0x12c>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d01f      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a214:	d01b      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a32      	ldr	r2, [pc, #200]	; (800a2e4 <TIM_Base_SetConfig+0x130>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d017      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a31      	ldr	r2, [pc, #196]	; (800a2e8 <TIM_Base_SetConfig+0x134>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a30      	ldr	r2, [pc, #192]	; (800a2ec <TIM_Base_SetConfig+0x138>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00f      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a2f      	ldr	r2, [pc, #188]	; (800a2f0 <TIM_Base_SetConfig+0x13c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a2e      	ldr	r2, [pc, #184]	; (800a2f4 <TIM_Base_SetConfig+0x140>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a2d      	ldr	r2, [pc, #180]	; (800a2f8 <TIM_Base_SetConfig+0x144>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_Base_SetConfig+0x9a>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a2c      	ldr	r2, [pc, #176]	; (800a2fc <TIM_Base_SetConfig+0x148>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d108      	bne.n	800a260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a16      	ldr	r2, [pc, #88]	; (800a2e0 <TIM_Base_SetConfig+0x12c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00f      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a18      	ldr	r2, [pc, #96]	; (800a2f0 <TIM_Base_SetConfig+0x13c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00b      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a17      	ldr	r2, [pc, #92]	; (800a2f4 <TIM_Base_SetConfig+0x140>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d007      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a16      	ldr	r2, [pc, #88]	; (800a2f8 <TIM_Base_SetConfig+0x144>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d003      	beq.n	800a2ac <TIM_Base_SetConfig+0xf8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a15      	ldr	r2, [pc, #84]	; (800a2fc <TIM_Base_SetConfig+0x148>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d103      	bne.n	800a2b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	691a      	ldr	r2, [r3, #16]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d105      	bne.n	800a2d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	f023 0201 	bic.w	r2, r3, #1
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	611a      	str	r2, [r3, #16]
  }
}
 800a2d2:	bf00      	nop
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40012c00 	.word	0x40012c00
 800a2e4:	40000400 	.word	0x40000400
 800a2e8:	40000800 	.word	0x40000800
 800a2ec:	40000c00 	.word	0x40000c00
 800a2f0:	40013400 	.word	0x40013400
 800a2f4:	40014000 	.word	0x40014000
 800a2f8:	40014400 	.word	0x40014400
 800a2fc:	40014800 	.word	0x40014800

0800a300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	f023 0201 	bic.w	r2, r3, #1
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f023 0302 	bic.w	r3, r3, #2
 800a34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a2c      	ldr	r2, [pc, #176]	; (800a40c <TIM_OC1_SetConfig+0x10c>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d00f      	beq.n	800a380 <TIM_OC1_SetConfig+0x80>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a2b      	ldr	r2, [pc, #172]	; (800a410 <TIM_OC1_SetConfig+0x110>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d00b      	beq.n	800a380 <TIM_OC1_SetConfig+0x80>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a2a      	ldr	r2, [pc, #168]	; (800a414 <TIM_OC1_SetConfig+0x114>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d007      	beq.n	800a380 <TIM_OC1_SetConfig+0x80>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a29      	ldr	r2, [pc, #164]	; (800a418 <TIM_OC1_SetConfig+0x118>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC1_SetConfig+0x80>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a28      	ldr	r2, [pc, #160]	; (800a41c <TIM_OC1_SetConfig+0x11c>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d10c      	bne.n	800a39a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f023 0308 	bic.w	r3, r3, #8
 800a386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f023 0304 	bic.w	r3, r3, #4
 800a398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a1b      	ldr	r2, [pc, #108]	; (800a40c <TIM_OC1_SetConfig+0x10c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00f      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xc2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a1a      	ldr	r2, [pc, #104]	; (800a410 <TIM_OC1_SetConfig+0x110>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00b      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xc2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a19      	ldr	r2, [pc, #100]	; (800a414 <TIM_OC1_SetConfig+0x114>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d007      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xc2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a18      	ldr	r2, [pc, #96]	; (800a418 <TIM_OC1_SetConfig+0x118>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d003      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xc2>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a17      	ldr	r2, [pc, #92]	; (800a41c <TIM_OC1_SetConfig+0x11c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d111      	bne.n	800a3e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	621a      	str	r2, [r3, #32]
}
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	40012c00 	.word	0x40012c00
 800a410:	40013400 	.word	0x40013400
 800a414:	40014000 	.word	0x40014000
 800a418:	40014400 	.word	0x40014400
 800a41c:	40014800 	.word	0x40014800

0800a420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	f023 0210 	bic.w	r2, r3, #16
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	4313      	orrs	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f023 0320 	bic.w	r3, r3, #32
 800a46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a28      	ldr	r2, [pc, #160]	; (800a520 <TIM_OC2_SetConfig+0x100>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d003      	beq.n	800a48c <TIM_OC2_SetConfig+0x6c>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a27      	ldr	r2, [pc, #156]	; (800a524 <TIM_OC2_SetConfig+0x104>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d10d      	bne.n	800a4a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	011b      	lsls	r3, r3, #4
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a1d      	ldr	r2, [pc, #116]	; (800a520 <TIM_OC2_SetConfig+0x100>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00f      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xb0>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a1c      	ldr	r2, [pc, #112]	; (800a524 <TIM_OC2_SetConfig+0x104>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00b      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xb0>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <TIM_OC2_SetConfig+0x108>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d007      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xb0>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a1a      	ldr	r2, [pc, #104]	; (800a52c <TIM_OC2_SetConfig+0x10c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xb0>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a19      	ldr	r2, [pc, #100]	; (800a530 <TIM_OC2_SetConfig+0x110>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d113      	bne.n	800a4f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	621a      	str	r2, [r3, #32]
}
 800a512:	bf00      	nop
 800a514:	371c      	adds	r7, #28
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	40012c00 	.word	0x40012c00
 800a524:	40013400 	.word	0x40013400
 800a528:	40014000 	.word	0x40014000
 800a52c:	40014400 	.word	0x40014400
 800a530:	40014800 	.word	0x40014800

0800a534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0303 	bic.w	r3, r3, #3
 800a56e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4313      	orrs	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a27      	ldr	r2, [pc, #156]	; (800a630 <TIM_OC3_SetConfig+0xfc>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d003      	beq.n	800a59e <TIM_OC3_SetConfig+0x6a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a26      	ldr	r2, [pc, #152]	; (800a634 <TIM_OC3_SetConfig+0x100>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d10d      	bne.n	800a5ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a1c      	ldr	r2, [pc, #112]	; (800a630 <TIM_OC3_SetConfig+0xfc>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00f      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xae>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a1b      	ldr	r2, [pc, #108]	; (800a634 <TIM_OC3_SetConfig+0x100>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00b      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xae>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a1a      	ldr	r2, [pc, #104]	; (800a638 <TIM_OC3_SetConfig+0x104>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d007      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xae>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a19      	ldr	r2, [pc, #100]	; (800a63c <TIM_OC3_SetConfig+0x108>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d003      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xae>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a18      	ldr	r2, [pc, #96]	; (800a640 <TIM_OC3_SetConfig+0x10c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d113      	bne.n	800a60a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	011b      	lsls	r3, r3, #4
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4313      	orrs	r3, r2
 800a608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	621a      	str	r2, [r3, #32]
}
 800a624:	bf00      	nop
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	40012c00 	.word	0x40012c00
 800a634:	40013400 	.word	0x40013400
 800a638:	40014000 	.word	0x40014000
 800a63c:	40014400 	.word	0x40014400
 800a640:	40014800 	.word	0x40014800

0800a644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a644:	b480      	push	{r7}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	021b      	lsls	r3, r3, #8
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	031b      	lsls	r3, r3, #12
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a18      	ldr	r2, [pc, #96]	; (800a704 <TIM_OC4_SetConfig+0xc0>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d00f      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x84>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a17      	ldr	r2, [pc, #92]	; (800a708 <TIM_OC4_SetConfig+0xc4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d00b      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x84>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a16      	ldr	r2, [pc, #88]	; (800a70c <TIM_OC4_SetConfig+0xc8>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d007      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x84>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a15      	ldr	r2, [pc, #84]	; (800a710 <TIM_OC4_SetConfig+0xcc>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d003      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x84>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a14      	ldr	r2, [pc, #80]	; (800a714 <TIM_OC4_SetConfig+0xd0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d109      	bne.n	800a6dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	019b      	lsls	r3, r3, #6
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	621a      	str	r2, [r3, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	40012c00 	.word	0x40012c00
 800a708:	40013400 	.word	0x40013400
 800a70c:	40014000 	.word	0x40014000
 800a710:	40014400 	.word	0x40014400
 800a714:	40014800 	.word	0x40014800

0800a718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	4313      	orrs	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a75c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	041b      	lsls	r3, r3, #16
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a17      	ldr	r2, [pc, #92]	; (800a7cc <TIM_OC5_SetConfig+0xb4>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d00f      	beq.n	800a792 <TIM_OC5_SetConfig+0x7a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a16      	ldr	r2, [pc, #88]	; (800a7d0 <TIM_OC5_SetConfig+0xb8>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d00b      	beq.n	800a792 <TIM_OC5_SetConfig+0x7a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a15      	ldr	r2, [pc, #84]	; (800a7d4 <TIM_OC5_SetConfig+0xbc>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d007      	beq.n	800a792 <TIM_OC5_SetConfig+0x7a>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a14      	ldr	r2, [pc, #80]	; (800a7d8 <TIM_OC5_SetConfig+0xc0>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d003      	beq.n	800a792 <TIM_OC5_SetConfig+0x7a>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a13      	ldr	r2, [pc, #76]	; (800a7dc <TIM_OC5_SetConfig+0xc4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d109      	bne.n	800a7a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	621a      	str	r2, [r3, #32]
}
 800a7c0:	bf00      	nop
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	40012c00 	.word	0x40012c00
 800a7d0:	40013400 	.word	0x40013400
 800a7d4:	40014000 	.word	0x40014000
 800a7d8:	40014400 	.word	0x40014400
 800a7dc:	40014800 	.word	0x40014800

0800a7e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a80e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	051b      	lsls	r3, r3, #20
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a18      	ldr	r2, [pc, #96]	; (800a898 <TIM_OC6_SetConfig+0xb8>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00f      	beq.n	800a85c <TIM_OC6_SetConfig+0x7c>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a17      	ldr	r2, [pc, #92]	; (800a89c <TIM_OC6_SetConfig+0xbc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00b      	beq.n	800a85c <TIM_OC6_SetConfig+0x7c>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a16      	ldr	r2, [pc, #88]	; (800a8a0 <TIM_OC6_SetConfig+0xc0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d007      	beq.n	800a85c <TIM_OC6_SetConfig+0x7c>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a15      	ldr	r2, [pc, #84]	; (800a8a4 <TIM_OC6_SetConfig+0xc4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d003      	beq.n	800a85c <TIM_OC6_SetConfig+0x7c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a14      	ldr	r2, [pc, #80]	; (800a8a8 <TIM_OC6_SetConfig+0xc8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d109      	bne.n	800a870 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	029b      	lsls	r3, r3, #10
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	621a      	str	r2, [r3, #32]
}
 800a88a:	bf00      	nop
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40012c00 	.word	0x40012c00
 800a89c:	40013400 	.word	0x40013400
 800a8a0:	40014000 	.word	0x40014000
 800a8a4:	40014400 	.word	0x40014400
 800a8a8:	40014800 	.word	0x40014800

0800a8ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	f023 0201 	bic.w	r2, r3, #1
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f023 030a 	bic.w	r3, r3, #10
 800a8e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	621a      	str	r2, [r3, #32]
}
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b087      	sub	sp, #28
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	f023 0210 	bic.w	r2, r3, #16
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	031b      	lsls	r3, r3, #12
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a946:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	011b      	lsls	r3, r3, #4
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	4313      	orrs	r3, r2
 800a950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	621a      	str	r2, [r3, #32]
}
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	f043 0307 	orr.w	r3, r3, #7
 800a98c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	609a      	str	r2, [r3, #8]
}
 800a994:	bf00      	nop
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	021a      	lsls	r2, r3, #8
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	609a      	str	r2, [r3, #8]
}
 800a9d4:	bf00      	nop
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 031f 	and.w	r3, r3, #31
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6a1a      	ldr	r2, [r3, #32]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	43db      	mvns	r3, r3
 800aa02:	401a      	ands	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6a1a      	ldr	r2, [r3, #32]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 031f 	and.w	r3, r3, #31
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	fa01 f303 	lsl.w	r3, r1, r3
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa40:	2302      	movs	r3, #2
 800aa42:	e068      	b.n	800ab16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a2e      	ldr	r2, [pc, #184]	; (800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d004      	beq.n	800aa78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a2d      	ldr	r2, [pc, #180]	; (800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d108      	bne.n	800aa8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a1e      	ldr	r2, [pc, #120]	; (800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d01d      	beq.n	800aaea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab6:	d018      	beq.n	800aaea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1b      	ldr	r2, [pc, #108]	; (800ab2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d013      	beq.n	800aaea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a1a      	ldr	r2, [pc, #104]	; (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00e      	beq.n	800aaea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a18      	ldr	r2, [pc, #96]	; (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d009      	beq.n	800aaea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a13      	ldr	r2, [pc, #76]	; (800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d004      	beq.n	800aaea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a14      	ldr	r2, [pc, #80]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d10c      	bne.n	800ab04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	40012c00 	.word	0x40012c00
 800ab28:	40013400 	.word	0x40013400
 800ab2c:	40000400 	.word	0x40000400
 800ab30:	40000800 	.word	0x40000800
 800ab34:	40000c00 	.word	0x40000c00
 800ab38:	40014000 	.word	0x40014000

0800ab3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e040      	b.n	800ac0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7f6 fee2 	bl	8001964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2224      	movs	r2, #36	; 0x24
 800aba4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0201 	bic.w	r2, r2, #1
 800abb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fedc 	bl	800b97c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fc21 	bl	800b40c <UART_SetConfig>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e01b      	b.n	800ac0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0201 	orr.w	r2, r2, #1
 800ac02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 ff5b 	bl	800bac0 <UART_CheckIdleState>
 800ac0a:	4603      	mov	r3, r0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d178      	bne.n	800ad1e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <HAL_UART_Transmit+0x24>
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e071      	b.n	800ad20 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2221      	movs	r2, #33	; 0x21
 800ac48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac4a:	f7fa fbb7 	bl	80053bc <HAL_GetTick>
 800ac4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	88fa      	ldrh	r2, [r7, #6]
 800ac54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	88fa      	ldrh	r2, [r7, #6]
 800ac5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac68:	d108      	bne.n	800ac7c <HAL_UART_Transmit+0x68>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d104      	bne.n	800ac7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	61bb      	str	r3, [r7, #24]
 800ac7a:	e003      	b.n	800ac84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac84:	e030      	b.n	800ace8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2180      	movs	r1, #128	; 0x80
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 ffbd 	bl	800bc10 <UART_WaitOnFlagUntilTimeout>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e03c      	b.n	800ad20 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	881a      	ldrh	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acb8:	b292      	uxth	r2, r2
 800acba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	3302      	adds	r3, #2
 800acc0:	61bb      	str	r3, [r7, #24]
 800acc2:	e008      	b.n	800acd6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	b292      	uxth	r2, r2
 800acce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	3301      	adds	r3, #1
 800acd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800acee:	b29b      	uxth	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1c8      	bne.n	800ac86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2200      	movs	r2, #0
 800acfc:	2140      	movs	r1, #64	; 0x40
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 ff86 	bl	800bc10 <UART_WaitOnFlagUntilTimeout>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d004      	beq.n	800ad14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e005      	b.n	800ad20 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2220      	movs	r2, #32
 800ad18:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e000      	b.n	800ad20 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800ad1e:	2302      	movs	r3, #2
  }
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	; 0x28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d137      	bne.n	800adb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <HAL_UART_Receive_IT+0x24>
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e030      	b.n	800adb2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a18      	ldr	r2, [pc, #96]	; (800adbc <HAL_UART_Receive_IT+0x94>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d01f      	beq.n	800ada0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d018      	beq.n	800ada0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	623b      	str	r3, [r7, #32]
 800ad8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	69f9      	ldr	r1, [r7, #28]
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e6      	bne.n	800ad6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	461a      	mov	r2, r3
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 ffa0 	bl	800bcec <UART_Start_Receive_IT>
 800adac:	4603      	mov	r3, r0
 800adae:	e000      	b.n	800adb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800adb0:	2302      	movs	r3, #2
  }
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3728      	adds	r7, #40	; 0x28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40008000 	.word	0x40008000

0800adc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b0ba      	sub	sp, #232	; 0xe8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ade6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800adea:	f640 030f 	movw	r3, #2063	; 0x80f
 800adee:	4013      	ands	r3, r2
 800adf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800adf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d115      	bne.n	800ae28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00f      	beq.n	800ae28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0c:	f003 0320 	and.w	r3, r3, #32
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d009      	beq.n	800ae28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 82ca 	beq.w	800b3b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
      }
      return;
 800ae26:	e2c4      	b.n	800b3b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ae28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8117 	beq.w	800b060 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae42:	4b85      	ldr	r3, [pc, #532]	; (800b058 <HAL_UART_IRQHandler+0x298>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 810a 	beq.w	800b060 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d011      	beq.n	800ae7c <HAL_UART_IRQHandler+0xbc>
 800ae58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae72:	f043 0201 	orr.w	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d011      	beq.n	800aeac <HAL_UART_IRQHandler+0xec>
 800ae88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aea2:	f043 0204 	orr.w	r2, r3, #4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d011      	beq.n	800aedc <HAL_UART_IRQHandler+0x11c>
 800aeb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00b      	beq.n	800aedc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2204      	movs	r2, #4
 800aeca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aed2:	f043 0202 	orr.w	r2, r3, #2
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee0:	f003 0308 	and.w	r3, r3, #8
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d017      	beq.n	800af18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeec:	f003 0320 	and.w	r3, r3, #32
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d105      	bne.n	800af00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aef8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2208      	movs	r2, #8
 800af06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af0e:	f043 0208 	orr.w	r2, r3, #8
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af20:	2b00      	cmp	r3, #0
 800af22:	d012      	beq.n	800af4a <HAL_UART_IRQHandler+0x18a>
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af40:	f043 0220 	orr.w	r2, r3, #32
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8230 	beq.w	800b3b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00d      	beq.n	800af7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d007      	beq.n	800af7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	d005      	beq.n	800afa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d04f      	beq.n	800b042 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 ff68 	bl	800be78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb2:	2b40      	cmp	r3, #64	; 0x40
 800afb4:	d141      	bne.n	800b03a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3308      	adds	r3, #8
 800afbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3308      	adds	r3, #8
 800afde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800affa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1d9      	bne.n	800afb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b006:	2b00      	cmp	r3, #0
 800b008:	d013      	beq.n	800b032 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b00e:	4a13      	ldr	r2, [pc, #76]	; (800b05c <HAL_UART_IRQHandler+0x29c>)
 800b010:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b016:	4618      	mov	r0, r3
 800b018:	f7fb fcc7 	bl	80069aa <HAL_DMA_Abort_IT>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d017      	beq.n	800b052 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b030:	e00f      	b.n	800b052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9d4 	bl	800b3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b038:	e00b      	b.n	800b052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f9d0 	bl	800b3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b040:	e007      	b.n	800b052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f9cc 	bl	800b3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b050:	e1b1      	b.n	800b3b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b052:	bf00      	nop
    return;
 800b054:	e1af      	b.n	800b3b6 <HAL_UART_IRQHandler+0x5f6>
 800b056:	bf00      	nop
 800b058:	04000120 	.word	0x04000120
 800b05c:	0800bf41 	.word	0x0800bf41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b064:	2b01      	cmp	r3, #1
 800b066:	f040 816a 	bne.w	800b33e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 8163 	beq.w	800b33e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b07c:	f003 0310 	and.w	r3, r3, #16
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 815c 	beq.w	800b33e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2210      	movs	r2, #16
 800b08c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b098:	2b40      	cmp	r3, #64	; 0x40
 800b09a:	f040 80d4 	bne.w	800b246 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 80ad 	beq.w	800b20e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	f080 80a5 	bcs.w	800b20e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f040 8086 	bne.w	800b1ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b10a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b10e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1da      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3308      	adds	r3, #8
 800b130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b13a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3308      	adds	r3, #8
 800b14a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b14e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b152:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b156:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e1      	bne.n	800b12a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3308      	adds	r3, #8
 800b16c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b17c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b18a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b18c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b192:	e841 2300 	strex	r3, r2, [r1]
 800b196:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1e3      	bne.n	800b166 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1bc:	f023 0310 	bic.w	r3, r3, #16
 800b1c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e4      	bne.n	800b1ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fb fba1 	bl	800692e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	b29b      	uxth	r3, r3
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f8f4 	bl	800b3f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b20c:	e0d5      	b.n	800b3ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b218:	429a      	cmp	r2, r3
 800b21a:	f040 80ce 	bne.w	800b3ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	f040 80c5 	bne.w	800b3ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f8d8 	bl	800b3f4 <HAL_UARTEx_RxEventCallback>
      return;
 800b244:	e0b9      	b.n	800b3ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b252:	b29b      	uxth	r3, r3
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b260:	b29b      	uxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80ab 	beq.w	800b3be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800b268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80a6 	beq.w	800b3be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27a:	e853 3f00 	ldrex	r3, [r3]
 800b27e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b294:	647b      	str	r3, [r7, #68]	; 0x44
 800b296:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b29a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e4      	bne.n	800b272 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	623b      	str	r3, [r7, #32]
   return(result);
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	f023 0301 	bic.w	r3, r3, #1
 800b2be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2cc:	633a      	str	r2, [r7, #48]	; 0x30
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e3      	bne.n	800b2a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	60fb      	str	r3, [r7, #12]
   return(result);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f023 0310 	bic.w	r3, r3, #16
 800b308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b316:	61fb      	str	r3, [r7, #28]
 800b318:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	69b9      	ldr	r1, [r7, #24]
 800b31c:	69fa      	ldr	r2, [r7, #28]
 800b31e:	e841 2300 	strex	r3, r2, [r1]
 800b322:	617b      	str	r3, [r7, #20]
   return(result);
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1e4      	bne.n	800b2f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2202      	movs	r2, #2
 800b32e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f85c 	bl	800b3f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b33c:	e03f      	b.n	800b3be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00e      	beq.n	800b368 <HAL_UART_IRQHandler+0x5a8>
 800b34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b34e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d008      	beq.n	800b368 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b35e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 ffe9 	bl	800c338 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b366:	e02d      	b.n	800b3c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00e      	beq.n	800b392 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d008      	beq.n	800b392 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01c      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	4798      	blx	r3
    }
    return;
 800b390:	e017      	b.n	800b3c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d012      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x604>
 800b39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fdde 	bl	800bf6c <UART_EndTransmit_IT>
    return;
 800b3b0:	e008      	b.n	800b3c4 <HAL_UART_IRQHandler+0x604>
      return;
 800b3b2:	bf00      	nop
 800b3b4:	e006      	b.n	800b3c4 <HAL_UART_IRQHandler+0x604>
    return;
 800b3b6:	bf00      	nop
 800b3b8:	e004      	b.n	800b3c4 <HAL_UART_IRQHandler+0x604>
      return;
 800b3ba:	bf00      	nop
 800b3bc:	e002      	b.n	800b3c4 <HAL_UART_IRQHandler+0x604>
      return;
 800b3be:	bf00      	nop
 800b3c0:	e000      	b.n	800b3c4 <HAL_UART_IRQHandler+0x604>
    return;
 800b3c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b3c4:	37e8      	adds	r7, #232	; 0xe8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop

0800b3cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b40c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b410:	b08a      	sub	sp, #40	; 0x28
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	689a      	ldr	r2, [r3, #8]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	431a      	orrs	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	431a      	orrs	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	4313      	orrs	r3, r2
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4ba4      	ldr	r3, [pc, #656]	; (800b6cc <UART_SetConfig+0x2c0>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b444:	430b      	orrs	r3, r1
 800b446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68da      	ldr	r2, [r3, #12]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a99      	ldr	r2, [pc, #612]	; (800b6d0 <UART_SetConfig+0x2c4>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d004      	beq.n	800b478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b474:	4313      	orrs	r3, r2
 800b476:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b488:	430a      	orrs	r2, r1
 800b48a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a90      	ldr	r2, [pc, #576]	; (800b6d4 <UART_SetConfig+0x2c8>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d126      	bne.n	800b4e4 <UART_SetConfig+0xd8>
 800b496:	4b90      	ldr	r3, [pc, #576]	; (800b6d8 <UART_SetConfig+0x2cc>)
 800b498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d81b      	bhi.n	800b4dc <UART_SetConfig+0xd0>
 800b4a4:	a201      	add	r2, pc, #4	; (adr r2, 800b4ac <UART_SetConfig+0xa0>)
 800b4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4aa:	bf00      	nop
 800b4ac:	0800b4bd 	.word	0x0800b4bd
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	0800b4c5 	.word	0x0800b4c5
 800b4b8:	0800b4d5 	.word	0x0800b4d5
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4c2:	e116      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ca:	e112      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4d2:	e10e      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4da:	e10a      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b4dc:	2310      	movs	r3, #16
 800b4de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4e2:	e106      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a7c      	ldr	r2, [pc, #496]	; (800b6dc <UART_SetConfig+0x2d0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d138      	bne.n	800b560 <UART_SetConfig+0x154>
 800b4ee:	4b7a      	ldr	r3, [pc, #488]	; (800b6d8 <UART_SetConfig+0x2cc>)
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f4:	f003 030c 	and.w	r3, r3, #12
 800b4f8:	2b0c      	cmp	r3, #12
 800b4fa:	d82d      	bhi.n	800b558 <UART_SetConfig+0x14c>
 800b4fc:	a201      	add	r2, pc, #4	; (adr r2, 800b504 <UART_SetConfig+0xf8>)
 800b4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b502:	bf00      	nop
 800b504:	0800b539 	.word	0x0800b539
 800b508:	0800b559 	.word	0x0800b559
 800b50c:	0800b559 	.word	0x0800b559
 800b510:	0800b559 	.word	0x0800b559
 800b514:	0800b549 	.word	0x0800b549
 800b518:	0800b559 	.word	0x0800b559
 800b51c:	0800b559 	.word	0x0800b559
 800b520:	0800b559 	.word	0x0800b559
 800b524:	0800b541 	.word	0x0800b541
 800b528:	0800b559 	.word	0x0800b559
 800b52c:	0800b559 	.word	0x0800b559
 800b530:	0800b559 	.word	0x0800b559
 800b534:	0800b551 	.word	0x0800b551
 800b538:	2300      	movs	r3, #0
 800b53a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b53e:	e0d8      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b540:	2302      	movs	r3, #2
 800b542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b546:	e0d4      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b548:	2304      	movs	r3, #4
 800b54a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b54e:	e0d0      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b550:	2308      	movs	r3, #8
 800b552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b556:	e0cc      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b558:	2310      	movs	r3, #16
 800b55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b55e:	e0c8      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a5e      	ldr	r2, [pc, #376]	; (800b6e0 <UART_SetConfig+0x2d4>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d125      	bne.n	800b5b6 <UART_SetConfig+0x1aa>
 800b56a:	4b5b      	ldr	r3, [pc, #364]	; (800b6d8 <UART_SetConfig+0x2cc>)
 800b56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b570:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b574:	2b30      	cmp	r3, #48	; 0x30
 800b576:	d016      	beq.n	800b5a6 <UART_SetConfig+0x19a>
 800b578:	2b30      	cmp	r3, #48	; 0x30
 800b57a:	d818      	bhi.n	800b5ae <UART_SetConfig+0x1a2>
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	d00a      	beq.n	800b596 <UART_SetConfig+0x18a>
 800b580:	2b20      	cmp	r3, #32
 800b582:	d814      	bhi.n	800b5ae <UART_SetConfig+0x1a2>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <UART_SetConfig+0x182>
 800b588:	2b10      	cmp	r3, #16
 800b58a:	d008      	beq.n	800b59e <UART_SetConfig+0x192>
 800b58c:	e00f      	b.n	800b5ae <UART_SetConfig+0x1a2>
 800b58e:	2300      	movs	r3, #0
 800b590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b594:	e0ad      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b596:	2302      	movs	r3, #2
 800b598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b59c:	e0a9      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b59e:	2304      	movs	r3, #4
 800b5a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5a4:	e0a5      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5ac:	e0a1      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b5ae:	2310      	movs	r3, #16
 800b5b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5b4:	e09d      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a4a      	ldr	r2, [pc, #296]	; (800b6e4 <UART_SetConfig+0x2d8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d125      	bne.n	800b60c <UART_SetConfig+0x200>
 800b5c0:	4b45      	ldr	r3, [pc, #276]	; (800b6d8 <UART_SetConfig+0x2cc>)
 800b5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5ca:	2bc0      	cmp	r3, #192	; 0xc0
 800b5cc:	d016      	beq.n	800b5fc <UART_SetConfig+0x1f0>
 800b5ce:	2bc0      	cmp	r3, #192	; 0xc0
 800b5d0:	d818      	bhi.n	800b604 <UART_SetConfig+0x1f8>
 800b5d2:	2b80      	cmp	r3, #128	; 0x80
 800b5d4:	d00a      	beq.n	800b5ec <UART_SetConfig+0x1e0>
 800b5d6:	2b80      	cmp	r3, #128	; 0x80
 800b5d8:	d814      	bhi.n	800b604 <UART_SetConfig+0x1f8>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <UART_SetConfig+0x1d8>
 800b5de:	2b40      	cmp	r3, #64	; 0x40
 800b5e0:	d008      	beq.n	800b5f4 <UART_SetConfig+0x1e8>
 800b5e2:	e00f      	b.n	800b604 <UART_SetConfig+0x1f8>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5ea:	e082      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5f2:	e07e      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5fa:	e07a      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b5fc:	2308      	movs	r3, #8
 800b5fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b602:	e076      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b604:	2310      	movs	r3, #16
 800b606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b60a:	e072      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a35      	ldr	r2, [pc, #212]	; (800b6e8 <UART_SetConfig+0x2dc>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d12a      	bne.n	800b66c <UART_SetConfig+0x260>
 800b616:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <UART_SetConfig+0x2cc>)
 800b618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b624:	d01a      	beq.n	800b65c <UART_SetConfig+0x250>
 800b626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b62a:	d81b      	bhi.n	800b664 <UART_SetConfig+0x258>
 800b62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b630:	d00c      	beq.n	800b64c <UART_SetConfig+0x240>
 800b632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b636:	d815      	bhi.n	800b664 <UART_SetConfig+0x258>
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <UART_SetConfig+0x238>
 800b63c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b640:	d008      	beq.n	800b654 <UART_SetConfig+0x248>
 800b642:	e00f      	b.n	800b664 <UART_SetConfig+0x258>
 800b644:	2300      	movs	r3, #0
 800b646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b64a:	e052      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b64c:	2302      	movs	r3, #2
 800b64e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b652:	e04e      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b654:	2304      	movs	r3, #4
 800b656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b65a:	e04a      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b65c:	2308      	movs	r3, #8
 800b65e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b662:	e046      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b664:	2310      	movs	r3, #16
 800b666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b66a:	e042      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a17      	ldr	r2, [pc, #92]	; (800b6d0 <UART_SetConfig+0x2c4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d13a      	bne.n	800b6ec <UART_SetConfig+0x2e0>
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <UART_SetConfig+0x2cc>)
 800b678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b680:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b684:	d01a      	beq.n	800b6bc <UART_SetConfig+0x2b0>
 800b686:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b68a:	d81b      	bhi.n	800b6c4 <UART_SetConfig+0x2b8>
 800b68c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b690:	d00c      	beq.n	800b6ac <UART_SetConfig+0x2a0>
 800b692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b696:	d815      	bhi.n	800b6c4 <UART_SetConfig+0x2b8>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <UART_SetConfig+0x298>
 800b69c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a0:	d008      	beq.n	800b6b4 <UART_SetConfig+0x2a8>
 800b6a2:	e00f      	b.n	800b6c4 <UART_SetConfig+0x2b8>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6aa:	e022      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6b2:	e01e      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ba:	e01a      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b6bc:	2308      	movs	r3, #8
 800b6be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6c2:	e016      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ca:	e012      	b.n	800b6f2 <UART_SetConfig+0x2e6>
 800b6cc:	efff69f3 	.word	0xefff69f3
 800b6d0:	40008000 	.word	0x40008000
 800b6d4:	40013800 	.word	0x40013800
 800b6d8:	40021000 	.word	0x40021000
 800b6dc:	40004400 	.word	0x40004400
 800b6e0:	40004800 	.word	0x40004800
 800b6e4:	40004c00 	.word	0x40004c00
 800b6e8:	40005000 	.word	0x40005000
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a9f      	ldr	r2, [pc, #636]	; (800b974 <UART_SetConfig+0x568>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d17a      	bne.n	800b7f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b700:	2b08      	cmp	r3, #8
 800b702:	d824      	bhi.n	800b74e <UART_SetConfig+0x342>
 800b704:	a201      	add	r2, pc, #4	; (adr r2, 800b70c <UART_SetConfig+0x300>)
 800b706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70a:	bf00      	nop
 800b70c:	0800b731 	.word	0x0800b731
 800b710:	0800b74f 	.word	0x0800b74f
 800b714:	0800b739 	.word	0x0800b739
 800b718:	0800b74f 	.word	0x0800b74f
 800b71c:	0800b73f 	.word	0x0800b73f
 800b720:	0800b74f 	.word	0x0800b74f
 800b724:	0800b74f 	.word	0x0800b74f
 800b728:	0800b74f 	.word	0x0800b74f
 800b72c:	0800b747 	.word	0x0800b747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b730:	f7fc fc04 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800b734:	61f8      	str	r0, [r7, #28]
        break;
 800b736:	e010      	b.n	800b75a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b738:	4b8f      	ldr	r3, [pc, #572]	; (800b978 <UART_SetConfig+0x56c>)
 800b73a:	61fb      	str	r3, [r7, #28]
        break;
 800b73c:	e00d      	b.n	800b75a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b73e:	f7fc fb65 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 800b742:	61f8      	str	r0, [r7, #28]
        break;
 800b744:	e009      	b.n	800b75a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b74a:	61fb      	str	r3, [r7, #28]
        break;
 800b74c:	e005      	b.n	800b75a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 80fb 	beq.w	800b958 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	69fa      	ldr	r2, [r7, #28]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d305      	bcc.n	800b77e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d903      	bls.n	800b786 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b784:	e0e8      	b.n	800b958 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	2200      	movs	r2, #0
 800b78a:	461c      	mov	r4, r3
 800b78c:	4615      	mov	r5, r2
 800b78e:	f04f 0200 	mov.w	r2, #0
 800b792:	f04f 0300 	mov.w	r3, #0
 800b796:	022b      	lsls	r3, r5, #8
 800b798:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b79c:	0222      	lsls	r2, r4, #8
 800b79e:	68f9      	ldr	r1, [r7, #12]
 800b7a0:	6849      	ldr	r1, [r1, #4]
 800b7a2:	0849      	lsrs	r1, r1, #1
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	4688      	mov	r8, r1
 800b7a8:	4681      	mov	r9, r0
 800b7aa:	eb12 0a08 	adds.w	sl, r2, r8
 800b7ae:	eb43 0b09 	adc.w	fp, r3, r9
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	603b      	str	r3, [r7, #0]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c0:	4650      	mov	r0, sl
 800b7c2:	4659      	mov	r1, fp
 800b7c4:	f7f5 fa10 	bl	8000be8 <__aeabi_uldivmod>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7d6:	d308      	bcc.n	800b7ea <UART_SetConfig+0x3de>
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7de:	d204      	bcs.n	800b7ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	69ba      	ldr	r2, [r7, #24]
 800b7e6:	60da      	str	r2, [r3, #12]
 800b7e8:	e0b6      	b.n	800b958 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b7f0:	e0b2      	b.n	800b958 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7fa:	d15e      	bne.n	800b8ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b7fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b800:	2b08      	cmp	r3, #8
 800b802:	d828      	bhi.n	800b856 <UART_SetConfig+0x44a>
 800b804:	a201      	add	r2, pc, #4	; (adr r2, 800b80c <UART_SetConfig+0x400>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b831 	.word	0x0800b831
 800b810:	0800b839 	.word	0x0800b839
 800b814:	0800b841 	.word	0x0800b841
 800b818:	0800b857 	.word	0x0800b857
 800b81c:	0800b847 	.word	0x0800b847
 800b820:	0800b857 	.word	0x0800b857
 800b824:	0800b857 	.word	0x0800b857
 800b828:	0800b857 	.word	0x0800b857
 800b82c:	0800b84f 	.word	0x0800b84f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b830:	f7fc fb84 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800b834:	61f8      	str	r0, [r7, #28]
        break;
 800b836:	e014      	b.n	800b862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fc fb96 	bl	8007f68 <HAL_RCC_GetPCLK2Freq>
 800b83c:	61f8      	str	r0, [r7, #28]
        break;
 800b83e:	e010      	b.n	800b862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b840:	4b4d      	ldr	r3, [pc, #308]	; (800b978 <UART_SetConfig+0x56c>)
 800b842:	61fb      	str	r3, [r7, #28]
        break;
 800b844:	e00d      	b.n	800b862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b846:	f7fc fae1 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 800b84a:	61f8      	str	r0, [r7, #28]
        break;
 800b84c:	e009      	b.n	800b862 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b84e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b852:	61fb      	str	r3, [r7, #28]
        break;
 800b854:	e005      	b.n	800b862 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d077      	beq.n	800b958 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	005a      	lsls	r2, r3, #1
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	441a      	add	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b0f      	cmp	r3, #15
 800b882:	d916      	bls.n	800b8b2 <UART_SetConfig+0x4a6>
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88a:	d212      	bcs.n	800b8b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	f023 030f 	bic.w	r3, r3, #15
 800b894:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	085b      	lsrs	r3, r3, #1
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	f003 0307 	and.w	r3, r3, #7
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	8afb      	ldrh	r3, [r7, #22]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	8afa      	ldrh	r2, [r7, #22]
 800b8ae:	60da      	str	r2, [r3, #12]
 800b8b0:	e052      	b.n	800b958 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b8b8:	e04e      	b.n	800b958 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	d827      	bhi.n	800b912 <UART_SetConfig+0x506>
 800b8c2:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <UART_SetConfig+0x4bc>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b8ed 	.word	0x0800b8ed
 800b8cc:	0800b8f5 	.word	0x0800b8f5
 800b8d0:	0800b8fd 	.word	0x0800b8fd
 800b8d4:	0800b913 	.word	0x0800b913
 800b8d8:	0800b903 	.word	0x0800b903
 800b8dc:	0800b913 	.word	0x0800b913
 800b8e0:	0800b913 	.word	0x0800b913
 800b8e4:	0800b913 	.word	0x0800b913
 800b8e8:	0800b90b 	.word	0x0800b90b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ec:	f7fc fb26 	bl	8007f3c <HAL_RCC_GetPCLK1Freq>
 800b8f0:	61f8      	str	r0, [r7, #28]
        break;
 800b8f2:	e014      	b.n	800b91e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8f4:	f7fc fb38 	bl	8007f68 <HAL_RCC_GetPCLK2Freq>
 800b8f8:	61f8      	str	r0, [r7, #28]
        break;
 800b8fa:	e010      	b.n	800b91e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8fc:	4b1e      	ldr	r3, [pc, #120]	; (800b978 <UART_SetConfig+0x56c>)
 800b8fe:	61fb      	str	r3, [r7, #28]
        break;
 800b900:	e00d      	b.n	800b91e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b902:	f7fc fa83 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 800b906:	61f8      	str	r0, [r7, #28]
        break;
 800b908:	e009      	b.n	800b91e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b90e:	61fb      	str	r3, [r7, #28]
        break;
 800b910:	e005      	b.n	800b91e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b912:	2300      	movs	r3, #0
 800b914:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b91c:	bf00      	nop
    }

    if (pclk != 0U)
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d019      	beq.n	800b958 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	085a      	lsrs	r2, r3, #1
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	441a      	add	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	fbb2 f3f3 	udiv	r3, r2, r3
 800b936:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	2b0f      	cmp	r3, #15
 800b93c:	d909      	bls.n	800b952 <UART_SetConfig+0x546>
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b944:	d205      	bcs.n	800b952 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	b29a      	uxth	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60da      	str	r2, [r3, #12]
 800b950:	e002      	b.n	800b958 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b964:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3728      	adds	r7, #40	; 0x28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b972:	bf00      	nop
 800b974:	40008000 	.word	0x40008000
 800b978:	00f42400 	.word	0x00f42400

0800b97c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	f003 0308 	and.w	r3, r3, #8
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	f003 0302 	and.w	r3, r3, #2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00a      	beq.n	800b9ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	f003 0310 	and.w	r3, r3, #16
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00a      	beq.n	800ba2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01a      	beq.n	800ba92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba7a:	d10a      	bne.n	800ba92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	605a      	str	r2, [r3, #4]
  }
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b098      	sub	sp, #96	; 0x60
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bad0:	f7f9 fc74 	bl	80053bc <HAL_GetTick>
 800bad4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0308 	and.w	r3, r3, #8
 800bae0:	2b08      	cmp	r3, #8
 800bae2:	d12e      	bne.n	800bb42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baec:	2200      	movs	r2, #0
 800baee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f88c 	bl	800bc10 <UART_WaitOnFlagUntilTimeout>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d021      	beq.n	800bb42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	e853 3f00 	ldrex	r3, [r3]
 800bb0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb12:	653b      	str	r3, [r7, #80]	; 0x50
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb1c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e6      	bne.n	800bafe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2220      	movs	r2, #32
 800bb34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e062      	b.n	800bc08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d149      	bne.n	800bbe4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f856 	bl	800bc10 <UART_WaitOnFlagUntilTimeout>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d03c      	beq.n	800bbe4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	623b      	str	r3, [r7, #32]
   return(result);
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb88:	633b      	str	r3, [r7, #48]	; 0x30
 800bb8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb90:	e841 2300 	strex	r3, r2, [r1]
 800bb94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e6      	bne.n	800bb6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3308      	adds	r3, #8
 800bba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	e853 3f00 	ldrex	r3, [r3]
 800bbaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f023 0301 	bic.w	r3, r3, #1
 800bbb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3308      	adds	r3, #8
 800bbba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbbc:	61fa      	str	r2, [r7, #28]
 800bbbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc0:	69b9      	ldr	r1, [r7, #24]
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	e841 2300 	strex	r3, r2, [r1]
 800bbc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e5      	bne.n	800bb9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e011      	b.n	800bc08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3758      	adds	r7, #88	; 0x58
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc20:	e04f      	b.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc28:	d04b      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc2a:	f7f9 fbc7 	bl	80053bc <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	69ba      	ldr	r2, [r7, #24]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d302      	bcc.n	800bc40 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc40:	2303      	movs	r3, #3
 800bc42:	e04e      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0304 	and.w	r3, r3, #4
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d037      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b80      	cmp	r3, #128	; 0x80
 800bc56:	d034      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b40      	cmp	r3, #64	; 0x40
 800bc5c:	d031      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	f003 0308 	and.w	r3, r3, #8
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	d110      	bne.n	800bc8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2208      	movs	r2, #8
 800bc72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f8ff 	bl	800be78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2208      	movs	r2, #8
 800bc7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e029      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	69db      	ldr	r3, [r3, #28]
 800bc94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc9c:	d111      	bne.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 f8e5 	bl	800be78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e00f      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	69da      	ldr	r2, [r3, #28]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	4013      	ands	r3, r2
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	bf0c      	ite	eq
 800bcd2:	2301      	moveq	r3, #1
 800bcd4:	2300      	movne	r3, #0
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d0a0      	beq.n	800bc22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b097      	sub	sp, #92	; 0x5c
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	88fa      	ldrh	r2, [r7, #6]
 800bd04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	88fa      	ldrh	r2, [r7, #6]
 800bd0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1e:	d10e      	bne.n	800bd3e <UART_Start_Receive_IT+0x52>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d105      	bne.n	800bd34 <UART_Start_Receive_IT+0x48>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd32:	e02d      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	22ff      	movs	r2, #255	; 0xff
 800bd38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd3c:	e028      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10d      	bne.n	800bd62 <UART_Start_Receive_IT+0x76>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <UART_Start_Receive_IT+0x6c>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	22ff      	movs	r2, #255	; 0xff
 800bd52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd56:	e01b      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	227f      	movs	r2, #127	; 0x7f
 800bd5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd60:	e016      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd6a:	d10d      	bne.n	800bd88 <UART_Start_Receive_IT+0x9c>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d104      	bne.n	800bd7e <UART_Start_Receive_IT+0x92>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	227f      	movs	r2, #127	; 0x7f
 800bd78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd7c:	e008      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	223f      	movs	r2, #63	; 0x3f
 800bd82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bd86:	e003      	b.n	800bd90 <UART_Start_Receive_IT+0xa4>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2222      	movs	r2, #34	; 0x22
 800bd9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3308      	adds	r3, #8
 800bda6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	f043 0301 	orr.w	r3, r3, #1
 800bdb6:	657b      	str	r3, [r7, #84]	; 0x54
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdc0:	64ba      	str	r2, [r7, #72]	; 0x48
 800bdc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e5      	bne.n	800bda0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bddc:	d107      	bne.n	800bdee <UART_Start_Receive_IT+0x102>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d103      	bne.n	800bdee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4a21      	ldr	r2, [pc, #132]	; (800be70 <UART_Start_Receive_IT+0x184>)
 800bdea:	669a      	str	r2, [r3, #104]	; 0x68
 800bdec:	e002      	b.n	800bdf4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	4a20      	ldr	r2, [pc, #128]	; (800be74 <UART_Start_Receive_IT+0x188>)
 800bdf2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d019      	beq.n	800be30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800be10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be1a:	637b      	str	r3, [r7, #52]	; 0x34
 800be1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be22:	e841 2300 	strex	r3, r2, [r1]
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e6      	bne.n	800bdfc <UART_Start_Receive_IT+0x110>
 800be2e:	e018      	b.n	800be62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	e853 3f00 	ldrex	r3, [r3]
 800be3c:	613b      	str	r3, [r7, #16]
   return(result);
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f043 0320 	orr.w	r3, r3, #32
 800be44:	653b      	str	r3, [r7, #80]	; 0x50
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	461a      	mov	r2, r3
 800be4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be4e:	623b      	str	r3, [r7, #32]
 800be50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	69f9      	ldr	r1, [r7, #28]
 800be54:	6a3a      	ldr	r2, [r7, #32]
 800be56:	e841 2300 	strex	r3, r2, [r1]
 800be5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e6      	bne.n	800be30 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	375c      	adds	r7, #92	; 0x5c
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	0800c17d 	.word	0x0800c17d
 800be74:	0800bfc1 	.word	0x0800bfc1

0800be78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be78:	b480      	push	{r7}
 800be7a:	b095      	sub	sp, #84	; 0x54
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be9e:	643b      	str	r3, [r7, #64]	; 0x40
 800bea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e6      	bne.n	800be80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3308      	adds	r3, #8
 800beb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	6a3b      	ldr	r3, [r7, #32]
 800bebc:	e853 3f00 	ldrex	r3, [r3]
 800bec0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	f023 0301 	bic.w	r3, r3, #1
 800bec8:	64bb      	str	r3, [r7, #72]	; 0x48
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3308      	adds	r3, #8
 800bed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e5      	bne.n	800beb2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beea:	2b01      	cmp	r3, #1
 800beec:	d118      	bne.n	800bf20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	e853 3f00 	ldrex	r3, [r3]
 800befa:	60bb      	str	r3, [r7, #8]
   return(result);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f023 0310 	bic.w	r3, r3, #16
 800bf02:	647b      	str	r3, [r7, #68]	; 0x44
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf0c:	61bb      	str	r3, [r7, #24]
 800bf0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf10:	6979      	ldr	r1, [r7, #20]
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	e841 2300 	strex	r3, r2, [r1]
 800bf18:	613b      	str	r3, [r7, #16]
   return(result);
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1e6      	bne.n	800beee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2220      	movs	r2, #32
 800bf24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bf34:	bf00      	nop
 800bf36:	3754      	adds	r7, #84	; 0x54
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fa3e 	bl	800b3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	e853 3f00 	ldrex	r3, [r3]
 800bf80:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	61bb      	str	r3, [r7, #24]
 800bf94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	6979      	ldr	r1, [r7, #20]
 800bf98:	69ba      	ldr	r2, [r7, #24]
 800bf9a:	e841 2300 	strex	r3, r2, [r1]
 800bf9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e6      	bne.n	800bf74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fa0a 	bl	800b3cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfb8:	bf00      	nop
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b09c      	sub	sp, #112	; 0x70
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfd8:	2b22      	cmp	r3, #34	; 0x22
 800bfda:	f040 80be 	bne.w	800c15a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfe4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bfe8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bfec:	b2d9      	uxtb	r1, r3
 800bfee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff8:	400a      	ands	r2, r1
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c002:	1c5a      	adds	r2, r3, #1
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c00e:	b29b      	uxth	r3, r3
 800c010:	3b01      	subs	r3, #1
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c020:	b29b      	uxth	r3, r3
 800c022:	2b00      	cmp	r3, #0
 800c024:	f040 80a3 	bne.w	800c16e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c03c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c046:	65bb      	str	r3, [r7, #88]	; 0x58
 800c048:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c04c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e6      	bne.n	800c028 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06c:	f023 0301 	bic.w	r3, r3, #1
 800c070:	667b      	str	r3, [r7, #100]	; 0x64
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3308      	adds	r3, #8
 800c078:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c07a:	647a      	str	r2, [r7, #68]	; 0x44
 800c07c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e5      	bne.n	800c05a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a34      	ldr	r2, [pc, #208]	; (800c178 <UART_RxISR_8BIT+0x1b8>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d01f      	beq.n	800c0ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d018      	beq.n	800c0ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	e853 3f00 	ldrex	r3, [r3]
 800c0c6:	623b      	str	r3, [r7, #32]
   return(result);
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0ce:	663b      	str	r3, [r7, #96]	; 0x60
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0d8:	633b      	str	r3, [r7, #48]	; 0x30
 800c0da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e0:	e841 2300 	strex	r3, r2, [r1]
 800c0e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e6      	bne.n	800c0ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d12e      	bne.n	800c152 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	60fb      	str	r3, [r7, #12]
   return(result);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	461a      	mov	r2, r3
 800c116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11c:	69b9      	ldr	r1, [r7, #24]
 800c11e:	69fa      	ldr	r2, [r7, #28]
 800c120:	e841 2300 	strex	r3, r2, [r1]
 800c124:	617b      	str	r3, [r7, #20]
   return(result);
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1e6      	bne.n	800c0fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	f003 0310 	and.w	r3, r3, #16
 800c136:	2b10      	cmp	r3, #16
 800c138:	d103      	bne.n	800c142 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2210      	movs	r2, #16
 800c140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff f952 	bl	800b3f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c150:	e00d      	b.n	800c16e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fd18 	bl	800cb88 <HAL_UART_RxCpltCallback>
}
 800c158:	e009      	b.n	800c16e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	8b1b      	ldrh	r3, [r3, #24]
 800c160:	b29a      	uxth	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f042 0208 	orr.w	r2, r2, #8
 800c16a:	b292      	uxth	r2, r2
 800c16c:	831a      	strh	r2, [r3, #24]
}
 800c16e:	bf00      	nop
 800c170:	3770      	adds	r7, #112	; 0x70
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	40008000 	.word	0x40008000

0800c17c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b09c      	sub	sp, #112	; 0x70
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c18a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c194:	2b22      	cmp	r3, #34	; 0x22
 800c196:	f040 80be 	bne.w	800c316 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c1a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c1aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c1ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1be:	1c9a      	adds	r2, r3, #2
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f040 80a3 	bne.w	800c32a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ec:	e853 3f00 	ldrex	r3, [r3]
 800c1f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c202:	657b      	str	r3, [r7, #84]	; 0x54
 800c204:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1e6      	bne.n	800c1e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	f023 0301 	bic.w	r3, r3, #1
 800c22c:	663b      	str	r3, [r7, #96]	; 0x60
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3308      	adds	r3, #8
 800c234:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c236:	643a      	str	r2, [r7, #64]	; 0x40
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c23c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c23e:	e841 2300 	strex	r3, r2, [r1]
 800c242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e5      	bne.n	800c216 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a34      	ldr	r2, [pc, #208]	; (800c334 <UART_RxISR_16BIT+0x1b8>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d01f      	beq.n	800c2a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d018      	beq.n	800c2a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	e853 3f00 	ldrex	r3, [r3]
 800c282:	61fb      	str	r3, [r7, #28]
   return(result);
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c28a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	461a      	mov	r2, r3
 800c292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c294:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c296:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e6      	bne.n	800c276 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d12e      	bne.n	800c30e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f023 0310 	bic.w	r3, r3, #16
 800c2ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2d4:	61bb      	str	r3, [r7, #24]
 800c2d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d8:	6979      	ldr	r1, [r7, #20]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	e841 2300 	strex	r3, r2, [r1]
 800c2e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e6      	bne.n	800c2b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	f003 0310 	and.w	r3, r3, #16
 800c2f2:	2b10      	cmp	r3, #16
 800c2f4:	d103      	bne.n	800c2fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2210      	movs	r2, #16
 800c2fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff f874 	bl	800b3f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c30c:	e00d      	b.n	800c32a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fc3a 	bl	800cb88 <HAL_UART_RxCpltCallback>
}
 800c314:	e009      	b.n	800c32a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	8b1b      	ldrh	r3, [r3, #24]
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f042 0208 	orr.w	r2, r2, #8
 800c326:	b292      	uxth	r2, r2
 800c328:	831a      	strh	r2, [r3, #24]
}
 800c32a:	bf00      	nop
 800c32c:	3770      	adds	r7, #112	; 0x70
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	40008000 	.word	0x40008000

0800c338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <Wifi_SendRaw>:

int schlecht;

//#########################################################################################################
bool	Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 800c358:	887b      	ldrh	r3, [r7, #2]
 800c35a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35e:	d812      	bhi.n	800c386 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 800c360:	887b      	ldrh	r3, [r7, #2]
 800c362:	461a      	mov	r2, r3
 800c364:	6879      	ldr	r1, [r7, #4]
 800c366:	480a      	ldr	r0, [pc, #40]	; (800c390 <Wifi_SendRaw+0x44>)
 800c368:	f005 fb69 	bl	8011a3e <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 800c36c:	887a      	ldrh	r2, [r7, #2]
 800c36e:	2364      	movs	r3, #100	; 0x64
 800c370:	6879      	ldr	r1, [r7, #4]
 800c372:	4808      	ldr	r0, [pc, #32]	; (800c394 <Wifi_SendRaw+0x48>)
 800c374:	f7fe fc4e 	bl	800ac14 <HAL_UART_Transmit>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <Wifi_SendRaw+0x36>
			return true;
 800c37e:	2301      	movs	r3, #1
 800c380:	e002      	b.n	800c388 <Wifi_SendRaw+0x3c>
		else
			return false;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	200015ad 	.word	0x200015ad
 800c394:	20001248 	.word	0x20001248

0800c398 <Wifi_SendString>:
//#########################################################################################################
bool	Wifi_SendString(char *data)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7f3 ff65 	bl	8000270 <strlen>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ffcd 	bl	800c34c <Wifi_SendRaw>
 800c3b2:	4603      	mov	r3, r0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <Wifi_SendStringAndWait>:
//#########################################################################################################
bool	Wifi_SendStringAndWait(char *data,uint16_t DelayMs)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	807b      	strh	r3, [r7, #2]
	if(Wifi_SendRaw((uint8_t*)data,strlen(data))==false)
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7f3 ff51 	bl	8000270 <strlen>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff ffb9 	bl	800c34c <Wifi_SendRaw>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	f083 0301 	eor.w	r3, r3, #1
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <Wifi_SendStringAndWait+0x2e>
		return false;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e004      	b.n	800c3f4 <Wifi_SendStringAndWait+0x38>
	osDelay(DelayMs);
 800c3ea:	887b      	ldrh	r3, [r7, #2]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f001 ffca 	bl	800e386 <osDelay>
	return true;
 800c3f2:	2301      	movs	r3, #1
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <Wifi_WaitForString>:
//#########################################################################################################
bool	Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 800c3fc:	b40c      	push	{r2, r3}
 800c3fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c402:	b089      	sub	sp, #36	; 0x24
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
 800c40a:	466b      	mov	r3, sp
 800c40c:	461e      	mov	r6, r3
	
	if(result == NULL)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <Wifi_WaitForString+0x1c>
		return false;
 800c414:	2300      	movs	r3, #0
 800c416:	e074      	b.n	800c502 <Wifi_WaitForString+0x106>
	if(CountOfParameter == 0)
 800c418:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <Wifi_WaitForString+0x28>
		return false;
 800c420:	2300      	movs	r3, #0
 800c422:	e06e      	b.n	800c502 <Wifi_WaitForString+0x106>

	*result=0;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]

	va_list tag;
	va_start (tag,CountOfParameter);
 800c42a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c42e:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 800c430:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800c434:	460b      	mov	r3, r1
 800c436:	3b01      	subs	r3, #1
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	b2cb      	uxtb	r3, r1
 800c43c:	2200      	movs	r2, #0
 800c43e:	4698      	mov	r8, r3
 800c440:	4691      	mov	r9, r2
 800c442:	f04f 0200 	mov.w	r2, #0
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800c44e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800c452:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800c456:	b2cb      	uxtb	r3, r1
 800c458:	2200      	movs	r2, #0
 800c45a:	461c      	mov	r4, r3
 800c45c:	4615      	mov	r5, r2
 800c45e:	f04f 0200 	mov.w	r2, #0
 800c462:	f04f 0300 	mov.w	r3, #0
 800c466:	016b      	lsls	r3, r5, #5
 800c468:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800c46c:	0162      	lsls	r2, r4, #5
 800c46e:	460b      	mov	r3, r1
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	3307      	adds	r3, #7
 800c474:	08db      	lsrs	r3, r3, #3
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	ebad 0d03 	sub.w	sp, sp, r3
 800c47c:	466b      	mov	r3, sp
 800c47e:	3303      	adds	r3, #3
 800c480:	089b      	lsrs	r3, r3, #2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800c486:	2300      	movs	r3, #0
 800c488:	77fb      	strb	r3, [r7, #31]
 800c48a:	e00a      	b.n	800c4a2 <Wifi_WaitForString+0xa6>
		arg[i] = va_arg (tag, char *);	
 800c48c:	7ffa      	ldrb	r2, [r7, #31]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	1d19      	adds	r1, r3, #4
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	6819      	ldr	r1, [r3, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800c49c:	7ffb      	ldrb	r3, [r7, #31]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	77fb      	strb	r3, [r7, #31]
 800c4a2:	7ffa      	ldrb	r2, [r7, #31]
 800c4a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d3ef      	bcc.n	800c48c <Wifi_WaitForString+0x90>
	va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	e022      	b.n	800c4f8 <Wifi_WaitForString+0xfc>
	{
		osDelay(50);
 800c4b2:	2032      	movs	r0, #50	; 0x32
 800c4b4:	f001 ff67 	bl	800e386 <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	75fb      	strb	r3, [r7, #23]
 800c4bc:	e014      	b.n	800c4e8 <Wifi_WaitForString+0xec>
		{			
			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 800c4be:	7dfa      	ldrb	r2, [r7, #23]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	4812      	ldr	r0, [pc, #72]	; (800c514 <Wifi_WaitForString+0x118>)
 800c4ca:	f005 fa13 	bl	80118f4 <strstr>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d006      	beq.n	800c4e2 <Wifi_WaitForString+0xe6>
			{
				*result = mx+1;
 800c4d4:	7dfb      	ldrb	r3, [r7, #23]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	701a      	strb	r2, [r3, #0]
				return true;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e00f      	b.n	800c502 <Wifi_WaitForString+0x106>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	75fb      	strb	r3, [r7, #23]
 800c4e8:	7dfa      	ldrb	r2, [r7, #23]
 800c4ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d3e5      	bcc.n	800c4be <Wifi_WaitForString+0xc2>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	3332      	adds	r3, #50	; 0x32
 800c4f6:	61bb      	str	r3, [r7, #24]
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d3d8      	bcc.n	800c4b2 <Wifi_WaitForString+0xb6>
			}				
		}				
	}
	// timeout
	return false;
 800c500:	2300      	movs	r3, #0
 800c502:	46b5      	mov	sp, r6
	
}
 800c504:	4618      	mov	r0, r3
 800c506:	3724      	adds	r7, #36	; 0x24
 800c508:	46bd      	mov	sp, r7
 800c50a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c50e:	b002      	add	sp, #8
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	200013ad 	.word	0x200013ad

0800c518 <Wifi_ReturnString>:
//#########################################################################################################
bool	Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	460b      	mov	r3, r1
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <Wifi_ReturnString+0x18>
		return false;
 800c52c:	2300      	movs	r3, #0
 800c52e:	e02e      	b.n	800c58e <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <Wifi_ReturnString+0x22>
		return false;
 800c536:	2300      	movs	r3, #0
 800c538:	e029      	b.n	800c58e <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 800c53a:	4b17      	ldr	r3, [pc, #92]	; (800c598 <Wifi_ReturnString+0x80>)
 800c53c:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	6978      	ldr	r0, [r7, #20]
 800c542:	f005 f97b 	bl	801183c <strtok>
 800c546:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d118      	bne.n	800c580 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	701a      	strb	r2, [r3, #0]
		return false;
 800c554:	2300      	movs	r3, #0
 800c556:	e01a      	b.n	800c58e <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 800c558:	6879      	ldr	r1, [r7, #4]
 800c55a:	2000      	movs	r0, #0
 800c55c:	f005 f96e 	bl	801183c <strtok>
 800c560:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <Wifi_ReturnString+0x56>
			WantWhichOne--;
 800c568:	7afb      	ldrb	r3, [r7, #11]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 800c56e:	7afb      	ldrb	r3, [r7, #11]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d105      	bne.n	800c580 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 800c574:	6979      	ldr	r1, [r7, #20]
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f005 fa59 	bl	8011a2e <strcpy>
			return true;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e006      	b.n	800c58e <Wifi_ReturnString+0x76>
	while (str != NULL)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1e8      	bne.n	800c558 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
	return false;	
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	200013ad 	.word	0x200013ad

0800c59c <Wifi_ReturnStrings>:

//#########################################################################################################
bool	Wifi_ReturnStrings(char *InputString,char *SplitterChars,uint8_t CountOfParameter,...)
{
 800c59c:	b40c      	push	{r2, r3}
 800c59e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5a2:	b089      	sub	sp, #36	; 0x24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	466b      	mov	r3, sp
 800c5ac:	461e      	mov	r6, r3
	if(CountOfParameter == 0)
 800c5ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <Wifi_ReturnStrings+0x1e>
		return false;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e06f      	b.n	800c69a <Wifi_ReturnStrings+0xfe>
	va_list tag;
	va_start (tag,CountOfParameter);
 800c5ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c5be:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 800c5c0:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	613b      	str	r3, [r7, #16]
 800c5ca:	b2cb      	uxtb	r3, r1
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4698      	mov	r8, r3
 800c5d0:	4691      	mov	r9, r2
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	f04f 0300 	mov.w	r3, #0
 800c5da:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800c5de:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800c5e2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800c5e6:	b2cb      	uxtb	r3, r1
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	461c      	mov	r4, r3
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	f04f 0200 	mov.w	r2, #0
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	016b      	lsls	r3, r5, #5
 800c5f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800c5fc:	0162      	lsls	r2, r4, #5
 800c5fe:	460b      	mov	r3, r1
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	3307      	adds	r3, #7
 800c604:	08db      	lsrs	r3, r3, #3
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	ebad 0d03 	sub.w	sp, sp, r3
 800c60c:	466b      	mov	r3, sp
 800c60e:	3303      	adds	r3, #3
 800c610:	089b      	lsrs	r3, r3, #2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800c616:	2300      	movs	r3, #0
 800c618:	77fb      	strb	r3, [r7, #31]
 800c61a:	e00a      	b.n	800c632 <Wifi_ReturnStrings+0x96>
		arg[i] = va_arg (tag, char *);	
 800c61c:	7ffa      	ldrb	r2, [r7, #31]
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	1d19      	adds	r1, r3, #4
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	6819      	ldr	r1, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800c62c:	7ffb      	ldrb	r3, [r7, #31]
 800c62e:	3301      	adds	r3, #1
 800c630:	77fb      	strb	r3, [r7, #31]
 800c632:	7ffa      	ldrb	r2, [r7, #31]
 800c634:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c638:	429a      	cmp	r2, r3
 800c63a:	d3ef      	bcc.n	800c61c <Wifi_ReturnStrings+0x80>
  va_end (tag);
	
	char *str;
	str = strtok (InputString,SplitterChars);
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f005 f8fc 	bl	801183c <strtok>
 800c644:	61b8      	str	r0, [r7, #24]
	if(str == NULL)
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <Wifi_ReturnStrings+0xb4>
		return false;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e024      	b.n	800c69a <Wifi_ReturnStrings+0xfe>
	uint8_t i=0;
 800c650:	2300      	movs	r3, #0
 800c652:	75fb      	strb	r3, [r7, #23]
	while (str != NULL)
 800c654:	e01d      	b.n	800c692 <Wifi_ReturnStrings+0xf6>
  {
    str = strtok (NULL,SplitterChars);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	2000      	movs	r0, #0
 800c65a:	f005 f8ef 	bl	801183c <strtok>
 800c65e:	61b8      	str	r0, [r7, #24]
		if(str != NULL)
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <Wifi_ReturnStrings+0xd4>
			CountOfParameter--;
 800c666:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c66a:	3b01      	subs	r3, #1
 800c66c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		strcpy(arg[i],str);
 800c670:	7dfa      	ldrb	r2, [r7, #23]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c678:	69b9      	ldr	r1, [r7, #24]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f005 f9d7 	bl	8011a2e <strcpy>
		i++;
 800c680:	7dfb      	ldrb	r3, [r7, #23]
 800c682:	3301      	adds	r3, #1
 800c684:	75fb      	strb	r3, [r7, #23]
		if(CountOfParameter==0)
 800c686:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <Wifi_ReturnStrings+0xf6>
		{
			return true;
 800c68e:	2301      	movs	r3, #1
 800c690:	e003      	b.n	800c69a <Wifi_ReturnStrings+0xfe>
	while (str != NULL)
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1de      	bne.n	800c656 <Wifi_ReturnStrings+0xba>
		}
  }
	return false;	
 800c698:	2300      	movs	r3, #0
 800c69a:	46b5      	mov	sp, r6
	
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3724      	adds	r7, #36	; 0x24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6a6:	b002      	add	sp, #8
 800c6a8:	4770      	bx	lr
	...

0800c6ac <Wifi_ReturnInteger>:
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	607a      	str	r2, [r7, #4]
 800c6b8:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 800c6ba:	7afb      	ldrb	r3, [r7, #11]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	480a      	ldr	r0, [pc, #40]	; (800c6ec <Wifi_ReturnInteger+0x40>)
 800c6c2:	f7ff ff29 	bl	800c518 <Wifi_ReturnString>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	f083 0301 	eor.w	r3, r3, #1
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <Wifi_ReturnInteger+0x2a>
		return false;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	e006      	b.n	800c6e4 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 800c6d6:	4805      	ldr	r0, [pc, #20]	; (800c6ec <Wifi_ReturnInteger+0x40>)
 800c6d8:	f004 f970 	bl	80109bc <atoi>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	601a      	str	r2, [r3, #0]
	return true;
 800c6e2:	2301      	movs	r3, #1
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	200013ad 	.word	0x200013ad

0800c6f0 <Wifi_RemoveChar>:
	*result = atof((char*)Wifi.RxBuffer);
	return true;
}
//#########################################################################################################
void Wifi_RemoveChar(char *str, char garbage)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
	char *src, *dst;
  for (src = dst = str; *src != '\0'; src++)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	60bb      	str	r3, [r7, #8]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	e00e      	b.n	800c724 <Wifi_RemoveChar+0x34>
	{
		*dst = *src;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	781a      	ldrb	r2, [r3, #0]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	701a      	strb	r2, [r3, #0]
		if (*dst != garbage)
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	78fa      	ldrb	r2, [r7, #3]
 800c714:	429a      	cmp	r2, r3
 800c716:	d002      	beq.n	800c71e <Wifi_RemoveChar+0x2e>
			dst++;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	3301      	adds	r3, #1
 800c71c:	60bb      	str	r3, [r7, #8]
  for (src = dst = str; *src != '\0'; src++)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3301      	adds	r3, #1
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1ec      	bne.n	800c706 <Wifi_RemoveChar+0x16>
  }
  *dst = '\0';
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
}
 800c732:	bf00      	nop
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
	...

0800c740 <Wifi_RxClear>:
//#########################################################################################################
void	Wifi_RxClear(void)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 800c744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c748:	2100      	movs	r1, #0
 800c74a:	4808      	ldr	r0, [pc, #32]	; (800c76c <Wifi_RxClear+0x2c>)
 800c74c:	f005 f84f 	bl	80117ee <memset>
	Wifi.RxIndex=0;	
 800c750:	4b07      	ldr	r3, [pc, #28]	; (800c770 <Wifi_RxClear+0x30>)
 800c752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c756:	2200      	movs	r2, #0
 800c758:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 800c75c:	2201      	movs	r2, #1
 800c75e:	4904      	ldr	r1, [pc, #16]	; (800c770 <Wifi_RxClear+0x30>)
 800c760:	4804      	ldr	r0, [pc, #16]	; (800c774 <Wifi_RxClear+0x34>)
 800c762:	f7fe fae1 	bl	800ad28 <HAL_UART_Receive_IT>
}
 800c766:	bf00      	nop
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	200013ad 	.word	0x200013ad
 800c770:	200013ac 	.word	0x200013ac
 800c774:	20001248 	.word	0x20001248

0800c778 <Wifi_TxClear>:
//#########################################################################################################
void	Wifi_TxClear(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 800c77c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c780:	2100      	movs	r1, #0
 800c782:	4802      	ldr	r0, [pc, #8]	; (800c78c <Wifi_TxClear+0x14>)
 800c784:	f005 f833 	bl	80117ee <memset>
}
 800c788:	bf00      	nop
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	200015ad 	.word	0x200015ad

0800c790 <Wifi_RxCallBack>:
int i= 0;
//#########################################################################################################
void	Wifi_RxCallBack(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 800c794:	4b6a      	ldr	r3, [pc, #424]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c79a:	f893 3a18 	ldrb.w	r3, [r3, #2584]	; 0xa18
 800c79e:	f083 0301 	eor.w	r3, r3, #1
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d020      	beq.n	800c7ea <Wifi_RxCallBack+0x5a>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 800c7a8:	4b65      	ldr	r3, [pc, #404]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ae:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4b62      	ldr	r3, [pc, #392]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7b6:	781a      	ldrb	r2, [r3, #0]
 800c7b8:	4b61      	ldr	r3, [pc, #388]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7ba:	440b      	add	r3, r1
 800c7bc:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 800c7be:	4b60      	ldr	r3, [pc, #384]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c4:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c7c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7cc:	f080 80f8 	bcs.w	800c9c0 <Wifi_RxCallBack+0x230>
      Wifi.RxIndex++;
 800c7d0:	4b5b      	ldr	r3, [pc, #364]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d6:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c7da:	3301      	adds	r3, #1
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	4b58      	ldr	r3, [pc, #352]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7e4:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
 800c7e8:	e0ea      	b.n	800c9c0 <Wifi_RxCallBack+0x230>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 800c7ea:	f7f8 fde7 	bl	80053bc <HAL_GetTick>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	4b53      	ldr	r3, [pc, #332]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f6:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	; 0xa14
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	2b32      	cmp	r3, #50	; 0x32
 800c7fe:	d905      	bls.n	800c80c <Wifi_RxCallBack+0x7c>
      Wifi.RxIsData=false;
 800c800:	4b4f      	ldr	r3, [pc, #316]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c806:	2200      	movs	r2, #0
 800c808:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 800c80c:	4b4c      	ldr	r3, [pc, #304]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c812:	f8b3 3a10 	ldrh.w	r3, [r3, #2576]	; 0xa10
 800c816:	2b00      	cmp	r3, #0
 800c818:	f040 8098 	bne.w	800c94c <Wifi_RxCallBack+0x1bc>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 800c81c:	4b48      	ldr	r3, [pc, #288]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c822:	f893 3b19 	ldrb.w	r3, [r3, #2841]	; 0xb19
 800c826:	f083 0301 	eor.w	r3, r3, #1
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d039      	beq.n	800c8a4 <Wifi_RxCallBack+0x114>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 800c830:	4b43      	ldr	r3, [pc, #268]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c836:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c83a:	4619      	mov	r1, r3
 800c83c:	4b40      	ldr	r3, [pc, #256]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	4b3f      	ldr	r3, [pc, #252]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c842:	440b      	add	r3, r1
 800c844:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800c848:	3304      	adds	r3, #4
 800c84a:	701a      	strb	r2, [r3, #0]
        Wifi.RxIndexForDataTmp++;
 800c84c:	4b3c      	ldr	r3, [pc, #240]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c852:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c856:	3301      	adds	r3, #1
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	4b39      	ldr	r3, [pc, #228]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c860:	f883 2a0c 	strb.w	r2, [r3, #2572]	; 0xa0c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 800c864:	4b36      	ldr	r3, [pc, #216]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c86a:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c86e:	3b01      	subs	r3, #1
 800c870:	4a33      	ldr	r2, [pc, #204]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c872:	4413      	add	r3, r2
 800c874:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800c878:	3304      	adds	r3, #4
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b3a      	cmp	r3, #58	; 0x3a
 800c87e:	f040 809f 	bne.w	800c9c0 <Wifi_RxCallBack+0x230>
        {
          Wifi.RxDataConnectionNumber=0;
 800c882:	4b2f      	ldr	r3, [pc, #188]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2a12 	strb.w	r2, [r3, #2578]	; 0xa12
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 800c88e:	482d      	ldr	r0, [pc, #180]	; (800c944 <Wifi_RxCallBack+0x1b4>)
 800c890:	f004 f894 	bl	80109bc <atoi>
 800c894:	4603      	mov	r3, r0
 800c896:	b29a      	uxth	r2, r3
 800c898:	4b29      	ldr	r3, [pc, #164]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c89a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c89e:	f8a3 2a10 	strh.w	r2, [r3, #2576]	; 0xa10
 800c8a2:	e08d      	b.n	800c9c0 <Wifi_RxCallBack+0x230>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 800c8a4:	4b26      	ldr	r3, [pc, #152]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8aa:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4b23      	ldr	r3, [pc, #140]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	4b22      	ldr	r3, [pc, #136]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8b6:	440b      	add	r3, r1
 800c8b8:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800c8bc:	3304      	adds	r3, #4
 800c8be:	701a      	strb	r2, [r3, #0]
        Wifi.RxIndexForDataTmp++;
 800c8c0:	4b1f      	ldr	r3, [pc, #124]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c6:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	4b1c      	ldr	r3, [pc, #112]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8d4:	f883 2a0c 	strb.w	r2, [r3, #2572]	; 0xa0c
        if(Wifi.RxBufferForDataTmp[2]==',')
 800c8d8:	4b19      	ldr	r3, [pc, #100]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8de:	f893 3a06 	ldrb.w	r3, [r3, #2566]	; 0xa06
 800c8e2:	2b2c      	cmp	r3, #44	; 0x2c
 800c8e4:	d10b      	bne.n	800c8fe <Wifi_RxCallBack+0x16e>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 800c8e6:	4b16      	ldr	r3, [pc, #88]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ec:	f893 3a05 	ldrb.w	r3, [r3, #2565]	; 0xa05
 800c8f0:	3b30      	subs	r3, #48	; 0x30
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	4b12      	ldr	r3, [pc, #72]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8fa:	f883 2a12 	strb.w	r2, [r3, #2578]	; 0xa12
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 800c8fe:	4b10      	ldr	r3, [pc, #64]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c904:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d959      	bls.n	800c9c0 <Wifi_RxCallBack+0x230>
 800c90c:	4b0c      	ldr	r3, [pc, #48]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c912:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 800c916:	3b01      	subs	r3, #1
 800c918:	4a09      	ldr	r2, [pc, #36]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800c920:	3304      	adds	r3, #4
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b3a      	cmp	r3, #58	; 0x3a
 800c926:	d14b      	bne.n	800c9c0 <Wifi_RxCallBack+0x230>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 800c928:	4807      	ldr	r0, [pc, #28]	; (800c948 <Wifi_RxCallBack+0x1b8>)
 800c92a:	f004 f847 	bl	80109bc <atoi>
 800c92e:	4603      	mov	r3, r0
 800c930:	b29a      	uxth	r2, r3
 800c932:	4b03      	ldr	r3, [pc, #12]	; (800c940 <Wifi_RxCallBack+0x1b0>)
 800c934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c938:	f8a3 2a10 	strh.w	r2, [r3, #2576]	; 0xa10
 800c93c:	e040      	b.n	800c9c0 <Wifi_RxCallBack+0x230>
 800c93e:	bf00      	nop
 800c940:	200013ac 	.word	0x200013ac
 800c944:	20002db1 	.word	0x20002db1
 800c948:	20002db3 	.word	0x20002db3
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 800c94c:	4b69      	ldr	r3, [pc, #420]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c94e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c952:	f8b3 3a0e 	ldrh.w	r3, [r3, #2574]	; 0xa0e
 800c956:	4619      	mov	r1, r3
 800c958:	4b66      	ldr	r3, [pc, #408]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c95a:	781a      	ldrb	r2, [r3, #0]
 800c95c:	4b65      	ldr	r3, [pc, #404]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c95e:	440b      	add	r3, r1
 800c960:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800c964:	3304      	adds	r3, #4
 800c966:	701a      	strb	r2, [r3, #0]
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 800c968:	4b62      	ldr	r3, [pc, #392]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c96e:	f8b3 3a0e 	ldrh.w	r3, [r3, #2574]	; 0xa0e
 800c972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c976:	d20b      	bcs.n	800c990 <Wifi_RxCallBack+0x200>
        Wifi.RxIndexForData++;
 800c978:	4b5e      	ldr	r3, [pc, #376]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c97a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c97e:	f8b3 3a0e 	ldrh.w	r3, [r3, #2574]	; 0xa0e
 800c982:	3301      	adds	r3, #1
 800c984:	b29a      	uxth	r2, r3
 800c986:	4b5b      	ldr	r3, [pc, #364]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98c:	f8a3 2a0e 	strh.w	r2, [r3, #2574]	; 0xa0e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 800c990:	4b58      	ldr	r3, [pc, #352]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c996:	f8b3 2a0e 	ldrh.w	r2, [r3, #2574]	; 0xa0e
 800c99a:	4b56      	ldr	r3, [pc, #344]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c99c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9a0:	f8b3 3a10 	ldrh.w	r3, [r3, #2576]	; 0xa10
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d30b      	bcc.n	800c9c0 <Wifi_RxCallBack+0x230>
      {
        Wifi.RxIsData=false;         
 800c9a8:	4b52      	ldr	r3, [pc, #328]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
        Wifi.GotNewData=true;
 800c9b4:	4b4f      	ldr	r3, [pc, #316]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 2a19 	strb.w	r2, [r3, #2585]	; 0xa19
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	494c      	ldr	r1, [pc, #304]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9c4:	484c      	ldr	r0, [pc, #304]	; (800caf8 <Wifi_RxCallBack+0x368>)
 800c9c6:	f7fe f9af 	bl	800ad28 <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 800c9ca:	4b4a      	ldr	r3, [pc, #296]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c9d4:	2b04      	cmp	r3, #4
 800c9d6:	f240 8085 	bls.w	800cae4 <Wifi_RxCallBack+0x354>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 800c9da:	4b46      	ldr	r3, [pc, #280]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9e0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c9e4:	3b04      	subs	r3, #4
 800c9e6:	4a43      	ldr	r2, [pc, #268]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9e8:	4413      	add	r3, r2
 800c9ea:	785b      	ldrb	r3, [r3, #1]
 800c9ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c9ee:	d179      	bne.n	800cae4 <Wifi_RxCallBack+0x354>
 800c9f0:	4b40      	ldr	r3, [pc, #256]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f6:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c9fa:	3b03      	subs	r3, #3
 800c9fc:	4a3d      	ldr	r2, [pc, #244]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800c9fe:	4413      	add	r3, r2
 800ca00:	785b      	ldrb	r3, [r3, #1]
 800ca02:	2b49      	cmp	r3, #73	; 0x49
 800ca04:	d16e      	bne.n	800cae4 <Wifi_RxCallBack+0x354>
 800ca06:	4b3b      	ldr	r3, [pc, #236]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca0c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca10:	3b02      	subs	r3, #2
 800ca12:	4a38      	ldr	r2, [pc, #224]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca14:	4413      	add	r3, r2
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	2b50      	cmp	r3, #80	; 0x50
 800ca1a:	d163      	bne.n	800cae4 <Wifi_RxCallBack+0x354>
 800ca1c:	4b35      	ldr	r3, [pc, #212]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca22:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca26:	3b01      	subs	r3, #1
 800ca28:	4a32      	ldr	r2, [pc, #200]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca2a:	4413      	add	r3, r2
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b44      	cmp	r3, #68	; 0x44
 800ca30:	d158      	bne.n	800cae4 <Wifi_RxCallBack+0x354>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 800ca32:	2208      	movs	r2, #8
 800ca34:	2100      	movs	r1, #0
 800ca36:	4831      	ldr	r0, [pc, #196]	; (800cafc <Wifi_RxCallBack+0x36c>)
 800ca38:	f004 fed9 	bl	80117ee <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 800ca3c:	4b2d      	ldr	r3, [pc, #180]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca42:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca46:	3b04      	subs	r3, #4
 800ca48:	4a2a      	ldr	r2, [pc, #168]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca4a:	4413      	add	r3, r2
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 800ca50:	4b28      	ldr	r3, [pc, #160]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca56:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca5a:	3b03      	subs	r3, #3
 800ca5c:	4a25      	ldr	r2, [pc, #148]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca5e:	4413      	add	r3, r2
 800ca60:	2200      	movs	r2, #0
 800ca62:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 800ca64:	4b23      	ldr	r3, [pc, #140]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca6a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca6e:	3b02      	subs	r3, #2
 800ca70:	4a20      	ldr	r2, [pc, #128]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca72:	4413      	add	r3, r2
 800ca74:	2200      	movs	r2, #0
 800ca76:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca7e:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca82:	3b01      	subs	r3, #1
 800ca84:	4a1b      	ldr	r2, [pc, #108]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca86:	4413      	add	r3, r2
 800ca88:	2200      	movs	r2, #0
 800ca8a:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 800ca8c:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca92:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ca96:	3b04      	subs	r3, #4
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	4b16      	ldr	r3, [pc, #88]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800ca9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa0:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
      Wifi.RxIndexForData=0;
 800caa4:	4b13      	ldr	r3, [pc, #76]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800caa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caaa:	2200      	movs	r2, #0
 800caac:	f8a3 2a0e 	strh.w	r2, [r3, #2574]	; 0xa0e
      Wifi.RxIndexForDataTmp=0;
 800cab0:	4b10      	ldr	r3, [pc, #64]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800cab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab6:	2200      	movs	r2, #0
 800cab8:	f883 2a0c 	strb.w	r2, [r3, #2572]	; 0xa0c
      Wifi.RxIsData=true;
 800cabc:	4b0d      	ldr	r3, [pc, #52]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800cabe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2a18 	strb.w	r2, [r3, #2584]	; 0xa18
      Wifi.RxDataLen=0;  
 800cac8:	4b0a      	ldr	r3, [pc, #40]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800caca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cace:	2200      	movs	r2, #0
 800cad0:	f8a3 2a10 	strh.w	r2, [r3, #2576]	; 0xa10
      Wifi.RxDataLastTime = HAL_GetTick();      
 800cad4:	f7f8 fc72 	bl	80053bc <HAL_GetTick>
 800cad8:	4603      	mov	r3, r0
 800cada:	4a06      	ldr	r2, [pc, #24]	; (800caf4 <Wifi_RxCallBack+0x364>)
 800cadc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cae0:	f8c2 3a14 	str.w	r3, [r2, #2580]	; 0xa14
    }
  }
  i++;
 800cae4:	4b06      	ldr	r3, [pc, #24]	; (800cb00 <Wifi_RxCallBack+0x370>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3301      	adds	r3, #1
 800caea:	4a05      	ldr	r2, [pc, #20]	; (800cb00 <Wifi_RxCallBack+0x370>)
 800caec:	6013      	str	r3, [r2, #0]
  //--- check +IPD in At command buffer  
}
 800caee:	bf00      	nop
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	200013ac 	.word	0x200013ac
 800caf8:	20001248 	.word	0x20001248
 800cafc:	20002db0 	.word	0x20002db0
 800cb00:	20002f74 	.word	0x20002f74

0800cb04 <WifiTask>:
	Com.u8G_ID=1;
	DisplayOutput(Office, Com);
}

void WifiTask(void const * argument)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
	//StaticPrint();

	osDelay(3000);
 800cb0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800cb10:	f001 fc39 	bl	800e386 <osDelay>
	Wifi_SendStringAndWait("AT\r\n",1000);
 800cb14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cb18:	481a      	ldr	r0, [pc, #104]	; (800cb84 <WifiTask+0x80>)
 800cb1a:	f7ff fc4f 	bl	800c3bc <Wifi_SendStringAndWait>
	Wifi_SetRfPower(82);
 800cb1e:	2052      	movs	r0, #82	; 0x52
 800cb20:	f000 f88e 	bl	800cc40 <Wifi_SetRfPower>
	Wifi_TcpIp_GetMultiConnection();
 800cb24:	f000 fdac 	bl	800d680 <Wifi_TcpIp_GetMultiConnection>
	Wifi_TcpIp_Close(0);
 800cb28:	2000      	movs	r0, #0
 800cb2a:	f000 feb7 	bl	800d89c <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(1);
 800cb2e:	2001      	movs	r0, #1
 800cb30:	f000 feb4 	bl	800d89c <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(2);
 800cb34:	2002      	movs	r0, #2
 800cb36:	f000 feb1 	bl	800d89c <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(3);
 800cb3a:	2003      	movs	r0, #3
 800cb3c:	f000 feae 	bl	800d89c <Wifi_TcpIp_Close>
	Wifi_TcpIp_Close(4);
 800cb40:	2004      	movs	r0, #4
 800cb42:	f000 feab 	bl	800d89c <Wifi_TcpIp_Close>
	Wifi_TcpIp_SetMultiConnection(true);
 800cb46:	2001      	movs	r0, #1
 800cb48:	f000 fd42 	bl	800d5d0 <Wifi_TcpIp_SetMultiConnection>
	Wifi_GetMode();
 800cb4c:	f000 f91e 	bl	800cd8c <Wifi_GetMode>
	Wifi_Station_DhcpIsEnable();
 800cb50:	f000 fa84 	bl	800d05c <Wifi_Station_DhcpIsEnable>
	Wifi_UserInit();
 800cb54:	f7f5 fcb0 	bl	80024b8 <Wifi_UserInit>
	//Wifi_GetMyIp();

	//#######################
	while(1)
	{
		Wifi_GetMyIp();
 800cb58:	f000 f97c 	bl	800ce54 <Wifi_GetMyIp>
		//if((Wifi.Mode==WifiMode_SoftAp) || (Wifi.Mode==WifiMode_StationAndSoftAp))
		//Wifi_SoftAp_GetConnectedDevices();
		Wifi_TcpIp_GetConnectionStatus();
 800cb5c:	f000 fc46 	bl	800d3ec <Wifi_TcpIp_GetConnectionStatus>
		Wifi_RxClear();
 800cb60:	f7ff fdee 	bl	800c740 <Wifi_RxClear>
		for(uint8_t i=0; i< 100; i++)
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e005      	b.n	800cb76 <WifiTask+0x72>
					Wifi_UserGetUdpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);
				  if((strstr(Wifi.TcpIpConnections[ii].Type,"TCP")!=NULL) && (Wifi.RxDataConnectionNumber==Wifi.TcpIpConnections[ii].LinkId))
					Wifi_UserGetTcpData(Wifi.RxDataConnectionNumber,Wifi.RxDataLen,Wifi.RxBufferForData);
				}
			}*/
			osDelay(10);
 800cb6a:	200a      	movs	r0, #10
 800cb6c:	f001 fc0b 	bl	800e386 <osDelay>
		for(uint8_t i=0; i< 100; i++)
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	3301      	adds	r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]
 800cb76:	7bfb      	ldrb	r3, [r7, #15]
 800cb78:	2b63      	cmp	r3, #99	; 0x63
 800cb7a:	d9f6      	bls.n	800cb6a <WifiTask+0x66>
		}
		Wifi_UserProcess();
 800cb7c:	f7f5 fc20 	bl	80023c0 <Wifi_UserProcess>
		Wifi_GetMyIp();
 800cb80:	e7ea      	b.n	800cb58 <WifiTask+0x54>
 800cb82:	bf00      	nop
 800cb84:	080146cc 	.word	0x080146cc

0800cb88 <HAL_UART_RxCpltCallback>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(Debug_Pin_GPIO_Port, Debug_Pin_Pin, 1);
 800cb90:	2201      	movs	r2, #1
 800cb92:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb96:	4807      	ldr	r0, [pc, #28]	; (800cbb4 <HAL_UART_RxCpltCallback+0x2c>)
 800cb98:	f7fa fb9e 	bl	80072d8 <HAL_GPIO_WritePin>
	  Wifi_RxCallBack();
 800cb9c:	f7ff fdf8 	bl	800c790 <Wifi_RxCallBack>
	  HAL_GPIO_WritePin(Debug_Pin_GPIO_Port, Debug_Pin_Pin, 0);
 800cba0:	2200      	movs	r2, #0
 800cba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cba6:	4803      	ldr	r0, [pc, #12]	; (800cbb4 <HAL_UART_RxCpltCallback+0x2c>)
 800cba8:	f7fa fb96 	bl	80072d8 <HAL_GPIO_WritePin>
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	48000800 	.word	0x48000800

0800cbb8 <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void	Wifi_Init(osPriority	Priority)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08c      	sub	sp, #48	; 0x30
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	4918      	ldr	r1, [pc, #96]	; (800cc28 <Wifi_Init+0x70>)
 800cbc6:	4819      	ldr	r0, [pc, #100]	; (800cc2c <Wifi_Init+0x74>)
 800cbc8:	f7fe f8ae 	bl	800ad28 <HAL_UART_Receive_IT>
	Wifi_RxClear();
 800cbcc:	f7ff fdb8 	bl	800c740 <Wifi_RxClear>
	Wifi_TxClear();
 800cbd0:	f7ff fdd2 	bl	800c778 <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbd8:	2300      	movs	r3, #0
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 800cbdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f001 fbe3 	bl	800e3ae <osSemaphoreCreate>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	4a11      	ldr	r2, [pc, #68]	; (800cc30 <Wifi_Init+0x78>)
 800cbec:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 800cbee:	4b11      	ldr	r3, [pc, #68]	; (800cc34 <Wifi_Init+0x7c>)
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	4b11      	ldr	r3, [pc, #68]	; (800cc38 <Wifi_Init+0x80>)
 800cbf4:	613b      	str	r3, [r7, #16]
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	82bb      	strh	r3, [r7, #20]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	61bb      	str	r3, [r7, #24]
 800cbfe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800cc02:	61fb      	str	r3, [r7, #28]
 800cc04:	2300      	movs	r3, #0
 800cc06:	623b      	str	r3, [r7, #32]
 800cc08:	2300      	movs	r3, #0
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	2100      	movs	r1, #0
 800cc12:	4618      	mov	r0, r3
 800cc14:	f001 fb6b 	bl	800e2ee <osThreadCreate>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	4a08      	ldr	r2, [pc, #32]	; (800cc3c <Wifi_Init+0x84>)
 800cc1c:	6013      	str	r3, [r2, #0]
}
 800cc1e:	bf00      	nop
 800cc20:	3730      	adds	r7, #48	; 0x30
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	200013ac 	.word	0x200013ac
 800cc2c:	20001248 	.word	0x20001248
 800cc30:	200013a8 	.word	0x200013a8
 800cc34:	080146d4 	.word	0x080146d4
 800cc38:	0800cb05 	.word	0x0800cb05
 800cc3c:	200013a4 	.word	0x200013a4

0800cc40 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af02      	add	r7, sp, #8
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800cc4a:	4b1f      	ldr	r3, [pc, #124]	; (800ccc8 <Wifi_SetRfPower+0x88>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f04f 31ff 	mov.w	r1, #4294967295
 800cc52:	4618      	mov	r0, r3
 800cc54:	f001 fbde 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800cc5c:	f7ff fd70 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 800cc60:	79fb      	ldrb	r3, [r7, #7]
 800cc62:	461a      	mov	r2, r3
 800cc64:	4919      	ldr	r1, [pc, #100]	; (800cccc <Wifi_SetRfPower+0x8c>)
 800cc66:	481a      	ldr	r0, [pc, #104]	; (800ccd0 <Wifi_SetRfPower+0x90>)
 800cc68:	f004 fd30 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800cc6c:	4818      	ldr	r0, [pc, #96]	; (800ccd0 <Wifi_SetRfPower+0x90>)
 800cc6e:	f7ff fb93 	bl	800c398 <Wifi_SendString>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f083 0301 	eor.w	r3, r3, #1
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d115      	bne.n	800ccaa <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800cc7e:	f107 010e 	add.w	r1, r7, #14
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <Wifi_SetRfPower+0x94>)
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	4b14      	ldr	r3, [pc, #80]	; (800ccd8 <Wifi_SetRfPower+0x98>)
 800cc88:	2202      	movs	r2, #2
 800cc8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cc8e:	f7ff fbb5 	bl	800c3fc <Wifi_WaitForString>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f083 0301 	eor.w	r3, r3, #1
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d107      	bne.n	800ccae <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d006      	beq.n	800ccb2 <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 800cca4:	2301      	movs	r3, #1
 800cca6:	73fb      	strb	r3, [r7, #15]
 800cca8:	e004      	b.n	800ccb4 <Wifi_SetRfPower+0x74>
			break;
 800ccaa:	bf00      	nop
 800ccac:	e002      	b.n	800ccb4 <Wifi_SetRfPower+0x74>
			break;
 800ccae:	bf00      	nop
 800ccb0:	e000      	b.n	800ccb4 <Wifi_SetRfPower+0x74>
			break;			
 800ccb2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <Wifi_SetRfPower+0x88>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f001 fbf9 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	200013a8 	.word	0x200013a8
 800cccc:	0801472c 	.word	0x0801472c
 800ccd0:	200015ad 	.word	0x200015ad
 800ccd4:	080146f4 	.word	0x080146f4
 800ccd8:	080146f0 	.word	0x080146f0

0800ccdc <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_SetMode(WifiMode_t	WifiMode_)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	4603      	mov	r3, r0
 800cce4:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800cce6:	4b23      	ldr	r3, [pc, #140]	; (800cd74 <Wifi_SetMode+0x98>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f04f 31ff 	mov.w	r1, #4294967295
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f001 fb90 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800ccf8:	f7ff fd22 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	491d      	ldr	r1, [pc, #116]	; (800cd78 <Wifi_SetMode+0x9c>)
 800cd02:	481e      	ldr	r0, [pc, #120]	; (800cd7c <Wifi_SetMode+0xa0>)
 800cd04:	f004 fce2 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800cd08:	481c      	ldr	r0, [pc, #112]	; (800cd7c <Wifi_SetMode+0xa0>)
 800cd0a:	f7ff fb45 	bl	800c398 <Wifi_SendString>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	f083 0301 	eor.w	r3, r3, #1
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d11c      	bne.n	800cd54 <Wifi_SetMode+0x78>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800cd1a:	f107 010e 	add.w	r1, r7, #14
 800cd1e:	4b18      	ldr	r3, [pc, #96]	; (800cd80 <Wifi_SetMode+0xa4>)
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	4b18      	ldr	r3, [pc, #96]	; (800cd84 <Wifi_SetMode+0xa8>)
 800cd24:	2202      	movs	r2, #2
 800cd26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd2a:	f7ff fb67 	bl	800c3fc <Wifi_WaitForString>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	f083 0301 	eor.w	r3, r3, #1
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10e      	bne.n	800cd58 <Wifi_SetMode+0x7c>
			break;
		if(result == 2)
 800cd3a:	7bbb      	ldrb	r3, [r7, #14]
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d00d      	beq.n	800cd5c <Wifi_SetMode+0x80>
			break;			
		Wifi.Mode = WifiMode_;
 800cd40:	4b11      	ldr	r3, [pc, #68]	; (800cd88 <Wifi_SetMode+0xac>)
 800cd42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd46:	461a      	mov	r2, r3
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	f882 3a1a 	strb.w	r3, [r2, #2586]	; 0xa1a
		returnVal=true;	
 800cd4e:	2301      	movs	r3, #1
 800cd50:	73fb      	strb	r3, [r7, #15]
 800cd52:	e004      	b.n	800cd5e <Wifi_SetMode+0x82>
			break;
 800cd54:	bf00      	nop
 800cd56:	e002      	b.n	800cd5e <Wifi_SetMode+0x82>
			break;
 800cd58:	bf00      	nop
 800cd5a:	e000      	b.n	800cd5e <Wifi_SetMode+0x82>
			break;			
 800cd5c:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800cd5e:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <Wifi_SetMode+0x98>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 fba4 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	200013a8 	.word	0x200013a8
 800cd78:	0801473c 	.word	0x0801473c
 800cd7c:	200015ad 	.word	0x200015ad
 800cd80:	080146f4 	.word	0x080146f4
 800cd84:	080146f0 	.word	0x080146f0
 800cd88:	200013ac 	.word	0x200013ac

0800cd8c <Wifi_GetMode>:
//#########################################################################################################
bool	Wifi_GetMode(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800cd92:	4b29      	ldr	r3, [pc, #164]	; (800ce38 <Wifi_GetMode+0xac>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f04f 31ff 	mov.w	r1, #4294967295
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f001 fb3a 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800cda0:	2300      	movs	r3, #0
 800cda2:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800cda4:	f7ff fccc 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 800cda8:	4924      	ldr	r1, [pc, #144]	; (800ce3c <Wifi_GetMode+0xb0>)
 800cdaa:	4825      	ldr	r0, [pc, #148]	; (800ce40 <Wifi_GetMode+0xb4>)
 800cdac:	f004 fc8e 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800cdb0:	4823      	ldr	r0, [pc, #140]	; (800ce40 <Wifi_GetMode+0xb4>)
 800cdb2:	f7ff faf1 	bl	800c398 <Wifi_SendString>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	f083 0301 	eor.w	r3, r3, #1
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d12a      	bne.n	800ce18 <Wifi_GetMode+0x8c>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800cdc2:	1db9      	adds	r1, r7, #6
 800cdc4:	4b1f      	ldr	r3, [pc, #124]	; (800ce44 <Wifi_GetMode+0xb8>)
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	4b1f      	ldr	r3, [pc, #124]	; (800ce48 <Wifi_GetMode+0xbc>)
 800cdca:	2202      	movs	r2, #2
 800cdcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cdd0:	f7ff fb14 	bl	800c3fc <Wifi_WaitForString>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	f083 0301 	eor.w	r3, r3, #1
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d11d      	bne.n	800ce1c <Wifi_GetMode+0x90>
			break;
		if(result == 2)
 800cde0:	79bb      	ldrb	r3, [r7, #6]
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d01c      	beq.n	800ce20 <Wifi_GetMode+0x94>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 800cde6:	1dbb      	adds	r3, r7, #6
 800cde8:	4a18      	ldr	r2, [pc, #96]	; (800ce4c <Wifi_GetMode+0xc0>)
 800cdea:	2101      	movs	r1, #1
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fc5d 	bl	800c6ac <Wifi_ReturnInteger>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d006      	beq.n	800ce06 <Wifi_GetMode+0x7a>
			Wifi.Mode = (WifiMode_t)result ;
 800cdf8:	79ba      	ldrb	r2, [r7, #6]
 800cdfa:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <Wifi_GetMode+0xc4>)
 800cdfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce00:	f883 2a1a 	strb.w	r2, [r3, #2586]	; 0xa1a
 800ce04:	e005      	b.n	800ce12 <Wifi_GetMode+0x86>
		else
			Wifi.Mode = WifiMode_Error;
 800ce06:	4b12      	ldr	r3, [pc, #72]	; (800ce50 <Wifi_GetMode+0xc4>)
 800ce08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2a1a 	strb.w	r2, [r3, #2586]	; 0xa1a
		returnVal=true;	
 800ce12:	2301      	movs	r3, #1
 800ce14:	71fb      	strb	r3, [r7, #7]
 800ce16:	e004      	b.n	800ce22 <Wifi_GetMode+0x96>
			break;
 800ce18:	bf00      	nop
 800ce1a:	e002      	b.n	800ce22 <Wifi_GetMode+0x96>
			break;
 800ce1c:	bf00      	nop
 800ce1e:	e000      	b.n	800ce22 <Wifi_GetMode+0x96>
			break;			
 800ce20:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800ce22:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <Wifi_GetMode+0xac>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f001 fb42 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	200013a8 	.word	0x200013a8
 800ce3c:	08014750 	.word	0x08014750
 800ce40:	200015ad 	.word	0x200015ad
 800ce44:	080146f4 	.word	0x080146f4
 800ce48:	080146f0 	.word	0x080146f0
 800ce4c:	08014764 	.word	0x08014764
 800ce50:	200013ac 	.word	0x200013ac

0800ce54 <Wifi_GetMyIp>:
//#########################################################################################################
bool	Wifi_GetMyIp(void)
{	
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800ce5a:	4b42      	ldr	r3, [pc, #264]	; (800cf64 <Wifi_GetMyIp+0x110>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f04f 31ff 	mov.w	r1, #4294967295
 800ce62:	4618      	mov	r0, r3
 800ce64:	f001 fad6 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800ce6c:	f7ff fc68 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIFSR\r\n");
 800ce70:	493d      	ldr	r1, [pc, #244]	; (800cf68 <Wifi_GetMyIp+0x114>)
 800ce72:	483e      	ldr	r0, [pc, #248]	; (800cf6c <Wifi_GetMyIp+0x118>)
 800ce74:	f004 fc2a 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800ce78:	483c      	ldr	r0, [pc, #240]	; (800cf6c <Wifi_GetMyIp+0x118>)
 800ce7a:	f7ff fa8d 	bl	800c398 <Wifi_SendString>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	f083 0301 	eor.w	r3, r3, #1
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d153      	bne.n	800cf32 <Wifi_GetMyIp+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800ce8a:	1df9      	adds	r1, r7, #7
 800ce8c:	4b38      	ldr	r3, [pc, #224]	; (800cf70 <Wifi_GetMyIp+0x11c>)
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4b38      	ldr	r3, [pc, #224]	; (800cf74 <Wifi_GetMyIp+0x120>)
 800ce92:	2202      	movs	r2, #2
 800ce94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce98:	f7ff fab0 	bl	800c3fc <Wifi_WaitForString>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	f083 0301 	eor.w	r3, r3, #1
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d146      	bne.n	800cf36 <Wifi_GetMyIp+0xe2>
			break;
		if(result == 2)
 800cea8:	79fb      	ldrb	r3, [r7, #7]
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d045      	beq.n	800cf3a <Wifi_GetMyIp+0xe6>
			break;		
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:APIP,\"%[^\"]",Wifi.MyIP);
 800ceae:	4a32      	ldr	r2, [pc, #200]	; (800cf78 <Wifi_GetMyIp+0x124>)
 800ceb0:	4932      	ldr	r1, [pc, #200]	; (800cf7c <Wifi_GetMyIp+0x128>)
 800ceb2:	4833      	ldr	r0, [pc, #204]	; (800cf80 <Wifi_GetMyIp+0x12c>)
 800ceb4:	f004 fc2a 	bl	801170c <siscanf>
		sscanf((char*)Wifi.RxBuffer,"AT+CIFSR\r\r\n+CIFSR:STAIP,\"%[^\"]",Wifi.MyIP);
 800ceb8:	4a2f      	ldr	r2, [pc, #188]	; (800cf78 <Wifi_GetMyIp+0x124>)
 800ceba:	4932      	ldr	r1, [pc, #200]	; (800cf84 <Wifi_GetMyIp+0x130>)
 800cebc:	4830      	ldr	r0, [pc, #192]	; (800cf80 <Wifi_GetMyIp+0x12c>)
 800cebe:	f004 fc25 	bl	801170c <siscanf>
    
		Wifi_RxClear();
 800cec2:	f7ff fc3d 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTA?\r\n");
 800cec6:	4930      	ldr	r1, [pc, #192]	; (800cf88 <Wifi_GetMyIp+0x134>)
 800cec8:	4828      	ldr	r0, [pc, #160]	; (800cf6c <Wifi_GetMyIp+0x118>)
 800ceca:	f004 fbff 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800cece:	4827      	ldr	r0, [pc, #156]	; (800cf6c <Wifi_GetMyIp+0x118>)
 800ced0:	f7ff fa62 	bl	800c398 <Wifi_SendString>
 800ced4:	4603      	mov	r3, r0
 800ced6:	f083 0301 	eor.w	r3, r3, #1
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d12e      	bne.n	800cf3e <Wifi_GetMyIp+0xea>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800cee0:	1df9      	adds	r1, r7, #7
 800cee2:	4b23      	ldr	r3, [pc, #140]	; (800cf70 <Wifi_GetMyIp+0x11c>)
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4b23      	ldr	r3, [pc, #140]	; (800cf74 <Wifi_GetMyIp+0x120>)
 800cee8:	2202      	movs	r2, #2
 800ceea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ceee:	f7ff fa85 	bl	800c3fc <Wifi_WaitForString>
 800cef2:	4603      	mov	r3, r0
 800cef4:	f083 0301 	eor.w	r3, r3, #1
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d121      	bne.n	800cf42 <Wifi_GetMyIp+0xee>
			break;
		if(result == 2)
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d020      	beq.n	800cf46 <Wifi_GetMyIp+0xf2>
			break;	
    
    char *str=strstr((char*)Wifi.RxBuffer,"gateway:");
 800cf04:	4921      	ldr	r1, [pc, #132]	; (800cf8c <Wifi_GetMyIp+0x138>)
 800cf06:	481e      	ldr	r0, [pc, #120]	; (800cf80 <Wifi_GetMyIp+0x12c>)
 800cf08:	f004 fcf4 	bl	80118f4 <strstr>
 800cf0c:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d01a      	beq.n	800cf4a <Wifi_GetMyIp+0xf6>
      break;
    if(Wifi_ReturnStrings(str,"\"",1,Wifi.MyGateWay)==false)
 800cf14:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <Wifi_GetMyIp+0x13c>)
 800cf16:	2201      	movs	r2, #1
 800cf18:	491e      	ldr	r1, [pc, #120]	; (800cf94 <Wifi_GetMyIp+0x140>)
 800cf1a:	68b8      	ldr	r0, [r7, #8]
 800cf1c:	f7ff fb3e 	bl	800c59c <Wifi_ReturnStrings>
 800cf20:	4603      	mov	r3, r0
 800cf22:	f083 0301 	eor.w	r3, r3, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d110      	bne.n	800cf4e <Wifi_GetMyIp+0xfa>
      break;    
    
		returnVal=true;	
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	73fb      	strb	r3, [r7, #15]
 800cf30:	e00e      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
			break;
 800cf32:	bf00      	nop
 800cf34:	e00c      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
			break;
 800cf36:	bf00      	nop
 800cf38:	e00a      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
			break;		
 800cf3a:	bf00      	nop
 800cf3c:	e008      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
			break;
 800cf3e:	bf00      	nop
 800cf40:	e006      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
			break;
 800cf42:	bf00      	nop
 800cf44:	e004      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
			break;	
 800cf46:	bf00      	nop
 800cf48:	e002      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
      break;
 800cf4a:	bf00      	nop
 800cf4c:	e000      	b.n	800cf50 <Wifi_GetMyIp+0xfc>
      break;    
 800cf4e:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800cf50:	4b04      	ldr	r3, [pc, #16]	; (800cf64 <Wifi_GetMyIp+0x110>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f001 faab 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	200013a8 	.word	0x200013a8
 800cf68:	08014768 	.word	0x08014768
 800cf6c:	200015ad 	.word	0x200015ad
 800cf70:	080146f4 	.word	0x080146f4
 800cf74:	080146f0 	.word	0x080146f0
 800cf78:	20002dc7 	.word	0x20002dc7
 800cf7c:	08014774 	.word	0x08014774
 800cf80:	200013ad 	.word	0x200013ad
 800cf84:	08014794 	.word	0x08014794
 800cf88:	080147b4 	.word	0x080147b4
 800cf8c:	080147c4 	.word	0x080147c4
 800cf90:	20002dd7 	.word	0x20002dd7
 800cf94:	080147d0 	.word	0x080147d0

0800cf98 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800cfa4:	4b26      	ldr	r3, [pc, #152]	; (800d040 <Wifi_Station_ConnectToAp+0xa8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f04f 31ff 	mov.w	r1, #4294967295
 800cfac:	4618      	mov	r0, r3
 800cfae:	f001 fa31 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 800cfb6:	f7ff fbc3 	bl	800c740 <Wifi_RxClear>
		if(MAC==NULL)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <Wifi_Station_ConnectToAp+0x36>
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	491f      	ldr	r1, [pc, #124]	; (800d044 <Wifi_Station_ConnectToAp+0xac>)
 800cfc6:	4820      	ldr	r0, [pc, #128]	; (800d048 <Wifi_Station_ConnectToAp+0xb0>)
 800cfc8:	f004 fb80 	bl	80116cc <siprintf>
 800cfcc:	e007      	b.n	800cfde <Wifi_Station_ConnectToAp+0x46>
		else
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	491d      	ldr	r1, [pc, #116]	; (800d04c <Wifi_Station_ConnectToAp+0xb4>)
 800cfd8:	481b      	ldr	r0, [pc, #108]	; (800d048 <Wifi_Station_ConnectToAp+0xb0>)
 800cfda:	f004 fb77 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800cfde:	481a      	ldr	r0, [pc, #104]	; (800d048 <Wifi_Station_ConnectToAp+0xb0>)
 800cfe0:	f7ff f9da 	bl	800c398 <Wifi_SendString>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	f083 0301 	eor.w	r3, r3, #1
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d117      	bne.n	800d020 <Wifi_Station_ConnectToAp+0x88>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 800cff0:	f107 0116 	add.w	r1, r7, #22
 800cff4:	4b16      	ldr	r3, [pc, #88]	; (800d050 <Wifi_Station_ConnectToAp+0xb8>)
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	4b16      	ldr	r3, [pc, #88]	; (800d054 <Wifi_Station_ConnectToAp+0xbc>)
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	4b16      	ldr	r3, [pc, #88]	; (800d058 <Wifi_Station_ConnectToAp+0xc0>)
 800cffe:	2203      	movs	r2, #3
 800d000:	f64e 2060 	movw	r0, #60000	; 0xea60
 800d004:	f7ff f9fa 	bl	800c3fc <Wifi_WaitForString>
 800d008:	4603      	mov	r3, r0
 800d00a:	f083 0301 	eor.w	r3, r3, #1
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d107      	bne.n	800d024 <Wifi_Station_ConnectToAp+0x8c>
			break;
		if( result > 1)
 800d014:	7dbb      	ldrb	r3, [r7, #22]
 800d016:	2b01      	cmp	r3, #1
 800d018:	d806      	bhi.n	800d028 <Wifi_Station_ConnectToAp+0x90>
			break;		
		returnVal=true;	
 800d01a:	2301      	movs	r3, #1
 800d01c:	75fb      	strb	r3, [r7, #23]
 800d01e:	e004      	b.n	800d02a <Wifi_Station_ConnectToAp+0x92>
			break;
 800d020:	bf00      	nop
 800d022:	e002      	b.n	800d02a <Wifi_Station_ConnectToAp+0x92>
			break;
 800d024:	bf00      	nop
 800d026:	e000      	b.n	800d02a <Wifi_Station_ConnectToAp+0x92>
			break;		
 800d028:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d02a:	4b05      	ldr	r3, [pc, #20]	; (800d040 <Wifi_Station_ConnectToAp+0xa8>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4618      	mov	r0, r3
 800d030:	f001 fa3e 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800d034:	7dfb      	ldrb	r3, [r7, #23]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	200013a8 	.word	0x200013a8
 800d044:	080147d4 	.word	0x080147d4
 800d048:	200015ad 	.word	0x200015ad
 800d04c:	080147f0 	.word	0x080147f0
 800d050:	08014818 	.word	0x08014818
 800d054:	08014824 	.word	0x08014824
 800d058:	08014810 	.word	0x08014810

0800d05c <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d062:	4b46      	ldr	r3, [pc, #280]	; (800d17c <Wifi_Station_DhcpIsEnable+0x120>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f04f 31ff 	mov.w	r1, #4294967295
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 f9d2 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d070:	2300      	movs	r3, #0
 800d072:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800d074:	f7ff fb64 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 800d078:	4941      	ldr	r1, [pc, #260]	; (800d180 <Wifi_Station_DhcpIsEnable+0x124>)
 800d07a:	4842      	ldr	r0, [pc, #264]	; (800d184 <Wifi_Station_DhcpIsEnable+0x128>)
 800d07c:	f004 fb26 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d080:	4840      	ldr	r0, [pc, #256]	; (800d184 <Wifi_Station_DhcpIsEnable+0x128>)
 800d082:	f7ff f989 	bl	800c398 <Wifi_SendString>
 800d086:	4603      	mov	r3, r0
 800d088:	f083 0301 	eor.w	r3, r3, #1
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d163      	bne.n	800d15a <Wifi_Station_DhcpIsEnable+0xfe>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d092:	1db9      	adds	r1, r7, #6
 800d094:	4b3c      	ldr	r3, [pc, #240]	; (800d188 <Wifi_Station_DhcpIsEnable+0x12c>)
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	4b3c      	ldr	r3, [pc, #240]	; (800d18c <Wifi_Station_DhcpIsEnable+0x130>)
 800d09a:	2202      	movs	r2, #2
 800d09c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0a0:	f7ff f9ac 	bl	800c3fc <Wifi_WaitForString>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	f083 0301 	eor.w	r3, r3, #1
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d156      	bne.n	800d15e <Wifi_Station_DhcpIsEnable+0x102>
			break;
		if(result == 2)
 800d0b0:	79bb      	ldrb	r3, [r7, #6]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d055      	beq.n	800d162 <Wifi_Station_DhcpIsEnable+0x106>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 800d0b6:	1dbb      	adds	r3, r7, #6
 800d0b8:	4a35      	ldr	r2, [pc, #212]	; (800d190 <Wifi_Station_DhcpIsEnable+0x134>)
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7ff faf5 	bl	800c6ac <Wifi_ReturnInteger>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f083 0301 	eor.w	r3, r3, #1
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d14b      	bne.n	800d166 <Wifi_Station_DhcpIsEnable+0x10a>
			break;
		switch(result)
 800d0ce:	79bb      	ldrb	r3, [r7, #6]
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d83f      	bhi.n	800d154 <Wifi_Station_DhcpIsEnable+0xf8>
 800d0d4:	a201      	add	r2, pc, #4	; (adr r2, 800d0dc <Wifi_Station_DhcpIsEnable+0x80>)
 800d0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0da:	bf00      	nop
 800d0dc:	0800d0ed 	.word	0x0800d0ed
 800d0e0:	0800d107 	.word	0x0800d107
 800d0e4:	0800d121 	.word	0x0800d121
 800d0e8:	0800d13b 	.word	0x0800d13b
		{
			case 0:
				Wifi.StationDhcp=false;
 800d0ec:	4b29      	ldr	r3, [pc, #164]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 2a3b 	strb.w	r2, [r3, #2619]	; 0xa3b
				Wifi.SoftApDhcp=false;				
 800d0f8:	4b26      	ldr	r3, [pc, #152]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2a4c 	strb.w	r2, [r3, #2636]	; 0xa4c
			break;
 800d104:	e026      	b.n	800d154 <Wifi_Station_DhcpIsEnable+0xf8>
			case 1:
				Wifi.StationDhcp=false;
 800d106:	4b23      	ldr	r3, [pc, #140]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 2a3b 	strb.w	r2, [r3, #2619]	; 0xa3b
				Wifi.SoftApDhcp=true;				
 800d112:	4b20      	ldr	r3, [pc, #128]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2a4c 	strb.w	r2, [r3, #2636]	; 0xa4c
			break;
 800d11e:	e019      	b.n	800d154 <Wifi_Station_DhcpIsEnable+0xf8>
			case 2:
				Wifi.StationDhcp=true;
 800d120:	4b1c      	ldr	r3, [pc, #112]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2a3b 	strb.w	r2, [r3, #2619]	; 0xa3b
				Wifi.SoftApDhcp=false;				
 800d12c:	4b19      	ldr	r3, [pc, #100]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d132:	2200      	movs	r2, #0
 800d134:	f883 2a4c 	strb.w	r2, [r3, #2636]	; 0xa4c
			break;
 800d138:	e00c      	b.n	800d154 <Wifi_Station_DhcpIsEnable+0xf8>
			case 3:
				Wifi.StationDhcp=true;
 800d13a:	4b16      	ldr	r3, [pc, #88]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2a3b 	strb.w	r2, [r3, #2619]	; 0xa3b
				Wifi.SoftApDhcp=true;				
 800d146:	4b13      	ldr	r3, [pc, #76]	; (800d194 <Wifi_Station_DhcpIsEnable+0x138>)
 800d148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2a4c 	strb.w	r2, [r3, #2636]	; 0xa4c
			break;			
 800d152:	bf00      	nop
		}
		returnVal=true;	
 800d154:	2301      	movs	r3, #1
 800d156:	71fb      	strb	r3, [r7, #7]
 800d158:	e006      	b.n	800d168 <Wifi_Station_DhcpIsEnable+0x10c>
			break;
 800d15a:	bf00      	nop
 800d15c:	e004      	b.n	800d168 <Wifi_Station_DhcpIsEnable+0x10c>
			break;
 800d15e:	bf00      	nop
 800d160:	e002      	b.n	800d168 <Wifi_Station_DhcpIsEnable+0x10c>
			break;		
 800d162:	bf00      	nop
 800d164:	e000      	b.n	800d168 <Wifi_Station_DhcpIsEnable+0x10c>
			break;
 800d166:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d168:	4b04      	ldr	r3, [pc, #16]	; (800d17c <Wifi_Station_DhcpIsEnable+0x120>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f001 f99f 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800d172:	79fb      	ldrb	r3, [r7, #7]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	200013a8 	.word	0x200013a8
 800d180:	08014854 	.word	0x08014854
 800d184:	200015ad 	.word	0x200015ad
 800d188:	080146f4 	.word	0x080146f4
 800d18c:	080146f0 	.word	0x080146f0
 800d190:	08014764 	.word	0x08014764
 800d194:	200013ac 	.word	0x200013ac

0800d198 <Wifi_SoftAp_GetConnectedDevices>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_SoftAp_GetConnectedDevices(void)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08c      	sub	sp, #48	; 0x30
 800d19c:	af0a      	add	r7, sp, #40	; 0x28
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d19e:	4b52      	ldr	r3, [pc, #328]	; (800d2e8 <Wifi_SoftAp_GetConnectedDevices+0x150>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f04f 31ff 	mov.w	r1, #4294967295
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f001 f934 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800d1b0:	f7ff fac6 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWLIF\r\n");
 800d1b4:	494d      	ldr	r1, [pc, #308]	; (800d2ec <Wifi_SoftAp_GetConnectedDevices+0x154>)
 800d1b6:	484e      	ldr	r0, [pc, #312]	; (800d2f0 <Wifi_SoftAp_GetConnectedDevices+0x158>)
 800d1b8:	f004 fa88 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d1bc:	484c      	ldr	r0, [pc, #304]	; (800d2f0 <Wifi_SoftAp_GetConnectedDevices+0x158>)
 800d1be:	f7ff f8eb 	bl	800c398 <Wifi_SendString>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	f083 0301 	eor.w	r3, r3, #1
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d17c      	bne.n	800d2c8 <Wifi_SoftAp_GetConnectedDevices+0x130>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d1ce:	1d79      	adds	r1, r7, #5
 800d1d0:	4b48      	ldr	r3, [pc, #288]	; (800d2f4 <Wifi_SoftAp_GetConnectedDevices+0x15c>)
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4b48      	ldr	r3, [pc, #288]	; (800d2f8 <Wifi_SoftAp_GetConnectedDevices+0x160>)
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d1dc:	f7ff f90e 	bl	800c3fc <Wifi_WaitForString>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	f083 0301 	eor.w	r3, r3, #1
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d16f      	bne.n	800d2cc <Wifi_SoftAp_GetConnectedDevices+0x134>
			break;
		if(result == 2)
 800d1ec:	797b      	ldrb	r3, [r7, #5]
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d06e      	beq.n	800d2d0 <Wifi_SoftAp_GetConnectedDevices+0x138>
			break;		
		Wifi_RemoveChar((char*)Wifi.RxBuffer,'\r');
 800d1f2:	210d      	movs	r1, #13
 800d1f4:	4841      	ldr	r0, [pc, #260]	; (800d2fc <Wifi_SoftAp_GetConnectedDevices+0x164>)
 800d1f6:	f7ff fa7b 	bl	800c6f0 <Wifi_RemoveChar>
    Wifi_ReturnStrings((char*)Wifi.RxBuffer,"\n,",10,Wifi.SoftApConnectedDevicesIp[0],Wifi.SoftApConnectedDevicesMac[0],Wifi.SoftApConnectedDevicesIp[1],Wifi.SoftApConnectedDevicesMac[1],Wifi.SoftApConnectedDevicesIp[2],Wifi.SoftApConnectedDevicesMac[2],Wifi.SoftApConnectedDevicesIp[3],Wifi.SoftApConnectedDevicesMac[3],Wifi.SoftApConnectedDevicesIp[4],Wifi.SoftApConnectedDevicesMac[4]);
 800d1fa:	4b41      	ldr	r3, [pc, #260]	; (800d300 <Wifi_SoftAp_GetConnectedDevices+0x168>)
 800d1fc:	9308      	str	r3, [sp, #32]
 800d1fe:	4b41      	ldr	r3, [pc, #260]	; (800d304 <Wifi_SoftAp_GetConnectedDevices+0x16c>)
 800d200:	9307      	str	r3, [sp, #28]
 800d202:	4b41      	ldr	r3, [pc, #260]	; (800d308 <Wifi_SoftAp_GetConnectedDevices+0x170>)
 800d204:	9306      	str	r3, [sp, #24]
 800d206:	4b41      	ldr	r3, [pc, #260]	; (800d30c <Wifi_SoftAp_GetConnectedDevices+0x174>)
 800d208:	9305      	str	r3, [sp, #20]
 800d20a:	4b41      	ldr	r3, [pc, #260]	; (800d310 <Wifi_SoftAp_GetConnectedDevices+0x178>)
 800d20c:	9304      	str	r3, [sp, #16]
 800d20e:	4b41      	ldr	r3, [pc, #260]	; (800d314 <Wifi_SoftAp_GetConnectedDevices+0x17c>)
 800d210:	9303      	str	r3, [sp, #12]
 800d212:	4b41      	ldr	r3, [pc, #260]	; (800d318 <Wifi_SoftAp_GetConnectedDevices+0x180>)
 800d214:	9302      	str	r3, [sp, #8]
 800d216:	4b41      	ldr	r3, [pc, #260]	; (800d31c <Wifi_SoftAp_GetConnectedDevices+0x184>)
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	4b41      	ldr	r3, [pc, #260]	; (800d320 <Wifi_SoftAp_GetConnectedDevices+0x188>)
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	4b41      	ldr	r3, [pc, #260]	; (800d324 <Wifi_SoftAp_GetConnectedDevices+0x18c>)
 800d220:	220a      	movs	r2, #10
 800d222:	4941      	ldr	r1, [pc, #260]	; (800d328 <Wifi_SoftAp_GetConnectedDevices+0x190>)
 800d224:	4835      	ldr	r0, [pc, #212]	; (800d2fc <Wifi_SoftAp_GetConnectedDevices+0x164>)
 800d226:	f7ff f9b9 	bl	800c59c <Wifi_ReturnStrings>
		for(uint8_t i=0 ; i<6 ; i++)
 800d22a:	2300      	movs	r3, #0
 800d22c:	71bb      	strb	r3, [r7, #6]
 800d22e:	e045      	b.n	800d2bc <Wifi_SoftAp_GetConnectedDevices+0x124>
    {
      if( (Wifi.SoftApConnectedDevicesIp[i][0]<'0') || (Wifi.SoftApConnectedDevicesIp[i][0]>'9'))
 800d230:	79bb      	ldrb	r3, [r7, #6]
 800d232:	4a3e      	ldr	r2, [pc, #248]	; (800d32c <Wifi_SoftAp_GetConnectedDevices+0x194>)
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	4413      	add	r3, r2
 800d238:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 800d23c:	330d      	adds	r3, #13
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b2f      	cmp	r3, #47	; 0x2f
 800d242:	d909      	bls.n	800d258 <Wifi_SoftAp_GetConnectedDevices+0xc0>
 800d244:	79bb      	ldrb	r3, [r7, #6]
 800d246:	4a39      	ldr	r2, [pc, #228]	; (800d32c <Wifi_SoftAp_GetConnectedDevices+0x194>)
 800d248:	011b      	lsls	r3, r3, #4
 800d24a:	4413      	add	r3, r2
 800d24c:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 800d250:	330d      	adds	r3, #13
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	2b39      	cmp	r3, #57	; 0x39
 800d256:	d908      	bls.n	800d26a <Wifi_SoftAp_GetConnectedDevices+0xd2>
        Wifi.SoftApConnectedDevicesIp[i][0]=0;      
 800d258:	79bb      	ldrb	r3, [r7, #6]
 800d25a:	4a34      	ldr	r2, [pc, #208]	; (800d32c <Wifi_SoftAp_GetConnectedDevices+0x194>)
 800d25c:	011b      	lsls	r3, r3, #4
 800d25e:	4413      	add	r3, r2
 800d260:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 800d264:	330d      	adds	r3, #13
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]
      if( (Wifi.SoftApConnectedDevicesMac[i][0]<'0') || (Wifi.SoftApConnectedDevicesMac[i][0]>'9'))
 800d26a:	79ba      	ldrb	r2, [r7, #6]
 800d26c:	492f      	ldr	r1, [pc, #188]	; (800d32c <Wifi_SoftAp_GetConnectedDevices+0x194>)
 800d26e:	4613      	mov	r3, r2
 800d270:	00db      	lsls	r3, r3, #3
 800d272:	4413      	add	r3, r2
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	440b      	add	r3, r1
 800d278:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 800d27c:	330d      	adds	r3, #13
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b2f      	cmp	r3, #47	; 0x2f
 800d282:	d90c      	bls.n	800d29e <Wifi_SoftAp_GetConnectedDevices+0x106>
 800d284:	79ba      	ldrb	r2, [r7, #6]
 800d286:	4929      	ldr	r1, [pc, #164]	; (800d32c <Wifi_SoftAp_GetConnectedDevices+0x194>)
 800d288:	4613      	mov	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	4413      	add	r3, r2
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	440b      	add	r3, r1
 800d292:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 800d296:	330d      	adds	r3, #13
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b39      	cmp	r3, #57	; 0x39
 800d29c:	d90b      	bls.n	800d2b6 <Wifi_SoftAp_GetConnectedDevices+0x11e>
        Wifi.SoftApConnectedDevicesMac[i][0]=0;      
 800d29e:	79ba      	ldrb	r2, [r7, #6]
 800d2a0:	4922      	ldr	r1, [pc, #136]	; (800d32c <Wifi_SoftAp_GetConnectedDevices+0x194>)
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	4413      	add	r3, r2
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	440b      	add	r3, r1
 800d2ac:	f503 53d5 	add.w	r3, r3, #6816	; 0x1aa0
 800d2b0:	330d      	adds	r3, #13
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0 ; i<6 ; i++)
 800d2b6:	79bb      	ldrb	r3, [r7, #6]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	71bb      	strb	r3, [r7, #6]
 800d2bc:	79bb      	ldrb	r3, [r7, #6]
 800d2be:	2b05      	cmp	r3, #5
 800d2c0:	d9b6      	bls.n	800d230 <Wifi_SoftAp_GetConnectedDevices+0x98>
    }
    
		returnVal=true;	
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	71fb      	strb	r3, [r7, #7]
 800d2c6:	e004      	b.n	800d2d2 <Wifi_SoftAp_GetConnectedDevices+0x13a>
			break;
 800d2c8:	bf00      	nop
 800d2ca:	e002      	b.n	800d2d2 <Wifi_SoftAp_GetConnectedDevices+0x13a>
			break;
 800d2cc:	bf00      	nop
 800d2ce:	e000      	b.n	800d2d2 <Wifi_SoftAp_GetConnectedDevices+0x13a>
			break;		
 800d2d0:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d2d2:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <Wifi_SoftAp_GetConnectedDevices+0x150>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 f8ea 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;			
 800d2dc:	79fb      	ldrb	r3, [r7, #7]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	200013a8 	.word	0x200013a8
 800d2ec:	08014888 	.word	0x08014888
 800d2f0:	200015ad 	.word	0x200015ad
 800d2f4:	080146f4 	.word	0x080146f4
 800d2f8:	080146f0 	.word	0x080146f0
 800d2fc:	200013ad 	.word	0x200013ad
 800d300:	20002ea1 	.word	0x20002ea1
 800d304:	20002e39 	.word	0x20002e39
 800d308:	20002e8f 	.word	0x20002e8f
 800d30c:	20002e29 	.word	0x20002e29
 800d310:	20002e7d 	.word	0x20002e7d
 800d314:	20002e19 	.word	0x20002e19
 800d318:	20002e6b 	.word	0x20002e6b
 800d31c:	20002e09 	.word	0x20002e09
 800d320:	20002e59 	.word	0x20002e59
 800d324:	20002df9 	.word	0x20002df9
 800d328:	08014894 	.word	0x08014894
 800d32c:	200013ac 	.word	0x200013ac

0800d330 <Wifi_SoftAp_Create>:
//#########################################################################################################
bool  Wifi_SoftAp_Create(char *SSID,char *password,uint8_t channel,WifiEncryptionType_t WifiEncryptionType,uint8_t MaxConnections_1_to_4,bool HiddenSSID)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b08a      	sub	sp, #40	; 0x28
 800d334:	af04      	add	r7, sp, #16
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	4611      	mov	r1, r2
 800d33c:	461a      	mov	r2, r3
 800d33e:	460b      	mov	r3, r1
 800d340:	71fb      	strb	r3, [r7, #7]
 800d342:	4613      	mov	r3, r2
 800d344:	71bb      	strb	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d346:	4b24      	ldr	r3, [pc, #144]	; (800d3d8 <Wifi_SoftAp_Create+0xa8>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f04f 31ff 	mov.w	r1, #4294967295
 800d34e:	4618      	mov	r0, r3
 800d350:	f001 f860 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d354:	2300      	movs	r3, #0
 800d356:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 800d358:	f7ff f9f2 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWSAP=\"%s\",\"%s\",%d,%d,%d,%d\r\n",SSID,password,channel,WifiEncryptionType,MaxConnections_1_to_4,HiddenSSID);
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	79ba      	ldrb	r2, [r7, #6]
 800d360:	f897 1020 	ldrb.w	r1, [r7, #32]
 800d364:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800d368:	9003      	str	r0, [sp, #12]
 800d36a:	9102      	str	r1, [sp, #8]
 800d36c:	9201      	str	r2, [sp, #4]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	4919      	ldr	r1, [pc, #100]	; (800d3dc <Wifi_SoftAp_Create+0xac>)
 800d376:	481a      	ldr	r0, [pc, #104]	; (800d3e0 <Wifi_SoftAp_Create+0xb0>)
 800d378:	f004 f9a8 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d37c:	4818      	ldr	r0, [pc, #96]	; (800d3e0 <Wifi_SoftAp_Create+0xb0>)
 800d37e:	f7ff f80b 	bl	800c398 <Wifi_SendString>
 800d382:	4603      	mov	r3, r0
 800d384:	f083 0301 	eor.w	r3, r3, #1
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d115      	bne.n	800d3ba <Wifi_SoftAp_Create+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d38e:	f107 0116 	add.w	r1, r7, #22
 800d392:	4b14      	ldr	r3, [pc, #80]	; (800d3e4 <Wifi_SoftAp_Create+0xb4>)
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	4b14      	ldr	r3, [pc, #80]	; (800d3e8 <Wifi_SoftAp_Create+0xb8>)
 800d398:	2202      	movs	r2, #2
 800d39a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d39e:	f7ff f82d 	bl	800c3fc <Wifi_WaitForString>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	f083 0301 	eor.w	r3, r3, #1
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d107      	bne.n	800d3be <Wifi_SoftAp_Create+0x8e>
			break;
		if(result == 2)
 800d3ae:	7dbb      	ldrb	r3, [r7, #22]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d006      	beq.n	800d3c2 <Wifi_SoftAp_Create+0x92>
			break;		  
		returnVal=true;	
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	75fb      	strb	r3, [r7, #23]
 800d3b8:	e004      	b.n	800d3c4 <Wifi_SoftAp_Create+0x94>
			break;
 800d3ba:	bf00      	nop
 800d3bc:	e002      	b.n	800d3c4 <Wifi_SoftAp_Create+0x94>
			break;
 800d3be:	bf00      	nop
 800d3c0:	e000      	b.n	800d3c4 <Wifi_SoftAp_Create+0x94>
			break;		  
 800d3c2:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d3c4:	4b04      	ldr	r3, [pc, #16]	; (800d3d8 <Wifi_SoftAp_Create+0xa8>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f001 f871 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		  
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	200013a8 	.word	0x200013a8
 800d3dc:	08014898 	.word	0x08014898
 800d3e0:	200015ad 	.word	0x200015ad
 800d3e4:	080146f4 	.word	0x080146f4
 800d3e8:	080146f0 	.word	0x080146f0

0800d3ec <Wifi_TcpIp_GetConnectionStatus>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool  Wifi_TcpIp_GetConnectionStatus(void)
{
 800d3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ee:	b089      	sub	sp, #36	; 0x24
 800d3f0:	af04      	add	r7, sp, #16
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d3f2:	4b6c      	ldr	r3, [pc, #432]	; (800d5a4 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f04f 31ff 	mov.w	r1, #4294967295
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f001 f80a 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d400:	2300      	movs	r3, #0
 800d402:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800d404:	f7ff f99c 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPSTATUS\r\n");
 800d408:	4967      	ldr	r1, [pc, #412]	; (800d5a8 <Wifi_TcpIp_GetConnectionStatus+0x1bc>)
 800d40a:	4868      	ldr	r0, [pc, #416]	; (800d5ac <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 800d40c:	f004 f95e 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d410:	4866      	ldr	r0, [pc, #408]	; (800d5ac <Wifi_TcpIp_GetConnectionStatus+0x1c0>)
 800d412:	f7fe ffc1 	bl	800c398 <Wifi_SendString>
 800d416:	4603      	mov	r3, r0
 800d418:	f083 0301 	eor.w	r3, r3, #1
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f040 80b2 	bne.w	800d588 <Wifi_TcpIp_GetConnectionStatus+0x19c>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d424:	1d79      	adds	r1, r7, #5
 800d426:	4b62      	ldr	r3, [pc, #392]	; (800d5b0 <Wifi_TcpIp_GetConnectionStatus+0x1c4>)
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	4b62      	ldr	r3, [pc, #392]	; (800d5b4 <Wifi_TcpIp_GetConnectionStatus+0x1c8>)
 800d42c:	2202      	movs	r2, #2
 800d42e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d432:	f7fe ffe3 	bl	800c3fc <Wifi_WaitForString>
 800d436:	4603      	mov	r3, r0
 800d438:	f083 0301 	eor.w	r3, r3, #1
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d004      	beq.n	800d44c <Wifi_TcpIp_GetConnectionStatus+0x60>
			schlecht++;//schlecht
 800d442:	4b5d      	ldr	r3, [pc, #372]	; (800d5b8 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3301      	adds	r3, #1
 800d448:	4a5b      	ldr	r2, [pc, #364]	; (800d5b8 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 800d44a:	6013      	str	r3, [r2, #0]
		if(result == 2)
 800d44c:	797b      	ldrb	r3, [r7, #5]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	f000 809c 	beq.w	800d58c <Wifi_TcpIp_GetConnectionStatus+0x1a0>
			break;		
		
    
		char *str = strstr((char*)Wifi.RxBuffer,"\nSTATUS:");
 800d454:	4959      	ldr	r1, [pc, #356]	; (800d5bc <Wifi_TcpIp_GetConnectionStatus+0x1d0>)
 800d456:	485a      	ldr	r0, [pc, #360]	; (800d5c0 <Wifi_TcpIp_GetConnectionStatus+0x1d4>)
 800d458:	f004 fa4c 	bl	80118f4 <strstr>
 800d45c:	60b8      	str	r0, [r7, #8]
    if(str==NULL)
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d104      	bne.n	800d46e <Wifi_TcpIp_GetConnectionStatus+0x82>
    	schlecht++;//schlecht
 800d464:	4b54      	ldr	r3, [pc, #336]	; (800d5b8 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	3301      	adds	r3, #1
 800d46a:	4a53      	ldr	r2, [pc, #332]	; (800d5b8 <Wifi_TcpIp_GetConnectionStatus+0x1cc>)
 800d46c:	6013      	str	r3, [r2, #0]
    str = strchr(str,':');
 800d46e:	213a      	movs	r1, #58	; 0x3a
 800d470:	68b8      	ldr	r0, [r7, #8]
 800d472:	f004 f9c4 	bl	80117fe <strchr>
 800d476:	60b8      	str	r0, [r7, #8]
    str++;
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	3301      	adds	r3, #1
 800d47c:	60bb      	str	r3, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 800d47e:	2300      	movs	r3, #0
 800d480:	71fb      	strb	r3, [r7, #7]
 800d482:	e013      	b.n	800d4ac <Wifi_TcpIp_GetConnectionStatus+0xc0>
      Wifi.TcpIpConnections[i].status=(WifiConnectionStatus_t)atoi(str);
 800d484:	68b8      	ldr	r0, [r7, #8]
 800d486:	f003 fa99 	bl	80109bc <atoi>
 800d48a:	4603      	mov	r3, r0
 800d48c:	79fa      	ldrb	r2, [r7, #7]
 800d48e:	b2d8      	uxtb	r0, r3
 800d490:	494c      	ldr	r1, [pc, #304]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d492:	4613      	mov	r3, r2
 800d494:	011b      	lsls	r3, r3, #4
 800d496:	1a9b      	subs	r3, r3, r2
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	440b      	add	r3, r1
 800d49c:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 800d4a0:	331c      	adds	r3, #28
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	701a      	strb	r2, [r3, #0]
    for(uint8_t i=0 ; i<5 ;i++)
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	71fb      	strb	r3, [r7, #7]
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
 800d4ae:	2b04      	cmp	r3, #4
 800d4b0:	d9e8      	bls.n	800d484 <Wifi_TcpIp_GetConnectionStatus+0x98>
    str = strstr((char*)Wifi.RxBuffer,"+CIPSTATUS:");
 800d4b2:	4945      	ldr	r1, [pc, #276]	; (800d5c8 <Wifi_TcpIp_GetConnectionStatus+0x1dc>)
 800d4b4:	4842      	ldr	r0, [pc, #264]	; (800d5c0 <Wifi_TcpIp_GetConnectionStatus+0x1d4>)
 800d4b6:	f004 fa1d 	bl	80118f4 <strstr>
 800d4ba:	60b8      	str	r0, [r7, #8]
    for(uint8_t i=0 ; i<5 ;i++)
 800d4bc:	2300      	movs	r3, #0
 800d4be:	71bb      	strb	r3, [r7, #6]
 800d4c0:	e05a      	b.n	800d578 <Wifi_TcpIp_GetConnectionStatus+0x18c>
    {
      sscanf(str,"+CIPSTATUS:%d,\"%3s\",\"%[^\"]\",%d,%d,%d",(int*)&Wifi.TcpIpConnections[i].LinkId,Wifi.TcpIpConnections[i].Type,Wifi.TcpIpConnections[i].RemoteIp,(int*)&Wifi.TcpIpConnections[i].RemotePort,(int*)&Wifi.TcpIpConnections[i].LocalPort,(int*)&Wifi.TcpIpConnections[i].RunAsServer);
 800d4c2:	79ba      	ldrb	r2, [r7, #6]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	011b      	lsls	r3, r3, #4
 800d4c8:	1a9b      	subs	r3, r3, r2
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 800d4d0:	3318      	adds	r3, #24
 800d4d2:	4a3c      	ldr	r2, [pc, #240]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d4d4:	4413      	add	r3, r2
 800d4d6:	1d5d      	adds	r5, r3, #5
 800d4d8:	79ba      	ldrb	r2, [r7, #6]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	011b      	lsls	r3, r3, #4
 800d4de:	1a9b      	subs	r3, r3, r2
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 800d4e6:	3318      	adds	r3, #24
 800d4e8:	4a36      	ldr	r2, [pc, #216]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d4ea:	4413      	add	r3, r2
 800d4ec:	1d9e      	adds	r6, r3, #6
 800d4ee:	79ba      	ldrb	r2, [r7, #6]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	011b      	lsls	r3, r3, #4
 800d4f4:	1a9b      	subs	r3, r3, r2
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 800d4fc:	3318      	adds	r3, #24
 800d4fe:	4a31      	ldr	r2, [pc, #196]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d500:	4413      	add	r3, r2
 800d502:	f103 010a 	add.w	r1, r3, #10
 800d506:	79ba      	ldrb	r2, [r7, #6]
 800d508:	4613      	mov	r3, r2
 800d50a:	011b      	lsls	r3, r3, #4
 800d50c:	1a9b      	subs	r3, r3, r2
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	f503 53d9 	add.w	r3, r3, #6944	; 0x1b20
 800d514:	3310      	adds	r3, #16
 800d516:	4a2b      	ldr	r2, [pc, #172]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d518:	4413      	add	r3, r2
 800d51a:	1d18      	adds	r0, r3, #4
 800d51c:	79ba      	ldrb	r2, [r7, #6]
 800d51e:	4613      	mov	r3, r2
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	1a9b      	subs	r3, r3, r2
 800d524:	005b      	lsls	r3, r3, #1
 800d526:	f503 53d9 	add.w	r3, r3, #6944	; 0x1b20
 800d52a:	3310      	adds	r3, #16
 800d52c:	4a25      	ldr	r2, [pc, #148]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d52e:	4413      	add	r3, r2
 800d530:	1d9c      	adds	r4, r3, #6
 800d532:	79ba      	ldrb	r2, [r7, #6]
 800d534:	4613      	mov	r3, r2
 800d536:	011b      	lsls	r3, r3, #4
 800d538:	1a9b      	subs	r3, r3, r2
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	f503 53d9 	add.w	r3, r3, #6944	; 0x1b20
 800d540:	3310      	adds	r3, #16
 800d542:	4a20      	ldr	r2, [pc, #128]	; (800d5c4 <Wifi_TcpIp_GetConnectionStatus+0x1d8>)
 800d544:	4413      	add	r3, r2
 800d546:	3308      	adds	r3, #8
 800d548:	9303      	str	r3, [sp, #12]
 800d54a:	9402      	str	r4, [sp, #8]
 800d54c:	9001      	str	r0, [sp, #4]
 800d54e:	9100      	str	r1, [sp, #0]
 800d550:	4633      	mov	r3, r6
 800d552:	462a      	mov	r2, r5
 800d554:	491d      	ldr	r1, [pc, #116]	; (800d5cc <Wifi_TcpIp_GetConnectionStatus+0x1e0>)
 800d556:	68b8      	ldr	r0, [r7, #8]
 800d558:	f004 f8d8 	bl	801170c <siscanf>
      str++;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	3301      	adds	r3, #1
 800d560:	60bb      	str	r3, [r7, #8]
      str = strstr(str,"+CIPSTATUS:");
 800d562:	4919      	ldr	r1, [pc, #100]	; (800d5c8 <Wifi_TcpIp_GetConnectionStatus+0x1dc>)
 800d564:	68b8      	ldr	r0, [r7, #8]
 800d566:	f004 f9c5 	bl	80118f4 <strstr>
 800d56a:	60b8      	str	r0, [r7, #8]
      if(str==NULL)
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d006      	beq.n	800d580 <Wifi_TcpIp_GetConnectionStatus+0x194>
    for(uint8_t i=0 ; i<5 ;i++)
 800d572:	79bb      	ldrb	r3, [r7, #6]
 800d574:	3301      	adds	r3, #1
 800d576:	71bb      	strb	r3, [r7, #6]
 800d578:	79bb      	ldrb	r3, [r7, #6]
 800d57a:	2b04      	cmp	r3, #4
 800d57c:	d9a1      	bls.n	800d4c2 <Wifi_TcpIp_GetConnectionStatus+0xd6>
 800d57e:	e000      	b.n	800d582 <Wifi_TcpIp_GetConnectionStatus+0x196>
        break;
 800d580:	bf00      	nop
    }
		returnVal=true;	
 800d582:	2301      	movs	r3, #1
 800d584:	73fb      	strb	r3, [r7, #15]
 800d586:	e002      	b.n	800d58e <Wifi_TcpIp_GetConnectionStatus+0x1a2>
			break;
 800d588:	bf00      	nop
 800d58a:	e000      	b.n	800d58e <Wifi_TcpIp_GetConnectionStatus+0x1a2>
			break;		
 800d58c:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d58e:	4b05      	ldr	r3, [pc, #20]	; (800d5a4 <Wifi_TcpIp_GetConnectionStatus+0x1b8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 ff8c 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;			
 800d598:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	200013a8 	.word	0x200013a8
 800d5a8:	080148bc 	.word	0x080148bc
 800d5ac:	200015ad 	.word	0x200015ad
 800d5b0:	080146f4 	.word	0x080146f4
 800d5b4:	080146f0 	.word	0x080146f0
 800d5b8:	20002f70 	.word	0x20002f70
 800d5bc:	080148cc 	.word	0x080148cc
 800d5c0:	200013ad 	.word	0x200013ad
 800d5c4:	200013ac 	.word	0x200013ac
 800d5c8:	080148d8 	.word	0x080148d8
 800d5cc:	080148e4 	.word	0x080148e4

0800d5d0 <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af02      	add	r7, sp, #8
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d5da:	4b23      	ldr	r3, [pc, #140]	; (800d668 <Wifi_TcpIp_SetMultiConnection+0x98>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f04f 31ff 	mov.w	r1, #4294967295
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 ff16 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800d5ec:	f7ff f8a8 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	491d      	ldr	r1, [pc, #116]	; (800d66c <Wifi_TcpIp_SetMultiConnection+0x9c>)
 800d5f6:	481e      	ldr	r0, [pc, #120]	; (800d670 <Wifi_TcpIp_SetMultiConnection+0xa0>)
 800d5f8:	f004 f868 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d5fc:	481c      	ldr	r0, [pc, #112]	; (800d670 <Wifi_TcpIp_SetMultiConnection+0xa0>)
 800d5fe:	f7fe fecb 	bl	800c398 <Wifi_SendString>
 800d602:	4603      	mov	r3, r0
 800d604:	f083 0301 	eor.w	r3, r3, #1
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d11c      	bne.n	800d648 <Wifi_TcpIp_SetMultiConnection+0x78>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d60e:	f107 010e 	add.w	r1, r7, #14
 800d612:	4b18      	ldr	r3, [pc, #96]	; (800d674 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	4b18      	ldr	r3, [pc, #96]	; (800d678 <Wifi_TcpIp_SetMultiConnection+0xa8>)
 800d618:	2202      	movs	r2, #2
 800d61a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d61e:	f7fe feed 	bl	800c3fc <Wifi_WaitForString>
 800d622:	4603      	mov	r3, r0
 800d624:	f083 0301 	eor.w	r3, r3, #1
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10e      	bne.n	800d64c <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
		if(result == 2)
 800d62e:	7bbb      	ldrb	r3, [r7, #14]
 800d630:	2b02      	cmp	r3, #2
 800d632:	d00d      	beq.n	800d650 <Wifi_TcpIp_SetMultiConnection+0x80>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 800d634:	4b11      	ldr	r3, [pc, #68]	; (800d67c <Wifi_TcpIp_SetMultiConnection+0xac>)
 800d636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d63a:	461a      	mov	r2, r3
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	f882 3b19 	strb.w	r3, [r2, #2841]	; 0xb19
		returnVal=true;	
 800d642:	2301      	movs	r3, #1
 800d644:	73fb      	strb	r3, [r7, #15]
 800d646:	e004      	b.n	800d652 <Wifi_TcpIp_SetMultiConnection+0x82>
			break;
 800d648:	bf00      	nop
 800d64a:	e002      	b.n	800d652 <Wifi_TcpIp_SetMultiConnection+0x82>
			break;
 800d64c:	bf00      	nop
 800d64e:	e000      	b.n	800d652 <Wifi_TcpIp_SetMultiConnection+0x82>
			break;				
 800d650:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d652:	4b05      	ldr	r3, [pc, #20]	; (800d668 <Wifi_TcpIp_SetMultiConnection+0x98>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 ff2a 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;			
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	200013a8 	.word	0x200013a8
 800d66c:	08014920 	.word	0x08014920
 800d670:	200015ad 	.word	0x200015ad
 800d674:	080146f4 	.word	0x080146f4
 800d678:	080146f0 	.word	0x080146f0
 800d67c:	200013ac 	.word	0x200013ac

0800d680 <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d686:	4b2a      	ldr	r3, [pc, #168]	; (800d730 <Wifi_TcpIp_GetMultiConnection+0xb0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f04f 31ff 	mov.w	r1, #4294967295
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 fec0 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d694:	2300      	movs	r3, #0
 800d696:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800d698:	f7ff f852 	bl	800c740 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 800d69c:	4925      	ldr	r1, [pc, #148]	; (800d734 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 800d69e:	4826      	ldr	r0, [pc, #152]	; (800d738 <Wifi_TcpIp_GetMultiConnection+0xb8>)
 800d6a0:	f004 f814 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d6a4:	4824      	ldr	r0, [pc, #144]	; (800d738 <Wifi_TcpIp_GetMultiConnection+0xb8>)
 800d6a6:	f7fe fe77 	bl	800c398 <Wifi_SendString>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f083 0301 	eor.w	r3, r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d12b      	bne.n	800d70e <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d6b6:	1db9      	adds	r1, r7, #6
 800d6b8:	4b20      	ldr	r3, [pc, #128]	; (800d73c <Wifi_TcpIp_GetMultiConnection+0xbc>)
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4b20      	ldr	r3, [pc, #128]	; (800d740 <Wifi_TcpIp_GetMultiConnection+0xc0>)
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d6c4:	f7fe fe9a 	bl	800c3fc <Wifi_WaitForString>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	f083 0301 	eor.w	r3, r3, #1
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d11e      	bne.n	800d712 <Wifi_TcpIp_GetMultiConnection+0x92>
			break;
		if(result == 2)
 800d6d4:	79bb      	ldrb	r3, [r7, #6]
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	d01d      	beq.n	800d716 <Wifi_TcpIp_GetMultiConnection+0x96>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 800d6da:	1dbb      	adds	r3, r7, #6
 800d6dc:	4a19      	ldr	r2, [pc, #100]	; (800d744 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 800d6de:	2101      	movs	r1, #1
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fe ffe3 	bl	800c6ac <Wifi_ReturnInteger>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	f083 0301 	eor.w	r3, r3, #1
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d113      	bne.n	800d71a <Wifi_TcpIp_GetMultiConnection+0x9a>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 800d6f2:	79bb      	ldrb	r3, [r7, #6]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bf14      	ite	ne
 800d6f8:	2301      	movne	r3, #1
 800d6fa:	2300      	moveq	r3, #0
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	4b12      	ldr	r3, [pc, #72]	; (800d748 <Wifi_TcpIp_GetMultiConnection+0xc8>)
 800d700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d704:	f883 2b19 	strb.w	r2, [r3, #2841]	; 0xb19
		returnVal=true;	
 800d708:	2301      	movs	r3, #1
 800d70a:	71fb      	strb	r3, [r7, #7]
 800d70c:	e006      	b.n	800d71c <Wifi_TcpIp_GetMultiConnection+0x9c>
			break;
 800d70e:	bf00      	nop
 800d710:	e004      	b.n	800d71c <Wifi_TcpIp_GetMultiConnection+0x9c>
			break;
 800d712:	bf00      	nop
 800d714:	e002      	b.n	800d71c <Wifi_TcpIp_GetMultiConnection+0x9c>
			break;				
 800d716:	bf00      	nop
 800d718:	e000      	b.n	800d71c <Wifi_TcpIp_GetMultiConnection+0x9c>
      break;
 800d71a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d71c:	4b04      	ldr	r3, [pc, #16]	; (800d730 <Wifi_TcpIp_GetMultiConnection+0xb0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	f000 fec5 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;			
 800d726:	79fb      	ldrb	r3, [r7, #7]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	200013a8 	.word	0x200013a8
 800d734:	08014930 	.word	0x08014930
 800d738:	200015ad 	.word	0x200015ad
 800d73c:	080146f4 	.word	0x080146f4
 800d740:	080146f0 	.word	0x080146f0
 800d744:	08014764 	.word	0x08014764
 800d748:	200013ac 	.word	0x200013ac

0800d74c <Wifi_TcpIp_StartTcpConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_StartTcpConnection(uint8_t LinkId,char *RemoteIp,uint16_t RemotePort,uint16_t TimeOut)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af02      	add	r7, sp, #8
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	4611      	mov	r1, r2
 800d756:	461a      	mov	r2, r3
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]
 800d75c:	460b      	mov	r3, r1
 800d75e:	81bb      	strh	r3, [r7, #12]
 800d760:	4613      	mov	r3, r2
 800d762:	80fb      	strh	r3, [r7, #6]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d764:	4b43      	ldr	r3, [pc, #268]	; (800d874 <Wifi_TcpIp_StartTcpConnection+0x128>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f04f 31ff 	mov.w	r1, #4294967295
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 fe51 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d772:	2300      	movs	r3, #0
 800d774:	75fb      	strb	r3, [r7, #23]
	do
	{
    Wifi_RxClear();
 800d776:	f7fe ffe3 	bl	800c740 <Wifi_RxClear>
    sprintf((char*)Wifi.TxBuffer,"AT+CIPSERVER=1,%d\r\n",RemotePort);
 800d77a:	89bb      	ldrh	r3, [r7, #12]
 800d77c:	461a      	mov	r2, r3
 800d77e:	493e      	ldr	r1, [pc, #248]	; (800d878 <Wifi_TcpIp_StartTcpConnection+0x12c>)
 800d780:	483e      	ldr	r0, [pc, #248]	; (800d87c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800d782:	f003 ffa3 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d786:	483d      	ldr	r0, [pc, #244]	; (800d87c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800d788:	f7fe fe06 	bl	800c398 <Wifi_SendString>
 800d78c:	4603      	mov	r3, r0
 800d78e:	f083 0301 	eor.w	r3, r3, #1
 800d792:	b2db      	uxtb	r3, r3
 800d794:	2b00      	cmp	r3, #0
 800d796:	d159      	bne.n	800d84c <Wifi_TcpIp_StartTcpConnection+0x100>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d798:	f107 0116 	add.w	r1, r7, #22
 800d79c:	4b38      	ldr	r3, [pc, #224]	; (800d880 <Wifi_TcpIp_StartTcpConnection+0x134>)
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	4b38      	ldr	r3, [pc, #224]	; (800d884 <Wifi_TcpIp_StartTcpConnection+0x138>)
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d7a8:	f7fe fe28 	bl	800c3fc <Wifi_WaitForString>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	f083 0301 	eor.w	r3, r3, #1
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d004      	beq.n	800d7c2 <Wifi_TcpIp_StartTcpConnection+0x76>
			schlecht++;
 800d7b8:	4b33      	ldr	r3, [pc, #204]	; (800d888 <Wifi_TcpIp_StartTcpConnection+0x13c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	4a32      	ldr	r2, [pc, #200]	; (800d888 <Wifi_TcpIp_StartTcpConnection+0x13c>)
 800d7c0:	6013      	str	r3, [r2, #0]
		if(result == 2)
 800d7c2:	7dbb      	ldrb	r3, [r7, #22]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d043      	beq.n	800d850 <Wifi_TcpIp_StartTcpConnection+0x104>
			break;		
		Wifi_RxClear();
 800d7c8:	f7fe ffba 	bl	800c740 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800d7cc:	4b2f      	ldr	r3, [pc, #188]	; (800d88c <Wifi_TcpIp_StartTcpConnection+0x140>)
 800d7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7d2:	f893 3b19 	ldrb.w	r3, [r3, #2841]	; 0xb19
 800d7d6:	f083 0301 	eor.w	r3, r3, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d009      	beq.n	800d7f4 <Wifi_TcpIp_StartTcpConnection+0xa8>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=\"TCP\",\"%s\",%d,%d\r\n",RemoteIp,RemotePort,TimeOut);
 800d7e0:	89ba      	ldrh	r2, [r7, #12]
 800d7e2:	88fb      	ldrh	r3, [r7, #6]
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	4929      	ldr	r1, [pc, #164]	; (800d890 <Wifi_TcpIp_StartTcpConnection+0x144>)
 800d7ec:	4823      	ldr	r0, [pc, #140]	; (800d87c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800d7ee:	f003 ff6d 	bl	80116cc <siprintf>
 800d7f2:	e00a      	b.n	800d80a <Wifi_TcpIp_StartTcpConnection+0xbe>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSTART=%d,\"TCP\",\"%s\",%d,%d\r\n",LinkId,RemoteIp,RemotePort,TimeOut);
 800d7f4:	7bf9      	ldrb	r1, [r7, #15]
 800d7f6:	89bb      	ldrh	r3, [r7, #12]
 800d7f8:	88fa      	ldrh	r2, [r7, #6]
 800d7fa:	9201      	str	r2, [sp, #4]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	460a      	mov	r2, r1
 800d802:	4924      	ldr	r1, [pc, #144]	; (800d894 <Wifi_TcpIp_StartTcpConnection+0x148>)
 800d804:	481d      	ldr	r0, [pc, #116]	; (800d87c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800d806:	f003 ff61 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d80a:	481c      	ldr	r0, [pc, #112]	; (800d87c <Wifi_TcpIp_StartTcpConnection+0x130>)
 800d80c:	f7fe fdc4 	bl	800c398 <Wifi_SendString>
 800d810:	4603      	mov	r3, r0
 800d812:	f083 0301 	eor.w	r3, r3, #1
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d11b      	bne.n	800d854 <Wifi_TcpIp_StartTcpConnection+0x108>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_HIGH,&result,3,"OK","CONNECT","ERROR")==false)
 800d81c:	f107 0116 	add.w	r1, r7, #22
 800d820:	4b17      	ldr	r3, [pc, #92]	; (800d880 <Wifi_TcpIp_StartTcpConnection+0x134>)
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	4b1c      	ldr	r3, [pc, #112]	; (800d898 <Wifi_TcpIp_StartTcpConnection+0x14c>)
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	4b16      	ldr	r3, [pc, #88]	; (800d884 <Wifi_TcpIp_StartTcpConnection+0x138>)
 800d82a:	2203      	movs	r2, #3
 800d82c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800d830:	f7fe fde4 	bl	800c3fc <Wifi_WaitForString>
 800d834:	4603      	mov	r3, r0
 800d836:	f083 0301 	eor.w	r3, r3, #1
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10b      	bne.n	800d858 <Wifi_TcpIp_StartTcpConnection+0x10c>
			break;
		if(result == 3)
 800d840:	7dbb      	ldrb	r3, [r7, #22]
 800d842:	2b03      	cmp	r3, #3
 800d844:	d00a      	beq.n	800d85c <Wifi_TcpIp_StartTcpConnection+0x110>
			break;		
		returnVal=true;	
 800d846:	2301      	movs	r3, #1
 800d848:	75fb      	strb	r3, [r7, #23]
 800d84a:	e008      	b.n	800d85e <Wifi_TcpIp_StartTcpConnection+0x112>
			break;
 800d84c:	bf00      	nop
 800d84e:	e006      	b.n	800d85e <Wifi_TcpIp_StartTcpConnection+0x112>
			break;		
 800d850:	bf00      	nop
 800d852:	e004      	b.n	800d85e <Wifi_TcpIp_StartTcpConnection+0x112>
			break;
 800d854:	bf00      	nop
 800d856:	e002      	b.n	800d85e <Wifi_TcpIp_StartTcpConnection+0x112>
			break;
 800d858:	bf00      	nop
 800d85a:	e000      	b.n	800d85e <Wifi_TcpIp_StartTcpConnection+0x112>
			break;		
 800d85c:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d85e:	4b05      	ldr	r3, [pc, #20]	; (800d874 <Wifi_TcpIp_StartTcpConnection+0x128>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4618      	mov	r0, r3
 800d864:	f000 fe24 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800d868:	7dfb      	ldrb	r3, [r7, #23]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	200013a8 	.word	0x200013a8
 800d878:	08014940 	.word	0x08014940
 800d87c:	200015ad 	.word	0x200015ad
 800d880:	080146f4 	.word	0x080146f4
 800d884:	080146f0 	.word	0x080146f0
 800d888:	20002f70 	.word	0x20002f70
 800d88c:	200013ac 	.word	0x200013ac
 800d890:	08014954 	.word	0x08014954
 800d894:	08014974 	.word	0x08014974
 800d898:	08014998 	.word	0x08014998

0800d89c <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af02      	add	r7, sp, #8
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d8a6:	4b27      	ldr	r3, [pc, #156]	; (800d944 <Wifi_TcpIp_Close+0xa8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f04f 31ff 	mov.w	r1, #4294967295
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fdb0 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800d8b8:	f7fe ff42 	bl	800c740 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800d8bc:	4b22      	ldr	r3, [pc, #136]	; (800d948 <Wifi_TcpIp_Close+0xac>)
 800d8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8c2:	f893 3b19 	ldrb.w	r3, [r3, #2841]	; 0xb19
 800d8c6:	f083 0301 	eor.w	r3, r3, #1
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d004      	beq.n	800d8da <Wifi_TcpIp_Close+0x3e>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 800d8d0:	491e      	ldr	r1, [pc, #120]	; (800d94c <Wifi_TcpIp_Close+0xb0>)
 800d8d2:	481f      	ldr	r0, [pc, #124]	; (800d950 <Wifi_TcpIp_Close+0xb4>)
 800d8d4:	f003 fefa 	bl	80116cc <siprintf>
 800d8d8:	e005      	b.n	800d8e6 <Wifi_TcpIp_Close+0x4a>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 800d8da:	79fb      	ldrb	r3, [r7, #7]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	491d      	ldr	r1, [pc, #116]	; (800d954 <Wifi_TcpIp_Close+0xb8>)
 800d8e0:	481b      	ldr	r0, [pc, #108]	; (800d950 <Wifi_TcpIp_Close+0xb4>)
 800d8e2:	f003 fef3 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d8e6:	481a      	ldr	r0, [pc, #104]	; (800d950 <Wifi_TcpIp_Close+0xb4>)
 800d8e8:	f7fe fd56 	bl	800c398 <Wifi_SendString>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	f083 0301 	eor.w	r3, r3, #1
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d115      	bne.n	800d924 <Wifi_TcpIp_Close+0x88>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d8f8:	f107 010e 	add.w	r1, r7, #14
 800d8fc:	4b16      	ldr	r3, [pc, #88]	; (800d958 <Wifi_TcpIp_Close+0xbc>)
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4b16      	ldr	r3, [pc, #88]	; (800d95c <Wifi_TcpIp_Close+0xc0>)
 800d902:	2202      	movs	r2, #2
 800d904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d908:	f7fe fd78 	bl	800c3fc <Wifi_WaitForString>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f083 0301 	eor.w	r3, r3, #1
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d107      	bne.n	800d928 <Wifi_TcpIp_Close+0x8c>
			break;
		if(result == 2)
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d006      	beq.n	800d92c <Wifi_TcpIp_Close+0x90>
			break;		
		returnVal=true;	
 800d91e:	2301      	movs	r3, #1
 800d920:	73fb      	strb	r3, [r7, #15]
 800d922:	e004      	b.n	800d92e <Wifi_TcpIp_Close+0x92>
			break;
 800d924:	bf00      	nop
 800d926:	e002      	b.n	800d92e <Wifi_TcpIp_Close+0x92>
			break;
 800d928:	bf00      	nop
 800d92a:	e000      	b.n	800d92e <Wifi_TcpIp_Close+0x92>
			break;		
 800d92c:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800d92e:	4b05      	ldr	r3, [pc, #20]	; (800d944 <Wifi_TcpIp_Close+0xa8>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 fdbc 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;		
 800d938:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	200013a8 	.word	0x200013a8
 800d948:	200013ac 	.word	0x200013ac
 800d94c:	080149ec 	.word	0x080149ec
 800d950:	200015ad 	.word	0x200015ad
 800d954:	080149fc 	.word	0x080149fc
 800d958:	080146f4 	.word	0x080146f4
 800d95c:	080146f0 	.word	0x080146f0

0800d960 <Wifi_TcpIp_SendDataTcp>:
	return returnVal;	
  
}
//#########################################################################################################
bool  Wifi_TcpIp_SendDataTcp(uint8_t LinkId,uint16_t dataLen,uint8_t *data)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af02      	add	r7, sp, #8
 800d966:	4603      	mov	r3, r0
 800d968:	603a      	str	r2, [r7, #0]
 800d96a:	71fb      	strb	r3, [r7, #7]
 800d96c:	460b      	mov	r3, r1
 800d96e:	80bb      	strh	r3, [r7, #4]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800d970:	4b41      	ldr	r3, [pc, #260]	; (800da78 <Wifi_TcpIp_SendDataTcp+0x118>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f04f 31ff 	mov.w	r1, #4294967295
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 fd4b 	bl	800e414 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800d97e:	2300      	movs	r3, #0
 800d980:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800d982:	f7fe fedd 	bl	800c740 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800d986:	4b3d      	ldr	r3, [pc, #244]	; (800da7c <Wifi_TcpIp_SendDataTcp+0x11c>)
 800d988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d98c:	f893 3b19 	ldrb.w	r3, [r3, #2841]	; 0xb19
 800d990:	f083 0301 	eor.w	r3, r3, #1
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b00      	cmp	r3, #0
 800d998:	d006      	beq.n	800d9a8 <Wifi_TcpIp_SendDataTcp+0x48>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d\r\n",dataLen);
 800d99a:	88bb      	ldrh	r3, [r7, #4]
 800d99c:	461a      	mov	r2, r3
 800d99e:	4938      	ldr	r1, [pc, #224]	; (800da80 <Wifi_TcpIp_SendDataTcp+0x120>)
 800d9a0:	4838      	ldr	r0, [pc, #224]	; (800da84 <Wifi_TcpIp_SendDataTcp+0x124>)
 800d9a2:	f003 fe93 	bl	80116cc <siprintf>
 800d9a6:	e005      	b.n	800d9b4 <Wifi_TcpIp_SendDataTcp+0x54>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPSENDBUF=%d,%d\r\n",LinkId,dataLen);
 800d9a8:	79fa      	ldrb	r2, [r7, #7]
 800d9aa:	88bb      	ldrh	r3, [r7, #4]
 800d9ac:	4936      	ldr	r1, [pc, #216]	; (800da88 <Wifi_TcpIp_SendDataTcp+0x128>)
 800d9ae:	4835      	ldr	r0, [pc, #212]	; (800da84 <Wifi_TcpIp_SendDataTcp+0x124>)
 800d9b0:	f003 fe8c 	bl	80116cc <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800d9b4:	4833      	ldr	r0, [pc, #204]	; (800da84 <Wifi_TcpIp_SendDataTcp+0x124>)
 800d9b6:	f7fe fcef 	bl	800c398 <Wifi_SendString>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	f083 0301 	eor.w	r3, r3, #1
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d148      	bne.n	800da58 <Wifi_TcpIp_SendDataTcp+0xf8>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800d9c6:	f107 010e 	add.w	r1, r7, #14
 800d9ca:	4b30      	ldr	r3, [pc, #192]	; (800da8c <Wifi_TcpIp_SendDataTcp+0x12c>)
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	4b30      	ldr	r3, [pc, #192]	; (800da90 <Wifi_TcpIp_SendDataTcp+0x130>)
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d9d6:	f7fe fd11 	bl	800c3fc <Wifi_WaitForString>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	f083 0301 	eor.w	r3, r3, #1
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d004      	beq.n	800d9f0 <Wifi_TcpIp_SendDataTcp+0x90>
			schlecht++;
 800d9e6:	4b2b      	ldr	r3, [pc, #172]	; (800da94 <Wifi_TcpIp_SendDataTcp+0x134>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	4a29      	ldr	r2, [pc, #164]	; (800da94 <Wifi_TcpIp_SendDataTcp+0x134>)
 800d9ee:	6013      	str	r3, [r2, #0]
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,3,">","ERROR","busy")==false)
 800d9f0:	f107 010e 	add.w	r1, r7, #14
 800d9f4:	4b28      	ldr	r3, [pc, #160]	; (800da98 <Wifi_TcpIp_SendDataTcp+0x138>)
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	4b24      	ldr	r3, [pc, #144]	; (800da8c <Wifi_TcpIp_SendDataTcp+0x12c>)
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	4b27      	ldr	r3, [pc, #156]	; (800da9c <Wifi_TcpIp_SendDataTcp+0x13c>)
 800d9fe:	2203      	movs	r2, #3
 800da00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da04:	f7fe fcfa 	bl	800c3fc <Wifi_WaitForString>
 800da08:	4603      	mov	r3, r0
 800da0a:	f083 0301 	eor.w	r3, r3, #1
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	2b00      	cmp	r3, #0
 800da12:	d004      	beq.n	800da1e <Wifi_TcpIp_SendDataTcp+0xbe>
			schlecht++;
 800da14:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <Wifi_TcpIp_SendDataTcp+0x134>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3301      	adds	r3, #1
 800da1a:	4a1e      	ldr	r2, [pc, #120]	; (800da94 <Wifi_TcpIp_SendDataTcp+0x134>)
 800da1c:	6013      	str	r3, [r2, #0]
		if(result > 1)
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d81b      	bhi.n	800da5c <Wifi_TcpIp_SendDataTcp+0xfc>
			break;		
    Wifi_RxClear();
 800da24:	f7fe fe8c 	bl	800c740 <Wifi_RxClear>
    Wifi_SendRaw(data,dataLen);
 800da28:	88bb      	ldrh	r3, [r7, #4]
 800da2a:	4619      	mov	r1, r3
 800da2c:	6838      	ldr	r0, [r7, #0]
 800da2e:	f7fe fc8d 	bl	800c34c <Wifi_SendRaw>
    if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800da32:	f107 010e 	add.w	r1, r7, #14
 800da36:	4b15      	ldr	r3, [pc, #84]	; (800da8c <Wifi_TcpIp_SendDataTcp+0x12c>)
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4b15      	ldr	r3, [pc, #84]	; (800da90 <Wifi_TcpIp_SendDataTcp+0x130>)
 800da3c:	2202      	movs	r2, #2
 800da3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da42:	f7fe fcdb 	bl	800c3fc <Wifi_WaitForString>
 800da46:	4603      	mov	r3, r0
 800da48:	f083 0301 	eor.w	r3, r3, #1
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d106      	bne.n	800da60 <Wifi_TcpIp_SendDataTcp+0x100>
			break;
		returnVal=true;	
 800da52:	2301      	movs	r3, #1
 800da54:	73fb      	strb	r3, [r7, #15]
 800da56:	e004      	b.n	800da62 <Wifi_TcpIp_SendDataTcp+0x102>
			break;
 800da58:	bf00      	nop
 800da5a:	e002      	b.n	800da62 <Wifi_TcpIp_SendDataTcp+0x102>
			break;		
 800da5c:	bf00      	nop
 800da5e:	e000      	b.n	800da62 <Wifi_TcpIp_SendDataTcp+0x102>
			break;
 800da60:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800da62:	4b05      	ldr	r3, [pc, #20]	; (800da78 <Wifi_TcpIp_SendDataTcp+0x118>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4618      	mov	r0, r3
 800da68:	f000 fd22 	bl	800e4b0 <osSemaphoreRelease>
	return returnVal;	  
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	200013a8 	.word	0x200013a8
 800da7c:	200013ac 	.word	0x200013ac
 800da80:	08014a60 	.word	0x08014a60
 800da84:	200015ad 	.word	0x200015ad
 800da88:	08014a74 	.word	0x08014a74
 800da8c:	080146f4 	.word	0x080146f4
 800da90:	080146f0 	.word	0x080146f0
 800da94:	20002f70 	.word	0x20002f70
 800da98:	08014a8c 	.word	0x08014a8c
 800da9c:	08014a5c 	.word	0x08014a5c

0800daa0 <vReplaceMacAddress>:
</div>\
</body>\
</html>";

void vReplaceMacAddress(char* htmlContent, const char* newMacAddress)
{
 800daa0:	b590      	push	{r4, r7, lr}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
    const char* macAddressPlaceholder = "ff:ff:ff:ff:ff:ff";
 800daaa:	4b10      	ldr	r3, [pc, #64]	; (800daec <vReplaceMacAddress+0x4c>)
 800daac:	60fb      	str	r3, [r7, #12]
    char* pos = strstr(htmlContent, macAddressPlaceholder);
 800daae:	68f9      	ldr	r1, [r7, #12]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f003 ff1f 	bl	80118f4 <strstr>
 800dab6:	60b8      	str	r0, [r7, #8]

    if (pos)
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d012      	beq.n	800dae4 <vReplaceMacAddress+0x44>
    {
        // Ensure newMacAddress fits in the placeholder space
        if (strlen(newMacAddress) == strlen(macAddressPlaceholder))
 800dabe:	6838      	ldr	r0, [r7, #0]
 800dac0:	f7f2 fbd6 	bl	8000270 <strlen>
 800dac4:	4604      	mov	r4, r0
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7f2 fbd2 	bl	8000270 <strlen>
 800dacc:	4603      	mov	r3, r0
 800dace:	429c      	cmp	r4, r3
 800dad0:	d108      	bne.n	800dae4 <vReplaceMacAddress+0x44>
        {
            memcpy(pos, newMacAddress, strlen(macAddressPlaceholder));
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f7f2 fbcc 	bl	8000270 <strlen>
 800dad8:	4603      	mov	r3, r0
 800dada:	461a      	mov	r2, r3
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	68b8      	ldr	r0, [r7, #8]
 800dae0:	f003 ffad 	bl	8011a3e <memcpy>
        {
        }
    } else
    {
    }
}
 800dae4:	bf00      	nop
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd90      	pop	{r4, r7, pc}
 800daec:	08014a94 	.word	0x08014a94

0800daf0 <u8ParseMacAddress>:

uint8_t u8ParseMacAddress()
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
    uint8_t *mac_start = (uint8_t *)strstr((char *)Wifi.RxBuffer+100, "+CIFSR:APMAC");
 800daf6:	4b23      	ldr	r3, [pc, #140]	; (800db84 <u8ParseMacAddress+0x94>)
 800daf8:	4923      	ldr	r1, [pc, #140]	; (800db88 <u8ParseMacAddress+0x98>)
 800dafa:	4618      	mov	r0, r3
 800dafc:	f003 fefa 	bl	80118f4 <strstr>
 800db00:	60b8      	str	r0, [r7, #8]
    if (mac_start)
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d038      	beq.n	800db7a <u8ParseMacAddress+0x8a>
    {
        mac_start += strlen("+CIFSR:STAMAC,\"");
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	330f      	adds	r3, #15
 800db0c:	60bb      	str	r3, [r7, #8]
        char *mac_end = strstr((char *)mac_start, "\"");
 800db0e:	2122      	movs	r1, #34	; 0x22
 800db10:	68b8      	ldr	r0, [r7, #8]
 800db12:	f003 fe74 	bl	80117fe <strchr>
 800db16:	6078      	str	r0, [r7, #4]
        if (mac_end)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d02d      	beq.n	800db7a <u8ParseMacAddress+0x8a>
        {
            *mac_end = '\0';  // String terminieren
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]
            strcpy((char *)Wifi.MAC_Adress, (char *)mac_start-1);
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	3b01      	subs	r3, #1
 800db28:	4619      	mov	r1, r3
 800db2a:	4818      	ldr	r0, [pc, #96]	; (800db8c <u8ParseMacAddress+0x9c>)
 800db2c:	f003 ff7f 	bl	8011a2e <strcpy>
            for (int i = 0; i<17 ; i++)
 800db30:	2300      	movs	r3, #0
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	e01c      	b.n	800db70 <u8ParseMacAddress+0x80>
            {
            	if(Wifi.MAC_Adress[i] > 96)
 800db36:	4a16      	ldr	r2, [pc, #88]	; (800db90 <u8ParseMacAddress+0xa0>)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800db40:	3312      	adds	r3, #18
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b60      	cmp	r3, #96	; 0x60
 800db46:	d910      	bls.n	800db6a <u8ParseMacAddress+0x7a>
            	{
            		Wifi.MAC_Adress[i] -= 32;
 800db48:	4a11      	ldr	r2, [pc, #68]	; (800db90 <u8ParseMacAddress+0xa0>)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	4413      	add	r3, r2
 800db4e:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800db52:	3312      	adds	r3, #18
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	3b20      	subs	r3, #32
 800db58:	b2d9      	uxtb	r1, r3
 800db5a:	4a0d      	ldr	r2, [pc, #52]	; (800db90 <u8ParseMacAddress+0xa0>)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	4413      	add	r3, r2
 800db60:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800db64:	3312      	adds	r3, #18
 800db66:	460a      	mov	r2, r1
 800db68:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i<17 ; i++)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3301      	adds	r3, #1
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b10      	cmp	r3, #16
 800db74:	dddf      	ble.n	800db36 <u8ParseMacAddress+0x46>
            	}
            }
            return (uint8_t)1;
 800db76:	2301      	movs	r3, #1
 800db78:	e000      	b.n	800db7c <u8ParseMacAddress+0x8c>
        }
    }
    return 0;
 800db7a:	2300      	movs	r3, #0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20001411 	.word	0x20001411
 800db88:	08014aa8 	.word	0x08014aa8
 800db8c:	20002f5e 	.word	0x20002f5e
 800db90:	200013ac 	.word	0x200013ac

0800db94 <u8WifiMAC>:

uint8_t u8WifiMAC()
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
	char *command = "AT+CIFSR\r\n";
 800db9a:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <u8WifiMAC+0x34>)
 800db9c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7f2 fb66 	bl	8000270 <strlen>
 800dba4:	4603      	mov	r3, r0
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbac:	6879      	ldr	r1, [r7, #4]
 800dbae:	4807      	ldr	r0, [pc, #28]	; (800dbcc <u8WifiMAC+0x38>)
 800dbb0:	f7fd f830 	bl	800ac14 <HAL_UART_Transmit>
	osDelay(100);
 800dbb4:	2064      	movs	r0, #100	; 0x64
 800dbb6:	f000 fbe6 	bl	800e386 <osDelay>
	return u8ParseMacAddress();
 800dbba:	f7ff ff99 	bl	800daf0 <u8ParseMacAddress>
 800dbbe:	4603      	mov	r3, r0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	08014ab8 	.word	0x08014ab8
 800dbcc:	20001248 	.word	0x20001248

0800dbd0 <puParseStringToStruct>:

const char* puParseStringToStruct(const char* input, sEEPROM_Data_t* data)
{
 800dbd0:	b5b0      	push	{r4, r5, r7, lr}
 800dbd2:	b092      	sub	sp, #72	; 0x48
 800dbd4:	af02      	add	r7, sp, #8
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
    // Ensure the struct is zeroed out
    memset(data, 0, sizeof(sEEPROM_Data_t));
 800dbda:	229c      	movs	r2, #156	; 0x9c
 800dbdc:	2100      	movs	r1, #0
 800dbde:	6838      	ldr	r0, [r7, #0]
 800dbe0:	f003 fe05 	bl	80117ee <memset>

    // Buffers to accumulate error messages
    static char errorMessage[256];
    errorMessage[0] = '\0';  // Clear the error message buffer
 800dbe4:	4ba5      	ldr	r3, [pc, #660]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	701a      	strb	r2, [r3, #0]

    // Pointers to the beginning of each relevant substring
    const char* deviceNamePtr = strstr(input, "dev=");
 800dbea:	49a5      	ldr	r1, [pc, #660]	; (800de80 <puParseStringToStruct+0x2b0>)
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f003 fe81 	bl	80118f4 <strstr>
 800dbf2:	63b8      	str	r0, [r7, #56]	; 0x38
    const char* wlanNamePtr = strstr(input, "wlan=");
 800dbf4:	49a3      	ldr	r1, [pc, #652]	; (800de84 <puParseStringToStruct+0x2b4>)
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f003 fe7c 	bl	80118f4 <strstr>
 800dbfc:	6378      	str	r0, [r7, #52]	; 0x34
    const char* wlanPasswordPtr = strstr(input, "passw=");
 800dbfe:	49a2      	ldr	r1, [pc, #648]	; (800de88 <puParseStringToStruct+0x2b8>)
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f003 fe77 	bl	80118f4 <strstr>
 800dc06:	6338      	str	r0, [r7, #48]	; 0x30
    const char* serverIpPtr = strstr(input, "t-ip=");
 800dc08:	49a0      	ldr	r1, [pc, #640]	; (800de8c <puParseStringToStruct+0x2bc>)
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f003 fe72 	bl	80118f4 <strstr>
 800dc10:	62f8      	str	r0, [r7, #44]	; 0x2c
    const char* serverPortPtr = strstr(input, "t-port=");
 800dc12:	499f      	ldr	r1, [pc, #636]	; (800de90 <puParseStringToStruct+0x2c0>)
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f003 fe6d 	bl	80118f4 <strstr>
 800dc1a:	62b8      	str	r0, [r7, #40]	; 0x28
    const char* domainPtr = strstr(input, "dom=");
 800dc1c:	499d      	ldr	r1, [pc, #628]	; (800de94 <puParseStringToStruct+0x2c4>)
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f003 fe68 	bl	80118f4 <strstr>
 800dc24:	6278      	str	r0, [r7, #36]	; 0x24

    // Extract and copy device name
    if (deviceNamePtr) {
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d021      	beq.n	800dc70 <puParseStringToStruct+0xa0>
        deviceNamePtr += strlen("dev=");
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	3304      	adds	r3, #4
 800dc30:	63bb      	str	r3, [r7, #56]	; 0x38
        sscanf(deviceNamePtr, "%19[^;]", data->u8Device_Name);
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	4998      	ldr	r1, [pc, #608]	; (800de98 <puParseStringToStruct+0x2c8>)
 800dc38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc3a:	f003 fd67 	bl	801170c <siscanf>
        if (strlen((char*)data->u8Device_Name) < 1) {
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d128      	bne.n	800dc98 <puParseStringToStruct+0xc8>
            strcat(errorMessage, "Kein Namen eingetragen; ");
 800dc46:	488d      	ldr	r0, [pc, #564]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dc48:	f7f2 fb12 	bl	8000270 <strlen>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	461a      	mov	r2, r3
 800dc50:	4b8a      	ldr	r3, [pc, #552]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dc52:	4413      	add	r3, r2
 800dc54:	4a91      	ldr	r2, [pc, #580]	; (800de9c <puParseStringToStruct+0x2cc>)
 800dc56:	461d      	mov	r5, r3
 800dc58:	4614      	mov	r4, r2
 800dc5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc5c:	6028      	str	r0, [r5, #0]
 800dc5e:	6069      	str	r1, [r5, #4]
 800dc60:	60aa      	str	r2, [r5, #8]
 800dc62:	60eb      	str	r3, [r5, #12]
 800dc64:	cc03      	ldmia	r4!, {r0, r1}
 800dc66:	6128      	str	r0, [r5, #16]
 800dc68:	6169      	str	r1, [r5, #20]
 800dc6a:	7823      	ldrb	r3, [r4, #0]
 800dc6c:	762b      	strb	r3, [r5, #24]
 800dc6e:	e013      	b.n	800dc98 <puParseStringToStruct+0xc8>
        }
    } else {
        strcat(errorMessage, "Kein Namen eingetragen; ");
 800dc70:	4882      	ldr	r0, [pc, #520]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dc72:	f7f2 fafd 	bl	8000270 <strlen>
 800dc76:	4603      	mov	r3, r0
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b80      	ldr	r3, [pc, #512]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dc7c:	4413      	add	r3, r2
 800dc7e:	4a87      	ldr	r2, [pc, #540]	; (800de9c <puParseStringToStruct+0x2cc>)
 800dc80:	461d      	mov	r5, r3
 800dc82:	4614      	mov	r4, r2
 800dc84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc86:	6028      	str	r0, [r5, #0]
 800dc88:	6069      	str	r1, [r5, #4]
 800dc8a:	60aa      	str	r2, [r5, #8]
 800dc8c:	60eb      	str	r3, [r5, #12]
 800dc8e:	cc03      	ldmia	r4!, {r0, r1}
 800dc90:	6128      	str	r0, [r5, #16]
 800dc92:	6169      	str	r1, [r5, #20]
 800dc94:	7823      	ldrb	r3, [r4, #0]
 800dc96:	762b      	strb	r3, [r5, #24]
    }

    // Extract and copy WLAN name
    if (wlanNamePtr) {
 800dc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d024      	beq.n	800dce8 <puParseStringToStruct+0x118>
        wlanNamePtr += strlen("wlan=");
 800dc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca0:	3305      	adds	r3, #5
 800dca2:	637b      	str	r3, [r7, #52]	; 0x34
        sscanf(wlanNamePtr, "%19[^;]", data->u8WLAN_Name);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	3314      	adds	r3, #20
 800dca8:	461a      	mov	r2, r3
 800dcaa:	497b      	ldr	r1, [pc, #492]	; (800de98 <puParseStringToStruct+0x2c8>)
 800dcac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcae:	f003 fd2d 	bl	801170c <siscanf>
        if (strlen((char*)data->u8WLAN_Name) < 1) {
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	3314      	adds	r3, #20
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d12a      	bne.n	800dd12 <puParseStringToStruct+0x142>
            strcat(errorMessage, "Kein WLAN-Namen eingetragen; ");
 800dcbc:	486f      	ldr	r0, [pc, #444]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dcbe:	f7f2 fad7 	bl	8000270 <strlen>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	4b6d      	ldr	r3, [pc, #436]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dcc8:	4413      	add	r3, r2
 800dcca:	4a75      	ldr	r2, [pc, #468]	; (800dea0 <puParseStringToStruct+0x2d0>)
 800dccc:	461d      	mov	r5, r3
 800dcce:	4614      	mov	r4, r2
 800dcd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcd2:	6028      	str	r0, [r5, #0]
 800dcd4:	6069      	str	r1, [r5, #4]
 800dcd6:	60aa      	str	r2, [r5, #8]
 800dcd8:	60eb      	str	r3, [r5, #12]
 800dcda:	cc07      	ldmia	r4!, {r0, r1, r2}
 800dcdc:	6128      	str	r0, [r5, #16]
 800dcde:	6169      	str	r1, [r5, #20]
 800dce0:	61aa      	str	r2, [r5, #24]
 800dce2:	8823      	ldrh	r3, [r4, #0]
 800dce4:	83ab      	strh	r3, [r5, #28]
 800dce6:	e014      	b.n	800dd12 <puParseStringToStruct+0x142>
        }
    } else {
        strcat(errorMessage, "Kein WLAN-Namen eingetragen; ");
 800dce8:	4864      	ldr	r0, [pc, #400]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dcea:	f7f2 fac1 	bl	8000270 <strlen>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	4b62      	ldr	r3, [pc, #392]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dcf4:	4413      	add	r3, r2
 800dcf6:	4a6a      	ldr	r2, [pc, #424]	; (800dea0 <puParseStringToStruct+0x2d0>)
 800dcf8:	461d      	mov	r5, r3
 800dcfa:	4614      	mov	r4, r2
 800dcfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcfe:	6028      	str	r0, [r5, #0]
 800dd00:	6069      	str	r1, [r5, #4]
 800dd02:	60aa      	str	r2, [r5, #8]
 800dd04:	60eb      	str	r3, [r5, #12]
 800dd06:	cc07      	ldmia	r4!, {r0, r1, r2}
 800dd08:	6128      	str	r0, [r5, #16]
 800dd0a:	6169      	str	r1, [r5, #20]
 800dd0c:	61aa      	str	r2, [r5, #24]
 800dd0e:	8823      	ldrh	r3, [r4, #0]
 800dd10:	83ab      	strh	r3, [r5, #28]
    }

    // Extract and copy WLAN password
    if (wlanPasswordPtr) {
 800dd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d009      	beq.n	800dd2c <puParseStringToStruct+0x15c>
        wlanPasswordPtr += strlen("passw=");
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	3306      	adds	r3, #6
 800dd1c:	633b      	str	r3, [r7, #48]	; 0x30
        sscanf(wlanPasswordPtr, "%69[^;]", data->u8WLAN_Password);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	3328      	adds	r3, #40	; 0x28
 800dd22:	461a      	mov	r2, r3
 800dd24:	495f      	ldr	r1, [pc, #380]	; (800dea4 <puParseStringToStruct+0x2d4>)
 800dd26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd28:	f003 fcf0 	bl	801170c <siscanf>
    }

    // Extract and copy Domain
    if (domainPtr) {
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d009      	beq.n	800dd46 <puParseStringToStruct+0x176>
    	domainPtr += strlen("dom=");
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	3304      	adds	r3, #4
 800dd36:	627b      	str	r3, [r7, #36]	; 0x24
        sscanf(domainPtr, "%39[^;]", data->u8Domain);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	336e      	adds	r3, #110	; 0x6e
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	495a      	ldr	r1, [pc, #360]	; (800dea8 <puParseStringToStruct+0x2d8>)
 800dd40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd42:	f003 fce3 	bl	801170c <siscanf>
    }

    // Extract and convert server IP
    if (serverIpPtr) {
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d051      	beq.n	800ddf0 <puParseStringToStruct+0x220>
        serverIpPtr += strlen("t-ip=");
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	3305      	adds	r3, #5
 800dd50:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned int ip[4];
        int parsedItems = sscanf(serverIpPtr, "%u.%u.%u.%u", &ip[0], &ip[1], &ip[2], &ip[3]);
 800dd52:	f107 030c 	add.w	r3, r7, #12
 800dd56:	1d19      	adds	r1, r3, #4
 800dd58:	f107 020c 	add.w	r2, r7, #12
 800dd5c:	f107 030c 	add.w	r3, r7, #12
 800dd60:	330c      	adds	r3, #12
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	f107 030c 	add.w	r3, r7, #12
 800dd68:	3308      	adds	r3, #8
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	494f      	ldr	r1, [pc, #316]	; (800deac <puParseStringToStruct+0x2dc>)
 800dd70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd72:	f003 fccb 	bl	801170c <siscanf>
 800dd76:	6238      	str	r0, [r7, #32]
        if (parsedItems != 4 || ip[0] > 255 || ip[1] > 255 || ip[2] > 255 || ip[3] > 255) {
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	2b04      	cmp	r3, #4
 800dd7c:	d10b      	bne.n	800dd96 <puParseStringToStruct+0x1c6>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2bff      	cmp	r3, #255	; 0xff
 800dd82:	d808      	bhi.n	800dd96 <puParseStringToStruct+0x1c6>
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2bff      	cmp	r3, #255	; 0xff
 800dd88:	d805      	bhi.n	800dd96 <puParseStringToStruct+0x1c6>
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2bff      	cmp	r3, #255	; 0xff
 800dd8e:	d802      	bhi.n	800dd96 <puParseStringToStruct+0x1c6>
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	2bff      	cmp	r3, #255	; 0xff
 800dd94:	d915      	bls.n	800ddc2 <puParseStringToStruct+0x1f2>
            strcat(errorMessage, "IP Adresse ist unzulässig; ");
 800dd96:	4839      	ldr	r0, [pc, #228]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dd98:	f7f2 fa6a 	bl	8000270 <strlen>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	461a      	mov	r2, r3
 800dda0:	4b36      	ldr	r3, [pc, #216]	; (800de7c <puParseStringToStruct+0x2ac>)
 800dda2:	4413      	add	r3, r2
 800dda4:	4a42      	ldr	r2, [pc, #264]	; (800deb0 <puParseStringToStruct+0x2e0>)
 800dda6:	461d      	mov	r5, r3
 800dda8:	4614      	mov	r4, r2
 800ddaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddac:	6028      	str	r0, [r5, #0]
 800ddae:	6069      	str	r1, [r5, #4]
 800ddb0:	60aa      	str	r2, [r5, #8]
 800ddb2:	60eb      	str	r3, [r5, #12]
 800ddb4:	cc07      	ldmia	r4!, {r0, r1, r2}
 800ddb6:	6128      	str	r0, [r5, #16]
 800ddb8:	6169      	str	r1, [r5, #20]
 800ddba:	61aa      	str	r2, [r5, #24]
 800ddbc:	7823      	ldrb	r3, [r4, #0]
 800ddbe:	772b      	strb	r3, [r5, #28]
 800ddc0:	e02b      	b.n	800de1a <puParseStringToStruct+0x24a>
        } else {
            for (int i = 0; i < 4; i++) {
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddc6:	e00f      	b.n	800dde8 <puParseStringToStruct+0x218>
                data->u8Server_IP[i] = (uint8_t)ip[i];
 800ddc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	3340      	adds	r3, #64	; 0x40
 800ddce:	443b      	add	r3, r7
 800ddd0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800ddd4:	b2d9      	uxtb	r1, r3
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddda:	4413      	add	r3, r2
 800dddc:	3396      	adds	r3, #150	; 0x96
 800ddde:	460a      	mov	r2, r1
 800dde0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 800dde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde4:	3301      	adds	r3, #1
 800dde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dde8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	ddec      	ble.n	800ddc8 <puParseStringToStruct+0x1f8>
 800ddee:	e014      	b.n	800de1a <puParseStringToStruct+0x24a>
            }
        }
    } else {
        strcat(errorMessage, "IP Adresse ist unzulässig; ");
 800ddf0:	4822      	ldr	r0, [pc, #136]	; (800de7c <puParseStringToStruct+0x2ac>)
 800ddf2:	f7f2 fa3d 	bl	8000270 <strlen>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4b20      	ldr	r3, [pc, #128]	; (800de7c <puParseStringToStruct+0x2ac>)
 800ddfc:	4413      	add	r3, r2
 800ddfe:	4a2c      	ldr	r2, [pc, #176]	; (800deb0 <puParseStringToStruct+0x2e0>)
 800de00:	461d      	mov	r5, r3
 800de02:	4614      	mov	r4, r2
 800de04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de06:	6028      	str	r0, [r5, #0]
 800de08:	6069      	str	r1, [r5, #4]
 800de0a:	60aa      	str	r2, [r5, #8]
 800de0c:	60eb      	str	r3, [r5, #12]
 800de0e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800de10:	6128      	str	r0, [r5, #16]
 800de12:	6169      	str	r1, [r5, #20]
 800de14:	61aa      	str	r2, [r5, #24]
 800de16:	7823      	ldrb	r3, [r4, #0]
 800de18:	772b      	strb	r3, [r5, #28]
    }

    // Extract and convert server port
    if (serverPortPtr) {
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d04d      	beq.n	800debc <puParseStringToStruct+0x2ec>
        serverPortPtr += strlen("t-port=");
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	3307      	adds	r3, #7
 800de24:	62bb      	str	r3, [r7, #40]	; 0x28
        unsigned int port;
        int parsedItems = sscanf(serverPortPtr, "%u", &port);
 800de26:	f107 0308 	add.w	r3, r7, #8
 800de2a:	461a      	mov	r2, r3
 800de2c:	4921      	ldr	r1, [pc, #132]	; (800deb4 <puParseStringToStruct+0x2e4>)
 800de2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de30:	f003 fc6c 	bl	801170c <siscanf>
 800de34:	61f8      	str	r0, [r7, #28]
        if (parsedItems != 1 || port > 65535) {
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d103      	bne.n	800de44 <puParseStringToStruct+0x274>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de42:	d314      	bcc.n	800de6e <puParseStringToStruct+0x29e>
            strcat(errorMessage, "Port unzulässig; ");
 800de44:	480d      	ldr	r0, [pc, #52]	; (800de7c <puParseStringToStruct+0x2ac>)
 800de46:	f7f2 fa13 	bl	8000270 <strlen>
 800de4a:	4603      	mov	r3, r0
 800de4c:	461a      	mov	r2, r3
 800de4e:	4b0b      	ldr	r3, [pc, #44]	; (800de7c <puParseStringToStruct+0x2ac>)
 800de50:	4413      	add	r3, r2
 800de52:	4a19      	ldr	r2, [pc, #100]	; (800deb8 <puParseStringToStruct+0x2e8>)
 800de54:	461d      	mov	r5, r3
 800de56:	4614      	mov	r4, r2
 800de58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de5a:	6028      	str	r0, [r5, #0]
 800de5c:	6069      	str	r1, [r5, #4]
 800de5e:	60aa      	str	r2, [r5, #8]
 800de60:	60eb      	str	r3, [r5, #12]
 800de62:	8823      	ldrh	r3, [r4, #0]
 800de64:	78a2      	ldrb	r2, [r4, #2]
 800de66:	822b      	strh	r3, [r5, #16]
 800de68:	4613      	mov	r3, r2
 800de6a:	74ab      	strb	r3, [r5, #18]
 800de6c:	e03a      	b.n	800dee4 <puParseStringToStruct+0x314>
        } else {
            data->u8Server_Port = (uint16_t)port;
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	b29a      	uxth	r2, r3
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800de78:	e034      	b.n	800dee4 <puParseStringToStruct+0x314>
 800de7a:	bf00      	nop
 800de7c:	20002f78 	.word	0x20002f78
 800de80:	08014ac4 	.word	0x08014ac4
 800de84:	08014acc 	.word	0x08014acc
 800de88:	08014ad4 	.word	0x08014ad4
 800de8c:	08014adc 	.word	0x08014adc
 800de90:	08014ae4 	.word	0x08014ae4
 800de94:	08014aec 	.word	0x08014aec
 800de98:	08014af4 	.word	0x08014af4
 800de9c:	08014afc 	.word	0x08014afc
 800dea0:	08014b18 	.word	0x08014b18
 800dea4:	08014b38 	.word	0x08014b38
 800dea8:	08014b40 	.word	0x08014b40
 800deac:	08014b48 	.word	0x08014b48
 800deb0:	08014b54 	.word	0x08014b54
 800deb4:	08014b74 	.word	0x08014b74
 800deb8:	08014b78 	.word	0x08014b78
        }
    } else {
        strcat(errorMessage, "Port unzulässig; ");
 800debc:	4813      	ldr	r0, [pc, #76]	; (800df0c <puParseStringToStruct+0x33c>)
 800debe:	f7f2 f9d7 	bl	8000270 <strlen>
 800dec2:	4603      	mov	r3, r0
 800dec4:	461a      	mov	r2, r3
 800dec6:	4b11      	ldr	r3, [pc, #68]	; (800df0c <puParseStringToStruct+0x33c>)
 800dec8:	4413      	add	r3, r2
 800deca:	4a11      	ldr	r2, [pc, #68]	; (800df10 <puParseStringToStruct+0x340>)
 800decc:	461d      	mov	r5, r3
 800dece:	4614      	mov	r4, r2
 800ded0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ded2:	6028      	str	r0, [r5, #0]
 800ded4:	6069      	str	r1, [r5, #4]
 800ded6:	60aa      	str	r2, [r5, #8]
 800ded8:	60eb      	str	r3, [r5, #12]
 800deda:	8823      	ldrh	r3, [r4, #0]
 800dedc:	78a2      	ldrb	r2, [r4, #2]
 800dede:	822b      	strh	r3, [r5, #16]
 800dee0:	4613      	mov	r3, r2
 800dee2:	74ab      	strb	r3, [r5, #18]
    }

    // Return the appropriate message
    if (strlen(errorMessage) == 0) {
 800dee4:	4b09      	ldr	r3, [pc, #36]	; (800df0c <puParseStringToStruct+0x33c>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <puParseStringToStruct+0x320>
        return "Übertragung erfolgreich";
 800deec:	4b09      	ldr	r3, [pc, #36]	; (800df14 <puParseStringToStruct+0x344>)
 800deee:	e008      	b.n	800df02 <puParseStringToStruct+0x332>
    } else {
        // Remove the last "; " from the error message
        errorMessage[strlen(errorMessage) - 2] = '\0';
 800def0:	4806      	ldr	r0, [pc, #24]	; (800df0c <puParseStringToStruct+0x33c>)
 800def2:	f7f2 f9bd 	bl	8000270 <strlen>
 800def6:	4603      	mov	r3, r0
 800def8:	3b02      	subs	r3, #2
 800defa:	4a04      	ldr	r2, [pc, #16]	; (800df0c <puParseStringToStruct+0x33c>)
 800defc:	2100      	movs	r1, #0
 800defe:	54d1      	strb	r1, [r2, r3]
        return errorMessage;
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <puParseStringToStruct+0x33c>)
    }
}
 800df02:	4618      	mov	r0, r3
 800df04:	3740      	adds	r7, #64	; 0x40
 800df06:	46bd      	mov	sp, r7
 800df08:	bdb0      	pop	{r4, r5, r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20002f78 	.word	0x20002f78
 800df10:	08014b78 	.word	0x08014b78
 800df14:	08014b8c 	.word	0x08014b8c

0800df18 <u8Send_HTML>:

uint8_t u8Send_HTML (uint8_t u8Channel, const char* pcHTML, uint16_t u16Size)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b090      	sub	sp, #64	; 0x40
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	4603      	mov	r3, r0
 800df20:	6039      	str	r1, [r7, #0]
 800df22:	71fb      	strb	r3, [r7, #7]
 800df24:	4613      	mov	r3, r2
 800df26:	80bb      	strh	r3, [r7, #4]
	uint8_t* pcSend = (uint8_t*)pcHTML;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	//sprintf((char *)pcSend,(char *)pcHTML,Wifi.MAC_Adress);
	uint8_t cBuffer [50];
	while(u16Size > 0)
 800df2c:	e04a      	b.n	800dfc4 <u8Send_HTML+0xac>
	{
		if(u16Size >= 512)
 800df2e:	88bb      	ldrh	r3, [r7, #4]
 800df30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df34:	d326      	bcc.n	800df84 <u8Send_HTML+0x6c>
		{
        	sprintf((char *)cBuffer,"AT+CIPSEND=%d,512\r\n", u8Channel);
 800df36:	79fa      	ldrb	r2, [r7, #7]
 800df38:	f107 0308 	add.w	r3, r7, #8
 800df3c:	492f      	ldr	r1, [pc, #188]	; (800dffc <u8Send_HTML+0xe4>)
 800df3e:	4618      	mov	r0, r3
 800df40:	f003 fbc4 	bl	80116cc <siprintf>
        	Wifi_SendRaw(cBuffer, strlen((char *)cBuffer));
 800df44:	f107 0308 	add.w	r3, r7, #8
 800df48:	4618      	mov	r0, r3
 800df4a:	f7f2 f991 	bl	8000270 <strlen>
 800df4e:	4602      	mov	r2, r0
 800df50:	f107 0308 	add.w	r3, r7, #8
 800df54:	4611      	mov	r1, r2
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe f9f8 	bl	800c34c <Wifi_SendRaw>
        	osDelay(100);
 800df5c:	2064      	movs	r0, #100	; 0x64
 800df5e:	f000 fa12 	bl	800e386 <osDelay>
        	Wifi_SendRaw(pcSend,(uint16_t) 512);
 800df62:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df68:	f7fe f9f0 	bl	800c34c <Wifi_SendRaw>
        	pcSend += 512;
 800df6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df72:	63fb      	str	r3, [r7, #60]	; 0x3c
			u16Size -= 512;
 800df74:	88bb      	ldrh	r3, [r7, #4]
 800df76:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800df7a:	80bb      	strh	r3, [r7, #4]
			osDelay(100);
 800df7c:	2064      	movs	r0, #100	; 0x64
 800df7e:	f000 fa02 	bl	800e386 <osDelay>
 800df82:	e01f      	b.n	800dfc4 <u8Send_HTML+0xac>
		}
		else
		{
        	sprintf((char *)cBuffer,"AT+CIPSEND=%d,%d\r\n", u8Channel, u16Size);
 800df84:	79fa      	ldrb	r2, [r7, #7]
 800df86:	88bb      	ldrh	r3, [r7, #4]
 800df88:	f107 0008 	add.w	r0, r7, #8
 800df8c:	491c      	ldr	r1, [pc, #112]	; (800e000 <u8Send_HTML+0xe8>)
 800df8e:	f003 fb9d 	bl	80116cc <siprintf>
        	Wifi_SendRaw(cBuffer, strlen((char *)cBuffer));
 800df92:	f107 0308 	add.w	r3, r7, #8
 800df96:	4618      	mov	r0, r3
 800df98:	f7f2 f96a 	bl	8000270 <strlen>
 800df9c:	4602      	mov	r2, r0
 800df9e:	f107 0308 	add.w	r3, r7, #8
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fe f9d1 	bl	800c34c <Wifi_SendRaw>
        	osDelay(100);
 800dfaa:	2064      	movs	r0, #100	; 0x64
 800dfac:	f000 f9eb 	bl	800e386 <osDelay>
        	Wifi_SendRaw(pcSend, u16Size);
 800dfb0:	88bb      	ldrh	r3, [r7, #4]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfb6:	f7fe f9c9 	bl	800c34c <Wifi_SendRaw>
        	osDelay(100);
 800dfba:	2064      	movs	r0, #100	; 0x64
 800dfbc:	f000 f9e3 	bl	800e386 <osDelay>
        	u16Size = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	80bb      	strh	r3, [r7, #4]
	while(u16Size > 0)
 800dfc4:	88bb      	ldrh	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1b1      	bne.n	800df2e <u8Send_HTML+0x16>
		}
	}
	sprintf((char *)cBuffer,"AT+CIPCLOSE=%d\r\n", u8Channel);
 800dfca:	79fa      	ldrb	r2, [r7, #7]
 800dfcc:	f107 0308 	add.w	r3, r7, #8
 800dfd0:	490c      	ldr	r1, [pc, #48]	; (800e004 <u8Send_HTML+0xec>)
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f003 fb7a 	bl	80116cc <siprintf>
	Wifi_SendRaw(cBuffer, strlen((char *)cBuffer));
 800dfd8:	f107 0308 	add.w	r3, r7, #8
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7f2 f947 	bl	8000270 <strlen>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	f107 0308 	add.w	r3, r7, #8
 800dfe8:	4611      	mov	r1, r2
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe f9ae 	bl	800c34c <Wifi_SendRaw>
	return 0;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3740      	adds	r7, #64	; 0x40
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	08014ba8 	.word	0x08014ba8
 800e000:	08014bbc 	.word	0x08014bbc
 800e004:	08014bd0 	.word	0x08014bd0

0800e008 <WLAN_Web_Start>:

sEEPROM_Data_t WLAN_Web_Start(Wifi_t* Wifi)
{
 800e008:	b590      	push	{r4, r7, lr}
 800e00a:	b0ad      	sub	sp, #180	; 0xb4
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
	sEEPROM_Data_t sData;
	uint8_t u8HTML_Loop = 1;
 800e012:	2301      	movs	r3, #1
 800e014:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    Wifi_SetMode(WifiMode_SoftAp);
 800e018:	2002      	movs	r0, #2
 800e01a:	f7fe fe5f 	bl	800ccdc <Wifi_SetMode>
  	Wifi_SoftAp_Create("Infopanel-Konfig", "infopanel", 1, WifiEncryptionType_WPA2_PSK, 4, 0);
 800e01e:	2300      	movs	r3, #0
 800e020:	9301      	str	r3, [sp, #4]
 800e022:	2304      	movs	r3, #4
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	2303      	movs	r3, #3
 800e028:	2201      	movs	r2, #1
 800e02a:	4937      	ldr	r1, [pc, #220]	; (800e108 <WLAN_Web_Start+0x100>)
 800e02c:	4837      	ldr	r0, [pc, #220]	; (800e10c <WLAN_Web_Start+0x104>)
 800e02e:	f7ff f97f 	bl	800d330 <Wifi_SoftAp_Create>
    Wifi_SendRaw((uint8_t*)"AT+CIPSERVER=1,80\r\n", 19);
 800e032:	2113      	movs	r1, #19
 800e034:	4836      	ldr	r0, [pc, #216]	; (800e110 <WLAN_Web_Start+0x108>)
 800e036:	f7fe f989 	bl	800c34c <Wifi_SendRaw>

    Wifi_GetMyIp();
 800e03a:	f7fe ff0b 	bl	800ce54 <Wifi_GetMyIp>
    u8WifiMAC();
 800e03e:	f7ff fda9 	bl	800db94 <u8WifiMAC>
    vReplaceMacAddress(htmlContent,(const char*)Wifi->MAC_Adress);
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800e048:	3312      	adds	r3, #18
 800e04a:	4619      	mov	r1, r3
 800e04c:	4831      	ldr	r0, [pc, #196]	; (800e114 <WLAN_Web_Start+0x10c>)
 800e04e:	f7ff fd27 	bl	800daa0 <vReplaceMacAddress>
    while (u8HTML_Loop)
 800e052:	e048      	b.n	800e0e6 <WLAN_Web_Start+0xde>
    {
    	Wifi_SoftAp_GetConnectedDevices();
 800e054:	f7ff f8a0 	bl	800d198 <Wifi_SoftAp_GetConnectedDevices>
        if(Wifi->GotNewData==true)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e05e:	f893 3a19 	ldrb.w	r3, [r3, #2585]	; 0xa19
 800e062:	2b00      	cmp	r3, #0
 800e064:	d03c      	beq.n	800e0e0 <WLAN_Web_Start+0xd8>
        {

        	if (strstr((char*)Wifi->RxBufferForData, "GET") != NULL)
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800e06c:	3304      	adds	r3, #4
 800e06e:	492a      	ldr	r1, [pc, #168]	; (800e118 <WLAN_Web_Start+0x110>)
 800e070:	4618      	mov	r0, r3
 800e072:	f003 fc3f 	bl	80118f4 <strstr>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00f      	beq.n	800e09c <WLAN_Web_Start+0x94>
        	{
        		u8Send_HTML(Wifi->RxDataConnectionNumber, htmlContent, strlen(htmlContent));
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e082:	f893 4a12 	ldrb.w	r4, [r3, #2578]	; 0xa12
 800e086:	4823      	ldr	r0, [pc, #140]	; (800e114 <WLAN_Web_Start+0x10c>)
 800e088:	f7f2 f8f2 	bl	8000270 <strlen>
 800e08c:	4603      	mov	r3, r0
 800e08e:	b29b      	uxth	r3, r3
 800e090:	461a      	mov	r2, r3
 800e092:	4920      	ldr	r1, [pc, #128]	; (800e114 <WLAN_Web_Start+0x10c>)
 800e094:	4620      	mov	r0, r4
 800e096:	f7ff ff3f 	bl	800df18 <u8Send_HTML>
 800e09a:	e01b      	b.n	800e0d4 <WLAN_Web_Start+0xcc>
        	}
        	else if (strstr((char*)Wifi->RxBufferForData, "POST") != NULL)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	491d      	ldr	r1, [pc, #116]	; (800e11c <WLAN_Web_Start+0x114>)
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f003 fc24 	bl	80118f4 <strstr>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d010      	beq.n	800e0d4 <WLAN_Web_Start+0xcc>
        	{
        		u8HTML_Loop = u8SendReport((const char*) Wifi->RxBufferForData, &sData, Wifi->RxDataConnectionNumber);
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e0c0:	f892 2a12 	ldrb.w	r2, [r2, #2578]	; 0xa12
 800e0c4:	f107 0108 	add.w	r1, r7, #8
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f829 	bl	800e120 <u8SendReport>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        	}

        	Wifi->GotNewData=false;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2a19 	strb.w	r2, [r3, #2585]	; 0xa19
        }
        HAL_Delay(100);
 800e0e0:	2064      	movs	r0, #100	; 0x64
 800e0e2:	f7f7 f977 	bl	80053d4 <HAL_Delay>
    while (u8HTML_Loop)
 800e0e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1b2      	bne.n	800e054 <WLAN_Web_Start+0x4c>
    }
    return sData;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f107 0308 	add.w	r3, r7, #8
 800e0f6:	229c      	movs	r2, #156	; 0x9c
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f003 fca0 	bl	8011a3e <memcpy>
}
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	37ac      	adds	r7, #172	; 0xac
 800e102:	46bd      	mov	sp, r7
 800e104:	bd90      	pop	{r4, r7, pc}
 800e106:	bf00      	nop
 800e108:	08014be4 	.word	0x08014be4
 800e10c:	08014bf0 	.word	0x08014bf0
 800e110:	08014c04 	.word	0x08014c04
 800e114:	20000114 	.word	0x20000114
 800e118:	08014c18 	.word	0x08014c18
 800e11c:	08014c1c 	.word	0x08014c1c

0800e120 <u8SendReport>:

uint8_t u8SendReport(const char* Rx_Buffer, sEEPROM_Data_t* sData, uint8_t u8Channel)
{
 800e120:	b590      	push	{r4, r7, lr}
 800e122:	b0b3      	sub	sp, #204	; 0xcc
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	4613      	mov	r3, r2
 800e12c:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Return = 1;
 800e12e:	2301      	movs	r3, #1
 800e130:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	uint8_t cBuffer [100];
	const char* pcReturn = puParseStringToStruct(Rx_Buffer, sData);
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff fd4a 	bl	800dbd0 <puParseStringToStruct>
 800e13c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	osDelay(100);
 800e140:	2064      	movs	r0, #100	; 0x64
 800e142:	f000 f920 	bl	800e386 <osDelay>
	if (strstr(pcReturn, "Übertragung erfolgreich"))
 800e146:	494c      	ldr	r1, [pc, #304]	; (800e278 <u8SendReport+0x158>)
 800e148:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e14c:	f003 fbd2 	bl	80118f4 <strstr>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d041      	beq.n	800e1da <u8SendReport+0xba>
	{
		uint8_t u8SendString[] = "Die Konfiguration ist abgeschlossen, das Gerät fährt nun herunter.";
 800e156:	4a49      	ldr	r2, [pc, #292]	; (800e27c <u8SendReport+0x15c>)
 800e158:	f107 0314 	add.w	r3, r7, #20
 800e15c:	4611      	mov	r1, r2
 800e15e:	2245      	movs	r2, #69	; 0x45
 800e160:	4618      	mov	r0, r3
 800e162:	f003 fc6c 	bl	8011a3e <memcpy>
		sprintf((char *)cBuffer,"AT+CIPSEND=%d,%d\r\n", u8Channel, strlen(u8SendString)+7);
 800e166:	79fc      	ldrb	r4, [r7, #7]
 800e168:	f107 0314 	add.w	r3, r7, #20
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7f2 f87f 	bl	8000270 <strlen>
 800e172:	4603      	mov	r3, r0
 800e174:	3307      	adds	r3, #7
 800e176:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800e17a:	4622      	mov	r2, r4
 800e17c:	4940      	ldr	r1, [pc, #256]	; (800e280 <u8SendReport+0x160>)
 800e17e:	f003 faa5 	bl	80116cc <siprintf>
		Wifi_SendRaw(cBuffer, strlen((char *)cBuffer));
 800e182:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e186:	4618      	mov	r0, r3
 800e188:	f7f2 f872 	bl	8000270 <strlen>
 800e18c:	4602      	mov	r2, r0
 800e18e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e192:	4611      	mov	r1, r2
 800e194:	4618      	mov	r0, r3
 800e196:	f7fe f8d9 	bl	800c34c <Wifi_SendRaw>
		osDelay(100);
 800e19a:	2064      	movs	r0, #100	; 0x64
 800e19c:	f000 f8f3 	bl	800e386 <osDelay>
		sprintf((char *)cBuffer,"report=%s", u8SendString);
 800e1a0:	f107 0214 	add.w	r2, r7, #20
 800e1a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1a8:	4936      	ldr	r1, [pc, #216]	; (800e284 <u8SendReport+0x164>)
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f003 fa8e 	bl	80116cc <siprintf>
		Wifi_SendRaw((uint8_t *)cBuffer,(uint16_t) strlen((char*)cBuffer));
 800e1b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f2 f85b 	bl	8000270 <strlen>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe f8c0 	bl	800c34c <Wifi_SendRaw>
		osDelay(100);
 800e1cc:	2064      	movs	r0, #100	; 0x64
 800e1ce:	f000 f8da 	bl	800e386 <osDelay>
		u8Return = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800e1d8:	e034      	b.n	800e244 <u8SendReport+0x124>
	}
	else
	{
		sprintf((char *)cBuffer,"AT+CIPSEND=%d,%d\r\n", u8Channel, strlen(pcReturn)+7);
 800e1da:	79fc      	ldrb	r4, [r7, #7]
 800e1dc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e1e0:	f7f2 f846 	bl	8000270 <strlen>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	3307      	adds	r3, #7
 800e1e8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4924      	ldr	r1, [pc, #144]	; (800e280 <u8SendReport+0x160>)
 800e1f0:	f003 fa6c 	bl	80116cc <siprintf>
		Wifi_SendRaw(cBuffer, strlen((char *)cBuffer));
 800e1f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7f2 f839 	bl	8000270 <strlen>
 800e1fe:	4602      	mov	r2, r0
 800e200:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe f8a0 	bl	800c34c <Wifi_SendRaw>
		osDelay(100);
 800e20c:	2064      	movs	r0, #100	; 0x64
 800e20e:	f000 f8ba 	bl	800e386 <osDelay>
		sprintf((char *)cBuffer,"report=%s", pcReturn);
 800e212:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e216:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e21a:	491a      	ldr	r1, [pc, #104]	; (800e284 <u8SendReport+0x164>)
 800e21c:	4618      	mov	r0, r3
 800e21e:	f003 fa55 	bl	80116cc <siprintf>
		Wifi_SendRaw((uint8_t *)cBuffer,(uint16_t) strlen((char*)cBuffer));
 800e222:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e226:	4618      	mov	r0, r3
 800e228:	f7f2 f822 	bl	8000270 <strlen>
 800e22c:	4603      	mov	r3, r0
 800e22e:	b29b      	uxth	r3, r3
 800e230:	461a      	mov	r2, r3
 800e232:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e236:	4611      	mov	r1, r2
 800e238:	4618      	mov	r0, r3
 800e23a:	f7fe f887 	bl	800c34c <Wifi_SendRaw>
		osDelay(100);
 800e23e:	2064      	movs	r0, #100	; 0x64
 800e240:	f000 f8a1 	bl	800e386 <osDelay>
	}
	sprintf((char *)cBuffer,"AT+CIPCLOSE=%d\r\n", u8Channel);
 800e244:	79fa      	ldrb	r2, [r7, #7]
 800e246:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e24a:	490f      	ldr	r1, [pc, #60]	; (800e288 <u8SendReport+0x168>)
 800e24c:	4618      	mov	r0, r3
 800e24e:	f003 fa3d 	bl	80116cc <siprintf>
	Wifi_SendRaw(cBuffer, strlen((char *)cBuffer));
 800e252:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e256:	4618      	mov	r0, r3
 800e258:	f7f2 f80a 	bl	8000270 <strlen>
 800e25c:	4602      	mov	r2, r0
 800e25e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe f871 	bl	800c34c <Wifi_SendRaw>
	return u8Return;
 800e26a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 800e26e:	4618      	mov	r0, r3
 800e270:	37cc      	adds	r7, #204	; 0xcc
 800e272:	46bd      	mov	sp, r7
 800e274:	bd90      	pop	{r4, r7, pc}
 800e276:	bf00      	nop
 800e278:	08014b8c 	.word	0x08014b8c
 800e27c:	08014c30 	.word	0x08014c30
 800e280:	08014bbc 	.word	0x08014bbc
 800e284:	08014c24 	.word	0x08014c24
 800e288:	08014bd0 	.word	0x08014bd0

0800e28c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	4603      	mov	r3, r0
 800e294:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e29a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e29e:	2b84      	cmp	r3, #132	; 0x84
 800e2a0:	d005      	beq.n	800e2ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e2a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	3303      	adds	r3, #3
 800e2ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3714      	adds	r7, #20
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2c2:	f3ef 8305 	mrs	r3, IPSR
 800e2c6:	607b      	str	r3, [r7, #4]
  return(result);
 800e2c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	bf14      	ite	ne
 800e2ce:	2301      	movne	r3, #1
 800e2d0:	2300      	moveq	r3, #0
 800e2d2:	b2db      	uxtb	r3, r3
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e2e4:	f001 f910 	bl	800f508 <vTaskStartScheduler>
  
  return osOK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e2ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2f0:	b089      	sub	sp, #36	; 0x24
 800e2f2:	af04      	add	r7, sp, #16
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	695b      	ldr	r3, [r3, #20]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d020      	beq.n	800e342 <osThreadCreate+0x54>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d01c      	beq.n	800e342 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685c      	ldr	r4, [r3, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	691e      	ldr	r6, [r3, #16]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff ffb6 	bl	800e28c <makeFreeRtosPriority>
 800e320:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	695b      	ldr	r3, [r3, #20]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e32a:	9202      	str	r2, [sp, #8]
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	9100      	str	r1, [sp, #0]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	4632      	mov	r2, r6
 800e334:	4629      	mov	r1, r5
 800e336:	4620      	mov	r0, r4
 800e338:	f000 ff1e 	bl	800f178 <xTaskCreateStatic>
 800e33c:	4603      	mov	r3, r0
 800e33e:	60fb      	str	r3, [r7, #12]
 800e340:	e01c      	b.n	800e37c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685c      	ldr	r4, [r3, #4]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e34e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff ff98 	bl	800e28c <makeFreeRtosPriority>
 800e35c:	4602      	mov	r2, r0
 800e35e:	f107 030c 	add.w	r3, r7, #12
 800e362:	9301      	str	r3, [sp, #4]
 800e364:	9200      	str	r2, [sp, #0]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	4632      	mov	r2, r6
 800e36a:	4629      	mov	r1, r5
 800e36c:	4620      	mov	r0, r4
 800e36e:	f000 ff60 	bl	800f232 <xTaskCreate>
 800e372:	4603      	mov	r3, r0
 800e374:	2b01      	cmp	r3, #1
 800e376:	d001      	beq.n	800e37c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	e000      	b.n	800e37e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e37c:	68fb      	ldr	r3, [r7, #12]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3714      	adds	r7, #20
 800e382:	46bd      	mov	sp, r7
 800e384:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e386 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b084      	sub	sp, #16
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <osDelay+0x16>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	e000      	b.n	800e39e <osDelay+0x18>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f001 f87e 	bl	800f4a0 <vTaskDelay>
  
  return osOK;
 800e3a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b086      	sub	sp, #24
 800e3b2:	af02      	add	r7, sp, #8
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00f      	beq.n	800e3e0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d10a      	bne.n	800e3dc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	2203      	movs	r2, #3
 800e3cc:	9200      	str	r2, [sp, #0]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	2001      	movs	r0, #1
 800e3d4:	f000 f9be 	bl	800e754 <xQueueGenericCreateStatic>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	e016      	b.n	800e40a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	e014      	b.n	800e40a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d110      	bne.n	800e408 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e3e6:	2203      	movs	r2, #3
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	f000 fa2a 	bl	800e844 <xQueueGenericCreate>
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d005      	beq.n	800e404 <osSemaphoreCreate+0x56>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	68f8      	ldr	r0, [r7, #12]
 800e400:	f000 fa7a 	bl	800e8f8 <xQueueGenericSend>
      return sema;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	e000      	b.n	800e40a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e408:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
	...

0800e414 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e41e:	2300      	movs	r3, #0
 800e420:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e428:	2380      	movs	r3, #128	; 0x80
 800e42a:	e03a      	b.n	800e4a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e436:	d103      	bne.n	800e440 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e438:	f04f 33ff 	mov.w	r3, #4294967295
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	e009      	b.n	800e454 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d006      	beq.n	800e454 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d101      	bne.n	800e454 <osSemaphoreWait+0x40>
      ticks = 1;
 800e450:	2301      	movs	r3, #1
 800e452:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e454:	f7ff ff32 	bl	800e2bc <inHandlerMode>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d017      	beq.n	800e48e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e45e:	f107 0308 	add.w	r3, r7, #8
 800e462:	461a      	mov	r2, r3
 800e464:	2100      	movs	r1, #0
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fcde 	bl	800ee28 <xQueueReceiveFromISR>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d001      	beq.n	800e476 <osSemaphoreWait+0x62>
      return osErrorOS;
 800e472:	23ff      	movs	r3, #255	; 0xff
 800e474:	e015      	b.n	800e4a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d011      	beq.n	800e4a0 <osSemaphoreWait+0x8c>
 800e47c:	4b0b      	ldr	r3, [pc, #44]	; (800e4ac <osSemaphoreWait+0x98>)
 800e47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	e008      	b.n	800e4a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e48e:	68f9      	ldr	r1, [r7, #12]
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fbbd 	bl	800ec10 <xQueueSemaphoreTake>
 800e496:	4603      	mov	r3, r0
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d001      	beq.n	800e4a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e49c:	23ff      	movs	r3, #255	; 0xff
 800e49e:	e000      	b.n	800e4a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	e000ed04 	.word	0xe000ed04

0800e4b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e4c0:	f7ff fefc 	bl	800e2bc <inHandlerMode>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d016      	beq.n	800e4f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e4ca:	f107 0308 	add.w	r3, r7, #8
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fb0f 	bl	800eaf4 <xQueueGiveFromISR>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d001      	beq.n	800e4e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e4dc:	23ff      	movs	r3, #255	; 0xff
 800e4de:	e017      	b.n	800e510 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d013      	beq.n	800e50e <osSemaphoreRelease+0x5e>
 800e4e6:	4b0c      	ldr	r3, [pc, #48]	; (800e518 <osSemaphoreRelease+0x68>)
 800e4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ec:	601a      	str	r2, [r3, #0]
 800e4ee:	f3bf 8f4f 	dsb	sy
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	e00a      	b.n	800e50e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f9fa 	bl	800e8f8 <xQueueGenericSend>
 800e504:	4603      	mov	r3, r0
 800e506:	2b01      	cmp	r3, #1
 800e508:	d001      	beq.n	800e50e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e50a:	23ff      	movs	r3, #255	; 0xff
 800e50c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e50e:	68fb      	ldr	r3, [r7, #12]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	e000ed04 	.word	0xe000ed04

0800e51c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f103 0208 	add.w	r2, r3, #8
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f04f 32ff 	mov.w	r2, #4294967295
 800e534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f103 0208 	add.w	r2, r3, #8
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f103 0208 	add.w	r2, r3, #8
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e550:	bf00      	nop
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e56a:	bf00      	nop
 800e56c:	370c      	adds	r7, #12
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e576:	b480      	push	{r7}
 800e578:	b085      	sub	sp, #20
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	689a      	ldr	r2, [r3, #8]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	601a      	str	r2, [r3, #0]
}
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5be:	b480      	push	{r7}
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d4:	d103      	bne.n	800e5de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	691b      	ldr	r3, [r3, #16]
 800e5da:	60fb      	str	r3, [r7, #12]
 800e5dc:	e00c      	b.n	800e5f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	e002      	b.n	800e5ec <vListInsert+0x2e>
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d2f6      	bcs.n	800e5e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	685a      	ldr	r2, [r3, #4]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	683a      	ldr	r2, [r7, #0]
 800e606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	1c5a      	adds	r2, r3, #1
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	601a      	str	r2, [r3, #0]
}
 800e624:	bf00      	nop
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	6892      	ldr	r2, [r2, #8]
 800e646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	6852      	ldr	r2, [r2, #4]
 800e650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d103      	bne.n	800e664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	689a      	ldr	r2, [r3, #8]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	1e5a      	subs	r2, r3, #1
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10a      	bne.n	800e6ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e6ae:	f001 fe79 	bl	80103a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ba:	68f9      	ldr	r1, [r7, #12]
 800e6bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e6be:	fb01 f303 	mul.w	r3, r1, r3
 800e6c2:	441a      	add	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	68f9      	ldr	r1, [r7, #12]
 800e6e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e6e4:	fb01 f303 	mul.w	r3, r1, r3
 800e6e8:	441a      	add	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	22ff      	movs	r2, #255	; 0xff
 800e6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	22ff      	movs	r2, #255	; 0xff
 800e6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d114      	bne.n	800e72e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01a      	beq.n	800e742 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3310      	adds	r3, #16
 800e710:	4618      	mov	r0, r3
 800e712:	f001 f93b 	bl	800f98c <xTaskRemoveFromEventList>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d012      	beq.n	800e742 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e71c:	4b0c      	ldr	r3, [pc, #48]	; (800e750 <xQueueGenericReset+0xcc>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	e009      	b.n	800e742 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3310      	adds	r3, #16
 800e732:	4618      	mov	r0, r3
 800e734:	f7ff fef2 	bl	800e51c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3324      	adds	r3, #36	; 0x24
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7ff feed 	bl	800e51c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e742:	f001 fe5f 	bl	8010404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e746:	2301      	movs	r3, #1
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	e000ed04 	.word	0xe000ed04

0800e754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08e      	sub	sp, #56	; 0x38
 800e758:	af02      	add	r7, sp, #8
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
 800e760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10a      	bne.n	800e77e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e77a:	bf00      	nop
 800e77c:	e7fe      	b.n	800e77c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e796:	bf00      	nop
 800e798:	e7fe      	b.n	800e798 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <xQueueGenericCreateStatic+0x52>
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d001      	beq.n	800e7aa <xQueueGenericCreateStatic+0x56>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e000      	b.n	800e7ac <xQueueGenericCreateStatic+0x58>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10a      	bne.n	800e7c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	623b      	str	r3, [r7, #32]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <xQueueGenericCreateStatic+0x7e>
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <xQueueGenericCreateStatic+0x82>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e000      	b.n	800e7d8 <xQueueGenericCreateStatic+0x84>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10a      	bne.n	800e7f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	61fb      	str	r3, [r7, #28]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e7f2:	2348      	movs	r3, #72	; 0x48
 800e7f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2b48      	cmp	r3, #72	; 0x48
 800e7fa:	d00a      	beq.n	800e812 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	61bb      	str	r3, [r7, #24]
}
 800e80e:	bf00      	nop
 800e810:	e7fe      	b.n	800e810 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e812:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00d      	beq.n	800e83a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e820:	2201      	movs	r2, #1
 800e822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e826:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	4613      	mov	r3, r2
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	68b9      	ldr	r1, [r7, #8]
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f000 f83f 	bl	800e8b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3730      	adds	r7, #48	; 0x30
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e844:	b580      	push	{r7, lr}
 800e846:	b08a      	sub	sp, #40	; 0x28
 800e848:	af02      	add	r7, sp, #8
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10a      	bne.n	800e86e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	613b      	str	r3, [r7, #16]
}
 800e86a:	bf00      	nop
 800e86c:	e7fe      	b.n	800e86c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	fb02 f303 	mul.w	r3, r2, r3
 800e876:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	3348      	adds	r3, #72	; 0x48
 800e87c:	4618      	mov	r0, r3
 800e87e:	f001 feb3 	bl	80105e8 <pvPortMalloc>
 800e882:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d011      	beq.n	800e8ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	3348      	adds	r3, #72	; 0x48
 800e892:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	2200      	movs	r2, #0
 800e898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e89c:	79fa      	ldrb	r2, [r7, #7]
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	68b9      	ldr	r1, [r7, #8]
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f000 f805 	bl	800e8b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e8ae:	69bb      	ldr	r3, [r7, #24]
	}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3720      	adds	r7, #32
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d103      	bne.n	800e8d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	69ba      	ldr	r2, [r7, #24]
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	e002      	b.n	800e8da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e8e6:	2101      	movs	r1, #1
 800e8e8:	69b8      	ldr	r0, [r7, #24]
 800e8ea:	f7ff fecb 	bl	800e684 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e8ee:	bf00      	nop
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
	...

0800e8f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b08e      	sub	sp, #56	; 0x38
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
 800e904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e906:	2300      	movs	r3, #0
 800e908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <xQueueGenericSend+0x32>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d103      	bne.n	800e938 <xQueueGenericSend+0x40>
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <xQueueGenericSend+0x44>
 800e938:	2301      	movs	r3, #1
 800e93a:	e000      	b.n	800e93e <xQueueGenericSend+0x46>
 800e93c:	2300      	movs	r3, #0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <xQueueGenericSend+0x60>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e954:	bf00      	nop
 800e956:	e7fe      	b.n	800e956 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	d103      	bne.n	800e966 <xQueueGenericSend+0x6e>
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e962:	2b01      	cmp	r3, #1
 800e964:	d101      	bne.n	800e96a <xQueueGenericSend+0x72>
 800e966:	2301      	movs	r3, #1
 800e968:	e000      	b.n	800e96c <xQueueGenericSend+0x74>
 800e96a:	2300      	movs	r3, #0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10a      	bne.n	800e986 <xQueueGenericSend+0x8e>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	623b      	str	r3, [r7, #32]
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e986:	f001 f9bd 	bl	800fd04 <xTaskGetSchedulerState>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <xQueueGenericSend+0x9e>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <xQueueGenericSend+0xa2>
 800e996:	2301      	movs	r3, #1
 800e998:	e000      	b.n	800e99c <xQueueGenericSend+0xa4>
 800e99a:	2300      	movs	r3, #0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d10a      	bne.n	800e9b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a4:	f383 8811 	msr	BASEPRI, r3
 800e9a8:	f3bf 8f6f 	isb	sy
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	61fb      	str	r3, [r7, #28]
}
 800e9b2:	bf00      	nop
 800e9b4:	e7fe      	b.n	800e9b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9b6:	f001 fcf5 	bl	80103a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d302      	bcc.n	800e9cc <xQueueGenericSend+0xd4>
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d129      	bne.n	800ea20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	68b9      	ldr	r1, [r7, #8]
 800e9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9d2:	f000 fac1 	bl	800ef58 <prvCopyDataToQueue>
 800e9d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d010      	beq.n	800ea02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	3324      	adds	r3, #36	; 0x24
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f000 ffd1 	bl	800f98c <xTaskRemoveFromEventList>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d013      	beq.n	800ea18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e9f0:	4b3f      	ldr	r3, [pc, #252]	; (800eaf0 <xQueueGenericSend+0x1f8>)
 800e9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9f6:	601a      	str	r2, [r3, #0]
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	e00a      	b.n	800ea18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d007      	beq.n	800ea18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea08:	4b39      	ldr	r3, [pc, #228]	; (800eaf0 <xQueueGenericSend+0x1f8>)
 800ea0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea18:	f001 fcf4 	bl	8010404 <vPortExitCritical>
				return pdPASS;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e063      	b.n	800eae8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d103      	bne.n	800ea2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea26:	f001 fced 	bl	8010404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	e05c      	b.n	800eae8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d106      	bne.n	800ea42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea34:	f107 0314 	add.w	r3, r7, #20
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f001 f809 	bl	800fa50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea42:	f001 fcdf 	bl	8010404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea46:	f000 fdbf 	bl	800f5c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea4a:	f001 fcab 	bl	80103a4 <vPortEnterCritical>
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea54:	b25b      	sxtb	r3, r3
 800ea56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5a:	d103      	bne.n	800ea64 <xQueueGenericSend+0x16c>
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea70:	d103      	bne.n	800ea7a <xQueueGenericSend+0x182>
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea7a:	f001 fcc3 	bl	8010404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea7e:	1d3a      	adds	r2, r7, #4
 800ea80:	f107 0314 	add.w	r3, r7, #20
 800ea84:	4611      	mov	r1, r2
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 fff8 	bl	800fa7c <xTaskCheckForTimeOut>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d124      	bne.n	800eadc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ea92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea94:	f000 fb58 	bl	800f148 <prvIsQueueFull>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d018      	beq.n	800ead0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	3310      	adds	r3, #16
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 ff4c 	bl	800f944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eaac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaae:	f000 fae3 	bl	800f078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eab2:	f000 fd97 	bl	800f5e4 <xTaskResumeAll>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f47f af7c 	bne.w	800e9b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eabe:	4b0c      	ldr	r3, [pc, #48]	; (800eaf0 <xQueueGenericSend+0x1f8>)
 800eac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	f3bf 8f4f 	dsb	sy
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	e772      	b.n	800e9b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ead0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ead2:	f000 fad1 	bl	800f078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ead6:	f000 fd85 	bl	800f5e4 <xTaskResumeAll>
 800eada:	e76c      	b.n	800e9b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eadc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eade:	f000 facb 	bl	800f078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eae2:	f000 fd7f 	bl	800f5e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3738      	adds	r7, #56	; 0x38
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	e000ed04 	.word	0xe000ed04

0800eaf4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b08e      	sub	sp, #56	; 0x38
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10a      	bne.n	800eb1e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0c:	f383 8811 	msr	BASEPRI, r3
 800eb10:	f3bf 8f6f 	isb	sy
 800eb14:	f3bf 8f4f 	dsb	sy
 800eb18:	623b      	str	r3, [r7, #32]
}
 800eb1a:	bf00      	nop
 800eb1c:	e7fe      	b.n	800eb1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00a      	beq.n	800eb3c <xQueueGiveFromISR+0x48>
	__asm volatile
 800eb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	61fb      	str	r3, [r7, #28]
}
 800eb38:	bf00      	nop
 800eb3a:	e7fe      	b.n	800eb3a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d103      	bne.n	800eb4c <xQueueGiveFromISR+0x58>
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d101      	bne.n	800eb50 <xQueueGiveFromISR+0x5c>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e000      	b.n	800eb52 <xQueueGiveFromISR+0x5e>
 800eb50:	2300      	movs	r3, #0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10a      	bne.n	800eb6c <xQueueGiveFromISR+0x78>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	61bb      	str	r3, [r7, #24]
}
 800eb68:	bf00      	nop
 800eb6a:	e7fe      	b.n	800eb6a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb6c:	f001 fcfc 	bl	8010568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eb70:	f3ef 8211 	mrs	r2, BASEPRI
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	617a      	str	r2, [r7, #20]
 800eb86:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eb88:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb90:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d22b      	bcs.n	800ebf4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba8:	1c5a      	adds	r2, r3, #1
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ebae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb6:	d112      	bne.n	800ebde <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d016      	beq.n	800ebee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	3324      	adds	r3, #36	; 0x24
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 fee1 	bl	800f98c <xTaskRemoveFromEventList>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00e      	beq.n	800ebee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00b      	beq.n	800ebee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	e007      	b.n	800ebee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ebde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	b25a      	sxtb	r2, r3
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf2:	e001      	b.n	800ebf8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ec02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3738      	adds	r7, #56	; 0x38
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08e      	sub	sp, #56	; 0x38
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec22:	2300      	movs	r3, #0
 800ec24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10a      	bne.n	800ec42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec30:	f383 8811 	msr	BASEPRI, r3
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	623b      	str	r3, [r7, #32]
}
 800ec3e:	bf00      	nop
 800ec40:	e7fe      	b.n	800ec40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ec4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4e:	f383 8811 	msr	BASEPRI, r3
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	f3bf 8f4f 	dsb	sy
 800ec5a:	61fb      	str	r3, [r7, #28]
}
 800ec5c:	bf00      	nop
 800ec5e:	e7fe      	b.n	800ec5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec60:	f001 f850 	bl	800fd04 <xTaskGetSchedulerState>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d102      	bne.n	800ec70 <xQueueSemaphoreTake+0x60>
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <xQueueSemaphoreTake+0x64>
 800ec70:	2301      	movs	r3, #1
 800ec72:	e000      	b.n	800ec76 <xQueueSemaphoreTake+0x66>
 800ec74:	2300      	movs	r3, #0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10a      	bne.n	800ec90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	61bb      	str	r3, [r7, #24]
}
 800ec8c:	bf00      	nop
 800ec8e:	e7fe      	b.n	800ec8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec90:	f001 fb88 	bl	80103a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ec94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ec9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d024      	beq.n	800ecea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	1e5a      	subs	r2, r3, #1
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d104      	bne.n	800ecba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ecb0:	f001 f9d0 	bl	8010054 <pvTaskIncrementMutexHeldCount>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	691b      	ldr	r3, [r3, #16]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00f      	beq.n	800ece2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	3310      	adds	r3, #16
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f000 fe60 	bl	800f98c <xTaskRemoveFromEventList>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d007      	beq.n	800ece2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ecd2:	4b54      	ldr	r3, [pc, #336]	; (800ee24 <xQueueSemaphoreTake+0x214>)
 800ecd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ece2:	f001 fb8f 	bl	8010404 <vPortExitCritical>
				return pdPASS;
 800ece6:	2301      	movs	r3, #1
 800ece8:	e097      	b.n	800ee1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d111      	bne.n	800ed14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00a      	beq.n	800ed0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ecf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfa:	f383 8811 	msr	BASEPRI, r3
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f3bf 8f4f 	dsb	sy
 800ed06:	617b      	str	r3, [r7, #20]
}
 800ed08:	bf00      	nop
 800ed0a:	e7fe      	b.n	800ed0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed0c:	f001 fb7a 	bl	8010404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed10:	2300      	movs	r3, #0
 800ed12:	e082      	b.n	800ee1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d106      	bne.n	800ed28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed1a:	f107 030c 	add.w	r3, r7, #12
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 fe96 	bl	800fa50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed24:	2301      	movs	r3, #1
 800ed26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed28:	f001 fb6c 	bl	8010404 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed2c:	f000 fc4c 	bl	800f5c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed30:	f001 fb38 	bl	80103a4 <vPortEnterCritical>
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed3a:	b25b      	sxtb	r3, r3
 800ed3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed40:	d103      	bne.n	800ed4a <xQueueSemaphoreTake+0x13a>
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed50:	b25b      	sxtb	r3, r3
 800ed52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed56:	d103      	bne.n	800ed60 <xQueueSemaphoreTake+0x150>
 800ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed60:	f001 fb50 	bl	8010404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed64:	463a      	mov	r2, r7
 800ed66:	f107 030c 	add.w	r3, r7, #12
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 fe85 	bl	800fa7c <xTaskCheckForTimeOut>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d132      	bne.n	800edde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed7a:	f000 f9cf 	bl	800f11c <prvIsQueueEmpty>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d026      	beq.n	800edd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d109      	bne.n	800eda0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ed8c:	f001 fb0a 	bl	80103a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 ffd3 	bl	800fd40 <xTaskPriorityInherit>
 800ed9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ed9c:	f001 fb32 	bl	8010404 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda2:	3324      	adds	r3, #36	; 0x24
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	4611      	mov	r1, r2
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 fdcb 	bl	800f944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800edae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edb0:	f000 f962 	bl	800f078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edb4:	f000 fc16 	bl	800f5e4 <xTaskResumeAll>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f47f af68 	bne.w	800ec90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800edc0:	4b18      	ldr	r3, [pc, #96]	; (800ee24 <xQueueSemaphoreTake+0x214>)
 800edc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	e75e      	b.n	800ec90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800edd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd4:	f000 f950 	bl	800f078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edd8:	f000 fc04 	bl	800f5e4 <xTaskResumeAll>
 800eddc:	e758      	b.n	800ec90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800edde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ede0:	f000 f94a 	bl	800f078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ede4:	f000 fbfe 	bl	800f5e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ede8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edea:	f000 f997 	bl	800f11c <prvIsQueueEmpty>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f43f af4d 	beq.w	800ec90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800edf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00d      	beq.n	800ee18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800edfc:	f001 fad2 	bl	80103a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee02:	f000 f891 	bl	800ef28 <prvGetDisinheritPriorityAfterTimeout>
 800ee06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f001 f892 	bl	800ff38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee14:	f001 faf6 	bl	8010404 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3738      	adds	r7, #56	; 0x38
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	e000ed04 	.word	0xe000ed04

0800ee28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08e      	sub	sp, #56	; 0x38
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10a      	bne.n	800ee54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	623b      	str	r3, [r7, #32]
}
 800ee50:	bf00      	nop
 800ee52:	e7fe      	b.n	800ee52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d103      	bne.n	800ee62 <xQueueReceiveFromISR+0x3a>
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d101      	bne.n	800ee66 <xQueueReceiveFromISR+0x3e>
 800ee62:	2301      	movs	r3, #1
 800ee64:	e000      	b.n	800ee68 <xQueueReceiveFromISR+0x40>
 800ee66:	2300      	movs	r3, #0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d10a      	bne.n	800ee82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	61fb      	str	r3, [r7, #28]
}
 800ee7e:	bf00      	nop
 800ee80:	e7fe      	b.n	800ee80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee82:	f001 fb71 	bl	8010568 <vPortValidateInterruptPriority>
	__asm volatile
 800ee86:	f3ef 8211 	mrs	r2, BASEPRI
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	61ba      	str	r2, [r7, #24]
 800ee9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ee9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d02f      	beq.n	800ef0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eeb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eeb8:	68b9      	ldr	r1, [r7, #8]
 800eeba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eebc:	f000 f8b6 	bl	800f02c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	1e5a      	subs	r2, r3, #1
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed0:	d112      	bne.n	800eef8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d016      	beq.n	800ef08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	3310      	adds	r3, #16
 800eede:	4618      	mov	r0, r3
 800eee0:	f000 fd54 	bl	800f98c <xTaskRemoveFromEventList>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00e      	beq.n	800ef08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00b      	beq.n	800ef08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	601a      	str	r2, [r3, #0]
 800eef6:	e007      	b.n	800ef08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eefc:	3301      	adds	r3, #1
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	b25a      	sxtb	r2, r3
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ef0c:	e001      	b.n	800ef12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	637b      	str	r3, [r7, #52]	; 0x34
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	f383 8811 	msr	BASEPRI, r3
}
 800ef1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3738      	adds	r7, #56	; 0x38
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d006      	beq.n	800ef46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f1c3 0307 	rsb	r3, r3, #7
 800ef42:	60fb      	str	r3, [r7, #12]
 800ef44:	e001      	b.n	800ef4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ef46:	2300      	movs	r3, #0
 800ef48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef64:	2300      	movs	r3, #0
 800ef66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10d      	bne.n	800ef92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d14d      	bne.n	800f01a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 ff52 	bl	800fe2c <xTaskPriorityDisinherit>
 800ef88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	609a      	str	r2, [r3, #8]
 800ef90:	e043      	b.n	800f01a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d119      	bne.n	800efcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6858      	ldr	r0, [r3, #4]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efa0:	461a      	mov	r2, r3
 800efa2:	68b9      	ldr	r1, [r7, #8]
 800efa4:	f002 fd4b 	bl	8011a3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efb0:	441a      	add	r2, r3
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d32b      	bcc.n	800f01a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	605a      	str	r2, [r3, #4]
 800efca:	e026      	b.n	800f01a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	68d8      	ldr	r0, [r3, #12]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd4:	461a      	mov	r2, r3
 800efd6:	68b9      	ldr	r1, [r7, #8]
 800efd8:	f002 fd31 	bl	8011a3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68da      	ldr	r2, [r3, #12]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe4:	425b      	negs	r3, r3
 800efe6:	441a      	add	r2, r3
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d207      	bcs.n	800f008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	689a      	ldr	r2, [r3, #8]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f000:	425b      	negs	r3, r3
 800f002:	441a      	add	r2, r3
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d105      	bne.n	800f01a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	3b01      	subs	r3, #1
 800f018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	1c5a      	adds	r2, r3, #1
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f022:	697b      	ldr	r3, [r7, #20]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3718      	adds	r7, #24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d018      	beq.n	800f070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68da      	ldr	r2, [r3, #12]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f046:	441a      	add	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68da      	ldr	r2, [r3, #12]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	689b      	ldr	r3, [r3, #8]
 800f054:	429a      	cmp	r2, r3
 800f056:	d303      	bcc.n	800f060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	68d9      	ldr	r1, [r3, #12]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f068:	461a      	mov	r2, r3
 800f06a:	6838      	ldr	r0, [r7, #0]
 800f06c:	f002 fce7 	bl	8011a3e <memcpy>
	}
}
 800f070:	bf00      	nop
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f080:	f001 f990 	bl	80103a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f08a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f08c:	e011      	b.n	800f0b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	2b00      	cmp	r3, #0
 800f094:	d012      	beq.n	800f0bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	3324      	adds	r3, #36	; 0x24
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fc76 	bl	800f98c <xTaskRemoveFromEventList>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d001      	beq.n	800f0aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0a6:	f000 fd4b 	bl	800fb40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	dce9      	bgt.n	800f08e <prvUnlockQueue+0x16>
 800f0ba:	e000      	b.n	800f0be <prvUnlockQueue+0x46>
					break;
 800f0bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	22ff      	movs	r2, #255	; 0xff
 800f0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f0c6:	f001 f99d 	bl	8010404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f0ca:	f001 f96b 	bl	80103a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0d6:	e011      	b.n	800f0fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	691b      	ldr	r3, [r3, #16]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d012      	beq.n	800f106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3310      	adds	r3, #16
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f000 fc51 	bl	800f98c <xTaskRemoveFromEventList>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f0f0:	f000 fd26 	bl	800fb40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f0f4:	7bbb      	ldrb	r3, [r7, #14]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f100:	2b00      	cmp	r3, #0
 800f102:	dce9      	bgt.n	800f0d8 <prvUnlockQueue+0x60>
 800f104:	e000      	b.n	800f108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	22ff      	movs	r2, #255	; 0xff
 800f10c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f110:	f001 f978 	bl	8010404 <vPortExitCritical>
}
 800f114:	bf00      	nop
 800f116:	3710      	adds	r7, #16
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f124:	f001 f93e 	bl	80103a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d102      	bne.n	800f136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f130:	2301      	movs	r3, #1
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	e001      	b.n	800f13a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f136:	2300      	movs	r3, #0
 800f138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f13a:	f001 f963 	bl	8010404 <vPortExitCritical>

	return xReturn;
 800f13e:	68fb      	ldr	r3, [r7, #12]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f150:	f001 f928 	bl	80103a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d102      	bne.n	800f166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f160:	2301      	movs	r3, #1
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	e001      	b.n	800f16a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f166:	2300      	movs	r3, #0
 800f168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f16a:	f001 f94b 	bl	8010404 <vPortExitCritical>

	return xReturn;
 800f16e:	68fb      	ldr	r3, [r7, #12]
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08e      	sub	sp, #56	; 0x38
 800f17c:	af04      	add	r7, sp, #16
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10a      	bne.n	800f1a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	623b      	str	r3, [r7, #32]
}
 800f19e:	bf00      	nop
 800f1a0:	e7fe      	b.n	800f1a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10a      	bne.n	800f1be <xTaskCreateStatic+0x46>
	__asm volatile
 800f1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ac:	f383 8811 	msr	BASEPRI, r3
 800f1b0:	f3bf 8f6f 	isb	sy
 800f1b4:	f3bf 8f4f 	dsb	sy
 800f1b8:	61fb      	str	r3, [r7, #28]
}
 800f1ba:	bf00      	nop
 800f1bc:	e7fe      	b.n	800f1bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1be:	2354      	movs	r3, #84	; 0x54
 800f1c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2b54      	cmp	r3, #84	; 0x54
 800f1c6:	d00a      	beq.n	800f1de <xTaskCreateStatic+0x66>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	61bb      	str	r3, [r7, #24]
}
 800f1da:	bf00      	nop
 800f1dc:	e7fe      	b.n	800f1dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f1de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d01e      	beq.n	800f224 <xTaskCreateStatic+0xac>
 800f1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d01b      	beq.n	800f224 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f8:	2202      	movs	r2, #2
 800f1fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f1fe:	2300      	movs	r3, #0
 800f200:	9303      	str	r3, [sp, #12]
 800f202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f204:	9302      	str	r3, [sp, #8]
 800f206:	f107 0314 	add.w	r3, r7, #20
 800f20a:	9301      	str	r3, [sp, #4]
 800f20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	68b9      	ldr	r1, [r7, #8]
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f000 f850 	bl	800f2bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f21c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f21e:	f000 f8d5 	bl	800f3cc <prvAddNewTaskToReadyList>
 800f222:	e001      	b.n	800f228 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f224:	2300      	movs	r3, #0
 800f226:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f228:	697b      	ldr	r3, [r7, #20]
	}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3728      	adds	r7, #40	; 0x28
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f232:	b580      	push	{r7, lr}
 800f234:	b08c      	sub	sp, #48	; 0x30
 800f236:	af04      	add	r7, sp, #16
 800f238:	60f8      	str	r0, [r7, #12]
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	603b      	str	r3, [r7, #0]
 800f23e:	4613      	mov	r3, r2
 800f240:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f242:	88fb      	ldrh	r3, [r7, #6]
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4618      	mov	r0, r3
 800f248:	f001 f9ce 	bl	80105e8 <pvPortMalloc>
 800f24c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00e      	beq.n	800f272 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f254:	2054      	movs	r0, #84	; 0x54
 800f256:	f001 f9c7 	bl	80105e8 <pvPortMalloc>
 800f25a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	697a      	ldr	r2, [r7, #20]
 800f266:	631a      	str	r2, [r3, #48]	; 0x30
 800f268:	e005      	b.n	800f276 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f26a:	6978      	ldr	r0, [r7, #20]
 800f26c:	f001 fa88 	bl	8010780 <vPortFree>
 800f270:	e001      	b.n	800f276 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f272:	2300      	movs	r3, #0
 800f274:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d017      	beq.n	800f2ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f284:	88fa      	ldrh	r2, [r7, #6]
 800f286:	2300      	movs	r3, #0
 800f288:	9303      	str	r3, [sp, #12]
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	9302      	str	r3, [sp, #8]
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	68b9      	ldr	r1, [r7, #8]
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f000 f80e 	bl	800f2bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2a0:	69f8      	ldr	r0, [r7, #28]
 800f2a2:	f000 f893 	bl	800f3cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	61bb      	str	r3, [r7, #24]
 800f2aa:	e002      	b.n	800f2b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
	}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3720      	adds	r7, #32
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4413      	add	r3, r2
 800f2da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	f023 0307 	bic.w	r3, r3, #7
 800f2e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	f003 0307 	and.w	r3, r3, #7
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00a      	beq.n	800f304 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	617b      	str	r3, [r7, #20]
}
 800f300:	bf00      	nop
 800f302:	e7fe      	b.n	800f302 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d01f      	beq.n	800f34a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f30a:	2300      	movs	r3, #0
 800f30c:	61fb      	str	r3, [r7, #28]
 800f30e:	e012      	b.n	800f336 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	4413      	add	r3, r2
 800f316:	7819      	ldrb	r1, [r3, #0]
 800f318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	4413      	add	r3, r2
 800f31e:	3334      	adds	r3, #52	; 0x34
 800f320:	460a      	mov	r2, r1
 800f322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f324:	68ba      	ldr	r2, [r7, #8]
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	4413      	add	r3, r2
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d006      	beq.n	800f33e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	3301      	adds	r3, #1
 800f334:	61fb      	str	r3, [r7, #28]
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	2b0f      	cmp	r3, #15
 800f33a:	d9e9      	bls.n	800f310 <prvInitialiseNewTask+0x54>
 800f33c:	e000      	b.n	800f340 <prvInitialiseNewTask+0x84>
			{
				break;
 800f33e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	2200      	movs	r2, #0
 800f344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f348:	e003      	b.n	800f352 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	2b06      	cmp	r3, #6
 800f356:	d901      	bls.n	800f35c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f358:	2306      	movs	r3, #6
 800f35a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f366:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	2200      	movs	r2, #0
 800f36c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f370:	3304      	adds	r3, #4
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff f8f2 	bl	800e55c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37a:	3318      	adds	r3, #24
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff f8ed 	bl	800e55c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	f1c3 0207 	rsb	r2, r3, #7
 800f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	2200      	movs	r2, #0
 800f39c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3a6:	683a      	ldr	r2, [r7, #0]
 800f3a8:	68f9      	ldr	r1, [r7, #12]
 800f3aa:	69b8      	ldr	r0, [r7, #24]
 800f3ac:	f000 fecc 	bl	8010148 <pxPortInitialiseStack>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d002      	beq.n	800f3c2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3c2:	bf00      	nop
 800f3c4:	3720      	adds	r7, #32
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
	...

0800f3cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f3d4:	f000 ffe6 	bl	80103a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f3d8:	4b2a      	ldr	r3, [pc, #168]	; (800f484 <prvAddNewTaskToReadyList+0xb8>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	4a29      	ldr	r2, [pc, #164]	; (800f484 <prvAddNewTaskToReadyList+0xb8>)
 800f3e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f3e2:	4b29      	ldr	r3, [pc, #164]	; (800f488 <prvAddNewTaskToReadyList+0xbc>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d109      	bne.n	800f3fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f3ea:	4a27      	ldr	r2, [pc, #156]	; (800f488 <prvAddNewTaskToReadyList+0xbc>)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f3f0:	4b24      	ldr	r3, [pc, #144]	; (800f484 <prvAddNewTaskToReadyList+0xb8>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d110      	bne.n	800f41a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f3f8:	f000 fbc6 	bl	800fb88 <prvInitialiseTaskLists>
 800f3fc:	e00d      	b.n	800f41a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f3fe:	4b23      	ldr	r3, [pc, #140]	; (800f48c <prvAddNewTaskToReadyList+0xc0>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d109      	bne.n	800f41a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f406:	4b20      	ldr	r3, [pc, #128]	; (800f488 <prvAddNewTaskToReadyList+0xbc>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f410:	429a      	cmp	r2, r3
 800f412:	d802      	bhi.n	800f41a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f414:	4a1c      	ldr	r2, [pc, #112]	; (800f488 <prvAddNewTaskToReadyList+0xbc>)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f41a:	4b1d      	ldr	r3, [pc, #116]	; (800f490 <prvAddNewTaskToReadyList+0xc4>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3301      	adds	r3, #1
 800f420:	4a1b      	ldr	r2, [pc, #108]	; (800f490 <prvAddNewTaskToReadyList+0xc4>)
 800f422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f428:	2201      	movs	r2, #1
 800f42a:	409a      	lsls	r2, r3
 800f42c:	4b19      	ldr	r3, [pc, #100]	; (800f494 <prvAddNewTaskToReadyList+0xc8>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4313      	orrs	r3, r2
 800f432:	4a18      	ldr	r2, [pc, #96]	; (800f494 <prvAddNewTaskToReadyList+0xc8>)
 800f434:	6013      	str	r3, [r2, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f43a:	4613      	mov	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4a15      	ldr	r2, [pc, #84]	; (800f498 <prvAddNewTaskToReadyList+0xcc>)
 800f444:	441a      	add	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3304      	adds	r3, #4
 800f44a:	4619      	mov	r1, r3
 800f44c:	4610      	mov	r0, r2
 800f44e:	f7ff f892 	bl	800e576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f452:	f000 ffd7 	bl	8010404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f456:	4b0d      	ldr	r3, [pc, #52]	; (800f48c <prvAddNewTaskToReadyList+0xc0>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00e      	beq.n	800f47c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f45e:	4b0a      	ldr	r3, [pc, #40]	; (800f488 <prvAddNewTaskToReadyList+0xbc>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f468:	429a      	cmp	r2, r3
 800f46a:	d207      	bcs.n	800f47c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f46c:	4b0b      	ldr	r3, [pc, #44]	; (800f49c <prvAddNewTaskToReadyList+0xd0>)
 800f46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	20003178 	.word	0x20003178
 800f488:	20003078 	.word	0x20003078
 800f48c:	20003184 	.word	0x20003184
 800f490:	20003194 	.word	0x20003194
 800f494:	20003180 	.word	0x20003180
 800f498:	2000307c 	.word	0x2000307c
 800f49c:	e000ed04 	.word	0xe000ed04

0800f4a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d017      	beq.n	800f4e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4b2:	4b13      	ldr	r3, [pc, #76]	; (800f500 <vTaskDelay+0x60>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00a      	beq.n	800f4d0 <vTaskDelay+0x30>
	__asm volatile
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	60bb      	str	r3, [r7, #8]
}
 800f4cc:	bf00      	nop
 800f4ce:	e7fe      	b.n	800f4ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f4d0:	f000 f87a 	bl	800f5c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fdd0 	bl	801007c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f4dc:	f000 f882 	bl	800f5e4 <xTaskResumeAll>
 800f4e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d107      	bne.n	800f4f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f4e8:	4b06      	ldr	r3, [pc, #24]	; (800f504 <vTaskDelay+0x64>)
 800f4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ee:	601a      	str	r2, [r3, #0]
 800f4f0:	f3bf 8f4f 	dsb	sy
 800f4f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4f8:	bf00      	nop
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	200031a0 	.word	0x200031a0
 800f504:	e000ed04 	.word	0xe000ed04

0800f508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f50e:	2300      	movs	r3, #0
 800f510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f512:	2300      	movs	r3, #0
 800f514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f516:	463a      	mov	r2, r7
 800f518:	1d39      	adds	r1, r7, #4
 800f51a:	f107 0308 	add.w	r3, r7, #8
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f1 fce0 	bl	8000ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	9202      	str	r2, [sp, #8]
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	2300      	movs	r3, #0
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	2300      	movs	r3, #0
 800f534:	460a      	mov	r2, r1
 800f536:	491e      	ldr	r1, [pc, #120]	; (800f5b0 <vTaskStartScheduler+0xa8>)
 800f538:	481e      	ldr	r0, [pc, #120]	; (800f5b4 <vTaskStartScheduler+0xac>)
 800f53a:	f7ff fe1d 	bl	800f178 <xTaskCreateStatic>
 800f53e:	4603      	mov	r3, r0
 800f540:	4a1d      	ldr	r2, [pc, #116]	; (800f5b8 <vTaskStartScheduler+0xb0>)
 800f542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f544:	4b1c      	ldr	r3, [pc, #112]	; (800f5b8 <vTaskStartScheduler+0xb0>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f54c:	2301      	movs	r3, #1
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	e001      	b.n	800f556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f552:	2300      	movs	r3, #0
 800f554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d116      	bne.n	800f58a <vTaskStartScheduler+0x82>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	613b      	str	r3, [r7, #16]
}
 800f56e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f570:	4b12      	ldr	r3, [pc, #72]	; (800f5bc <vTaskStartScheduler+0xb4>)
 800f572:	f04f 32ff 	mov.w	r2, #4294967295
 800f576:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f578:	4b11      	ldr	r3, [pc, #68]	; (800f5c0 <vTaskStartScheduler+0xb8>)
 800f57a:	2201      	movs	r2, #1
 800f57c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f57e:	4b11      	ldr	r3, [pc, #68]	; (800f5c4 <vTaskStartScheduler+0xbc>)
 800f580:	2200      	movs	r2, #0
 800f582:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f584:	f000 fe6c 	bl	8010260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f588:	e00e      	b.n	800f5a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f590:	d10a      	bne.n	800f5a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f596:	f383 8811 	msr	BASEPRI, r3
 800f59a:	f3bf 8f6f 	isb	sy
 800f59e:	f3bf 8f4f 	dsb	sy
 800f5a2:	60fb      	str	r3, [r7, #12]
}
 800f5a4:	bf00      	nop
 800f5a6:	e7fe      	b.n	800f5a6 <vTaskStartScheduler+0x9e>
}
 800f5a8:	bf00      	nop
 800f5aa:	3718      	adds	r7, #24
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	08014c78 	.word	0x08014c78
 800f5b4:	0800fb59 	.word	0x0800fb59
 800f5b8:	2000319c 	.word	0x2000319c
 800f5bc:	20003198 	.word	0x20003198
 800f5c0:	20003184 	.word	0x20003184
 800f5c4:	2000317c 	.word	0x2000317c

0800f5c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f5cc:	4b04      	ldr	r3, [pc, #16]	; (800f5e0 <vTaskSuspendAll+0x18>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	4a03      	ldr	r2, [pc, #12]	; (800f5e0 <vTaskSuspendAll+0x18>)
 800f5d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f5d6:	bf00      	nop
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr
 800f5e0:	200031a0 	.word	0x200031a0

0800f5e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f5f2:	4b41      	ldr	r3, [pc, #260]	; (800f6f8 <xTaskResumeAll+0x114>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d10a      	bne.n	800f610 <xTaskResumeAll+0x2c>
	__asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	603b      	str	r3, [r7, #0]
}
 800f60c:	bf00      	nop
 800f60e:	e7fe      	b.n	800f60e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f610:	f000 fec8 	bl	80103a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f614:	4b38      	ldr	r3, [pc, #224]	; (800f6f8 <xTaskResumeAll+0x114>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	3b01      	subs	r3, #1
 800f61a:	4a37      	ldr	r2, [pc, #220]	; (800f6f8 <xTaskResumeAll+0x114>)
 800f61c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f61e:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <xTaskResumeAll+0x114>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d161      	bne.n	800f6ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f626:	4b35      	ldr	r3, [pc, #212]	; (800f6fc <xTaskResumeAll+0x118>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d05d      	beq.n	800f6ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f62e:	e02e      	b.n	800f68e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f630:	4b33      	ldr	r3, [pc, #204]	; (800f700 <xTaskResumeAll+0x11c>)
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	3318      	adds	r3, #24
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fe fff7 	bl	800e630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	3304      	adds	r3, #4
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe fff2 	bl	800e630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f650:	2201      	movs	r2, #1
 800f652:	409a      	lsls	r2, r3
 800f654:	4b2b      	ldr	r3, [pc, #172]	; (800f704 <xTaskResumeAll+0x120>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4313      	orrs	r3, r2
 800f65a:	4a2a      	ldr	r2, [pc, #168]	; (800f704 <xTaskResumeAll+0x120>)
 800f65c:	6013      	str	r3, [r2, #0]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f662:	4613      	mov	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	4413      	add	r3, r2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	4a27      	ldr	r2, [pc, #156]	; (800f708 <xTaskResumeAll+0x124>)
 800f66c:	441a      	add	r2, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	3304      	adds	r3, #4
 800f672:	4619      	mov	r1, r3
 800f674:	4610      	mov	r0, r2
 800f676:	f7fe ff7e 	bl	800e576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67e:	4b23      	ldr	r3, [pc, #140]	; (800f70c <xTaskResumeAll+0x128>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f684:	429a      	cmp	r2, r3
 800f686:	d302      	bcc.n	800f68e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f688:	4b21      	ldr	r3, [pc, #132]	; (800f710 <xTaskResumeAll+0x12c>)
 800f68a:	2201      	movs	r2, #1
 800f68c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f68e:	4b1c      	ldr	r3, [pc, #112]	; (800f700 <xTaskResumeAll+0x11c>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1cc      	bne.n	800f630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f69c:	f000 fb12 	bl	800fcc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f6a0:	4b1c      	ldr	r3, [pc, #112]	; (800f714 <xTaskResumeAll+0x130>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d010      	beq.n	800f6ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f6ac:	f000 f836 	bl	800f71c <xTaskIncrementTick>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d002      	beq.n	800f6bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f6b6:	4b16      	ldr	r3, [pc, #88]	; (800f710 <xTaskResumeAll+0x12c>)
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1f1      	bne.n	800f6ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f6c8:	4b12      	ldr	r3, [pc, #72]	; (800f714 <xTaskResumeAll+0x130>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f6ce:	4b10      	ldr	r3, [pc, #64]	; (800f710 <xTaskResumeAll+0x12c>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f6da:	4b0f      	ldr	r3, [pc, #60]	; (800f718 <xTaskResumeAll+0x134>)
 800f6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6ea:	f000 fe8b 	bl	8010404 <vPortExitCritical>

	return xAlreadyYielded;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	200031a0 	.word	0x200031a0
 800f6fc:	20003178 	.word	0x20003178
 800f700:	20003138 	.word	0x20003138
 800f704:	20003180 	.word	0x20003180
 800f708:	2000307c 	.word	0x2000307c
 800f70c:	20003078 	.word	0x20003078
 800f710:	2000318c 	.word	0x2000318c
 800f714:	20003188 	.word	0x20003188
 800f718:	e000ed04 	.word	0xe000ed04

0800f71c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f722:	2300      	movs	r3, #0
 800f724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f726:	4b4e      	ldr	r3, [pc, #312]	; (800f860 <xTaskIncrementTick+0x144>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f040 808e 	bne.w	800f84c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f730:	4b4c      	ldr	r3, [pc, #304]	; (800f864 <xTaskIncrementTick+0x148>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	3301      	adds	r3, #1
 800f736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f738:	4a4a      	ldr	r2, [pc, #296]	; (800f864 <xTaskIncrementTick+0x148>)
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d120      	bne.n	800f786 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f744:	4b48      	ldr	r3, [pc, #288]	; (800f868 <xTaskIncrementTick+0x14c>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00a      	beq.n	800f764 <xTaskIncrementTick+0x48>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	603b      	str	r3, [r7, #0]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <xTaskIncrementTick+0x46>
 800f764:	4b40      	ldr	r3, [pc, #256]	; (800f868 <xTaskIncrementTick+0x14c>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	4b40      	ldr	r3, [pc, #256]	; (800f86c <xTaskIncrementTick+0x150>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	4a3e      	ldr	r2, [pc, #248]	; (800f868 <xTaskIncrementTick+0x14c>)
 800f770:	6013      	str	r3, [r2, #0]
 800f772:	4a3e      	ldr	r2, [pc, #248]	; (800f86c <xTaskIncrementTick+0x150>)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	4b3d      	ldr	r3, [pc, #244]	; (800f870 <xTaskIncrementTick+0x154>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	3301      	adds	r3, #1
 800f77e:	4a3c      	ldr	r2, [pc, #240]	; (800f870 <xTaskIncrementTick+0x154>)
 800f780:	6013      	str	r3, [r2, #0]
 800f782:	f000 fa9f 	bl	800fcc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f786:	4b3b      	ldr	r3, [pc, #236]	; (800f874 <xTaskIncrementTick+0x158>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d348      	bcc.n	800f822 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f790:	4b35      	ldr	r3, [pc, #212]	; (800f868 <xTaskIncrementTick+0x14c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d104      	bne.n	800f7a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f79a:	4b36      	ldr	r3, [pc, #216]	; (800f874 <xTaskIncrementTick+0x158>)
 800f79c:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a0:	601a      	str	r2, [r3, #0]
					break;
 800f7a2:	e03e      	b.n	800f822 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a4:	4b30      	ldr	r3, [pc, #192]	; (800f868 <xTaskIncrementTick+0x14c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d203      	bcs.n	800f7c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7bc:	4a2d      	ldr	r2, [pc, #180]	; (800f874 <xTaskIncrementTick+0x158>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f7c2:	e02e      	b.n	800f822 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fe ff31 	bl	800e630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d004      	beq.n	800f7e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	3318      	adds	r3, #24
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fe ff28 	bl	800e630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	409a      	lsls	r2, r3
 800f7e8:	4b23      	ldr	r3, [pc, #140]	; (800f878 <xTaskIncrementTick+0x15c>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	4a22      	ldr	r2, [pc, #136]	; (800f878 <xTaskIncrementTick+0x15c>)
 800f7f0:	6013      	str	r3, [r2, #0]
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	4a1f      	ldr	r2, [pc, #124]	; (800f87c <xTaskIncrementTick+0x160>)
 800f800:	441a      	add	r2, r3
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	3304      	adds	r3, #4
 800f806:	4619      	mov	r1, r3
 800f808:	4610      	mov	r0, r2
 800f80a:	f7fe feb4 	bl	800e576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f812:	4b1b      	ldr	r3, [pc, #108]	; (800f880 <xTaskIncrementTick+0x164>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f818:	429a      	cmp	r2, r3
 800f81a:	d3b9      	bcc.n	800f790 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f81c:	2301      	movs	r3, #1
 800f81e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f820:	e7b6      	b.n	800f790 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f822:	4b17      	ldr	r3, [pc, #92]	; (800f880 <xTaskIncrementTick+0x164>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f828:	4914      	ldr	r1, [pc, #80]	; (800f87c <xTaskIncrementTick+0x160>)
 800f82a:	4613      	mov	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4413      	add	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	440b      	add	r3, r1
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b01      	cmp	r3, #1
 800f838:	d901      	bls.n	800f83e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f83a:	2301      	movs	r3, #1
 800f83c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f83e:	4b11      	ldr	r3, [pc, #68]	; (800f884 <xTaskIncrementTick+0x168>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d007      	beq.n	800f856 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f846:	2301      	movs	r3, #1
 800f848:	617b      	str	r3, [r7, #20]
 800f84a:	e004      	b.n	800f856 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f84c:	4b0e      	ldr	r3, [pc, #56]	; (800f888 <xTaskIncrementTick+0x16c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3301      	adds	r3, #1
 800f852:	4a0d      	ldr	r2, [pc, #52]	; (800f888 <xTaskIncrementTick+0x16c>)
 800f854:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f856:	697b      	ldr	r3, [r7, #20]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3718      	adds	r7, #24
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	200031a0 	.word	0x200031a0
 800f864:	2000317c 	.word	0x2000317c
 800f868:	20003130 	.word	0x20003130
 800f86c:	20003134 	.word	0x20003134
 800f870:	20003190 	.word	0x20003190
 800f874:	20003198 	.word	0x20003198
 800f878:	20003180 	.word	0x20003180
 800f87c:	2000307c 	.word	0x2000307c
 800f880:	20003078 	.word	0x20003078
 800f884:	2000318c 	.word	0x2000318c
 800f888:	20003188 	.word	0x20003188

0800f88c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b087      	sub	sp, #28
 800f890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f892:	4b27      	ldr	r3, [pc, #156]	; (800f930 <vTaskSwitchContext+0xa4>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f89a:	4b26      	ldr	r3, [pc, #152]	; (800f934 <vTaskSwitchContext+0xa8>)
 800f89c:	2201      	movs	r2, #1
 800f89e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8a0:	e03f      	b.n	800f922 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f8a2:	4b24      	ldr	r3, [pc, #144]	; (800f934 <vTaskSwitchContext+0xa8>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8a8:	4b23      	ldr	r3, [pc, #140]	; (800f938 <vTaskSwitchContext+0xac>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	fab3 f383 	clz	r3, r3
 800f8b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f8b6:	7afb      	ldrb	r3, [r7, #11]
 800f8b8:	f1c3 031f 	rsb	r3, r3, #31
 800f8bc:	617b      	str	r3, [r7, #20]
 800f8be:	491f      	ldr	r1, [pc, #124]	; (800f93c <vTaskSwitchContext+0xb0>)
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	4413      	add	r3, r2
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	440b      	add	r3, r1
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10a      	bne.n	800f8e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	607b      	str	r3, [r7, #4]
}
 800f8e4:	bf00      	nop
 800f8e6:	e7fe      	b.n	800f8e6 <vTaskSwitchContext+0x5a>
 800f8e8:	697a      	ldr	r2, [r7, #20]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	4413      	add	r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4a12      	ldr	r2, [pc, #72]	; (800f93c <vTaskSwitchContext+0xb0>)
 800f8f4:	4413      	add	r3, r2
 800f8f6:	613b      	str	r3, [r7, #16]
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	605a      	str	r2, [r3, #4]
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	685a      	ldr	r2, [r3, #4]
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3308      	adds	r3, #8
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d104      	bne.n	800f918 <vTaskSwitchContext+0x8c>
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	605a      	str	r2, [r3, #4]
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	4a08      	ldr	r2, [pc, #32]	; (800f940 <vTaskSwitchContext+0xb4>)
 800f920:	6013      	str	r3, [r2, #0]
}
 800f922:	bf00      	nop
 800f924:	371c      	adds	r7, #28
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	200031a0 	.word	0x200031a0
 800f934:	2000318c 	.word	0x2000318c
 800f938:	20003180 	.word	0x20003180
 800f93c:	2000307c 	.word	0x2000307c
 800f940:	20003078 	.word	0x20003078

0800f944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d10a      	bne.n	800f96a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	60fb      	str	r3, [r7, #12]
}
 800f966:	bf00      	nop
 800f968:	e7fe      	b.n	800f968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f96a:	4b07      	ldr	r3, [pc, #28]	; (800f988 <vTaskPlaceOnEventList+0x44>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	3318      	adds	r3, #24
 800f970:	4619      	mov	r1, r3
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7fe fe23 	bl	800e5be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f978:	2101      	movs	r1, #1
 800f97a:	6838      	ldr	r0, [r7, #0]
 800f97c:	f000 fb7e 	bl	801007c <prvAddCurrentTaskToDelayedList>
}
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	20003078 	.word	0x20003078

0800f98c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10a      	bne.n	800f9b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	60fb      	str	r3, [r7, #12]
}
 800f9b4:	bf00      	nop
 800f9b6:	e7fe      	b.n	800f9b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	3318      	adds	r3, #24
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7fe fe37 	bl	800e630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9c2:	4b1d      	ldr	r3, [pc, #116]	; (800fa38 <xTaskRemoveFromEventList+0xac>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d11c      	bne.n	800fa04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	3304      	adds	r3, #4
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe fe2e 	bl	800e630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	2201      	movs	r2, #1
 800f9da:	409a      	lsls	r2, r3
 800f9dc:	4b17      	ldr	r3, [pc, #92]	; (800fa3c <xTaskRemoveFromEventList+0xb0>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	4a16      	ldr	r2, [pc, #88]	; (800fa3c <xTaskRemoveFromEventList+0xb0>)
 800f9e4:	6013      	str	r3, [r2, #0]
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4a13      	ldr	r2, [pc, #76]	; (800fa40 <xTaskRemoveFromEventList+0xb4>)
 800f9f4:	441a      	add	r2, r3
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7fe fdba 	bl	800e576 <vListInsertEnd>
 800fa02:	e005      	b.n	800fa10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	3318      	adds	r3, #24
 800fa08:	4619      	mov	r1, r3
 800fa0a:	480e      	ldr	r0, [pc, #56]	; (800fa44 <xTaskRemoveFromEventList+0xb8>)
 800fa0c:	f7fe fdb3 	bl	800e576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa14:	4b0c      	ldr	r3, [pc, #48]	; (800fa48 <xTaskRemoveFromEventList+0xbc>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d905      	bls.n	800fa2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fa22:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <xTaskRemoveFromEventList+0xc0>)
 800fa24:	2201      	movs	r2, #1
 800fa26:	601a      	str	r2, [r3, #0]
 800fa28:	e001      	b.n	800fa2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fa2e:	697b      	ldr	r3, [r7, #20]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3718      	adds	r7, #24
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	200031a0 	.word	0x200031a0
 800fa3c:	20003180 	.word	0x20003180
 800fa40:	2000307c 	.word	0x2000307c
 800fa44:	20003138 	.word	0x20003138
 800fa48:	20003078 	.word	0x20003078
 800fa4c:	2000318c 	.word	0x2000318c

0800fa50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fa58:	4b06      	ldr	r3, [pc, #24]	; (800fa74 <vTaskInternalSetTimeOutState+0x24>)
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fa60:	4b05      	ldr	r3, [pc, #20]	; (800fa78 <vTaskInternalSetTimeOutState+0x28>)
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	605a      	str	r2, [r3, #4]
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	20003190 	.word	0x20003190
 800fa78:	2000317c 	.word	0x2000317c

0800fa7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b088      	sub	sp, #32
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10a      	bne.n	800faa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	613b      	str	r3, [r7, #16]
}
 800fa9e:	bf00      	nop
 800faa0:	e7fe      	b.n	800faa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d10a      	bne.n	800fabe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	60fb      	str	r3, [r7, #12]
}
 800faba:	bf00      	nop
 800fabc:	e7fe      	b.n	800fabc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fabe:	f000 fc71 	bl	80103a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fac2:	4b1d      	ldr	r3, [pc, #116]	; (800fb38 <xTaskCheckForTimeOut+0xbc>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	69ba      	ldr	r2, [r7, #24]
 800face:	1ad3      	subs	r3, r2, r3
 800fad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fada:	d102      	bne.n	800fae2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fadc:	2300      	movs	r3, #0
 800fade:	61fb      	str	r3, [r7, #28]
 800fae0:	e023      	b.n	800fb2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	4b15      	ldr	r3, [pc, #84]	; (800fb3c <xTaskCheckForTimeOut+0xc0>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	429a      	cmp	r2, r3
 800faec:	d007      	beq.n	800fafe <xTaskCheckForTimeOut+0x82>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	69ba      	ldr	r2, [r7, #24]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d302      	bcc.n	800fafe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800faf8:	2301      	movs	r3, #1
 800fafa:	61fb      	str	r3, [r7, #28]
 800fafc:	e015      	b.n	800fb2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	697a      	ldr	r2, [r7, #20]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d20b      	bcs.n	800fb20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	1ad2      	subs	r2, r2, r3
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff ff9b 	bl	800fa50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	61fb      	str	r3, [r7, #28]
 800fb1e:	e004      	b.n	800fb2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2200      	movs	r2, #0
 800fb24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fb26:	2301      	movs	r3, #1
 800fb28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fb2a:	f000 fc6b 	bl	8010404 <vPortExitCritical>

	return xReturn;
 800fb2e:	69fb      	ldr	r3, [r7, #28]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3720      	adds	r7, #32
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	2000317c 	.word	0x2000317c
 800fb3c:	20003190 	.word	0x20003190

0800fb40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fb40:	b480      	push	{r7}
 800fb42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fb44:	4b03      	ldr	r3, [pc, #12]	; (800fb54 <vTaskMissedYield+0x14>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
}
 800fb4a:	bf00      	nop
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	2000318c 	.word	0x2000318c

0800fb58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fb60:	f000 f852 	bl	800fc08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fb64:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <prvIdleTask+0x28>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d9f9      	bls.n	800fb60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fb6c:	4b05      	ldr	r3, [pc, #20]	; (800fb84 <prvIdleTask+0x2c>)
 800fb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb72:	601a      	str	r2, [r3, #0]
 800fb74:	f3bf 8f4f 	dsb	sy
 800fb78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fb7c:	e7f0      	b.n	800fb60 <prvIdleTask+0x8>
 800fb7e:	bf00      	nop
 800fb80:	2000307c 	.word	0x2000307c
 800fb84:	e000ed04 	.word	0xe000ed04

0800fb88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb8e:	2300      	movs	r3, #0
 800fb90:	607b      	str	r3, [r7, #4]
 800fb92:	e00c      	b.n	800fbae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	4613      	mov	r3, r2
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	4413      	add	r3, r2
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	4a12      	ldr	r2, [pc, #72]	; (800fbe8 <prvInitialiseTaskLists+0x60>)
 800fba0:	4413      	add	r3, r2
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fe fcba 	bl	800e51c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	607b      	str	r3, [r7, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b06      	cmp	r3, #6
 800fbb2:	d9ef      	bls.n	800fb94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fbb4:	480d      	ldr	r0, [pc, #52]	; (800fbec <prvInitialiseTaskLists+0x64>)
 800fbb6:	f7fe fcb1 	bl	800e51c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fbba:	480d      	ldr	r0, [pc, #52]	; (800fbf0 <prvInitialiseTaskLists+0x68>)
 800fbbc:	f7fe fcae 	bl	800e51c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fbc0:	480c      	ldr	r0, [pc, #48]	; (800fbf4 <prvInitialiseTaskLists+0x6c>)
 800fbc2:	f7fe fcab 	bl	800e51c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fbc6:	480c      	ldr	r0, [pc, #48]	; (800fbf8 <prvInitialiseTaskLists+0x70>)
 800fbc8:	f7fe fca8 	bl	800e51c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fbcc:	480b      	ldr	r0, [pc, #44]	; (800fbfc <prvInitialiseTaskLists+0x74>)
 800fbce:	f7fe fca5 	bl	800e51c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fbd2:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <prvInitialiseTaskLists+0x78>)
 800fbd4:	4a05      	ldr	r2, [pc, #20]	; (800fbec <prvInitialiseTaskLists+0x64>)
 800fbd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fbd8:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <prvInitialiseTaskLists+0x7c>)
 800fbda:	4a05      	ldr	r2, [pc, #20]	; (800fbf0 <prvInitialiseTaskLists+0x68>)
 800fbdc:	601a      	str	r2, [r3, #0]
}
 800fbde:	bf00      	nop
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	2000307c 	.word	0x2000307c
 800fbec:	20003108 	.word	0x20003108
 800fbf0:	2000311c 	.word	0x2000311c
 800fbf4:	20003138 	.word	0x20003138
 800fbf8:	2000314c 	.word	0x2000314c
 800fbfc:	20003164 	.word	0x20003164
 800fc00:	20003130 	.word	0x20003130
 800fc04:	20003134 	.word	0x20003134

0800fc08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc0e:	e019      	b.n	800fc44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fc10:	f000 fbc8 	bl	80103a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc14:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <prvCheckTasksWaitingTermination+0x50>)
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	3304      	adds	r3, #4
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fe fd05 	bl	800e630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fc26:	4b0d      	ldr	r3, [pc, #52]	; (800fc5c <prvCheckTasksWaitingTermination+0x54>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	4a0b      	ldr	r2, [pc, #44]	; (800fc5c <prvCheckTasksWaitingTermination+0x54>)
 800fc2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fc30:	4b0b      	ldr	r3, [pc, #44]	; (800fc60 <prvCheckTasksWaitingTermination+0x58>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3b01      	subs	r3, #1
 800fc36:	4a0a      	ldr	r2, [pc, #40]	; (800fc60 <prvCheckTasksWaitingTermination+0x58>)
 800fc38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fc3a:	f000 fbe3 	bl	8010404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f810 	bl	800fc64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc44:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <prvCheckTasksWaitingTermination+0x58>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1e1      	bne.n	800fc10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fc4c:	bf00      	nop
 800fc4e:	bf00      	nop
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	2000314c 	.word	0x2000314c
 800fc5c:	20003178 	.word	0x20003178
 800fc60:	20003160 	.word	0x20003160

0800fc64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d108      	bne.n	800fc88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f000 fd80 	bl	8010780 <vPortFree>
				vPortFree( pxTCB );
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fd7d 	bl	8010780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fc86:	e018      	b.n	800fcba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d103      	bne.n	800fc9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fd74 	bl	8010780 <vPortFree>
	}
 800fc98:	e00f      	b.n	800fcba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fca0:	2b02      	cmp	r3, #2
 800fca2:	d00a      	beq.n	800fcba <prvDeleteTCB+0x56>
	__asm volatile
 800fca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca8:	f383 8811 	msr	BASEPRI, r3
 800fcac:	f3bf 8f6f 	isb	sy
 800fcb0:	f3bf 8f4f 	dsb	sy
 800fcb4:	60fb      	str	r3, [r7, #12]
}
 800fcb6:	bf00      	nop
 800fcb8:	e7fe      	b.n	800fcb8 <prvDeleteTCB+0x54>
	}
 800fcba:	bf00      	nop
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
	...

0800fcc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcca:	4b0c      	ldr	r3, [pc, #48]	; (800fcfc <prvResetNextTaskUnblockTime+0x38>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d104      	bne.n	800fcde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fcd4:	4b0a      	ldr	r3, [pc, #40]	; (800fd00 <prvResetNextTaskUnblockTime+0x3c>)
 800fcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fcdc:	e008      	b.n	800fcf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcde:	4b07      	ldr	r3, [pc, #28]	; (800fcfc <prvResetNextTaskUnblockTime+0x38>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	4a04      	ldr	r2, [pc, #16]	; (800fd00 <prvResetNextTaskUnblockTime+0x3c>)
 800fcee:	6013      	str	r3, [r2, #0]
}
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr
 800fcfc:	20003130 	.word	0x20003130
 800fd00:	20003198 	.word	0x20003198

0800fd04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fd0a:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <xTaskGetSchedulerState+0x34>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d102      	bne.n	800fd18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fd12:	2301      	movs	r3, #1
 800fd14:	607b      	str	r3, [r7, #4]
 800fd16:	e008      	b.n	800fd2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd18:	4b08      	ldr	r3, [pc, #32]	; (800fd3c <xTaskGetSchedulerState+0x38>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d102      	bne.n	800fd26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fd20:	2302      	movs	r3, #2
 800fd22:	607b      	str	r3, [r7, #4]
 800fd24:	e001      	b.n	800fd2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fd26:	2300      	movs	r3, #0
 800fd28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fd2a:	687b      	ldr	r3, [r7, #4]
	}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	20003184 	.word	0x20003184
 800fd3c:	200031a0 	.word	0x200031a0

0800fd40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d05e      	beq.n	800fe14 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5a:	4b31      	ldr	r3, [pc, #196]	; (800fe20 <xTaskPriorityInherit+0xe0>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d24e      	bcs.n	800fe02 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	db06      	blt.n	800fd7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd6c:	4b2c      	ldr	r3, [pc, #176]	; (800fe20 <xTaskPriorityInherit+0xe0>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd72:	f1c3 0207 	rsb	r2, r3, #7
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	6959      	ldr	r1, [r3, #20]
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd82:	4613      	mov	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4a26      	ldr	r2, [pc, #152]	; (800fe24 <xTaskPriorityInherit+0xe4>)
 800fd8c:	4413      	add	r3, r2
 800fd8e:	4299      	cmp	r1, r3
 800fd90:	d12f      	bne.n	800fdf2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	3304      	adds	r3, #4
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fe fc4a 	bl	800e630 <uxListRemove>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10a      	bne.n	800fdb8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda6:	2201      	movs	r2, #1
 800fda8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdac:	43da      	mvns	r2, r3
 800fdae:	4b1e      	ldr	r3, [pc, #120]	; (800fe28 <xTaskPriorityInherit+0xe8>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4013      	ands	r3, r2
 800fdb4:	4a1c      	ldr	r2, [pc, #112]	; (800fe28 <xTaskPriorityInherit+0xe8>)
 800fdb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdb8:	4b19      	ldr	r3, [pc, #100]	; (800fe20 <xTaskPriorityInherit+0xe0>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	409a      	lsls	r2, r3
 800fdca:	4b17      	ldr	r3, [pc, #92]	; (800fe28 <xTaskPriorityInherit+0xe8>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4313      	orrs	r3, r2
 800fdd0:	4a15      	ldr	r2, [pc, #84]	; (800fe28 <xTaskPriorityInherit+0xe8>)
 800fdd2:	6013      	str	r3, [r2, #0]
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd8:	4613      	mov	r3, r2
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4413      	add	r3, r2
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	4a10      	ldr	r2, [pc, #64]	; (800fe24 <xTaskPriorityInherit+0xe4>)
 800fde2:	441a      	add	r2, r3
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	3304      	adds	r3, #4
 800fde8:	4619      	mov	r1, r3
 800fdea:	4610      	mov	r0, r2
 800fdec:	f7fe fbc3 	bl	800e576 <vListInsertEnd>
 800fdf0:	e004      	b.n	800fdfc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdf2:	4b0b      	ldr	r3, [pc, #44]	; (800fe20 <xTaskPriorityInherit+0xe0>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	60fb      	str	r3, [r7, #12]
 800fe00:	e008      	b.n	800fe14 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe06:	4b06      	ldr	r3, [pc, #24]	; (800fe20 <xTaskPriorityInherit+0xe0>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d201      	bcs.n	800fe14 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fe10:	2301      	movs	r3, #1
 800fe12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe14:	68fb      	ldr	r3, [r7, #12]
	}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	20003078 	.word	0x20003078
 800fe24:	2000307c 	.word	0x2000307c
 800fe28:	20003180 	.word	0x20003180

0800fe2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b086      	sub	sp, #24
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d06e      	beq.n	800ff20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe42:	4b3a      	ldr	r3, [pc, #232]	; (800ff2c <xTaskPriorityDisinherit+0x100>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	693a      	ldr	r2, [r7, #16]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d00a      	beq.n	800fe62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe50:	f383 8811 	msr	BASEPRI, r3
 800fe54:	f3bf 8f6f 	isb	sy
 800fe58:	f3bf 8f4f 	dsb	sy
 800fe5c:	60fb      	str	r3, [r7, #12]
}
 800fe5e:	bf00      	nop
 800fe60:	e7fe      	b.n	800fe60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10a      	bne.n	800fe80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fe6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6e:	f383 8811 	msr	BASEPRI, r3
 800fe72:	f3bf 8f6f 	isb	sy
 800fe76:	f3bf 8f4f 	dsb	sy
 800fe7a:	60bb      	str	r3, [r7, #8]
}
 800fe7c:	bf00      	nop
 800fe7e:	e7fe      	b.n	800fe7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe84:	1e5a      	subs	r2, r3, #1
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d044      	beq.n	800ff20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d140      	bne.n	800ff20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	3304      	adds	r3, #4
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fe fbc4 	bl	800e630 <uxListRemove>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d115      	bne.n	800feda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb2:	491f      	ldr	r1, [pc, #124]	; (800ff30 <xTaskPriorityDisinherit+0x104>)
 800feb4:	4613      	mov	r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	440b      	add	r3, r1
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10a      	bne.n	800feda <xTaskPriorityDisinherit+0xae>
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec8:	2201      	movs	r2, #1
 800feca:	fa02 f303 	lsl.w	r3, r2, r3
 800fece:	43da      	mvns	r2, r3
 800fed0:	4b18      	ldr	r3, [pc, #96]	; (800ff34 <xTaskPriorityDisinherit+0x108>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4013      	ands	r3, r2
 800fed6:	4a17      	ldr	r2, [pc, #92]	; (800ff34 <xTaskPriorityDisinherit+0x108>)
 800fed8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee6:	f1c3 0207 	rsb	r2, r3, #7
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef2:	2201      	movs	r2, #1
 800fef4:	409a      	lsls	r2, r3
 800fef6:	4b0f      	ldr	r3, [pc, #60]	; (800ff34 <xTaskPriorityDisinherit+0x108>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	4a0d      	ldr	r2, [pc, #52]	; (800ff34 <xTaskPriorityDisinherit+0x108>)
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff04:	4613      	mov	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4a08      	ldr	r2, [pc, #32]	; (800ff30 <xTaskPriorityDisinherit+0x104>)
 800ff0e:	441a      	add	r2, r3
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	3304      	adds	r3, #4
 800ff14:	4619      	mov	r1, r3
 800ff16:	4610      	mov	r0, r2
 800ff18:	f7fe fb2d 	bl	800e576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff20:	697b      	ldr	r3, [r7, #20]
	}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3718      	adds	r7, #24
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20003078 	.word	0x20003078
 800ff30:	2000307c 	.word	0x2000307c
 800ff34:	20003180 	.word	0x20003180

0800ff38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ff46:	2301      	movs	r3, #1
 800ff48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d077      	beq.n	8010040 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10a      	bne.n	800ff6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	60fb      	str	r3, [r7, #12]
}
 800ff6a:	bf00      	nop
 800ff6c:	e7fe      	b.n	800ff6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff72:	683a      	ldr	r2, [r7, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d902      	bls.n	800ff7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	61fb      	str	r3, [r7, #28]
 800ff7c:	e002      	b.n	800ff84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	69fa      	ldr	r2, [r7, #28]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d058      	beq.n	8010040 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff92:	697a      	ldr	r2, [r7, #20]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d153      	bne.n	8010040 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ff98:	4b2b      	ldr	r3, [pc, #172]	; (8010048 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	69ba      	ldr	r2, [r7, #24]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d10a      	bne.n	800ffb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	60bb      	str	r3, [r7, #8]
}
 800ffb4:	bf00      	nop
 800ffb6:	e7fe      	b.n	800ffb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	69fa      	ldr	r2, [r7, #28]
 800ffc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	db04      	blt.n	800ffd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	f1c3 0207 	rsb	r2, r3, #7
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	6959      	ldr	r1, [r3, #20]
 800ffda:	693a      	ldr	r2, [r7, #16]
 800ffdc:	4613      	mov	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4413      	add	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	4a19      	ldr	r2, [pc, #100]	; (801004c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ffe6:	4413      	add	r3, r2
 800ffe8:	4299      	cmp	r1, r3
 800ffea:	d129      	bne.n	8010040 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	3304      	adds	r3, #4
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fe fb1d 	bl	800e630 <uxListRemove>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10a      	bne.n	8010012 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010000:	2201      	movs	r2, #1
 8010002:	fa02 f303 	lsl.w	r3, r2, r3
 8010006:	43da      	mvns	r2, r3
 8010008:	4b11      	ldr	r3, [pc, #68]	; (8010050 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4013      	ands	r3, r2
 801000e:	4a10      	ldr	r2, [pc, #64]	; (8010050 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010010:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010016:	2201      	movs	r2, #1
 8010018:	409a      	lsls	r2, r3
 801001a:	4b0d      	ldr	r3, [pc, #52]	; (8010050 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4313      	orrs	r3, r2
 8010020:	4a0b      	ldr	r2, [pc, #44]	; (8010050 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010022:	6013      	str	r3, [r2, #0]
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010028:	4613      	mov	r3, r2
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	4413      	add	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	4a06      	ldr	r2, [pc, #24]	; (801004c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010032:	441a      	add	r2, r3
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	3304      	adds	r3, #4
 8010038:	4619      	mov	r1, r3
 801003a:	4610      	mov	r0, r2
 801003c:	f7fe fa9b 	bl	800e576 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010040:	bf00      	nop
 8010042:	3720      	adds	r7, #32
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	20003078 	.word	0x20003078
 801004c:	2000307c 	.word	0x2000307c
 8010050:	20003180 	.word	0x20003180

08010054 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010058:	4b07      	ldr	r3, [pc, #28]	; (8010078 <pvTaskIncrementMutexHeldCount+0x24>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d004      	beq.n	801006a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010060:	4b05      	ldr	r3, [pc, #20]	; (8010078 <pvTaskIncrementMutexHeldCount+0x24>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010066:	3201      	adds	r2, #1
 8010068:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801006a:	4b03      	ldr	r3, [pc, #12]	; (8010078 <pvTaskIncrementMutexHeldCount+0x24>)
 801006c:	681b      	ldr	r3, [r3, #0]
	}
 801006e:	4618      	mov	r0, r3
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	20003078 	.word	0x20003078

0801007c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010086:	4b29      	ldr	r3, [pc, #164]	; (801012c <prvAddCurrentTaskToDelayedList+0xb0>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801008c:	4b28      	ldr	r3, [pc, #160]	; (8010130 <prvAddCurrentTaskToDelayedList+0xb4>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3304      	adds	r3, #4
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe facc 	bl	800e630 <uxListRemove>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d10b      	bne.n	80100b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801009e:	4b24      	ldr	r3, [pc, #144]	; (8010130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	2201      	movs	r2, #1
 80100a6:	fa02 f303 	lsl.w	r3, r2, r3
 80100aa:	43da      	mvns	r2, r3
 80100ac:	4b21      	ldr	r3, [pc, #132]	; (8010134 <prvAddCurrentTaskToDelayedList+0xb8>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4013      	ands	r3, r2
 80100b2:	4a20      	ldr	r2, [pc, #128]	; (8010134 <prvAddCurrentTaskToDelayedList+0xb8>)
 80100b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100bc:	d10a      	bne.n	80100d4 <prvAddCurrentTaskToDelayedList+0x58>
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d007      	beq.n	80100d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100c4:	4b1a      	ldr	r3, [pc, #104]	; (8010130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	3304      	adds	r3, #4
 80100ca:	4619      	mov	r1, r3
 80100cc:	481a      	ldr	r0, [pc, #104]	; (8010138 <prvAddCurrentTaskToDelayedList+0xbc>)
 80100ce:	f7fe fa52 	bl	800e576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80100d2:	e026      	b.n	8010122 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4413      	add	r3, r2
 80100da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80100dc:	4b14      	ldr	r3, [pc, #80]	; (8010130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80100e4:	68ba      	ldr	r2, [r7, #8]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d209      	bcs.n	8010100 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100ec:	4b13      	ldr	r3, [pc, #76]	; (801013c <prvAddCurrentTaskToDelayedList+0xc0>)
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	4b0f      	ldr	r3, [pc, #60]	; (8010130 <prvAddCurrentTaskToDelayedList+0xb4>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3304      	adds	r3, #4
 80100f6:	4619      	mov	r1, r3
 80100f8:	4610      	mov	r0, r2
 80100fa:	f7fe fa60 	bl	800e5be <vListInsert>
}
 80100fe:	e010      	b.n	8010122 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010100:	4b0f      	ldr	r3, [pc, #60]	; (8010140 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	4b0a      	ldr	r3, [pc, #40]	; (8010130 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	3304      	adds	r3, #4
 801010a:	4619      	mov	r1, r3
 801010c:	4610      	mov	r0, r2
 801010e:	f7fe fa56 	bl	800e5be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010112:	4b0c      	ldr	r3, [pc, #48]	; (8010144 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	429a      	cmp	r2, r3
 801011a:	d202      	bcs.n	8010122 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801011c:	4a09      	ldr	r2, [pc, #36]	; (8010144 <prvAddCurrentTaskToDelayedList+0xc8>)
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	6013      	str	r3, [r2, #0]
}
 8010122:	bf00      	nop
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	2000317c 	.word	0x2000317c
 8010130:	20003078 	.word	0x20003078
 8010134:	20003180 	.word	0x20003180
 8010138:	20003164 	.word	0x20003164
 801013c:	20003134 	.word	0x20003134
 8010140:	20003130 	.word	0x20003130
 8010144:	20003198 	.word	0x20003198

08010148 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010148:	b480      	push	{r7}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	3b04      	subs	r3, #4
 8010158:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3b04      	subs	r3, #4
 8010166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	f023 0201 	bic.w	r2, r3, #1
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3b04      	subs	r3, #4
 8010176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010178:	4a0c      	ldr	r2, [pc, #48]	; (80101ac <pxPortInitialiseStack+0x64>)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	3b14      	subs	r3, #20
 8010182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	3b04      	subs	r3, #4
 801018e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f06f 0202 	mvn.w	r2, #2
 8010196:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	3b20      	subs	r3, #32
 801019c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801019e:	68fb      	ldr	r3, [r7, #12]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3714      	adds	r7, #20
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	080101b1 	.word	0x080101b1

080101b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80101ba:	4b12      	ldr	r3, [pc, #72]	; (8010204 <prvTaskExitError+0x54>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c2:	d00a      	beq.n	80101da <prvTaskExitError+0x2a>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	60fb      	str	r3, [r7, #12]
}
 80101d6:	bf00      	nop
 80101d8:	e7fe      	b.n	80101d8 <prvTaskExitError+0x28>
	__asm volatile
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	60bb      	str	r3, [r7, #8]
}
 80101ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80101ee:	bf00      	nop
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d0fc      	beq.n	80101f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	3714      	adds	r7, #20
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr
 8010204:	20000c88 	.word	0x20000c88
	...

08010210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010210:	4b07      	ldr	r3, [pc, #28]	; (8010230 <pxCurrentTCBConst2>)
 8010212:	6819      	ldr	r1, [r3, #0]
 8010214:	6808      	ldr	r0, [r1, #0]
 8010216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021a:	f380 8809 	msr	PSP, r0
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f04f 0000 	mov.w	r0, #0
 8010226:	f380 8811 	msr	BASEPRI, r0
 801022a:	4770      	bx	lr
 801022c:	f3af 8000 	nop.w

08010230 <pxCurrentTCBConst2>:
 8010230:	20003078 	.word	0x20003078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010234:	bf00      	nop
 8010236:	bf00      	nop

08010238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010238:	4808      	ldr	r0, [pc, #32]	; (801025c <prvPortStartFirstTask+0x24>)
 801023a:	6800      	ldr	r0, [r0, #0]
 801023c:	6800      	ldr	r0, [r0, #0]
 801023e:	f380 8808 	msr	MSP, r0
 8010242:	f04f 0000 	mov.w	r0, #0
 8010246:	f380 8814 	msr	CONTROL, r0
 801024a:	b662      	cpsie	i
 801024c:	b661      	cpsie	f
 801024e:	f3bf 8f4f 	dsb	sy
 8010252:	f3bf 8f6f 	isb	sy
 8010256:	df00      	svc	0
 8010258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801025a:	bf00      	nop
 801025c:	e000ed08 	.word	0xe000ed08

08010260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010266:	4b46      	ldr	r3, [pc, #280]	; (8010380 <xPortStartScheduler+0x120>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a46      	ldr	r2, [pc, #280]	; (8010384 <xPortStartScheduler+0x124>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d10a      	bne.n	8010286 <xPortStartScheduler+0x26>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	613b      	str	r3, [r7, #16]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010286:	4b3e      	ldr	r3, [pc, #248]	; (8010380 <xPortStartScheduler+0x120>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a3f      	ldr	r2, [pc, #252]	; (8010388 <xPortStartScheduler+0x128>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d10a      	bne.n	80102a6 <xPortStartScheduler+0x46>
	__asm volatile
 8010290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010294:	f383 8811 	msr	BASEPRI, r3
 8010298:	f3bf 8f6f 	isb	sy
 801029c:	f3bf 8f4f 	dsb	sy
 80102a0:	60fb      	str	r3, [r7, #12]
}
 80102a2:	bf00      	nop
 80102a4:	e7fe      	b.n	80102a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80102a6:	4b39      	ldr	r3, [pc, #228]	; (801038c <xPortStartScheduler+0x12c>)
 80102a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	22ff      	movs	r2, #255	; 0xff
 80102b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	4b31      	ldr	r3, [pc, #196]	; (8010390 <xPortStartScheduler+0x130>)
 80102cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102ce:	4b31      	ldr	r3, [pc, #196]	; (8010394 <xPortStartScheduler+0x134>)
 80102d0:	2207      	movs	r2, #7
 80102d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102d4:	e009      	b.n	80102ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80102d6:	4b2f      	ldr	r3, [pc, #188]	; (8010394 <xPortStartScheduler+0x134>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3b01      	subs	r3, #1
 80102dc:	4a2d      	ldr	r2, [pc, #180]	; (8010394 <xPortStartScheduler+0x134>)
 80102de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80102e0:	78fb      	ldrb	r3, [r7, #3]
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102ea:	78fb      	ldrb	r3, [r7, #3]
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102f2:	2b80      	cmp	r3, #128	; 0x80
 80102f4:	d0ef      	beq.n	80102d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80102f6:	4b27      	ldr	r3, [pc, #156]	; (8010394 <xPortStartScheduler+0x134>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f1c3 0307 	rsb	r3, r3, #7
 80102fe:	2b04      	cmp	r3, #4
 8010300:	d00a      	beq.n	8010318 <xPortStartScheduler+0xb8>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	60bb      	str	r3, [r7, #8]
}
 8010314:	bf00      	nop
 8010316:	e7fe      	b.n	8010316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010318:	4b1e      	ldr	r3, [pc, #120]	; (8010394 <xPortStartScheduler+0x134>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	021b      	lsls	r3, r3, #8
 801031e:	4a1d      	ldr	r2, [pc, #116]	; (8010394 <xPortStartScheduler+0x134>)
 8010320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010322:	4b1c      	ldr	r3, [pc, #112]	; (8010394 <xPortStartScheduler+0x134>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801032a:	4a1a      	ldr	r2, [pc, #104]	; (8010394 <xPortStartScheduler+0x134>)
 801032c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	b2da      	uxtb	r2, r3
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010336:	4b18      	ldr	r3, [pc, #96]	; (8010398 <xPortStartScheduler+0x138>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a17      	ldr	r2, [pc, #92]	; (8010398 <xPortStartScheduler+0x138>)
 801033c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010342:	4b15      	ldr	r3, [pc, #84]	; (8010398 <xPortStartScheduler+0x138>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a14      	ldr	r2, [pc, #80]	; (8010398 <xPortStartScheduler+0x138>)
 8010348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801034c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801034e:	f000 f8dd 	bl	801050c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010352:	4b12      	ldr	r3, [pc, #72]	; (801039c <xPortStartScheduler+0x13c>)
 8010354:	2200      	movs	r2, #0
 8010356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010358:	f000 f8fc 	bl	8010554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801035c:	4b10      	ldr	r3, [pc, #64]	; (80103a0 <xPortStartScheduler+0x140>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4a0f      	ldr	r2, [pc, #60]	; (80103a0 <xPortStartScheduler+0x140>)
 8010362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010368:	f7ff ff66 	bl	8010238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801036c:	f7ff fa8e 	bl	800f88c <vTaskSwitchContext>
	prvTaskExitError();
 8010370:	f7ff ff1e 	bl	80101b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010374:	2300      	movs	r3, #0
}
 8010376:	4618      	mov	r0, r3
 8010378:	3718      	adds	r7, #24
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	e000ed00 	.word	0xe000ed00
 8010384:	410fc271 	.word	0x410fc271
 8010388:	410fc270 	.word	0x410fc270
 801038c:	e000e400 	.word	0xe000e400
 8010390:	200031a4 	.word	0x200031a4
 8010394:	200031a8 	.word	0x200031a8
 8010398:	e000ed20 	.word	0xe000ed20
 801039c:	20000c88 	.word	0x20000c88
 80103a0:	e000ef34 	.word	0xe000ef34

080103a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
	__asm volatile
 80103aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ae:	f383 8811 	msr	BASEPRI, r3
 80103b2:	f3bf 8f6f 	isb	sy
 80103b6:	f3bf 8f4f 	dsb	sy
 80103ba:	607b      	str	r3, [r7, #4]
}
 80103bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80103be:	4b0f      	ldr	r3, [pc, #60]	; (80103fc <vPortEnterCritical+0x58>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3301      	adds	r3, #1
 80103c4:	4a0d      	ldr	r2, [pc, #52]	; (80103fc <vPortEnterCritical+0x58>)
 80103c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80103c8:	4b0c      	ldr	r3, [pc, #48]	; (80103fc <vPortEnterCritical+0x58>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d10f      	bne.n	80103f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80103d0:	4b0b      	ldr	r3, [pc, #44]	; (8010400 <vPortEnterCritical+0x5c>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00a      	beq.n	80103f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80103da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103de:	f383 8811 	msr	BASEPRI, r3
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	603b      	str	r3, [r7, #0]
}
 80103ec:	bf00      	nop
 80103ee:	e7fe      	b.n	80103ee <vPortEnterCritical+0x4a>
	}
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr
 80103fc:	20000c88 	.word	0x20000c88
 8010400:	e000ed04 	.word	0xe000ed04

08010404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801040a:	4b12      	ldr	r3, [pc, #72]	; (8010454 <vPortExitCritical+0x50>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10a      	bne.n	8010428 <vPortExitCritical+0x24>
	__asm volatile
 8010412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010416:	f383 8811 	msr	BASEPRI, r3
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	607b      	str	r3, [r7, #4]
}
 8010424:	bf00      	nop
 8010426:	e7fe      	b.n	8010426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010428:	4b0a      	ldr	r3, [pc, #40]	; (8010454 <vPortExitCritical+0x50>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3b01      	subs	r3, #1
 801042e:	4a09      	ldr	r2, [pc, #36]	; (8010454 <vPortExitCritical+0x50>)
 8010430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010432:	4b08      	ldr	r3, [pc, #32]	; (8010454 <vPortExitCritical+0x50>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d105      	bne.n	8010446 <vPortExitCritical+0x42>
 801043a:	2300      	movs	r3, #0
 801043c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	f383 8811 	msr	BASEPRI, r3
}
 8010444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	20000c88 	.word	0x20000c88
	...

08010460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010460:	f3ef 8009 	mrs	r0, PSP
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <pxCurrentTCBConst>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	f01e 0f10 	tst.w	lr, #16
 8010470:	bf08      	it	eq
 8010472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047a:	6010      	str	r0, [r2, #0]
 801047c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010484:	f380 8811 	msr	BASEPRI, r0
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	f7ff f9fc 	bl	800f88c <vTaskSwitchContext>
 8010494:	f04f 0000 	mov.w	r0, #0
 8010498:	f380 8811 	msr	BASEPRI, r0
 801049c:	bc09      	pop	{r0, r3}
 801049e:	6819      	ldr	r1, [r3, #0]
 80104a0:	6808      	ldr	r0, [r1, #0]
 80104a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a6:	f01e 0f10 	tst.w	lr, #16
 80104aa:	bf08      	it	eq
 80104ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80104b0:	f380 8809 	msr	PSP, r0
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop
 80104bc:	f3af 8000 	nop.w

080104c0 <pxCurrentTCBConst>:
 80104c0:	20003078 	.word	0x20003078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80104c4:	bf00      	nop
 80104c6:	bf00      	nop

080104c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	607b      	str	r3, [r7, #4]
}
 80104e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80104e2:	f7ff f91b 	bl	800f71c <xTaskIncrementTick>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d003      	beq.n	80104f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80104ec:	4b06      	ldr	r3, [pc, #24]	; (8010508 <xPortSysTickHandler+0x40>)
 80104ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f2:	601a      	str	r2, [r3, #0]
 80104f4:	2300      	movs	r3, #0
 80104f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	f383 8811 	msr	BASEPRI, r3
}
 80104fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	e000ed04 	.word	0xe000ed04

0801050c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801050c:	b480      	push	{r7}
 801050e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010510:	4b0b      	ldr	r3, [pc, #44]	; (8010540 <vPortSetupTimerInterrupt+0x34>)
 8010512:	2200      	movs	r2, #0
 8010514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010516:	4b0b      	ldr	r3, [pc, #44]	; (8010544 <vPortSetupTimerInterrupt+0x38>)
 8010518:	2200      	movs	r2, #0
 801051a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801051c:	4b0a      	ldr	r3, [pc, #40]	; (8010548 <vPortSetupTimerInterrupt+0x3c>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a0a      	ldr	r2, [pc, #40]	; (801054c <vPortSetupTimerInterrupt+0x40>)
 8010522:	fba2 2303 	umull	r2, r3, r2, r3
 8010526:	099b      	lsrs	r3, r3, #6
 8010528:	4a09      	ldr	r2, [pc, #36]	; (8010550 <vPortSetupTimerInterrupt+0x44>)
 801052a:	3b01      	subs	r3, #1
 801052c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801052e:	4b04      	ldr	r3, [pc, #16]	; (8010540 <vPortSetupTimerInterrupt+0x34>)
 8010530:	2207      	movs	r2, #7
 8010532:	601a      	str	r2, [r3, #0]
}
 8010534:	bf00      	nop
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop
 8010540:	e000e010 	.word	0xe000e010
 8010544:	e000e018 	.word	0xe000e018
 8010548:	20000000 	.word	0x20000000
 801054c:	10624dd3 	.word	0x10624dd3
 8010550:	e000e014 	.word	0xe000e014

08010554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010564 <vPortEnableVFP+0x10>
 8010558:	6801      	ldr	r1, [r0, #0]
 801055a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801055e:	6001      	str	r1, [r0, #0]
 8010560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010562:	bf00      	nop
 8010564:	e000ed88 	.word	0xe000ed88

08010568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801056e:	f3ef 8305 	mrs	r3, IPSR
 8010572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b0f      	cmp	r3, #15
 8010578:	d914      	bls.n	80105a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801057a:	4a17      	ldr	r2, [pc, #92]	; (80105d8 <vPortValidateInterruptPriority+0x70>)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	4413      	add	r3, r2
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010584:	4b15      	ldr	r3, [pc, #84]	; (80105dc <vPortValidateInterruptPriority+0x74>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	7afa      	ldrb	r2, [r7, #11]
 801058a:	429a      	cmp	r2, r3
 801058c:	d20a      	bcs.n	80105a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010592:	f383 8811 	msr	BASEPRI, r3
 8010596:	f3bf 8f6f 	isb	sy
 801059a:	f3bf 8f4f 	dsb	sy
 801059e:	607b      	str	r3, [r7, #4]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80105a4:	4b0e      	ldr	r3, [pc, #56]	; (80105e0 <vPortValidateInterruptPriority+0x78>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80105ac:	4b0d      	ldr	r3, [pc, #52]	; (80105e4 <vPortValidateInterruptPriority+0x7c>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d90a      	bls.n	80105ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80105b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b8:	f383 8811 	msr	BASEPRI, r3
 80105bc:	f3bf 8f6f 	isb	sy
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	603b      	str	r3, [r7, #0]
}
 80105c6:	bf00      	nop
 80105c8:	e7fe      	b.n	80105c8 <vPortValidateInterruptPriority+0x60>
	}
 80105ca:	bf00      	nop
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	e000e3f0 	.word	0xe000e3f0
 80105dc:	200031a4 	.word	0x200031a4
 80105e0:	e000ed0c 	.word	0xe000ed0c
 80105e4:	200031a8 	.word	0x200031a8

080105e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08a      	sub	sp, #40	; 0x28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80105f0:	2300      	movs	r3, #0
 80105f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80105f4:	f7fe ffe8 	bl	800f5c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80105f8:	4b5b      	ldr	r3, [pc, #364]	; (8010768 <pvPortMalloc+0x180>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d101      	bne.n	8010604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010600:	f000 f920 	bl	8010844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010604:	4b59      	ldr	r3, [pc, #356]	; (801076c <pvPortMalloc+0x184>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4013      	ands	r3, r2
 801060c:	2b00      	cmp	r3, #0
 801060e:	f040 8093 	bne.w	8010738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d01d      	beq.n	8010654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010618:	2208      	movs	r2, #8
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	4413      	add	r3, r2
 801061e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f003 0307 	and.w	r3, r3, #7
 8010626:	2b00      	cmp	r3, #0
 8010628:	d014      	beq.n	8010654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f023 0307 	bic.w	r3, r3, #7
 8010630:	3308      	adds	r3, #8
 8010632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f003 0307 	and.w	r3, r3, #7
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00a      	beq.n	8010654 <pvPortMalloc+0x6c>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	617b      	str	r3, [r7, #20]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d06e      	beq.n	8010738 <pvPortMalloc+0x150>
 801065a:	4b45      	ldr	r3, [pc, #276]	; (8010770 <pvPortMalloc+0x188>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	429a      	cmp	r2, r3
 8010662:	d869      	bhi.n	8010738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010664:	4b43      	ldr	r3, [pc, #268]	; (8010774 <pvPortMalloc+0x18c>)
 8010666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010668:	4b42      	ldr	r3, [pc, #264]	; (8010774 <pvPortMalloc+0x18c>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801066e:	e004      	b.n	801067a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	429a      	cmp	r2, r3
 8010682:	d903      	bls.n	801068c <pvPortMalloc+0xa4>
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1f1      	bne.n	8010670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801068c:	4b36      	ldr	r3, [pc, #216]	; (8010768 <pvPortMalloc+0x180>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010692:	429a      	cmp	r2, r3
 8010694:	d050      	beq.n	8010738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2208      	movs	r2, #8
 801069c:	4413      	add	r3, r2
 801069e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80106a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	6a3b      	ldr	r3, [r7, #32]
 80106a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	685a      	ldr	r2, [r3, #4]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	1ad2      	subs	r2, r2, r3
 80106b0:	2308      	movs	r3, #8
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d91f      	bls.n	80106f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80106b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4413      	add	r3, r2
 80106be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	f003 0307 	and.w	r3, r3, #7
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00a      	beq.n	80106e0 <pvPortMalloc+0xf8>
	__asm volatile
 80106ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ce:	f383 8811 	msr	BASEPRI, r3
 80106d2:	f3bf 8f6f 	isb	sy
 80106d6:	f3bf 8f4f 	dsb	sy
 80106da:	613b      	str	r3, [r7, #16]
}
 80106dc:	bf00      	nop
 80106de:	e7fe      	b.n	80106de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	1ad2      	subs	r2, r2, r3
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80106f2:	69b8      	ldr	r0, [r7, #24]
 80106f4:	f000 f908 	bl	8010908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80106f8:	4b1d      	ldr	r3, [pc, #116]	; (8010770 <pvPortMalloc+0x188>)
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	4a1b      	ldr	r2, [pc, #108]	; (8010770 <pvPortMalloc+0x188>)
 8010704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010706:	4b1a      	ldr	r3, [pc, #104]	; (8010770 <pvPortMalloc+0x188>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	4b1b      	ldr	r3, [pc, #108]	; (8010778 <pvPortMalloc+0x190>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	429a      	cmp	r2, r3
 8010710:	d203      	bcs.n	801071a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010712:	4b17      	ldr	r3, [pc, #92]	; (8010770 <pvPortMalloc+0x188>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4a18      	ldr	r2, [pc, #96]	; (8010778 <pvPortMalloc+0x190>)
 8010718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	685a      	ldr	r2, [r3, #4]
 801071e:	4b13      	ldr	r3, [pc, #76]	; (801076c <pvPortMalloc+0x184>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	431a      	orrs	r2, r3
 8010724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072a:	2200      	movs	r2, #0
 801072c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801072e:	4b13      	ldr	r3, [pc, #76]	; (801077c <pvPortMalloc+0x194>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	4a11      	ldr	r2, [pc, #68]	; (801077c <pvPortMalloc+0x194>)
 8010736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010738:	f7fe ff54 	bl	800f5e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	f003 0307 	and.w	r3, r3, #7
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00a      	beq.n	801075c <pvPortMalloc+0x174>
	__asm volatile
 8010746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074a:	f383 8811 	msr	BASEPRI, r3
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	60fb      	str	r3, [r7, #12]
}
 8010758:	bf00      	nop
 801075a:	e7fe      	b.n	801075a <pvPortMalloc+0x172>
	return pvReturn;
 801075c:	69fb      	ldr	r3, [r7, #28]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3728      	adds	r7, #40	; 0x28
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	20003d6c 	.word	0x20003d6c
 801076c:	20003d80 	.word	0x20003d80
 8010770:	20003d70 	.word	0x20003d70
 8010774:	20003d64 	.word	0x20003d64
 8010778:	20003d74 	.word	0x20003d74
 801077c:	20003d78 	.word	0x20003d78

08010780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b086      	sub	sp, #24
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d04d      	beq.n	801082e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010792:	2308      	movs	r3, #8
 8010794:	425b      	negs	r3, r3
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	4413      	add	r3, r2
 801079a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	685a      	ldr	r2, [r3, #4]
 80107a4:	4b24      	ldr	r3, [pc, #144]	; (8010838 <vPortFree+0xb8>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4013      	ands	r3, r2
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d10a      	bne.n	80107c4 <vPortFree+0x44>
	__asm volatile
 80107ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b2:	f383 8811 	msr	BASEPRI, r3
 80107b6:	f3bf 8f6f 	isb	sy
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	60fb      	str	r3, [r7, #12]
}
 80107c0:	bf00      	nop
 80107c2:	e7fe      	b.n	80107c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00a      	beq.n	80107e2 <vPortFree+0x62>
	__asm volatile
 80107cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	60bb      	str	r3, [r7, #8]
}
 80107de:	bf00      	nop
 80107e0:	e7fe      	b.n	80107e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <vPortFree+0xb8>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4013      	ands	r3, r2
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d01e      	beq.n	801082e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d11a      	bne.n	801082e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	4b0e      	ldr	r3, [pc, #56]	; (8010838 <vPortFree+0xb8>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	43db      	mvns	r3, r3
 8010802:	401a      	ands	r2, r3
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010808:	f7fe fede 	bl	800f5c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	685a      	ldr	r2, [r3, #4]
 8010810:	4b0a      	ldr	r3, [pc, #40]	; (801083c <vPortFree+0xbc>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4413      	add	r3, r2
 8010816:	4a09      	ldr	r2, [pc, #36]	; (801083c <vPortFree+0xbc>)
 8010818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801081a:	6938      	ldr	r0, [r7, #16]
 801081c:	f000 f874 	bl	8010908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010820:	4b07      	ldr	r3, [pc, #28]	; (8010840 <vPortFree+0xc0>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	3301      	adds	r3, #1
 8010826:	4a06      	ldr	r2, [pc, #24]	; (8010840 <vPortFree+0xc0>)
 8010828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801082a:	f7fe fedb 	bl	800f5e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801082e:	bf00      	nop
 8010830:	3718      	adds	r7, #24
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	20003d80 	.word	0x20003d80
 801083c:	20003d70 	.word	0x20003d70
 8010840:	20003d7c 	.word	0x20003d7c

08010844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010844:	b480      	push	{r7}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801084a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801084e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010850:	4b27      	ldr	r3, [pc, #156]	; (80108f0 <prvHeapInit+0xac>)
 8010852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f003 0307 	and.w	r3, r3, #7
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00c      	beq.n	8010878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	3307      	adds	r3, #7
 8010862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f023 0307 	bic.w	r3, r3, #7
 801086a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801086c:	68ba      	ldr	r2, [r7, #8]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	4a1f      	ldr	r2, [pc, #124]	; (80108f0 <prvHeapInit+0xac>)
 8010874:	4413      	add	r3, r2
 8010876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801087c:	4a1d      	ldr	r2, [pc, #116]	; (80108f4 <prvHeapInit+0xb0>)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010882:	4b1c      	ldr	r3, [pc, #112]	; (80108f4 <prvHeapInit+0xb0>)
 8010884:	2200      	movs	r2, #0
 8010886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	4413      	add	r3, r2
 801088e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010890:	2208      	movs	r2, #8
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	1a9b      	subs	r3, r3, r2
 8010896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f023 0307 	bic.w	r3, r3, #7
 801089e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	4a15      	ldr	r2, [pc, #84]	; (80108f8 <prvHeapInit+0xb4>)
 80108a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80108a6:	4b14      	ldr	r3, [pc, #80]	; (80108f8 <prvHeapInit+0xb4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2200      	movs	r2, #0
 80108ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108ae:	4b12      	ldr	r3, [pc, #72]	; (80108f8 <prvHeapInit+0xb4>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2200      	movs	r2, #0
 80108b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	1ad2      	subs	r2, r2, r3
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80108c4:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <prvHeapInit+0xb4>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	4a0a      	ldr	r2, [pc, #40]	; (80108fc <prvHeapInit+0xb8>)
 80108d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	4a09      	ldr	r2, [pc, #36]	; (8010900 <prvHeapInit+0xbc>)
 80108da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80108dc:	4b09      	ldr	r3, [pc, #36]	; (8010904 <prvHeapInit+0xc0>)
 80108de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80108e2:	601a      	str	r2, [r3, #0]
}
 80108e4:	bf00      	nop
 80108e6:	3714      	adds	r7, #20
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr
 80108f0:	200031ac 	.word	0x200031ac
 80108f4:	20003d64 	.word	0x20003d64
 80108f8:	20003d6c 	.word	0x20003d6c
 80108fc:	20003d74 	.word	0x20003d74
 8010900:	20003d70 	.word	0x20003d70
 8010904:	20003d80 	.word	0x20003d80

08010908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010910:	4b28      	ldr	r3, [pc, #160]	; (80109b4 <prvInsertBlockIntoFreeList+0xac>)
 8010912:	60fb      	str	r3, [r7, #12]
 8010914:	e002      	b.n	801091c <prvInsertBlockIntoFreeList+0x14>
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	60fb      	str	r3, [r7, #12]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	429a      	cmp	r2, r3
 8010924:	d8f7      	bhi.n	8010916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	4413      	add	r3, r2
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	429a      	cmp	r2, r3
 8010936:	d108      	bne.n	801094a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	685a      	ldr	r2, [r3, #4]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	441a      	add	r2, r3
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	441a      	add	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	429a      	cmp	r2, r3
 801095c:	d118      	bne.n	8010990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	4b15      	ldr	r3, [pc, #84]	; (80109b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	429a      	cmp	r2, r3
 8010968:	d00d      	beq.n	8010986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	441a      	add	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	e008      	b.n	8010998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010986:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	e003      	b.n	8010998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	429a      	cmp	r2, r3
 801099e:	d002      	beq.n	80109a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109a6:	bf00      	nop
 80109a8:	3714      	adds	r7, #20
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20003d64 	.word	0x20003d64
 80109b8:	20003d6c 	.word	0x20003d6c

080109bc <atoi>:
 80109bc:	220a      	movs	r2, #10
 80109be:	2100      	movs	r1, #0
 80109c0:	f000 b940 	b.w	8010c44 <strtol>

080109c4 <malloc>:
 80109c4:	4b02      	ldr	r3, [pc, #8]	; (80109d0 <malloc+0xc>)
 80109c6:	4601      	mov	r1, r0
 80109c8:	6818      	ldr	r0, [r3, #0]
 80109ca:	f000 b82b 	b.w	8010a24 <_malloc_r>
 80109ce:	bf00      	nop
 80109d0:	20000e50 	.word	0x20000e50

080109d4 <free>:
 80109d4:	4b02      	ldr	r3, [pc, #8]	; (80109e0 <free+0xc>)
 80109d6:	4601      	mov	r1, r0
 80109d8:	6818      	ldr	r0, [r3, #0]
 80109da:	f001 bed7 	b.w	801278c <_free_r>
 80109de:	bf00      	nop
 80109e0:	20000e50 	.word	0x20000e50

080109e4 <sbrk_aligned>:
 80109e4:	b570      	push	{r4, r5, r6, lr}
 80109e6:	4e0e      	ldr	r6, [pc, #56]	; (8010a20 <sbrk_aligned+0x3c>)
 80109e8:	460c      	mov	r4, r1
 80109ea:	6831      	ldr	r1, [r6, #0]
 80109ec:	4605      	mov	r5, r0
 80109ee:	b911      	cbnz	r1, 80109f6 <sbrk_aligned+0x12>
 80109f0:	f000 ffce 	bl	8011990 <_sbrk_r>
 80109f4:	6030      	str	r0, [r6, #0]
 80109f6:	4621      	mov	r1, r4
 80109f8:	4628      	mov	r0, r5
 80109fa:	f000 ffc9 	bl	8011990 <_sbrk_r>
 80109fe:	1c43      	adds	r3, r0, #1
 8010a00:	d00a      	beq.n	8010a18 <sbrk_aligned+0x34>
 8010a02:	1cc4      	adds	r4, r0, #3
 8010a04:	f024 0403 	bic.w	r4, r4, #3
 8010a08:	42a0      	cmp	r0, r4
 8010a0a:	d007      	beq.n	8010a1c <sbrk_aligned+0x38>
 8010a0c:	1a21      	subs	r1, r4, r0
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f000 ffbe 	bl	8011990 <_sbrk_r>
 8010a14:	3001      	adds	r0, #1
 8010a16:	d101      	bne.n	8010a1c <sbrk_aligned+0x38>
 8010a18:	f04f 34ff 	mov.w	r4, #4294967295
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	bd70      	pop	{r4, r5, r6, pc}
 8010a20:	20003d88 	.word	0x20003d88

08010a24 <_malloc_r>:
 8010a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a28:	1ccd      	adds	r5, r1, #3
 8010a2a:	f025 0503 	bic.w	r5, r5, #3
 8010a2e:	3508      	adds	r5, #8
 8010a30:	2d0c      	cmp	r5, #12
 8010a32:	bf38      	it	cc
 8010a34:	250c      	movcc	r5, #12
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	4607      	mov	r7, r0
 8010a3a:	db01      	blt.n	8010a40 <_malloc_r+0x1c>
 8010a3c:	42a9      	cmp	r1, r5
 8010a3e:	d905      	bls.n	8010a4c <_malloc_r+0x28>
 8010a40:	230c      	movs	r3, #12
 8010a42:	603b      	str	r3, [r7, #0]
 8010a44:	2600      	movs	r6, #0
 8010a46:	4630      	mov	r0, r6
 8010a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010b20 <_malloc_r+0xfc>
 8010a50:	f000 f868 	bl	8010b24 <__malloc_lock>
 8010a54:	f8d8 3000 	ldr.w	r3, [r8]
 8010a58:	461c      	mov	r4, r3
 8010a5a:	bb5c      	cbnz	r4, 8010ab4 <_malloc_r+0x90>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4638      	mov	r0, r7
 8010a60:	f7ff ffc0 	bl	80109e4 <sbrk_aligned>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	4604      	mov	r4, r0
 8010a68:	d155      	bne.n	8010b16 <_malloc_r+0xf2>
 8010a6a:	f8d8 4000 	ldr.w	r4, [r8]
 8010a6e:	4626      	mov	r6, r4
 8010a70:	2e00      	cmp	r6, #0
 8010a72:	d145      	bne.n	8010b00 <_malloc_r+0xdc>
 8010a74:	2c00      	cmp	r4, #0
 8010a76:	d048      	beq.n	8010b0a <_malloc_r+0xe6>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4638      	mov	r0, r7
 8010a7e:	eb04 0903 	add.w	r9, r4, r3
 8010a82:	f000 ff85 	bl	8011990 <_sbrk_r>
 8010a86:	4581      	cmp	r9, r0
 8010a88:	d13f      	bne.n	8010b0a <_malloc_r+0xe6>
 8010a8a:	6821      	ldr	r1, [r4, #0]
 8010a8c:	1a6d      	subs	r5, r5, r1
 8010a8e:	4629      	mov	r1, r5
 8010a90:	4638      	mov	r0, r7
 8010a92:	f7ff ffa7 	bl	80109e4 <sbrk_aligned>
 8010a96:	3001      	adds	r0, #1
 8010a98:	d037      	beq.n	8010b0a <_malloc_r+0xe6>
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	442b      	add	r3, r5
 8010a9e:	6023      	str	r3, [r4, #0]
 8010aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d038      	beq.n	8010b1a <_malloc_r+0xf6>
 8010aa8:	685a      	ldr	r2, [r3, #4]
 8010aaa:	42a2      	cmp	r2, r4
 8010aac:	d12b      	bne.n	8010b06 <_malloc_r+0xe2>
 8010aae:	2200      	movs	r2, #0
 8010ab0:	605a      	str	r2, [r3, #4]
 8010ab2:	e00f      	b.n	8010ad4 <_malloc_r+0xb0>
 8010ab4:	6822      	ldr	r2, [r4, #0]
 8010ab6:	1b52      	subs	r2, r2, r5
 8010ab8:	d41f      	bmi.n	8010afa <_malloc_r+0xd6>
 8010aba:	2a0b      	cmp	r2, #11
 8010abc:	d917      	bls.n	8010aee <_malloc_r+0xca>
 8010abe:	1961      	adds	r1, r4, r5
 8010ac0:	42a3      	cmp	r3, r4
 8010ac2:	6025      	str	r5, [r4, #0]
 8010ac4:	bf18      	it	ne
 8010ac6:	6059      	strne	r1, [r3, #4]
 8010ac8:	6863      	ldr	r3, [r4, #4]
 8010aca:	bf08      	it	eq
 8010acc:	f8c8 1000 	streq.w	r1, [r8]
 8010ad0:	5162      	str	r2, [r4, r5]
 8010ad2:	604b      	str	r3, [r1, #4]
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	f104 060b 	add.w	r6, r4, #11
 8010ada:	f000 f829 	bl	8010b30 <__malloc_unlock>
 8010ade:	f026 0607 	bic.w	r6, r6, #7
 8010ae2:	1d23      	adds	r3, r4, #4
 8010ae4:	1af2      	subs	r2, r6, r3
 8010ae6:	d0ae      	beq.n	8010a46 <_malloc_r+0x22>
 8010ae8:	1b9b      	subs	r3, r3, r6
 8010aea:	50a3      	str	r3, [r4, r2]
 8010aec:	e7ab      	b.n	8010a46 <_malloc_r+0x22>
 8010aee:	42a3      	cmp	r3, r4
 8010af0:	6862      	ldr	r2, [r4, #4]
 8010af2:	d1dd      	bne.n	8010ab0 <_malloc_r+0x8c>
 8010af4:	f8c8 2000 	str.w	r2, [r8]
 8010af8:	e7ec      	b.n	8010ad4 <_malloc_r+0xb0>
 8010afa:	4623      	mov	r3, r4
 8010afc:	6864      	ldr	r4, [r4, #4]
 8010afe:	e7ac      	b.n	8010a5a <_malloc_r+0x36>
 8010b00:	4634      	mov	r4, r6
 8010b02:	6876      	ldr	r6, [r6, #4]
 8010b04:	e7b4      	b.n	8010a70 <_malloc_r+0x4c>
 8010b06:	4613      	mov	r3, r2
 8010b08:	e7cc      	b.n	8010aa4 <_malloc_r+0x80>
 8010b0a:	230c      	movs	r3, #12
 8010b0c:	603b      	str	r3, [r7, #0]
 8010b0e:	4638      	mov	r0, r7
 8010b10:	f000 f80e 	bl	8010b30 <__malloc_unlock>
 8010b14:	e797      	b.n	8010a46 <_malloc_r+0x22>
 8010b16:	6025      	str	r5, [r4, #0]
 8010b18:	e7dc      	b.n	8010ad4 <_malloc_r+0xb0>
 8010b1a:	605b      	str	r3, [r3, #4]
 8010b1c:	deff      	udf	#255	; 0xff
 8010b1e:	bf00      	nop
 8010b20:	20003d84 	.word	0x20003d84

08010b24 <__malloc_lock>:
 8010b24:	4801      	ldr	r0, [pc, #4]	; (8010b2c <__malloc_lock+0x8>)
 8010b26:	f000 bf80 	b.w	8011a2a <__retarget_lock_acquire_recursive>
 8010b2a:	bf00      	nop
 8010b2c:	20003ecc 	.word	0x20003ecc

08010b30 <__malloc_unlock>:
 8010b30:	4801      	ldr	r0, [pc, #4]	; (8010b38 <__malloc_unlock+0x8>)
 8010b32:	f000 bf7b 	b.w	8011a2c <__retarget_lock_release_recursive>
 8010b36:	bf00      	nop
 8010b38:	20003ecc 	.word	0x20003ecc

08010b3c <_strtol_l.constprop.0>:
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b42:	d001      	beq.n	8010b48 <_strtol_l.constprop.0+0xc>
 8010b44:	2b24      	cmp	r3, #36	; 0x24
 8010b46:	d906      	bls.n	8010b56 <_strtol_l.constprop.0+0x1a>
 8010b48:	f000 ff44 	bl	80119d4 <__errno>
 8010b4c:	2316      	movs	r3, #22
 8010b4e:	6003      	str	r3, [r0, #0]
 8010b50:	2000      	movs	r0, #0
 8010b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010c3c <_strtol_l.constprop.0+0x100>
 8010b5a:	460d      	mov	r5, r1
 8010b5c:	462e      	mov	r6, r5
 8010b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010b66:	f017 0708 	ands.w	r7, r7, #8
 8010b6a:	d1f7      	bne.n	8010b5c <_strtol_l.constprop.0+0x20>
 8010b6c:	2c2d      	cmp	r4, #45	; 0x2d
 8010b6e:	d132      	bne.n	8010bd6 <_strtol_l.constprop.0+0x9a>
 8010b70:	782c      	ldrb	r4, [r5, #0]
 8010b72:	2701      	movs	r7, #1
 8010b74:	1cb5      	adds	r5, r6, #2
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d05b      	beq.n	8010c32 <_strtol_l.constprop.0+0xf6>
 8010b7a:	2b10      	cmp	r3, #16
 8010b7c:	d109      	bne.n	8010b92 <_strtol_l.constprop.0+0x56>
 8010b7e:	2c30      	cmp	r4, #48	; 0x30
 8010b80:	d107      	bne.n	8010b92 <_strtol_l.constprop.0+0x56>
 8010b82:	782c      	ldrb	r4, [r5, #0]
 8010b84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010b88:	2c58      	cmp	r4, #88	; 0x58
 8010b8a:	d14d      	bne.n	8010c28 <_strtol_l.constprop.0+0xec>
 8010b8c:	786c      	ldrb	r4, [r5, #1]
 8010b8e:	2310      	movs	r3, #16
 8010b90:	3502      	adds	r5, #2
 8010b92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010b96:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b9a:	f04f 0e00 	mov.w	lr, #0
 8010b9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010ba2:	4676      	mov	r6, lr
 8010ba4:	fb03 8a19 	mls	sl, r3, r9, r8
 8010ba8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010bac:	f1bc 0f09 	cmp.w	ip, #9
 8010bb0:	d816      	bhi.n	8010be0 <_strtol_l.constprop.0+0xa4>
 8010bb2:	4664      	mov	r4, ip
 8010bb4:	42a3      	cmp	r3, r4
 8010bb6:	dd24      	ble.n	8010c02 <_strtol_l.constprop.0+0xc6>
 8010bb8:	f1be 3fff 	cmp.w	lr, #4294967295
 8010bbc:	d008      	beq.n	8010bd0 <_strtol_l.constprop.0+0x94>
 8010bbe:	45b1      	cmp	r9, r6
 8010bc0:	d31c      	bcc.n	8010bfc <_strtol_l.constprop.0+0xc0>
 8010bc2:	d101      	bne.n	8010bc8 <_strtol_l.constprop.0+0x8c>
 8010bc4:	45a2      	cmp	sl, r4
 8010bc6:	db19      	blt.n	8010bfc <_strtol_l.constprop.0+0xc0>
 8010bc8:	fb06 4603 	mla	r6, r6, r3, r4
 8010bcc:	f04f 0e01 	mov.w	lr, #1
 8010bd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bd4:	e7e8      	b.n	8010ba8 <_strtol_l.constprop.0+0x6c>
 8010bd6:	2c2b      	cmp	r4, #43	; 0x2b
 8010bd8:	bf04      	itt	eq
 8010bda:	782c      	ldrbeq	r4, [r5, #0]
 8010bdc:	1cb5      	addeq	r5, r6, #2
 8010bde:	e7ca      	b.n	8010b76 <_strtol_l.constprop.0+0x3a>
 8010be0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010be4:	f1bc 0f19 	cmp.w	ip, #25
 8010be8:	d801      	bhi.n	8010bee <_strtol_l.constprop.0+0xb2>
 8010bea:	3c37      	subs	r4, #55	; 0x37
 8010bec:	e7e2      	b.n	8010bb4 <_strtol_l.constprop.0+0x78>
 8010bee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010bf2:	f1bc 0f19 	cmp.w	ip, #25
 8010bf6:	d804      	bhi.n	8010c02 <_strtol_l.constprop.0+0xc6>
 8010bf8:	3c57      	subs	r4, #87	; 0x57
 8010bfa:	e7db      	b.n	8010bb4 <_strtol_l.constprop.0+0x78>
 8010bfc:	f04f 3eff 	mov.w	lr, #4294967295
 8010c00:	e7e6      	b.n	8010bd0 <_strtol_l.constprop.0+0x94>
 8010c02:	f1be 3fff 	cmp.w	lr, #4294967295
 8010c06:	d105      	bne.n	8010c14 <_strtol_l.constprop.0+0xd8>
 8010c08:	2322      	movs	r3, #34	; 0x22
 8010c0a:	6003      	str	r3, [r0, #0]
 8010c0c:	4646      	mov	r6, r8
 8010c0e:	b942      	cbnz	r2, 8010c22 <_strtol_l.constprop.0+0xe6>
 8010c10:	4630      	mov	r0, r6
 8010c12:	e79e      	b.n	8010b52 <_strtol_l.constprop.0+0x16>
 8010c14:	b107      	cbz	r7, 8010c18 <_strtol_l.constprop.0+0xdc>
 8010c16:	4276      	negs	r6, r6
 8010c18:	2a00      	cmp	r2, #0
 8010c1a:	d0f9      	beq.n	8010c10 <_strtol_l.constprop.0+0xd4>
 8010c1c:	f1be 0f00 	cmp.w	lr, #0
 8010c20:	d000      	beq.n	8010c24 <_strtol_l.constprop.0+0xe8>
 8010c22:	1e69      	subs	r1, r5, #1
 8010c24:	6011      	str	r1, [r2, #0]
 8010c26:	e7f3      	b.n	8010c10 <_strtol_l.constprop.0+0xd4>
 8010c28:	2430      	movs	r4, #48	; 0x30
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1b1      	bne.n	8010b92 <_strtol_l.constprop.0+0x56>
 8010c2e:	2308      	movs	r3, #8
 8010c30:	e7af      	b.n	8010b92 <_strtol_l.constprop.0+0x56>
 8010c32:	2c30      	cmp	r4, #48	; 0x30
 8010c34:	d0a5      	beq.n	8010b82 <_strtol_l.constprop.0+0x46>
 8010c36:	230a      	movs	r3, #10
 8010c38:	e7ab      	b.n	8010b92 <_strtol_l.constprop.0+0x56>
 8010c3a:	bf00      	nop
 8010c3c:	080580cb 	.word	0x080580cb

08010c40 <_strtol_r>:
 8010c40:	f7ff bf7c 	b.w	8010b3c <_strtol_l.constprop.0>

08010c44 <strtol>:
 8010c44:	4613      	mov	r3, r2
 8010c46:	460a      	mov	r2, r1
 8010c48:	4601      	mov	r1, r0
 8010c4a:	4802      	ldr	r0, [pc, #8]	; (8010c54 <strtol+0x10>)
 8010c4c:	6800      	ldr	r0, [r0, #0]
 8010c4e:	f7ff bf75 	b.w	8010b3c <_strtol_l.constprop.0>
 8010c52:	bf00      	nop
 8010c54:	20000e50 	.word	0x20000e50

08010c58 <__cvt>:
 8010c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c5c:	ec55 4b10 	vmov	r4, r5, d0
 8010c60:	2d00      	cmp	r5, #0
 8010c62:	460e      	mov	r6, r1
 8010c64:	4619      	mov	r1, r3
 8010c66:	462b      	mov	r3, r5
 8010c68:	bfbb      	ittet	lt
 8010c6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010c6e:	461d      	movlt	r5, r3
 8010c70:	2300      	movge	r3, #0
 8010c72:	232d      	movlt	r3, #45	; 0x2d
 8010c74:	700b      	strb	r3, [r1, #0]
 8010c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010c7c:	4691      	mov	r9, r2
 8010c7e:	f023 0820 	bic.w	r8, r3, #32
 8010c82:	bfbc      	itt	lt
 8010c84:	4622      	movlt	r2, r4
 8010c86:	4614      	movlt	r4, r2
 8010c88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c8c:	d005      	beq.n	8010c9a <__cvt+0x42>
 8010c8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c92:	d100      	bne.n	8010c96 <__cvt+0x3e>
 8010c94:	3601      	adds	r6, #1
 8010c96:	2102      	movs	r1, #2
 8010c98:	e000      	b.n	8010c9c <__cvt+0x44>
 8010c9a:	2103      	movs	r1, #3
 8010c9c:	ab03      	add	r3, sp, #12
 8010c9e:	9301      	str	r3, [sp, #4]
 8010ca0:	ab02      	add	r3, sp, #8
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	ec45 4b10 	vmov	d0, r4, r5
 8010ca8:	4653      	mov	r3, sl
 8010caa:	4632      	mov	r2, r6
 8010cac:	f000 ff7c 	bl	8011ba8 <_dtoa_r>
 8010cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010cb4:	4607      	mov	r7, r0
 8010cb6:	d102      	bne.n	8010cbe <__cvt+0x66>
 8010cb8:	f019 0f01 	tst.w	r9, #1
 8010cbc:	d022      	beq.n	8010d04 <__cvt+0xac>
 8010cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cc2:	eb07 0906 	add.w	r9, r7, r6
 8010cc6:	d110      	bne.n	8010cea <__cvt+0x92>
 8010cc8:	783b      	ldrb	r3, [r7, #0]
 8010cca:	2b30      	cmp	r3, #48	; 0x30
 8010ccc:	d10a      	bne.n	8010ce4 <__cvt+0x8c>
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	f7ef fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cda:	b918      	cbnz	r0, 8010ce4 <__cvt+0x8c>
 8010cdc:	f1c6 0601 	rsb	r6, r6, #1
 8010ce0:	f8ca 6000 	str.w	r6, [sl]
 8010ce4:	f8da 3000 	ldr.w	r3, [sl]
 8010ce8:	4499      	add	r9, r3
 8010cea:	2200      	movs	r2, #0
 8010cec:	2300      	movs	r3, #0
 8010cee:	4620      	mov	r0, r4
 8010cf0:	4629      	mov	r1, r5
 8010cf2:	f7ef fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cf6:	b108      	cbz	r0, 8010cfc <__cvt+0xa4>
 8010cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010cfc:	2230      	movs	r2, #48	; 0x30
 8010cfe:	9b03      	ldr	r3, [sp, #12]
 8010d00:	454b      	cmp	r3, r9
 8010d02:	d307      	bcc.n	8010d14 <__cvt+0xbc>
 8010d04:	9b03      	ldr	r3, [sp, #12]
 8010d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d08:	1bdb      	subs	r3, r3, r7
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	6013      	str	r3, [r2, #0]
 8010d0e:	b004      	add	sp, #16
 8010d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d14:	1c59      	adds	r1, r3, #1
 8010d16:	9103      	str	r1, [sp, #12]
 8010d18:	701a      	strb	r2, [r3, #0]
 8010d1a:	e7f0      	b.n	8010cfe <__cvt+0xa6>

08010d1c <__exponent>:
 8010d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2900      	cmp	r1, #0
 8010d22:	bfb8      	it	lt
 8010d24:	4249      	neglt	r1, r1
 8010d26:	f803 2b02 	strb.w	r2, [r3], #2
 8010d2a:	bfb4      	ite	lt
 8010d2c:	222d      	movlt	r2, #45	; 0x2d
 8010d2e:	222b      	movge	r2, #43	; 0x2b
 8010d30:	2909      	cmp	r1, #9
 8010d32:	7042      	strb	r2, [r0, #1]
 8010d34:	dd2a      	ble.n	8010d8c <__exponent+0x70>
 8010d36:	f10d 0207 	add.w	r2, sp, #7
 8010d3a:	4617      	mov	r7, r2
 8010d3c:	260a      	movs	r6, #10
 8010d3e:	4694      	mov	ip, r2
 8010d40:	fb91 f5f6 	sdiv	r5, r1, r6
 8010d44:	fb06 1415 	mls	r4, r6, r5, r1
 8010d48:	3430      	adds	r4, #48	; 0x30
 8010d4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010d4e:	460c      	mov	r4, r1
 8010d50:	2c63      	cmp	r4, #99	; 0x63
 8010d52:	f102 32ff 	add.w	r2, r2, #4294967295
 8010d56:	4629      	mov	r1, r5
 8010d58:	dcf1      	bgt.n	8010d3e <__exponent+0x22>
 8010d5a:	3130      	adds	r1, #48	; 0x30
 8010d5c:	f1ac 0402 	sub.w	r4, ip, #2
 8010d60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010d64:	1c41      	adds	r1, r0, #1
 8010d66:	4622      	mov	r2, r4
 8010d68:	42ba      	cmp	r2, r7
 8010d6a:	d30a      	bcc.n	8010d82 <__exponent+0x66>
 8010d6c:	f10d 0209 	add.w	r2, sp, #9
 8010d70:	eba2 020c 	sub.w	r2, r2, ip
 8010d74:	42bc      	cmp	r4, r7
 8010d76:	bf88      	it	hi
 8010d78:	2200      	movhi	r2, #0
 8010d7a:	4413      	add	r3, r2
 8010d7c:	1a18      	subs	r0, r3, r0
 8010d7e:	b003      	add	sp, #12
 8010d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010d86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010d8a:	e7ed      	b.n	8010d68 <__exponent+0x4c>
 8010d8c:	2330      	movs	r3, #48	; 0x30
 8010d8e:	3130      	adds	r1, #48	; 0x30
 8010d90:	7083      	strb	r3, [r0, #2]
 8010d92:	70c1      	strb	r1, [r0, #3]
 8010d94:	1d03      	adds	r3, r0, #4
 8010d96:	e7f1      	b.n	8010d7c <__exponent+0x60>

08010d98 <_printf_float>:
 8010d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	ed2d 8b02 	vpush	{d8}
 8010da0:	b08d      	sub	sp, #52	; 0x34
 8010da2:	460c      	mov	r4, r1
 8010da4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010da8:	4616      	mov	r6, r2
 8010daa:	461f      	mov	r7, r3
 8010dac:	4605      	mov	r5, r0
 8010dae:	f000 fdb7 	bl	8011920 <_localeconv_r>
 8010db2:	f8d0 a000 	ldr.w	sl, [r0]
 8010db6:	4650      	mov	r0, sl
 8010db8:	f7ef fa5a 	bl	8000270 <strlen>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	9305      	str	r3, [sp, #20]
 8010dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8010dc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010dcc:	3307      	adds	r3, #7
 8010dce:	f023 0307 	bic.w	r3, r3, #7
 8010dd2:	f103 0208 	add.w	r2, r3, #8
 8010dd6:	f8c8 2000 	str.w	r2, [r8]
 8010dda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010dde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010de2:	9307      	str	r3, [sp, #28]
 8010de4:	f8cd 8018 	str.w	r8, [sp, #24]
 8010de8:	ee08 0a10 	vmov	s16, r0
 8010dec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010df4:	4b9e      	ldr	r3, [pc, #632]	; (8011070 <_printf_float+0x2d8>)
 8010df6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfa:	f7ef fe97 	bl	8000b2c <__aeabi_dcmpun>
 8010dfe:	bb88      	cbnz	r0, 8010e64 <_printf_float+0xcc>
 8010e00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e04:	4b9a      	ldr	r3, [pc, #616]	; (8011070 <_printf_float+0x2d8>)
 8010e06:	f04f 32ff 	mov.w	r2, #4294967295
 8010e0a:	f7ef fe71 	bl	8000af0 <__aeabi_dcmple>
 8010e0e:	bb48      	cbnz	r0, 8010e64 <_printf_float+0xcc>
 8010e10:	2200      	movs	r2, #0
 8010e12:	2300      	movs	r3, #0
 8010e14:	4640      	mov	r0, r8
 8010e16:	4649      	mov	r1, r9
 8010e18:	f7ef fe60 	bl	8000adc <__aeabi_dcmplt>
 8010e1c:	b110      	cbz	r0, 8010e24 <_printf_float+0x8c>
 8010e1e:	232d      	movs	r3, #45	; 0x2d
 8010e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e24:	4a93      	ldr	r2, [pc, #588]	; (8011074 <_printf_float+0x2dc>)
 8010e26:	4b94      	ldr	r3, [pc, #592]	; (8011078 <_printf_float+0x2e0>)
 8010e28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e2c:	bf94      	ite	ls
 8010e2e:	4690      	movls	r8, r2
 8010e30:	4698      	movhi	r8, r3
 8010e32:	2303      	movs	r3, #3
 8010e34:	6123      	str	r3, [r4, #16]
 8010e36:	9b05      	ldr	r3, [sp, #20]
 8010e38:	f023 0304 	bic.w	r3, r3, #4
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	f04f 0900 	mov.w	r9, #0
 8010e42:	9700      	str	r7, [sp, #0]
 8010e44:	4633      	mov	r3, r6
 8010e46:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e48:	4621      	mov	r1, r4
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	f000 f9da 	bl	8011204 <_printf_common>
 8010e50:	3001      	adds	r0, #1
 8010e52:	f040 8090 	bne.w	8010f76 <_printf_float+0x1de>
 8010e56:	f04f 30ff 	mov.w	r0, #4294967295
 8010e5a:	b00d      	add	sp, #52	; 0x34
 8010e5c:	ecbd 8b02 	vpop	{d8}
 8010e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e64:	4642      	mov	r2, r8
 8010e66:	464b      	mov	r3, r9
 8010e68:	4640      	mov	r0, r8
 8010e6a:	4649      	mov	r1, r9
 8010e6c:	f7ef fe5e 	bl	8000b2c <__aeabi_dcmpun>
 8010e70:	b140      	cbz	r0, 8010e84 <_printf_float+0xec>
 8010e72:	464b      	mov	r3, r9
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	bfbc      	itt	lt
 8010e78:	232d      	movlt	r3, #45	; 0x2d
 8010e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010e7e:	4a7f      	ldr	r2, [pc, #508]	; (801107c <_printf_float+0x2e4>)
 8010e80:	4b7f      	ldr	r3, [pc, #508]	; (8011080 <_printf_float+0x2e8>)
 8010e82:	e7d1      	b.n	8010e28 <_printf_float+0x90>
 8010e84:	6863      	ldr	r3, [r4, #4]
 8010e86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e8a:	9206      	str	r2, [sp, #24]
 8010e8c:	1c5a      	adds	r2, r3, #1
 8010e8e:	d13f      	bne.n	8010f10 <_printf_float+0x178>
 8010e90:	2306      	movs	r3, #6
 8010e92:	6063      	str	r3, [r4, #4]
 8010e94:	9b05      	ldr	r3, [sp, #20]
 8010e96:	6861      	ldr	r1, [r4, #4]
 8010e98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	9303      	str	r3, [sp, #12]
 8010ea0:	ab0a      	add	r3, sp, #40	; 0x28
 8010ea2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010ea6:	ab09      	add	r3, sp, #36	; 0x24
 8010ea8:	ec49 8b10 	vmov	d0, r8, r9
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	6022      	str	r2, [r4, #0]
 8010eb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	f7ff fecf 	bl	8010c58 <__cvt>
 8010eba:	9b06      	ldr	r3, [sp, #24]
 8010ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ebe:	2b47      	cmp	r3, #71	; 0x47
 8010ec0:	4680      	mov	r8, r0
 8010ec2:	d108      	bne.n	8010ed6 <_printf_float+0x13e>
 8010ec4:	1cc8      	adds	r0, r1, #3
 8010ec6:	db02      	blt.n	8010ece <_printf_float+0x136>
 8010ec8:	6863      	ldr	r3, [r4, #4]
 8010eca:	4299      	cmp	r1, r3
 8010ecc:	dd41      	ble.n	8010f52 <_printf_float+0x1ba>
 8010ece:	f1ab 0302 	sub.w	r3, fp, #2
 8010ed2:	fa5f fb83 	uxtb.w	fp, r3
 8010ed6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010eda:	d820      	bhi.n	8010f1e <_printf_float+0x186>
 8010edc:	3901      	subs	r1, #1
 8010ede:	465a      	mov	r2, fp
 8010ee0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8010ee6:	f7ff ff19 	bl	8010d1c <__exponent>
 8010eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eec:	1813      	adds	r3, r2, r0
 8010eee:	2a01      	cmp	r2, #1
 8010ef0:	4681      	mov	r9, r0
 8010ef2:	6123      	str	r3, [r4, #16]
 8010ef4:	dc02      	bgt.n	8010efc <_printf_float+0x164>
 8010ef6:	6822      	ldr	r2, [r4, #0]
 8010ef8:	07d2      	lsls	r2, r2, #31
 8010efa:	d501      	bpl.n	8010f00 <_printf_float+0x168>
 8010efc:	3301      	adds	r3, #1
 8010efe:	6123      	str	r3, [r4, #16]
 8010f00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d09c      	beq.n	8010e42 <_printf_float+0xaa>
 8010f08:	232d      	movs	r3, #45	; 0x2d
 8010f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f0e:	e798      	b.n	8010e42 <_printf_float+0xaa>
 8010f10:	9a06      	ldr	r2, [sp, #24]
 8010f12:	2a47      	cmp	r2, #71	; 0x47
 8010f14:	d1be      	bne.n	8010e94 <_printf_float+0xfc>
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d1bc      	bne.n	8010e94 <_printf_float+0xfc>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e7b9      	b.n	8010e92 <_printf_float+0xfa>
 8010f1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f22:	d118      	bne.n	8010f56 <_printf_float+0x1be>
 8010f24:	2900      	cmp	r1, #0
 8010f26:	6863      	ldr	r3, [r4, #4]
 8010f28:	dd0b      	ble.n	8010f42 <_printf_float+0x1aa>
 8010f2a:	6121      	str	r1, [r4, #16]
 8010f2c:	b913      	cbnz	r3, 8010f34 <_printf_float+0x19c>
 8010f2e:	6822      	ldr	r2, [r4, #0]
 8010f30:	07d0      	lsls	r0, r2, #31
 8010f32:	d502      	bpl.n	8010f3a <_printf_float+0x1a2>
 8010f34:	3301      	adds	r3, #1
 8010f36:	440b      	add	r3, r1
 8010f38:	6123      	str	r3, [r4, #16]
 8010f3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f3c:	f04f 0900 	mov.w	r9, #0
 8010f40:	e7de      	b.n	8010f00 <_printf_float+0x168>
 8010f42:	b913      	cbnz	r3, 8010f4a <_printf_float+0x1b2>
 8010f44:	6822      	ldr	r2, [r4, #0]
 8010f46:	07d2      	lsls	r2, r2, #31
 8010f48:	d501      	bpl.n	8010f4e <_printf_float+0x1b6>
 8010f4a:	3302      	adds	r3, #2
 8010f4c:	e7f4      	b.n	8010f38 <_printf_float+0x1a0>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	e7f2      	b.n	8010f38 <_printf_float+0x1a0>
 8010f52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f58:	4299      	cmp	r1, r3
 8010f5a:	db05      	blt.n	8010f68 <_printf_float+0x1d0>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	6121      	str	r1, [r4, #16]
 8010f60:	07d8      	lsls	r0, r3, #31
 8010f62:	d5ea      	bpl.n	8010f3a <_printf_float+0x1a2>
 8010f64:	1c4b      	adds	r3, r1, #1
 8010f66:	e7e7      	b.n	8010f38 <_printf_float+0x1a0>
 8010f68:	2900      	cmp	r1, #0
 8010f6a:	bfd4      	ite	le
 8010f6c:	f1c1 0202 	rsble	r2, r1, #2
 8010f70:	2201      	movgt	r2, #1
 8010f72:	4413      	add	r3, r2
 8010f74:	e7e0      	b.n	8010f38 <_printf_float+0x1a0>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	055a      	lsls	r2, r3, #21
 8010f7a:	d407      	bmi.n	8010f8c <_printf_float+0x1f4>
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	4642      	mov	r2, r8
 8010f80:	4631      	mov	r1, r6
 8010f82:	4628      	mov	r0, r5
 8010f84:	47b8      	blx	r7
 8010f86:	3001      	adds	r0, #1
 8010f88:	d12c      	bne.n	8010fe4 <_printf_float+0x24c>
 8010f8a:	e764      	b.n	8010e56 <_printf_float+0xbe>
 8010f8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f90:	f240 80e0 	bls.w	8011154 <_printf_float+0x3bc>
 8010f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f98:	2200      	movs	r2, #0
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	f7ef fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d034      	beq.n	801100e <_printf_float+0x276>
 8010fa4:	4a37      	ldr	r2, [pc, #220]	; (8011084 <_printf_float+0x2ec>)
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	4631      	mov	r1, r6
 8010faa:	4628      	mov	r0, r5
 8010fac:	47b8      	blx	r7
 8010fae:	3001      	adds	r0, #1
 8010fb0:	f43f af51 	beq.w	8010e56 <_printf_float+0xbe>
 8010fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	db02      	blt.n	8010fc2 <_printf_float+0x22a>
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	07d8      	lsls	r0, r3, #31
 8010fc0:	d510      	bpl.n	8010fe4 <_printf_float+0x24c>
 8010fc2:	ee18 3a10 	vmov	r3, s16
 8010fc6:	4652      	mov	r2, sl
 8010fc8:	4631      	mov	r1, r6
 8010fca:	4628      	mov	r0, r5
 8010fcc:	47b8      	blx	r7
 8010fce:	3001      	adds	r0, #1
 8010fd0:	f43f af41 	beq.w	8010e56 <_printf_float+0xbe>
 8010fd4:	f04f 0800 	mov.w	r8, #0
 8010fd8:	f104 091a 	add.w	r9, r4, #26
 8010fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	4543      	cmp	r3, r8
 8010fe2:	dc09      	bgt.n	8010ff8 <_printf_float+0x260>
 8010fe4:	6823      	ldr	r3, [r4, #0]
 8010fe6:	079b      	lsls	r3, r3, #30
 8010fe8:	f100 8107 	bmi.w	80111fa <_printf_float+0x462>
 8010fec:	68e0      	ldr	r0, [r4, #12]
 8010fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff0:	4298      	cmp	r0, r3
 8010ff2:	bfb8      	it	lt
 8010ff4:	4618      	movlt	r0, r3
 8010ff6:	e730      	b.n	8010e5a <_printf_float+0xc2>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	464a      	mov	r2, r9
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	4628      	mov	r0, r5
 8011000:	47b8      	blx	r7
 8011002:	3001      	adds	r0, #1
 8011004:	f43f af27 	beq.w	8010e56 <_printf_float+0xbe>
 8011008:	f108 0801 	add.w	r8, r8, #1
 801100c:	e7e6      	b.n	8010fdc <_printf_float+0x244>
 801100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011010:	2b00      	cmp	r3, #0
 8011012:	dc39      	bgt.n	8011088 <_printf_float+0x2f0>
 8011014:	4a1b      	ldr	r2, [pc, #108]	; (8011084 <_printf_float+0x2ec>)
 8011016:	2301      	movs	r3, #1
 8011018:	4631      	mov	r1, r6
 801101a:	4628      	mov	r0, r5
 801101c:	47b8      	blx	r7
 801101e:	3001      	adds	r0, #1
 8011020:	f43f af19 	beq.w	8010e56 <_printf_float+0xbe>
 8011024:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011028:	4313      	orrs	r3, r2
 801102a:	d102      	bne.n	8011032 <_printf_float+0x29a>
 801102c:	6823      	ldr	r3, [r4, #0]
 801102e:	07d9      	lsls	r1, r3, #31
 8011030:	d5d8      	bpl.n	8010fe4 <_printf_float+0x24c>
 8011032:	ee18 3a10 	vmov	r3, s16
 8011036:	4652      	mov	r2, sl
 8011038:	4631      	mov	r1, r6
 801103a:	4628      	mov	r0, r5
 801103c:	47b8      	blx	r7
 801103e:	3001      	adds	r0, #1
 8011040:	f43f af09 	beq.w	8010e56 <_printf_float+0xbe>
 8011044:	f04f 0900 	mov.w	r9, #0
 8011048:	f104 0a1a 	add.w	sl, r4, #26
 801104c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801104e:	425b      	negs	r3, r3
 8011050:	454b      	cmp	r3, r9
 8011052:	dc01      	bgt.n	8011058 <_printf_float+0x2c0>
 8011054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011056:	e792      	b.n	8010f7e <_printf_float+0x1e6>
 8011058:	2301      	movs	r3, #1
 801105a:	4652      	mov	r2, sl
 801105c:	4631      	mov	r1, r6
 801105e:	4628      	mov	r0, r5
 8011060:	47b8      	blx	r7
 8011062:	3001      	adds	r0, #1
 8011064:	f43f aef7 	beq.w	8010e56 <_printf_float+0xbe>
 8011068:	f109 0901 	add.w	r9, r9, #1
 801106c:	e7ee      	b.n	801104c <_printf_float+0x2b4>
 801106e:	bf00      	nop
 8011070:	7fefffff 	.word	0x7fefffff
 8011074:	080581cb 	.word	0x080581cb
 8011078:	080581cf 	.word	0x080581cf
 801107c:	080581d3 	.word	0x080581d3
 8011080:	080581d7 	.word	0x080581d7
 8011084:	080584ab 	.word	0x080584ab
 8011088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801108a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801108c:	429a      	cmp	r2, r3
 801108e:	bfa8      	it	ge
 8011090:	461a      	movge	r2, r3
 8011092:	2a00      	cmp	r2, #0
 8011094:	4691      	mov	r9, r2
 8011096:	dc37      	bgt.n	8011108 <_printf_float+0x370>
 8011098:	f04f 0b00 	mov.w	fp, #0
 801109c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110a0:	f104 021a 	add.w	r2, r4, #26
 80110a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110a6:	9305      	str	r3, [sp, #20]
 80110a8:	eba3 0309 	sub.w	r3, r3, r9
 80110ac:	455b      	cmp	r3, fp
 80110ae:	dc33      	bgt.n	8011118 <_printf_float+0x380>
 80110b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110b4:	429a      	cmp	r2, r3
 80110b6:	db3b      	blt.n	8011130 <_printf_float+0x398>
 80110b8:	6823      	ldr	r3, [r4, #0]
 80110ba:	07da      	lsls	r2, r3, #31
 80110bc:	d438      	bmi.n	8011130 <_printf_float+0x398>
 80110be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80110c2:	eba2 0903 	sub.w	r9, r2, r3
 80110c6:	9b05      	ldr	r3, [sp, #20]
 80110c8:	1ad2      	subs	r2, r2, r3
 80110ca:	4591      	cmp	r9, r2
 80110cc:	bfa8      	it	ge
 80110ce:	4691      	movge	r9, r2
 80110d0:	f1b9 0f00 	cmp.w	r9, #0
 80110d4:	dc35      	bgt.n	8011142 <_printf_float+0x3aa>
 80110d6:	f04f 0800 	mov.w	r8, #0
 80110da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110de:	f104 0a1a 	add.w	sl, r4, #26
 80110e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110e6:	1a9b      	subs	r3, r3, r2
 80110e8:	eba3 0309 	sub.w	r3, r3, r9
 80110ec:	4543      	cmp	r3, r8
 80110ee:	f77f af79 	ble.w	8010fe4 <_printf_float+0x24c>
 80110f2:	2301      	movs	r3, #1
 80110f4:	4652      	mov	r2, sl
 80110f6:	4631      	mov	r1, r6
 80110f8:	4628      	mov	r0, r5
 80110fa:	47b8      	blx	r7
 80110fc:	3001      	adds	r0, #1
 80110fe:	f43f aeaa 	beq.w	8010e56 <_printf_float+0xbe>
 8011102:	f108 0801 	add.w	r8, r8, #1
 8011106:	e7ec      	b.n	80110e2 <_printf_float+0x34a>
 8011108:	4613      	mov	r3, r2
 801110a:	4631      	mov	r1, r6
 801110c:	4642      	mov	r2, r8
 801110e:	4628      	mov	r0, r5
 8011110:	47b8      	blx	r7
 8011112:	3001      	adds	r0, #1
 8011114:	d1c0      	bne.n	8011098 <_printf_float+0x300>
 8011116:	e69e      	b.n	8010e56 <_printf_float+0xbe>
 8011118:	2301      	movs	r3, #1
 801111a:	4631      	mov	r1, r6
 801111c:	4628      	mov	r0, r5
 801111e:	9205      	str	r2, [sp, #20]
 8011120:	47b8      	blx	r7
 8011122:	3001      	adds	r0, #1
 8011124:	f43f ae97 	beq.w	8010e56 <_printf_float+0xbe>
 8011128:	9a05      	ldr	r2, [sp, #20]
 801112a:	f10b 0b01 	add.w	fp, fp, #1
 801112e:	e7b9      	b.n	80110a4 <_printf_float+0x30c>
 8011130:	ee18 3a10 	vmov	r3, s16
 8011134:	4652      	mov	r2, sl
 8011136:	4631      	mov	r1, r6
 8011138:	4628      	mov	r0, r5
 801113a:	47b8      	blx	r7
 801113c:	3001      	adds	r0, #1
 801113e:	d1be      	bne.n	80110be <_printf_float+0x326>
 8011140:	e689      	b.n	8010e56 <_printf_float+0xbe>
 8011142:	9a05      	ldr	r2, [sp, #20]
 8011144:	464b      	mov	r3, r9
 8011146:	4442      	add	r2, r8
 8011148:	4631      	mov	r1, r6
 801114a:	4628      	mov	r0, r5
 801114c:	47b8      	blx	r7
 801114e:	3001      	adds	r0, #1
 8011150:	d1c1      	bne.n	80110d6 <_printf_float+0x33e>
 8011152:	e680      	b.n	8010e56 <_printf_float+0xbe>
 8011154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011156:	2a01      	cmp	r2, #1
 8011158:	dc01      	bgt.n	801115e <_printf_float+0x3c6>
 801115a:	07db      	lsls	r3, r3, #31
 801115c:	d53a      	bpl.n	80111d4 <_printf_float+0x43c>
 801115e:	2301      	movs	r3, #1
 8011160:	4642      	mov	r2, r8
 8011162:	4631      	mov	r1, r6
 8011164:	4628      	mov	r0, r5
 8011166:	47b8      	blx	r7
 8011168:	3001      	adds	r0, #1
 801116a:	f43f ae74 	beq.w	8010e56 <_printf_float+0xbe>
 801116e:	ee18 3a10 	vmov	r3, s16
 8011172:	4652      	mov	r2, sl
 8011174:	4631      	mov	r1, r6
 8011176:	4628      	mov	r0, r5
 8011178:	47b8      	blx	r7
 801117a:	3001      	adds	r0, #1
 801117c:	f43f ae6b 	beq.w	8010e56 <_printf_float+0xbe>
 8011180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011184:	2200      	movs	r2, #0
 8011186:	2300      	movs	r3, #0
 8011188:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801118c:	f7ef fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011190:	b9d8      	cbnz	r0, 80111ca <_printf_float+0x432>
 8011192:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011196:	f108 0201 	add.w	r2, r8, #1
 801119a:	4631      	mov	r1, r6
 801119c:	4628      	mov	r0, r5
 801119e:	47b8      	blx	r7
 80111a0:	3001      	adds	r0, #1
 80111a2:	d10e      	bne.n	80111c2 <_printf_float+0x42a>
 80111a4:	e657      	b.n	8010e56 <_printf_float+0xbe>
 80111a6:	2301      	movs	r3, #1
 80111a8:	4652      	mov	r2, sl
 80111aa:	4631      	mov	r1, r6
 80111ac:	4628      	mov	r0, r5
 80111ae:	47b8      	blx	r7
 80111b0:	3001      	adds	r0, #1
 80111b2:	f43f ae50 	beq.w	8010e56 <_printf_float+0xbe>
 80111b6:	f108 0801 	add.w	r8, r8, #1
 80111ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111bc:	3b01      	subs	r3, #1
 80111be:	4543      	cmp	r3, r8
 80111c0:	dcf1      	bgt.n	80111a6 <_printf_float+0x40e>
 80111c2:	464b      	mov	r3, r9
 80111c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111c8:	e6da      	b.n	8010f80 <_printf_float+0x1e8>
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	f104 0a1a 	add.w	sl, r4, #26
 80111d2:	e7f2      	b.n	80111ba <_printf_float+0x422>
 80111d4:	2301      	movs	r3, #1
 80111d6:	4642      	mov	r2, r8
 80111d8:	e7df      	b.n	801119a <_printf_float+0x402>
 80111da:	2301      	movs	r3, #1
 80111dc:	464a      	mov	r2, r9
 80111de:	4631      	mov	r1, r6
 80111e0:	4628      	mov	r0, r5
 80111e2:	47b8      	blx	r7
 80111e4:	3001      	adds	r0, #1
 80111e6:	f43f ae36 	beq.w	8010e56 <_printf_float+0xbe>
 80111ea:	f108 0801 	add.w	r8, r8, #1
 80111ee:	68e3      	ldr	r3, [r4, #12]
 80111f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111f2:	1a5b      	subs	r3, r3, r1
 80111f4:	4543      	cmp	r3, r8
 80111f6:	dcf0      	bgt.n	80111da <_printf_float+0x442>
 80111f8:	e6f8      	b.n	8010fec <_printf_float+0x254>
 80111fa:	f04f 0800 	mov.w	r8, #0
 80111fe:	f104 0919 	add.w	r9, r4, #25
 8011202:	e7f4      	b.n	80111ee <_printf_float+0x456>

08011204 <_printf_common>:
 8011204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011208:	4616      	mov	r6, r2
 801120a:	4699      	mov	r9, r3
 801120c:	688a      	ldr	r2, [r1, #8]
 801120e:	690b      	ldr	r3, [r1, #16]
 8011210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011214:	4293      	cmp	r3, r2
 8011216:	bfb8      	it	lt
 8011218:	4613      	movlt	r3, r2
 801121a:	6033      	str	r3, [r6, #0]
 801121c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011220:	4607      	mov	r7, r0
 8011222:	460c      	mov	r4, r1
 8011224:	b10a      	cbz	r2, 801122a <_printf_common+0x26>
 8011226:	3301      	adds	r3, #1
 8011228:	6033      	str	r3, [r6, #0]
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	0699      	lsls	r1, r3, #26
 801122e:	bf42      	ittt	mi
 8011230:	6833      	ldrmi	r3, [r6, #0]
 8011232:	3302      	addmi	r3, #2
 8011234:	6033      	strmi	r3, [r6, #0]
 8011236:	6825      	ldr	r5, [r4, #0]
 8011238:	f015 0506 	ands.w	r5, r5, #6
 801123c:	d106      	bne.n	801124c <_printf_common+0x48>
 801123e:	f104 0a19 	add.w	sl, r4, #25
 8011242:	68e3      	ldr	r3, [r4, #12]
 8011244:	6832      	ldr	r2, [r6, #0]
 8011246:	1a9b      	subs	r3, r3, r2
 8011248:	42ab      	cmp	r3, r5
 801124a:	dc26      	bgt.n	801129a <_printf_common+0x96>
 801124c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011250:	1e13      	subs	r3, r2, #0
 8011252:	6822      	ldr	r2, [r4, #0]
 8011254:	bf18      	it	ne
 8011256:	2301      	movne	r3, #1
 8011258:	0692      	lsls	r2, r2, #26
 801125a:	d42b      	bmi.n	80112b4 <_printf_common+0xb0>
 801125c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011260:	4649      	mov	r1, r9
 8011262:	4638      	mov	r0, r7
 8011264:	47c0      	blx	r8
 8011266:	3001      	adds	r0, #1
 8011268:	d01e      	beq.n	80112a8 <_printf_common+0xa4>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	6922      	ldr	r2, [r4, #16]
 801126e:	f003 0306 	and.w	r3, r3, #6
 8011272:	2b04      	cmp	r3, #4
 8011274:	bf02      	ittt	eq
 8011276:	68e5      	ldreq	r5, [r4, #12]
 8011278:	6833      	ldreq	r3, [r6, #0]
 801127a:	1aed      	subeq	r5, r5, r3
 801127c:	68a3      	ldr	r3, [r4, #8]
 801127e:	bf0c      	ite	eq
 8011280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011284:	2500      	movne	r5, #0
 8011286:	4293      	cmp	r3, r2
 8011288:	bfc4      	itt	gt
 801128a:	1a9b      	subgt	r3, r3, r2
 801128c:	18ed      	addgt	r5, r5, r3
 801128e:	2600      	movs	r6, #0
 8011290:	341a      	adds	r4, #26
 8011292:	42b5      	cmp	r5, r6
 8011294:	d11a      	bne.n	80112cc <_printf_common+0xc8>
 8011296:	2000      	movs	r0, #0
 8011298:	e008      	b.n	80112ac <_printf_common+0xa8>
 801129a:	2301      	movs	r3, #1
 801129c:	4652      	mov	r2, sl
 801129e:	4649      	mov	r1, r9
 80112a0:	4638      	mov	r0, r7
 80112a2:	47c0      	blx	r8
 80112a4:	3001      	adds	r0, #1
 80112a6:	d103      	bne.n	80112b0 <_printf_common+0xac>
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b0:	3501      	adds	r5, #1
 80112b2:	e7c6      	b.n	8011242 <_printf_common+0x3e>
 80112b4:	18e1      	adds	r1, r4, r3
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	2030      	movs	r0, #48	; 0x30
 80112ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112be:	4422      	add	r2, r4
 80112c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112c8:	3302      	adds	r3, #2
 80112ca:	e7c7      	b.n	801125c <_printf_common+0x58>
 80112cc:	2301      	movs	r3, #1
 80112ce:	4622      	mov	r2, r4
 80112d0:	4649      	mov	r1, r9
 80112d2:	4638      	mov	r0, r7
 80112d4:	47c0      	blx	r8
 80112d6:	3001      	adds	r0, #1
 80112d8:	d0e6      	beq.n	80112a8 <_printf_common+0xa4>
 80112da:	3601      	adds	r6, #1
 80112dc:	e7d9      	b.n	8011292 <_printf_common+0x8e>
	...

080112e0 <_printf_i>:
 80112e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112e4:	7e0f      	ldrb	r7, [r1, #24]
 80112e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112e8:	2f78      	cmp	r7, #120	; 0x78
 80112ea:	4691      	mov	r9, r2
 80112ec:	4680      	mov	r8, r0
 80112ee:	460c      	mov	r4, r1
 80112f0:	469a      	mov	sl, r3
 80112f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112f6:	d807      	bhi.n	8011308 <_printf_i+0x28>
 80112f8:	2f62      	cmp	r7, #98	; 0x62
 80112fa:	d80a      	bhi.n	8011312 <_printf_i+0x32>
 80112fc:	2f00      	cmp	r7, #0
 80112fe:	f000 80d4 	beq.w	80114aa <_printf_i+0x1ca>
 8011302:	2f58      	cmp	r7, #88	; 0x58
 8011304:	f000 80c0 	beq.w	8011488 <_printf_i+0x1a8>
 8011308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801130c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011310:	e03a      	b.n	8011388 <_printf_i+0xa8>
 8011312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011316:	2b15      	cmp	r3, #21
 8011318:	d8f6      	bhi.n	8011308 <_printf_i+0x28>
 801131a:	a101      	add	r1, pc, #4	; (adr r1, 8011320 <_printf_i+0x40>)
 801131c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011320:	08011379 	.word	0x08011379
 8011324:	0801138d 	.word	0x0801138d
 8011328:	08011309 	.word	0x08011309
 801132c:	08011309 	.word	0x08011309
 8011330:	08011309 	.word	0x08011309
 8011334:	08011309 	.word	0x08011309
 8011338:	0801138d 	.word	0x0801138d
 801133c:	08011309 	.word	0x08011309
 8011340:	08011309 	.word	0x08011309
 8011344:	08011309 	.word	0x08011309
 8011348:	08011309 	.word	0x08011309
 801134c:	08011491 	.word	0x08011491
 8011350:	080113b9 	.word	0x080113b9
 8011354:	0801144b 	.word	0x0801144b
 8011358:	08011309 	.word	0x08011309
 801135c:	08011309 	.word	0x08011309
 8011360:	080114b3 	.word	0x080114b3
 8011364:	08011309 	.word	0x08011309
 8011368:	080113b9 	.word	0x080113b9
 801136c:	08011309 	.word	0x08011309
 8011370:	08011309 	.word	0x08011309
 8011374:	08011453 	.word	0x08011453
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	1d1a      	adds	r2, r3, #4
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	602a      	str	r2, [r5, #0]
 8011380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011388:	2301      	movs	r3, #1
 801138a:	e09f      	b.n	80114cc <_printf_i+0x1ec>
 801138c:	6820      	ldr	r0, [r4, #0]
 801138e:	682b      	ldr	r3, [r5, #0]
 8011390:	0607      	lsls	r7, r0, #24
 8011392:	f103 0104 	add.w	r1, r3, #4
 8011396:	6029      	str	r1, [r5, #0]
 8011398:	d501      	bpl.n	801139e <_printf_i+0xbe>
 801139a:	681e      	ldr	r6, [r3, #0]
 801139c:	e003      	b.n	80113a6 <_printf_i+0xc6>
 801139e:	0646      	lsls	r6, r0, #25
 80113a0:	d5fb      	bpl.n	801139a <_printf_i+0xba>
 80113a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80113a6:	2e00      	cmp	r6, #0
 80113a8:	da03      	bge.n	80113b2 <_printf_i+0xd2>
 80113aa:	232d      	movs	r3, #45	; 0x2d
 80113ac:	4276      	negs	r6, r6
 80113ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113b2:	485a      	ldr	r0, [pc, #360]	; (801151c <_printf_i+0x23c>)
 80113b4:	230a      	movs	r3, #10
 80113b6:	e012      	b.n	80113de <_printf_i+0xfe>
 80113b8:	682b      	ldr	r3, [r5, #0]
 80113ba:	6820      	ldr	r0, [r4, #0]
 80113bc:	1d19      	adds	r1, r3, #4
 80113be:	6029      	str	r1, [r5, #0]
 80113c0:	0605      	lsls	r5, r0, #24
 80113c2:	d501      	bpl.n	80113c8 <_printf_i+0xe8>
 80113c4:	681e      	ldr	r6, [r3, #0]
 80113c6:	e002      	b.n	80113ce <_printf_i+0xee>
 80113c8:	0641      	lsls	r1, r0, #25
 80113ca:	d5fb      	bpl.n	80113c4 <_printf_i+0xe4>
 80113cc:	881e      	ldrh	r6, [r3, #0]
 80113ce:	4853      	ldr	r0, [pc, #332]	; (801151c <_printf_i+0x23c>)
 80113d0:	2f6f      	cmp	r7, #111	; 0x6f
 80113d2:	bf0c      	ite	eq
 80113d4:	2308      	moveq	r3, #8
 80113d6:	230a      	movne	r3, #10
 80113d8:	2100      	movs	r1, #0
 80113da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113de:	6865      	ldr	r5, [r4, #4]
 80113e0:	60a5      	str	r5, [r4, #8]
 80113e2:	2d00      	cmp	r5, #0
 80113e4:	bfa2      	ittt	ge
 80113e6:	6821      	ldrge	r1, [r4, #0]
 80113e8:	f021 0104 	bicge.w	r1, r1, #4
 80113ec:	6021      	strge	r1, [r4, #0]
 80113ee:	b90e      	cbnz	r6, 80113f4 <_printf_i+0x114>
 80113f0:	2d00      	cmp	r5, #0
 80113f2:	d04b      	beq.n	801148c <_printf_i+0x1ac>
 80113f4:	4615      	mov	r5, r2
 80113f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80113fa:	fb03 6711 	mls	r7, r3, r1, r6
 80113fe:	5dc7      	ldrb	r7, [r0, r7]
 8011400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011404:	4637      	mov	r7, r6
 8011406:	42bb      	cmp	r3, r7
 8011408:	460e      	mov	r6, r1
 801140a:	d9f4      	bls.n	80113f6 <_printf_i+0x116>
 801140c:	2b08      	cmp	r3, #8
 801140e:	d10b      	bne.n	8011428 <_printf_i+0x148>
 8011410:	6823      	ldr	r3, [r4, #0]
 8011412:	07de      	lsls	r6, r3, #31
 8011414:	d508      	bpl.n	8011428 <_printf_i+0x148>
 8011416:	6923      	ldr	r3, [r4, #16]
 8011418:	6861      	ldr	r1, [r4, #4]
 801141a:	4299      	cmp	r1, r3
 801141c:	bfde      	ittt	le
 801141e:	2330      	movle	r3, #48	; 0x30
 8011420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011428:	1b52      	subs	r2, r2, r5
 801142a:	6122      	str	r2, [r4, #16]
 801142c:	f8cd a000 	str.w	sl, [sp]
 8011430:	464b      	mov	r3, r9
 8011432:	aa03      	add	r2, sp, #12
 8011434:	4621      	mov	r1, r4
 8011436:	4640      	mov	r0, r8
 8011438:	f7ff fee4 	bl	8011204 <_printf_common>
 801143c:	3001      	adds	r0, #1
 801143e:	d14a      	bne.n	80114d6 <_printf_i+0x1f6>
 8011440:	f04f 30ff 	mov.w	r0, #4294967295
 8011444:	b004      	add	sp, #16
 8011446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	f043 0320 	orr.w	r3, r3, #32
 8011450:	6023      	str	r3, [r4, #0]
 8011452:	4833      	ldr	r0, [pc, #204]	; (8011520 <_printf_i+0x240>)
 8011454:	2778      	movs	r7, #120	; 0x78
 8011456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801145a:	6823      	ldr	r3, [r4, #0]
 801145c:	6829      	ldr	r1, [r5, #0]
 801145e:	061f      	lsls	r7, r3, #24
 8011460:	f851 6b04 	ldr.w	r6, [r1], #4
 8011464:	d402      	bmi.n	801146c <_printf_i+0x18c>
 8011466:	065f      	lsls	r7, r3, #25
 8011468:	bf48      	it	mi
 801146a:	b2b6      	uxthmi	r6, r6
 801146c:	07df      	lsls	r7, r3, #31
 801146e:	bf48      	it	mi
 8011470:	f043 0320 	orrmi.w	r3, r3, #32
 8011474:	6029      	str	r1, [r5, #0]
 8011476:	bf48      	it	mi
 8011478:	6023      	strmi	r3, [r4, #0]
 801147a:	b91e      	cbnz	r6, 8011484 <_printf_i+0x1a4>
 801147c:	6823      	ldr	r3, [r4, #0]
 801147e:	f023 0320 	bic.w	r3, r3, #32
 8011482:	6023      	str	r3, [r4, #0]
 8011484:	2310      	movs	r3, #16
 8011486:	e7a7      	b.n	80113d8 <_printf_i+0xf8>
 8011488:	4824      	ldr	r0, [pc, #144]	; (801151c <_printf_i+0x23c>)
 801148a:	e7e4      	b.n	8011456 <_printf_i+0x176>
 801148c:	4615      	mov	r5, r2
 801148e:	e7bd      	b.n	801140c <_printf_i+0x12c>
 8011490:	682b      	ldr	r3, [r5, #0]
 8011492:	6826      	ldr	r6, [r4, #0]
 8011494:	6961      	ldr	r1, [r4, #20]
 8011496:	1d18      	adds	r0, r3, #4
 8011498:	6028      	str	r0, [r5, #0]
 801149a:	0635      	lsls	r5, r6, #24
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	d501      	bpl.n	80114a4 <_printf_i+0x1c4>
 80114a0:	6019      	str	r1, [r3, #0]
 80114a2:	e002      	b.n	80114aa <_printf_i+0x1ca>
 80114a4:	0670      	lsls	r0, r6, #25
 80114a6:	d5fb      	bpl.n	80114a0 <_printf_i+0x1c0>
 80114a8:	8019      	strh	r1, [r3, #0]
 80114aa:	2300      	movs	r3, #0
 80114ac:	6123      	str	r3, [r4, #16]
 80114ae:	4615      	mov	r5, r2
 80114b0:	e7bc      	b.n	801142c <_printf_i+0x14c>
 80114b2:	682b      	ldr	r3, [r5, #0]
 80114b4:	1d1a      	adds	r2, r3, #4
 80114b6:	602a      	str	r2, [r5, #0]
 80114b8:	681d      	ldr	r5, [r3, #0]
 80114ba:	6862      	ldr	r2, [r4, #4]
 80114bc:	2100      	movs	r1, #0
 80114be:	4628      	mov	r0, r5
 80114c0:	f7ee fe86 	bl	80001d0 <memchr>
 80114c4:	b108      	cbz	r0, 80114ca <_printf_i+0x1ea>
 80114c6:	1b40      	subs	r0, r0, r5
 80114c8:	6060      	str	r0, [r4, #4]
 80114ca:	6863      	ldr	r3, [r4, #4]
 80114cc:	6123      	str	r3, [r4, #16]
 80114ce:	2300      	movs	r3, #0
 80114d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114d4:	e7aa      	b.n	801142c <_printf_i+0x14c>
 80114d6:	6923      	ldr	r3, [r4, #16]
 80114d8:	462a      	mov	r2, r5
 80114da:	4649      	mov	r1, r9
 80114dc:	4640      	mov	r0, r8
 80114de:	47d0      	blx	sl
 80114e0:	3001      	adds	r0, #1
 80114e2:	d0ad      	beq.n	8011440 <_printf_i+0x160>
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	079b      	lsls	r3, r3, #30
 80114e8:	d413      	bmi.n	8011512 <_printf_i+0x232>
 80114ea:	68e0      	ldr	r0, [r4, #12]
 80114ec:	9b03      	ldr	r3, [sp, #12]
 80114ee:	4298      	cmp	r0, r3
 80114f0:	bfb8      	it	lt
 80114f2:	4618      	movlt	r0, r3
 80114f4:	e7a6      	b.n	8011444 <_printf_i+0x164>
 80114f6:	2301      	movs	r3, #1
 80114f8:	4632      	mov	r2, r6
 80114fa:	4649      	mov	r1, r9
 80114fc:	4640      	mov	r0, r8
 80114fe:	47d0      	blx	sl
 8011500:	3001      	adds	r0, #1
 8011502:	d09d      	beq.n	8011440 <_printf_i+0x160>
 8011504:	3501      	adds	r5, #1
 8011506:	68e3      	ldr	r3, [r4, #12]
 8011508:	9903      	ldr	r1, [sp, #12]
 801150a:	1a5b      	subs	r3, r3, r1
 801150c:	42ab      	cmp	r3, r5
 801150e:	dcf2      	bgt.n	80114f6 <_printf_i+0x216>
 8011510:	e7eb      	b.n	80114ea <_printf_i+0x20a>
 8011512:	2500      	movs	r5, #0
 8011514:	f104 0619 	add.w	r6, r4, #25
 8011518:	e7f5      	b.n	8011506 <_printf_i+0x226>
 801151a:	bf00      	nop
 801151c:	080581db 	.word	0x080581db
 8011520:	080581ec 	.word	0x080581ec

08011524 <std>:
 8011524:	2300      	movs	r3, #0
 8011526:	b510      	push	{r4, lr}
 8011528:	4604      	mov	r4, r0
 801152a:	e9c0 3300 	strd	r3, r3, [r0]
 801152e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011532:	6083      	str	r3, [r0, #8]
 8011534:	8181      	strh	r1, [r0, #12]
 8011536:	6643      	str	r3, [r0, #100]	; 0x64
 8011538:	81c2      	strh	r2, [r0, #14]
 801153a:	6183      	str	r3, [r0, #24]
 801153c:	4619      	mov	r1, r3
 801153e:	2208      	movs	r2, #8
 8011540:	305c      	adds	r0, #92	; 0x5c
 8011542:	f000 f954 	bl	80117ee <memset>
 8011546:	4b0d      	ldr	r3, [pc, #52]	; (801157c <std+0x58>)
 8011548:	6263      	str	r3, [r4, #36]	; 0x24
 801154a:	4b0d      	ldr	r3, [pc, #52]	; (8011580 <std+0x5c>)
 801154c:	62a3      	str	r3, [r4, #40]	; 0x28
 801154e:	4b0d      	ldr	r3, [pc, #52]	; (8011584 <std+0x60>)
 8011550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011552:	4b0d      	ldr	r3, [pc, #52]	; (8011588 <std+0x64>)
 8011554:	6323      	str	r3, [r4, #48]	; 0x30
 8011556:	4b0d      	ldr	r3, [pc, #52]	; (801158c <std+0x68>)
 8011558:	6224      	str	r4, [r4, #32]
 801155a:	429c      	cmp	r4, r3
 801155c:	d006      	beq.n	801156c <std+0x48>
 801155e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011562:	4294      	cmp	r4, r2
 8011564:	d002      	beq.n	801156c <std+0x48>
 8011566:	33d0      	adds	r3, #208	; 0xd0
 8011568:	429c      	cmp	r4, r3
 801156a:	d105      	bne.n	8011578 <std+0x54>
 801156c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011574:	f000 ba58 	b.w	8011a28 <__retarget_lock_init_recursive>
 8011578:	bd10      	pop	{r4, pc}
 801157a:	bf00      	nop
 801157c:	08011765 	.word	0x08011765
 8011580:	0801178b 	.word	0x0801178b
 8011584:	080117c3 	.word	0x080117c3
 8011588:	080117e7 	.word	0x080117e7
 801158c:	20003d8c 	.word	0x20003d8c

08011590 <stdio_exit_handler>:
 8011590:	4a02      	ldr	r2, [pc, #8]	; (801159c <stdio_exit_handler+0xc>)
 8011592:	4903      	ldr	r1, [pc, #12]	; (80115a0 <stdio_exit_handler+0x10>)
 8011594:	4803      	ldr	r0, [pc, #12]	; (80115a4 <stdio_exit_handler+0x14>)
 8011596:	f000 b869 	b.w	801166c <_fwalk_sglue>
 801159a:	bf00      	nop
 801159c:	20000c8c 	.word	0x20000c8c
 80115a0:	08013be1 	.word	0x08013be1
 80115a4:	20000e04 	.word	0x20000e04

080115a8 <cleanup_stdio>:
 80115a8:	6841      	ldr	r1, [r0, #4]
 80115aa:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <cleanup_stdio+0x34>)
 80115ac:	4299      	cmp	r1, r3
 80115ae:	b510      	push	{r4, lr}
 80115b0:	4604      	mov	r4, r0
 80115b2:	d001      	beq.n	80115b8 <cleanup_stdio+0x10>
 80115b4:	f002 fb14 	bl	8013be0 <_fflush_r>
 80115b8:	68a1      	ldr	r1, [r4, #8]
 80115ba:	4b09      	ldr	r3, [pc, #36]	; (80115e0 <cleanup_stdio+0x38>)
 80115bc:	4299      	cmp	r1, r3
 80115be:	d002      	beq.n	80115c6 <cleanup_stdio+0x1e>
 80115c0:	4620      	mov	r0, r4
 80115c2:	f002 fb0d 	bl	8013be0 <_fflush_r>
 80115c6:	68e1      	ldr	r1, [r4, #12]
 80115c8:	4b06      	ldr	r3, [pc, #24]	; (80115e4 <cleanup_stdio+0x3c>)
 80115ca:	4299      	cmp	r1, r3
 80115cc:	d004      	beq.n	80115d8 <cleanup_stdio+0x30>
 80115ce:	4620      	mov	r0, r4
 80115d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115d4:	f002 bb04 	b.w	8013be0 <_fflush_r>
 80115d8:	bd10      	pop	{r4, pc}
 80115da:	bf00      	nop
 80115dc:	20003d8c 	.word	0x20003d8c
 80115e0:	20003df4 	.word	0x20003df4
 80115e4:	20003e5c 	.word	0x20003e5c

080115e8 <global_stdio_init.part.0>:
 80115e8:	b510      	push	{r4, lr}
 80115ea:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <global_stdio_init.part.0+0x30>)
 80115ec:	4c0b      	ldr	r4, [pc, #44]	; (801161c <global_stdio_init.part.0+0x34>)
 80115ee:	4a0c      	ldr	r2, [pc, #48]	; (8011620 <global_stdio_init.part.0+0x38>)
 80115f0:	601a      	str	r2, [r3, #0]
 80115f2:	4620      	mov	r0, r4
 80115f4:	2200      	movs	r2, #0
 80115f6:	2104      	movs	r1, #4
 80115f8:	f7ff ff94 	bl	8011524 <std>
 80115fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011600:	2201      	movs	r2, #1
 8011602:	2109      	movs	r1, #9
 8011604:	f7ff ff8e 	bl	8011524 <std>
 8011608:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801160c:	2202      	movs	r2, #2
 801160e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011612:	2112      	movs	r1, #18
 8011614:	f7ff bf86 	b.w	8011524 <std>
 8011618:	20003ec4 	.word	0x20003ec4
 801161c:	20003d8c 	.word	0x20003d8c
 8011620:	08011591 	.word	0x08011591

08011624 <__sfp_lock_acquire>:
 8011624:	4801      	ldr	r0, [pc, #4]	; (801162c <__sfp_lock_acquire+0x8>)
 8011626:	f000 ba00 	b.w	8011a2a <__retarget_lock_acquire_recursive>
 801162a:	bf00      	nop
 801162c:	20003ecd 	.word	0x20003ecd

08011630 <__sfp_lock_release>:
 8011630:	4801      	ldr	r0, [pc, #4]	; (8011638 <__sfp_lock_release+0x8>)
 8011632:	f000 b9fb 	b.w	8011a2c <__retarget_lock_release_recursive>
 8011636:	bf00      	nop
 8011638:	20003ecd 	.word	0x20003ecd

0801163c <__sinit>:
 801163c:	b510      	push	{r4, lr}
 801163e:	4604      	mov	r4, r0
 8011640:	f7ff fff0 	bl	8011624 <__sfp_lock_acquire>
 8011644:	6a23      	ldr	r3, [r4, #32]
 8011646:	b11b      	cbz	r3, 8011650 <__sinit+0x14>
 8011648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801164c:	f7ff bff0 	b.w	8011630 <__sfp_lock_release>
 8011650:	4b04      	ldr	r3, [pc, #16]	; (8011664 <__sinit+0x28>)
 8011652:	6223      	str	r3, [r4, #32]
 8011654:	4b04      	ldr	r3, [pc, #16]	; (8011668 <__sinit+0x2c>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1f5      	bne.n	8011648 <__sinit+0xc>
 801165c:	f7ff ffc4 	bl	80115e8 <global_stdio_init.part.0>
 8011660:	e7f2      	b.n	8011648 <__sinit+0xc>
 8011662:	bf00      	nop
 8011664:	080115a9 	.word	0x080115a9
 8011668:	20003ec4 	.word	0x20003ec4

0801166c <_fwalk_sglue>:
 801166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011670:	4607      	mov	r7, r0
 8011672:	4688      	mov	r8, r1
 8011674:	4614      	mov	r4, r2
 8011676:	2600      	movs	r6, #0
 8011678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801167c:	f1b9 0901 	subs.w	r9, r9, #1
 8011680:	d505      	bpl.n	801168e <_fwalk_sglue+0x22>
 8011682:	6824      	ldr	r4, [r4, #0]
 8011684:	2c00      	cmp	r4, #0
 8011686:	d1f7      	bne.n	8011678 <_fwalk_sglue+0xc>
 8011688:	4630      	mov	r0, r6
 801168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801168e:	89ab      	ldrh	r3, [r5, #12]
 8011690:	2b01      	cmp	r3, #1
 8011692:	d907      	bls.n	80116a4 <_fwalk_sglue+0x38>
 8011694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011698:	3301      	adds	r3, #1
 801169a:	d003      	beq.n	80116a4 <_fwalk_sglue+0x38>
 801169c:	4629      	mov	r1, r5
 801169e:	4638      	mov	r0, r7
 80116a0:	47c0      	blx	r8
 80116a2:	4306      	orrs	r6, r0
 80116a4:	3568      	adds	r5, #104	; 0x68
 80116a6:	e7e9      	b.n	801167c <_fwalk_sglue+0x10>

080116a8 <iprintf>:
 80116a8:	b40f      	push	{r0, r1, r2, r3}
 80116aa:	b507      	push	{r0, r1, r2, lr}
 80116ac:	4906      	ldr	r1, [pc, #24]	; (80116c8 <iprintf+0x20>)
 80116ae:	ab04      	add	r3, sp, #16
 80116b0:	6808      	ldr	r0, [r1, #0]
 80116b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b6:	6881      	ldr	r1, [r0, #8]
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	f001 ffa3 	bl	8013604 <_vfiprintf_r>
 80116be:	b003      	add	sp, #12
 80116c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80116c4:	b004      	add	sp, #16
 80116c6:	4770      	bx	lr
 80116c8:	20000e50 	.word	0x20000e50

080116cc <siprintf>:
 80116cc:	b40e      	push	{r1, r2, r3}
 80116ce:	b500      	push	{lr}
 80116d0:	b09c      	sub	sp, #112	; 0x70
 80116d2:	ab1d      	add	r3, sp, #116	; 0x74
 80116d4:	9002      	str	r0, [sp, #8]
 80116d6:	9006      	str	r0, [sp, #24]
 80116d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116dc:	4809      	ldr	r0, [pc, #36]	; (8011704 <siprintf+0x38>)
 80116de:	9107      	str	r1, [sp, #28]
 80116e0:	9104      	str	r1, [sp, #16]
 80116e2:	4909      	ldr	r1, [pc, #36]	; (8011708 <siprintf+0x3c>)
 80116e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116e8:	9105      	str	r1, [sp, #20]
 80116ea:	6800      	ldr	r0, [r0, #0]
 80116ec:	9301      	str	r3, [sp, #4]
 80116ee:	a902      	add	r1, sp, #8
 80116f0:	f001 fc8e 	bl	8013010 <_svfiprintf_r>
 80116f4:	9b02      	ldr	r3, [sp, #8]
 80116f6:	2200      	movs	r2, #0
 80116f8:	701a      	strb	r2, [r3, #0]
 80116fa:	b01c      	add	sp, #112	; 0x70
 80116fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011700:	b003      	add	sp, #12
 8011702:	4770      	bx	lr
 8011704:	20000e50 	.word	0x20000e50
 8011708:	ffff0208 	.word	0xffff0208

0801170c <siscanf>:
 801170c:	b40e      	push	{r1, r2, r3}
 801170e:	b510      	push	{r4, lr}
 8011710:	b09f      	sub	sp, #124	; 0x7c
 8011712:	ac21      	add	r4, sp, #132	; 0x84
 8011714:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011718:	f854 2b04 	ldr.w	r2, [r4], #4
 801171c:	9201      	str	r2, [sp, #4]
 801171e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011722:	9004      	str	r0, [sp, #16]
 8011724:	9008      	str	r0, [sp, #32]
 8011726:	f7ee fda3 	bl	8000270 <strlen>
 801172a:	4b0c      	ldr	r3, [pc, #48]	; (801175c <siscanf+0x50>)
 801172c:	9005      	str	r0, [sp, #20]
 801172e:	9009      	str	r0, [sp, #36]	; 0x24
 8011730:	930d      	str	r3, [sp, #52]	; 0x34
 8011732:	480b      	ldr	r0, [pc, #44]	; (8011760 <siscanf+0x54>)
 8011734:	9a01      	ldr	r2, [sp, #4]
 8011736:	6800      	ldr	r0, [r0, #0]
 8011738:	9403      	str	r4, [sp, #12]
 801173a:	2300      	movs	r3, #0
 801173c:	9311      	str	r3, [sp, #68]	; 0x44
 801173e:	9316      	str	r3, [sp, #88]	; 0x58
 8011740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011744:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011748:	a904      	add	r1, sp, #16
 801174a:	4623      	mov	r3, r4
 801174c:	f001 fdb8 	bl	80132c0 <__ssvfiscanf_r>
 8011750:	b01f      	add	sp, #124	; 0x7c
 8011752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011756:	b003      	add	sp, #12
 8011758:	4770      	bx	lr
 801175a:	bf00      	nop
 801175c:	08011787 	.word	0x08011787
 8011760:	20000e50 	.word	0x20000e50

08011764 <__sread>:
 8011764:	b510      	push	{r4, lr}
 8011766:	460c      	mov	r4, r1
 8011768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801176c:	f000 f8fe 	bl	801196c <_read_r>
 8011770:	2800      	cmp	r0, #0
 8011772:	bfab      	itete	ge
 8011774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011776:	89a3      	ldrhlt	r3, [r4, #12]
 8011778:	181b      	addge	r3, r3, r0
 801177a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801177e:	bfac      	ite	ge
 8011780:	6563      	strge	r3, [r4, #84]	; 0x54
 8011782:	81a3      	strhlt	r3, [r4, #12]
 8011784:	bd10      	pop	{r4, pc}

08011786 <__seofread>:
 8011786:	2000      	movs	r0, #0
 8011788:	4770      	bx	lr

0801178a <__swrite>:
 801178a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801178e:	461f      	mov	r7, r3
 8011790:	898b      	ldrh	r3, [r1, #12]
 8011792:	05db      	lsls	r3, r3, #23
 8011794:	4605      	mov	r5, r0
 8011796:	460c      	mov	r4, r1
 8011798:	4616      	mov	r6, r2
 801179a:	d505      	bpl.n	80117a8 <__swrite+0x1e>
 801179c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a0:	2302      	movs	r3, #2
 80117a2:	2200      	movs	r2, #0
 80117a4:	f000 f8d0 	bl	8011948 <_lseek_r>
 80117a8:	89a3      	ldrh	r3, [r4, #12]
 80117aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117b2:	81a3      	strh	r3, [r4, #12]
 80117b4:	4632      	mov	r2, r6
 80117b6:	463b      	mov	r3, r7
 80117b8:	4628      	mov	r0, r5
 80117ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117be:	f000 b8f7 	b.w	80119b0 <_write_r>

080117c2 <__sseek>:
 80117c2:	b510      	push	{r4, lr}
 80117c4:	460c      	mov	r4, r1
 80117c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ca:	f000 f8bd 	bl	8011948 <_lseek_r>
 80117ce:	1c43      	adds	r3, r0, #1
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	bf15      	itete	ne
 80117d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80117d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117de:	81a3      	strheq	r3, [r4, #12]
 80117e0:	bf18      	it	ne
 80117e2:	81a3      	strhne	r3, [r4, #12]
 80117e4:	bd10      	pop	{r4, pc}

080117e6 <__sclose>:
 80117e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ea:	f000 b89d 	b.w	8011928 <_close_r>

080117ee <memset>:
 80117ee:	4402      	add	r2, r0
 80117f0:	4603      	mov	r3, r0
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d100      	bne.n	80117f8 <memset+0xa>
 80117f6:	4770      	bx	lr
 80117f8:	f803 1b01 	strb.w	r1, [r3], #1
 80117fc:	e7f9      	b.n	80117f2 <memset+0x4>

080117fe <strchr>:
 80117fe:	b2c9      	uxtb	r1, r1
 8011800:	4603      	mov	r3, r0
 8011802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011806:	b11a      	cbz	r2, 8011810 <strchr+0x12>
 8011808:	428a      	cmp	r2, r1
 801180a:	d1f9      	bne.n	8011800 <strchr+0x2>
 801180c:	4618      	mov	r0, r3
 801180e:	4770      	bx	lr
 8011810:	2900      	cmp	r1, #0
 8011812:	bf18      	it	ne
 8011814:	2300      	movne	r3, #0
 8011816:	e7f9      	b.n	801180c <strchr+0xe>

08011818 <strncmp>:
 8011818:	b510      	push	{r4, lr}
 801181a:	b16a      	cbz	r2, 8011838 <strncmp+0x20>
 801181c:	3901      	subs	r1, #1
 801181e:	1884      	adds	r4, r0, r2
 8011820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011824:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011828:	429a      	cmp	r2, r3
 801182a:	d103      	bne.n	8011834 <strncmp+0x1c>
 801182c:	42a0      	cmp	r0, r4
 801182e:	d001      	beq.n	8011834 <strncmp+0x1c>
 8011830:	2a00      	cmp	r2, #0
 8011832:	d1f5      	bne.n	8011820 <strncmp+0x8>
 8011834:	1ad0      	subs	r0, r2, r3
 8011836:	bd10      	pop	{r4, pc}
 8011838:	4610      	mov	r0, r2
 801183a:	e7fc      	b.n	8011836 <strncmp+0x1e>

0801183c <strtok>:
 801183c:	4b16      	ldr	r3, [pc, #88]	; (8011898 <strtok+0x5c>)
 801183e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011840:	681e      	ldr	r6, [r3, #0]
 8011842:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011844:	4605      	mov	r5, r0
 8011846:	b9fc      	cbnz	r4, 8011888 <strtok+0x4c>
 8011848:	2050      	movs	r0, #80	; 0x50
 801184a:	9101      	str	r1, [sp, #4]
 801184c:	f7ff f8ba 	bl	80109c4 <malloc>
 8011850:	9901      	ldr	r1, [sp, #4]
 8011852:	6470      	str	r0, [r6, #68]	; 0x44
 8011854:	4602      	mov	r2, r0
 8011856:	b920      	cbnz	r0, 8011862 <strtok+0x26>
 8011858:	4b10      	ldr	r3, [pc, #64]	; (801189c <strtok+0x60>)
 801185a:	4811      	ldr	r0, [pc, #68]	; (80118a0 <strtok+0x64>)
 801185c:	215b      	movs	r1, #91	; 0x5b
 801185e:	f000 f8fd 	bl	8011a5c <__assert_func>
 8011862:	e9c0 4400 	strd	r4, r4, [r0]
 8011866:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801186a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801186e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011872:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011876:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801187a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801187e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011882:	6184      	str	r4, [r0, #24]
 8011884:	7704      	strb	r4, [r0, #28]
 8011886:	6244      	str	r4, [r0, #36]	; 0x24
 8011888:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801188a:	2301      	movs	r3, #1
 801188c:	4628      	mov	r0, r5
 801188e:	b002      	add	sp, #8
 8011890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011894:	f000 b806 	b.w	80118a4 <__strtok_r>
 8011898:	20000e50 	.word	0x20000e50
 801189c:	080581fd 	.word	0x080581fd
 80118a0:	08058214 	.word	0x08058214

080118a4 <__strtok_r>:
 80118a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118a6:	b908      	cbnz	r0, 80118ac <__strtok_r+0x8>
 80118a8:	6810      	ldr	r0, [r2, #0]
 80118aa:	b188      	cbz	r0, 80118d0 <__strtok_r+0x2c>
 80118ac:	4604      	mov	r4, r0
 80118ae:	4620      	mov	r0, r4
 80118b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80118b4:	460f      	mov	r7, r1
 80118b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80118ba:	b91e      	cbnz	r6, 80118c4 <__strtok_r+0x20>
 80118bc:	b965      	cbnz	r5, 80118d8 <__strtok_r+0x34>
 80118be:	6015      	str	r5, [r2, #0]
 80118c0:	4628      	mov	r0, r5
 80118c2:	e005      	b.n	80118d0 <__strtok_r+0x2c>
 80118c4:	42b5      	cmp	r5, r6
 80118c6:	d1f6      	bne.n	80118b6 <__strtok_r+0x12>
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d1f0      	bne.n	80118ae <__strtok_r+0xa>
 80118cc:	6014      	str	r4, [r2, #0]
 80118ce:	7003      	strb	r3, [r0, #0]
 80118d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118d2:	461c      	mov	r4, r3
 80118d4:	e00c      	b.n	80118f0 <__strtok_r+0x4c>
 80118d6:	b915      	cbnz	r5, 80118de <__strtok_r+0x3a>
 80118d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80118dc:	460e      	mov	r6, r1
 80118de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80118e2:	42ab      	cmp	r3, r5
 80118e4:	d1f7      	bne.n	80118d6 <__strtok_r+0x32>
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d0f3      	beq.n	80118d2 <__strtok_r+0x2e>
 80118ea:	2300      	movs	r3, #0
 80118ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80118f0:	6014      	str	r4, [r2, #0]
 80118f2:	e7ed      	b.n	80118d0 <__strtok_r+0x2c>

080118f4 <strstr>:
 80118f4:	780a      	ldrb	r2, [r1, #0]
 80118f6:	b570      	push	{r4, r5, r6, lr}
 80118f8:	b96a      	cbnz	r2, 8011916 <strstr+0x22>
 80118fa:	bd70      	pop	{r4, r5, r6, pc}
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d109      	bne.n	8011914 <strstr+0x20>
 8011900:	460c      	mov	r4, r1
 8011902:	4605      	mov	r5, r0
 8011904:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011908:	2b00      	cmp	r3, #0
 801190a:	d0f6      	beq.n	80118fa <strstr+0x6>
 801190c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011910:	429e      	cmp	r6, r3
 8011912:	d0f7      	beq.n	8011904 <strstr+0x10>
 8011914:	3001      	adds	r0, #1
 8011916:	7803      	ldrb	r3, [r0, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1ef      	bne.n	80118fc <strstr+0x8>
 801191c:	4618      	mov	r0, r3
 801191e:	e7ec      	b.n	80118fa <strstr+0x6>

08011920 <_localeconv_r>:
 8011920:	4800      	ldr	r0, [pc, #0]	; (8011924 <_localeconv_r+0x4>)
 8011922:	4770      	bx	lr
 8011924:	20000d88 	.word	0x20000d88

08011928 <_close_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4d06      	ldr	r5, [pc, #24]	; (8011944 <_close_r+0x1c>)
 801192c:	2300      	movs	r3, #0
 801192e:	4604      	mov	r4, r0
 8011930:	4608      	mov	r0, r1
 8011932:	602b      	str	r3, [r5, #0]
 8011934:	f7f0 f925 	bl	8001b82 <_close>
 8011938:	1c43      	adds	r3, r0, #1
 801193a:	d102      	bne.n	8011942 <_close_r+0x1a>
 801193c:	682b      	ldr	r3, [r5, #0]
 801193e:	b103      	cbz	r3, 8011942 <_close_r+0x1a>
 8011940:	6023      	str	r3, [r4, #0]
 8011942:	bd38      	pop	{r3, r4, r5, pc}
 8011944:	20003ec8 	.word	0x20003ec8

08011948 <_lseek_r>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	4d07      	ldr	r5, [pc, #28]	; (8011968 <_lseek_r+0x20>)
 801194c:	4604      	mov	r4, r0
 801194e:	4608      	mov	r0, r1
 8011950:	4611      	mov	r1, r2
 8011952:	2200      	movs	r2, #0
 8011954:	602a      	str	r2, [r5, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	f7f0 f93a 	bl	8001bd0 <_lseek>
 801195c:	1c43      	adds	r3, r0, #1
 801195e:	d102      	bne.n	8011966 <_lseek_r+0x1e>
 8011960:	682b      	ldr	r3, [r5, #0]
 8011962:	b103      	cbz	r3, 8011966 <_lseek_r+0x1e>
 8011964:	6023      	str	r3, [r4, #0]
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	20003ec8 	.word	0x20003ec8

0801196c <_read_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4d07      	ldr	r5, [pc, #28]	; (801198c <_read_r+0x20>)
 8011970:	4604      	mov	r4, r0
 8011972:	4608      	mov	r0, r1
 8011974:	4611      	mov	r1, r2
 8011976:	2200      	movs	r2, #0
 8011978:	602a      	str	r2, [r5, #0]
 801197a:	461a      	mov	r2, r3
 801197c:	f7f0 f8c8 	bl	8001b10 <_read>
 8011980:	1c43      	adds	r3, r0, #1
 8011982:	d102      	bne.n	801198a <_read_r+0x1e>
 8011984:	682b      	ldr	r3, [r5, #0]
 8011986:	b103      	cbz	r3, 801198a <_read_r+0x1e>
 8011988:	6023      	str	r3, [r4, #0]
 801198a:	bd38      	pop	{r3, r4, r5, pc}
 801198c:	20003ec8 	.word	0x20003ec8

08011990 <_sbrk_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4d06      	ldr	r5, [pc, #24]	; (80119ac <_sbrk_r+0x1c>)
 8011994:	2300      	movs	r3, #0
 8011996:	4604      	mov	r4, r0
 8011998:	4608      	mov	r0, r1
 801199a:	602b      	str	r3, [r5, #0]
 801199c:	f7f0 f926 	bl	8001bec <_sbrk>
 80119a0:	1c43      	adds	r3, r0, #1
 80119a2:	d102      	bne.n	80119aa <_sbrk_r+0x1a>
 80119a4:	682b      	ldr	r3, [r5, #0]
 80119a6:	b103      	cbz	r3, 80119aa <_sbrk_r+0x1a>
 80119a8:	6023      	str	r3, [r4, #0]
 80119aa:	bd38      	pop	{r3, r4, r5, pc}
 80119ac:	20003ec8 	.word	0x20003ec8

080119b0 <_write_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4d07      	ldr	r5, [pc, #28]	; (80119d0 <_write_r+0x20>)
 80119b4:	4604      	mov	r4, r0
 80119b6:	4608      	mov	r0, r1
 80119b8:	4611      	mov	r1, r2
 80119ba:	2200      	movs	r2, #0
 80119bc:	602a      	str	r2, [r5, #0]
 80119be:	461a      	mov	r2, r3
 80119c0:	f7f0 f8c3 	bl	8001b4a <_write>
 80119c4:	1c43      	adds	r3, r0, #1
 80119c6:	d102      	bne.n	80119ce <_write_r+0x1e>
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	b103      	cbz	r3, 80119ce <_write_r+0x1e>
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	bd38      	pop	{r3, r4, r5, pc}
 80119d0:	20003ec8 	.word	0x20003ec8

080119d4 <__errno>:
 80119d4:	4b01      	ldr	r3, [pc, #4]	; (80119dc <__errno+0x8>)
 80119d6:	6818      	ldr	r0, [r3, #0]
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	20000e50 	.word	0x20000e50

080119e0 <__libc_init_array>:
 80119e0:	b570      	push	{r4, r5, r6, lr}
 80119e2:	4d0d      	ldr	r5, [pc, #52]	; (8011a18 <__libc_init_array+0x38>)
 80119e4:	4c0d      	ldr	r4, [pc, #52]	; (8011a1c <__libc_init_array+0x3c>)
 80119e6:	1b64      	subs	r4, r4, r5
 80119e8:	10a4      	asrs	r4, r4, #2
 80119ea:	2600      	movs	r6, #0
 80119ec:	42a6      	cmp	r6, r4
 80119ee:	d109      	bne.n	8011a04 <__libc_init_array+0x24>
 80119f0:	4d0b      	ldr	r5, [pc, #44]	; (8011a20 <__libc_init_array+0x40>)
 80119f2:	4c0c      	ldr	r4, [pc, #48]	; (8011a24 <__libc_init_array+0x44>)
 80119f4:	f002 fbe0 	bl	80141b8 <_init>
 80119f8:	1b64      	subs	r4, r4, r5
 80119fa:	10a4      	asrs	r4, r4, #2
 80119fc:	2600      	movs	r6, #0
 80119fe:	42a6      	cmp	r6, r4
 8011a00:	d105      	bne.n	8011a0e <__libc_init_array+0x2e>
 8011a02:	bd70      	pop	{r4, r5, r6, pc}
 8011a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a08:	4798      	blx	r3
 8011a0a:	3601      	adds	r6, #1
 8011a0c:	e7ee      	b.n	80119ec <__libc_init_array+0xc>
 8011a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a12:	4798      	blx	r3
 8011a14:	3601      	adds	r6, #1
 8011a16:	e7f2      	b.n	80119fe <__libc_init_array+0x1e>
 8011a18:	080584b8 	.word	0x080584b8
 8011a1c:	080584b8 	.word	0x080584b8
 8011a20:	080584b8 	.word	0x080584b8
 8011a24:	080584bc 	.word	0x080584bc

08011a28 <__retarget_lock_init_recursive>:
 8011a28:	4770      	bx	lr

08011a2a <__retarget_lock_acquire_recursive>:
 8011a2a:	4770      	bx	lr

08011a2c <__retarget_lock_release_recursive>:
 8011a2c:	4770      	bx	lr

08011a2e <strcpy>:
 8011a2e:	4603      	mov	r3, r0
 8011a30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a34:	f803 2b01 	strb.w	r2, [r3], #1
 8011a38:	2a00      	cmp	r2, #0
 8011a3a:	d1f9      	bne.n	8011a30 <strcpy+0x2>
 8011a3c:	4770      	bx	lr

08011a3e <memcpy>:
 8011a3e:	440a      	add	r2, r1
 8011a40:	4291      	cmp	r1, r2
 8011a42:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a46:	d100      	bne.n	8011a4a <memcpy+0xc>
 8011a48:	4770      	bx	lr
 8011a4a:	b510      	push	{r4, lr}
 8011a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a54:	4291      	cmp	r1, r2
 8011a56:	d1f9      	bne.n	8011a4c <memcpy+0xe>
 8011a58:	bd10      	pop	{r4, pc}
	...

08011a5c <__assert_func>:
 8011a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a5e:	4614      	mov	r4, r2
 8011a60:	461a      	mov	r2, r3
 8011a62:	4b09      	ldr	r3, [pc, #36]	; (8011a88 <__assert_func+0x2c>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4605      	mov	r5, r0
 8011a68:	68d8      	ldr	r0, [r3, #12]
 8011a6a:	b14c      	cbz	r4, 8011a80 <__assert_func+0x24>
 8011a6c:	4b07      	ldr	r3, [pc, #28]	; (8011a8c <__assert_func+0x30>)
 8011a6e:	9100      	str	r1, [sp, #0]
 8011a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a74:	4906      	ldr	r1, [pc, #24]	; (8011a90 <__assert_func+0x34>)
 8011a76:	462b      	mov	r3, r5
 8011a78:	f002 f8da 	bl	8013c30 <fiprintf>
 8011a7c:	f002 fa0c 	bl	8013e98 <abort>
 8011a80:	4b04      	ldr	r3, [pc, #16]	; (8011a94 <__assert_func+0x38>)
 8011a82:	461c      	mov	r4, r3
 8011a84:	e7f3      	b.n	8011a6e <__assert_func+0x12>
 8011a86:	bf00      	nop
 8011a88:	20000e50 	.word	0x20000e50
 8011a8c:	08058278 	.word	0x08058278
 8011a90:	08058285 	.word	0x08058285
 8011a94:	080582b3 	.word	0x080582b3

08011a98 <quorem>:
 8011a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	6903      	ldr	r3, [r0, #16]
 8011a9e:	690c      	ldr	r4, [r1, #16]
 8011aa0:	42a3      	cmp	r3, r4
 8011aa2:	4607      	mov	r7, r0
 8011aa4:	db7e      	blt.n	8011ba4 <quorem+0x10c>
 8011aa6:	3c01      	subs	r4, #1
 8011aa8:	f101 0814 	add.w	r8, r1, #20
 8011aac:	f100 0514 	add.w	r5, r0, #20
 8011ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ab4:	9301      	str	r3, [sp, #4]
 8011ab6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ac6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011aca:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ace:	d331      	bcc.n	8011b34 <quorem+0x9c>
 8011ad0:	f04f 0e00 	mov.w	lr, #0
 8011ad4:	4640      	mov	r0, r8
 8011ad6:	46ac      	mov	ip, r5
 8011ad8:	46f2      	mov	sl, lr
 8011ada:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ade:	b293      	uxth	r3, r2
 8011ae0:	fb06 e303 	mla	r3, r6, r3, lr
 8011ae4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ae8:	0c1a      	lsrs	r2, r3, #16
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	ebaa 0303 	sub.w	r3, sl, r3
 8011af0:	f8dc a000 	ldr.w	sl, [ip]
 8011af4:	fa13 f38a 	uxtah	r3, r3, sl
 8011af8:	fb06 220e 	mla	r2, r6, lr, r2
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	9b00      	ldr	r3, [sp, #0]
 8011b00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011b04:	b292      	uxth	r2, r2
 8011b06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011b0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011b12:	4581      	cmp	r9, r0
 8011b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b18:	f84c 3b04 	str.w	r3, [ip], #4
 8011b1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011b20:	d2db      	bcs.n	8011ada <quorem+0x42>
 8011b22:	f855 300b 	ldr.w	r3, [r5, fp]
 8011b26:	b92b      	cbnz	r3, 8011b34 <quorem+0x9c>
 8011b28:	9b01      	ldr	r3, [sp, #4]
 8011b2a:	3b04      	subs	r3, #4
 8011b2c:	429d      	cmp	r5, r3
 8011b2e:	461a      	mov	r2, r3
 8011b30:	d32c      	bcc.n	8011b8c <quorem+0xf4>
 8011b32:	613c      	str	r4, [r7, #16]
 8011b34:	4638      	mov	r0, r7
 8011b36:	f001 f903 	bl	8012d40 <__mcmp>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	db22      	blt.n	8011b84 <quorem+0xec>
 8011b3e:	3601      	adds	r6, #1
 8011b40:	4629      	mov	r1, r5
 8011b42:	2000      	movs	r0, #0
 8011b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b48:	f8d1 c000 	ldr.w	ip, [r1]
 8011b4c:	b293      	uxth	r3, r2
 8011b4e:	1ac3      	subs	r3, r0, r3
 8011b50:	0c12      	lsrs	r2, r2, #16
 8011b52:	fa13 f38c 	uxtah	r3, r3, ip
 8011b56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011b5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b64:	45c1      	cmp	r9, r8
 8011b66:	f841 3b04 	str.w	r3, [r1], #4
 8011b6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011b6e:	d2e9      	bcs.n	8011b44 <quorem+0xac>
 8011b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b78:	b922      	cbnz	r2, 8011b84 <quorem+0xec>
 8011b7a:	3b04      	subs	r3, #4
 8011b7c:	429d      	cmp	r5, r3
 8011b7e:	461a      	mov	r2, r3
 8011b80:	d30a      	bcc.n	8011b98 <quorem+0x100>
 8011b82:	613c      	str	r4, [r7, #16]
 8011b84:	4630      	mov	r0, r6
 8011b86:	b003      	add	sp, #12
 8011b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b8c:	6812      	ldr	r2, [r2, #0]
 8011b8e:	3b04      	subs	r3, #4
 8011b90:	2a00      	cmp	r2, #0
 8011b92:	d1ce      	bne.n	8011b32 <quorem+0x9a>
 8011b94:	3c01      	subs	r4, #1
 8011b96:	e7c9      	b.n	8011b2c <quorem+0x94>
 8011b98:	6812      	ldr	r2, [r2, #0]
 8011b9a:	3b04      	subs	r3, #4
 8011b9c:	2a00      	cmp	r2, #0
 8011b9e:	d1f0      	bne.n	8011b82 <quorem+0xea>
 8011ba0:	3c01      	subs	r4, #1
 8011ba2:	e7eb      	b.n	8011b7c <quorem+0xe4>
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	e7ee      	b.n	8011b86 <quorem+0xee>

08011ba8 <_dtoa_r>:
 8011ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bac:	ed2d 8b04 	vpush	{d8-d9}
 8011bb0:	69c5      	ldr	r5, [r0, #28]
 8011bb2:	b093      	sub	sp, #76	; 0x4c
 8011bb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011bb8:	ec57 6b10 	vmov	r6, r7, d0
 8011bbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011bc0:	9107      	str	r1, [sp, #28]
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8011bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8011bc8:	b975      	cbnz	r5, 8011be8 <_dtoa_r+0x40>
 8011bca:	2010      	movs	r0, #16
 8011bcc:	f7fe fefa 	bl	80109c4 <malloc>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	61e0      	str	r0, [r4, #28]
 8011bd4:	b920      	cbnz	r0, 8011be0 <_dtoa_r+0x38>
 8011bd6:	4bae      	ldr	r3, [pc, #696]	; (8011e90 <_dtoa_r+0x2e8>)
 8011bd8:	21ef      	movs	r1, #239	; 0xef
 8011bda:	48ae      	ldr	r0, [pc, #696]	; (8011e94 <_dtoa_r+0x2ec>)
 8011bdc:	f7ff ff3e 	bl	8011a5c <__assert_func>
 8011be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011be4:	6005      	str	r5, [r0, #0]
 8011be6:	60c5      	str	r5, [r0, #12]
 8011be8:	69e3      	ldr	r3, [r4, #28]
 8011bea:	6819      	ldr	r1, [r3, #0]
 8011bec:	b151      	cbz	r1, 8011c04 <_dtoa_r+0x5c>
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	604a      	str	r2, [r1, #4]
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	4093      	lsls	r3, r2
 8011bf6:	608b      	str	r3, [r1, #8]
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f000 fe65 	bl	80128c8 <_Bfree>
 8011bfe:	69e3      	ldr	r3, [r4, #28]
 8011c00:	2200      	movs	r2, #0
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	1e3b      	subs	r3, r7, #0
 8011c06:	bfbb      	ittet	lt
 8011c08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011c0c:	9303      	strlt	r3, [sp, #12]
 8011c0e:	2300      	movge	r3, #0
 8011c10:	2201      	movlt	r2, #1
 8011c12:	bfac      	ite	ge
 8011c14:	f8c8 3000 	strge.w	r3, [r8]
 8011c18:	f8c8 2000 	strlt.w	r2, [r8]
 8011c1c:	4b9e      	ldr	r3, [pc, #632]	; (8011e98 <_dtoa_r+0x2f0>)
 8011c1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011c22:	ea33 0308 	bics.w	r3, r3, r8
 8011c26:	d11b      	bne.n	8011c60 <_dtoa_r+0xb8>
 8011c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011c2e:	6013      	str	r3, [r2, #0]
 8011c30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011c34:	4333      	orrs	r3, r6
 8011c36:	f000 8593 	beq.w	8012760 <_dtoa_r+0xbb8>
 8011c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c3c:	b963      	cbnz	r3, 8011c58 <_dtoa_r+0xb0>
 8011c3e:	4b97      	ldr	r3, [pc, #604]	; (8011e9c <_dtoa_r+0x2f4>)
 8011c40:	e027      	b.n	8011c92 <_dtoa_r+0xea>
 8011c42:	4b97      	ldr	r3, [pc, #604]	; (8011ea0 <_dtoa_r+0x2f8>)
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	3308      	adds	r3, #8
 8011c48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c4a:	6013      	str	r3, [r2, #0]
 8011c4c:	9800      	ldr	r0, [sp, #0]
 8011c4e:	b013      	add	sp, #76	; 0x4c
 8011c50:	ecbd 8b04 	vpop	{d8-d9}
 8011c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c58:	4b90      	ldr	r3, [pc, #576]	; (8011e9c <_dtoa_r+0x2f4>)
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	3303      	adds	r3, #3
 8011c5e:	e7f3      	b.n	8011c48 <_dtoa_r+0xa0>
 8011c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c64:	2200      	movs	r2, #0
 8011c66:	ec51 0b17 	vmov	r0, r1, d7
 8011c6a:	eeb0 8a47 	vmov.f32	s16, s14
 8011c6e:	eef0 8a67 	vmov.f32	s17, s15
 8011c72:	2300      	movs	r3, #0
 8011c74:	f7ee ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c78:	4681      	mov	r9, r0
 8011c7a:	b160      	cbz	r0, 8011c96 <_dtoa_r+0xee>
 8011c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c7e:	2301      	movs	r3, #1
 8011c80:	6013      	str	r3, [r2, #0]
 8011c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f000 8568 	beq.w	801275a <_dtoa_r+0xbb2>
 8011c8a:	4b86      	ldr	r3, [pc, #536]	; (8011ea4 <_dtoa_r+0x2fc>)
 8011c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c8e:	6013      	str	r3, [r2, #0]
 8011c90:	3b01      	subs	r3, #1
 8011c92:	9300      	str	r3, [sp, #0]
 8011c94:	e7da      	b.n	8011c4c <_dtoa_r+0xa4>
 8011c96:	aa10      	add	r2, sp, #64	; 0x40
 8011c98:	a911      	add	r1, sp, #68	; 0x44
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8011ca0:	eef0 0a68 	vmov.f32	s1, s17
 8011ca4:	f001 f8f2 	bl	8012e8c <__d2b>
 8011ca8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011cac:	4682      	mov	sl, r0
 8011cae:	2d00      	cmp	r5, #0
 8011cb0:	d07f      	beq.n	8011db2 <_dtoa_r+0x20a>
 8011cb2:	ee18 3a90 	vmov	r3, s17
 8011cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011cba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011cbe:	ec51 0b18 	vmov	r0, r1, d8
 8011cc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011cca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011cce:	4619      	mov	r1, r3
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	4b75      	ldr	r3, [pc, #468]	; (8011ea8 <_dtoa_r+0x300>)
 8011cd4:	f7ee fad8 	bl	8000288 <__aeabi_dsub>
 8011cd8:	a367      	add	r3, pc, #412	; (adr r3, 8011e78 <_dtoa_r+0x2d0>)
 8011cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cde:	f7ee fc8b 	bl	80005f8 <__aeabi_dmul>
 8011ce2:	a367      	add	r3, pc, #412	; (adr r3, 8011e80 <_dtoa_r+0x2d8>)
 8011ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce8:	f7ee fad0 	bl	800028c <__adddf3>
 8011cec:	4606      	mov	r6, r0
 8011cee:	4628      	mov	r0, r5
 8011cf0:	460f      	mov	r7, r1
 8011cf2:	f7ee fc17 	bl	8000524 <__aeabi_i2d>
 8011cf6:	a364      	add	r3, pc, #400	; (adr r3, 8011e88 <_dtoa_r+0x2e0>)
 8011cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfc:	f7ee fc7c 	bl	80005f8 <__aeabi_dmul>
 8011d00:	4602      	mov	r2, r0
 8011d02:	460b      	mov	r3, r1
 8011d04:	4630      	mov	r0, r6
 8011d06:	4639      	mov	r1, r7
 8011d08:	f7ee fac0 	bl	800028c <__adddf3>
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	460f      	mov	r7, r1
 8011d10:	f7ee ff22 	bl	8000b58 <__aeabi_d2iz>
 8011d14:	2200      	movs	r2, #0
 8011d16:	4683      	mov	fp, r0
 8011d18:	2300      	movs	r3, #0
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	4639      	mov	r1, r7
 8011d1e:	f7ee fedd 	bl	8000adc <__aeabi_dcmplt>
 8011d22:	b148      	cbz	r0, 8011d38 <_dtoa_r+0x190>
 8011d24:	4658      	mov	r0, fp
 8011d26:	f7ee fbfd 	bl	8000524 <__aeabi_i2d>
 8011d2a:	4632      	mov	r2, r6
 8011d2c:	463b      	mov	r3, r7
 8011d2e:	f7ee fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d32:	b908      	cbnz	r0, 8011d38 <_dtoa_r+0x190>
 8011d34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d38:	f1bb 0f16 	cmp.w	fp, #22
 8011d3c:	d857      	bhi.n	8011dee <_dtoa_r+0x246>
 8011d3e:	4b5b      	ldr	r3, [pc, #364]	; (8011eac <_dtoa_r+0x304>)
 8011d40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d48:	ec51 0b18 	vmov	r0, r1, d8
 8011d4c:	f7ee fec6 	bl	8000adc <__aeabi_dcmplt>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d04e      	beq.n	8011df2 <_dtoa_r+0x24a>
 8011d54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d58:	2300      	movs	r3, #0
 8011d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8011d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d5e:	1b5b      	subs	r3, r3, r5
 8011d60:	1e5a      	subs	r2, r3, #1
 8011d62:	bf45      	ittet	mi
 8011d64:	f1c3 0301 	rsbmi	r3, r3, #1
 8011d68:	9305      	strmi	r3, [sp, #20]
 8011d6a:	2300      	movpl	r3, #0
 8011d6c:	2300      	movmi	r3, #0
 8011d6e:	9206      	str	r2, [sp, #24]
 8011d70:	bf54      	ite	pl
 8011d72:	9305      	strpl	r3, [sp, #20]
 8011d74:	9306      	strmi	r3, [sp, #24]
 8011d76:	f1bb 0f00 	cmp.w	fp, #0
 8011d7a:	db3c      	blt.n	8011df6 <_dtoa_r+0x24e>
 8011d7c:	9b06      	ldr	r3, [sp, #24]
 8011d7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011d82:	445b      	add	r3, fp
 8011d84:	9306      	str	r3, [sp, #24]
 8011d86:	2300      	movs	r3, #0
 8011d88:	9308      	str	r3, [sp, #32]
 8011d8a:	9b07      	ldr	r3, [sp, #28]
 8011d8c:	2b09      	cmp	r3, #9
 8011d8e:	d868      	bhi.n	8011e62 <_dtoa_r+0x2ba>
 8011d90:	2b05      	cmp	r3, #5
 8011d92:	bfc4      	itt	gt
 8011d94:	3b04      	subgt	r3, #4
 8011d96:	9307      	strgt	r3, [sp, #28]
 8011d98:	9b07      	ldr	r3, [sp, #28]
 8011d9a:	f1a3 0302 	sub.w	r3, r3, #2
 8011d9e:	bfcc      	ite	gt
 8011da0:	2500      	movgt	r5, #0
 8011da2:	2501      	movle	r5, #1
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	f200 8085 	bhi.w	8011eb4 <_dtoa_r+0x30c>
 8011daa:	e8df f003 	tbb	[pc, r3]
 8011dae:	3b2e      	.short	0x3b2e
 8011db0:	5839      	.short	0x5839
 8011db2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011db6:	441d      	add	r5, r3
 8011db8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011dbc:	2b20      	cmp	r3, #32
 8011dbe:	bfc1      	itttt	gt
 8011dc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011dc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8011dc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011dcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011dd0:	bfd6      	itet	le
 8011dd2:	f1c3 0320 	rsble	r3, r3, #32
 8011dd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8011dda:	fa06 f003 	lslle.w	r0, r6, r3
 8011dde:	f7ee fb91 	bl	8000504 <__aeabi_ui2d>
 8011de2:	2201      	movs	r2, #1
 8011de4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011de8:	3d01      	subs	r5, #1
 8011dea:	920e      	str	r2, [sp, #56]	; 0x38
 8011dec:	e76f      	b.n	8011cce <_dtoa_r+0x126>
 8011dee:	2301      	movs	r3, #1
 8011df0:	e7b3      	b.n	8011d5a <_dtoa_r+0x1b2>
 8011df2:	900c      	str	r0, [sp, #48]	; 0x30
 8011df4:	e7b2      	b.n	8011d5c <_dtoa_r+0x1b4>
 8011df6:	9b05      	ldr	r3, [sp, #20]
 8011df8:	eba3 030b 	sub.w	r3, r3, fp
 8011dfc:	9305      	str	r3, [sp, #20]
 8011dfe:	f1cb 0300 	rsb	r3, fp, #0
 8011e02:	9308      	str	r3, [sp, #32]
 8011e04:	2300      	movs	r3, #0
 8011e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e08:	e7bf      	b.n	8011d8a <_dtoa_r+0x1e2>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	dc52      	bgt.n	8011eba <_dtoa_r+0x312>
 8011e14:	2301      	movs	r3, #1
 8011e16:	9301      	str	r3, [sp, #4]
 8011e18:	9304      	str	r3, [sp, #16]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	920a      	str	r2, [sp, #40]	; 0x28
 8011e1e:	e00b      	b.n	8011e38 <_dtoa_r+0x290>
 8011e20:	2301      	movs	r3, #1
 8011e22:	e7f3      	b.n	8011e0c <_dtoa_r+0x264>
 8011e24:	2300      	movs	r3, #0
 8011e26:	9309      	str	r3, [sp, #36]	; 0x24
 8011e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e2a:	445b      	add	r3, fp
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	9304      	str	r3, [sp, #16]
 8011e34:	bfb8      	it	lt
 8011e36:	2301      	movlt	r3, #1
 8011e38:	69e0      	ldr	r0, [r4, #28]
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	2204      	movs	r2, #4
 8011e3e:	f102 0614 	add.w	r6, r2, #20
 8011e42:	429e      	cmp	r6, r3
 8011e44:	d93d      	bls.n	8011ec2 <_dtoa_r+0x31a>
 8011e46:	6041      	str	r1, [r0, #4]
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f000 fcfd 	bl	8012848 <_Balloc>
 8011e4e:	9000      	str	r0, [sp, #0]
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d139      	bne.n	8011ec8 <_dtoa_r+0x320>
 8011e54:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <_dtoa_r+0x308>)
 8011e56:	4602      	mov	r2, r0
 8011e58:	f240 11af 	movw	r1, #431	; 0x1af
 8011e5c:	e6bd      	b.n	8011bda <_dtoa_r+0x32>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	e7e1      	b.n	8011e26 <_dtoa_r+0x27e>
 8011e62:	2501      	movs	r5, #1
 8011e64:	2300      	movs	r3, #0
 8011e66:	9307      	str	r3, [sp, #28]
 8011e68:	9509      	str	r5, [sp, #36]	; 0x24
 8011e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6e:	9301      	str	r3, [sp, #4]
 8011e70:	9304      	str	r3, [sp, #16]
 8011e72:	2200      	movs	r2, #0
 8011e74:	2312      	movs	r3, #18
 8011e76:	e7d1      	b.n	8011e1c <_dtoa_r+0x274>
 8011e78:	636f4361 	.word	0x636f4361
 8011e7c:	3fd287a7 	.word	0x3fd287a7
 8011e80:	8b60c8b3 	.word	0x8b60c8b3
 8011e84:	3fc68a28 	.word	0x3fc68a28
 8011e88:	509f79fb 	.word	0x509f79fb
 8011e8c:	3fd34413 	.word	0x3fd34413
 8011e90:	080581fd 	.word	0x080581fd
 8011e94:	080582c1 	.word	0x080582c1
 8011e98:	7ff00000 	.word	0x7ff00000
 8011e9c:	080582bd 	.word	0x080582bd
 8011ea0:	080582b4 	.word	0x080582b4
 8011ea4:	080584ac 	.word	0x080584ac
 8011ea8:	3ff80000 	.word	0x3ff80000
 8011eac:	080583b0 	.word	0x080583b0
 8011eb0:	08058319 	.word	0x08058319
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb8:	e7d7      	b.n	8011e6a <_dtoa_r+0x2c2>
 8011eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ebc:	9301      	str	r3, [sp, #4]
 8011ebe:	9304      	str	r3, [sp, #16]
 8011ec0:	e7ba      	b.n	8011e38 <_dtoa_r+0x290>
 8011ec2:	3101      	adds	r1, #1
 8011ec4:	0052      	lsls	r2, r2, #1
 8011ec6:	e7ba      	b.n	8011e3e <_dtoa_r+0x296>
 8011ec8:	69e3      	ldr	r3, [r4, #28]
 8011eca:	9a00      	ldr	r2, [sp, #0]
 8011ecc:	601a      	str	r2, [r3, #0]
 8011ece:	9b04      	ldr	r3, [sp, #16]
 8011ed0:	2b0e      	cmp	r3, #14
 8011ed2:	f200 80a8 	bhi.w	8012026 <_dtoa_r+0x47e>
 8011ed6:	2d00      	cmp	r5, #0
 8011ed8:	f000 80a5 	beq.w	8012026 <_dtoa_r+0x47e>
 8011edc:	f1bb 0f00 	cmp.w	fp, #0
 8011ee0:	dd38      	ble.n	8011f54 <_dtoa_r+0x3ac>
 8011ee2:	4bc0      	ldr	r3, [pc, #768]	; (80121e4 <_dtoa_r+0x63c>)
 8011ee4:	f00b 020f 	and.w	r2, fp, #15
 8011ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011eec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011ef0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011ef4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011ef8:	d019      	beq.n	8011f2e <_dtoa_r+0x386>
 8011efa:	4bbb      	ldr	r3, [pc, #748]	; (80121e8 <_dtoa_r+0x640>)
 8011efc:	ec51 0b18 	vmov	r0, r1, d8
 8011f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011f04:	f7ee fca2 	bl	800084c <__aeabi_ddiv>
 8011f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f0c:	f008 080f 	and.w	r8, r8, #15
 8011f10:	2503      	movs	r5, #3
 8011f12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80121e8 <_dtoa_r+0x640>
 8011f16:	f1b8 0f00 	cmp.w	r8, #0
 8011f1a:	d10a      	bne.n	8011f32 <_dtoa_r+0x38a>
 8011f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f20:	4632      	mov	r2, r6
 8011f22:	463b      	mov	r3, r7
 8011f24:	f7ee fc92 	bl	800084c <__aeabi_ddiv>
 8011f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f2c:	e02b      	b.n	8011f86 <_dtoa_r+0x3de>
 8011f2e:	2502      	movs	r5, #2
 8011f30:	e7ef      	b.n	8011f12 <_dtoa_r+0x36a>
 8011f32:	f018 0f01 	tst.w	r8, #1
 8011f36:	d008      	beq.n	8011f4a <_dtoa_r+0x3a2>
 8011f38:	4630      	mov	r0, r6
 8011f3a:	4639      	mov	r1, r7
 8011f3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011f40:	f7ee fb5a 	bl	80005f8 <__aeabi_dmul>
 8011f44:	3501      	adds	r5, #1
 8011f46:	4606      	mov	r6, r0
 8011f48:	460f      	mov	r7, r1
 8011f4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f4e:	f109 0908 	add.w	r9, r9, #8
 8011f52:	e7e0      	b.n	8011f16 <_dtoa_r+0x36e>
 8011f54:	f000 809f 	beq.w	8012096 <_dtoa_r+0x4ee>
 8011f58:	f1cb 0600 	rsb	r6, fp, #0
 8011f5c:	4ba1      	ldr	r3, [pc, #644]	; (80121e4 <_dtoa_r+0x63c>)
 8011f5e:	4fa2      	ldr	r7, [pc, #648]	; (80121e8 <_dtoa_r+0x640>)
 8011f60:	f006 020f 	and.w	r2, r6, #15
 8011f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	ec51 0b18 	vmov	r0, r1, d8
 8011f70:	f7ee fb42 	bl	80005f8 <__aeabi_dmul>
 8011f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f78:	1136      	asrs	r6, r6, #4
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	2502      	movs	r5, #2
 8011f7e:	2e00      	cmp	r6, #0
 8011f80:	d17e      	bne.n	8012080 <_dtoa_r+0x4d8>
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1d0      	bne.n	8011f28 <_dtoa_r+0x380>
 8011f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f000 8084 	beq.w	801209a <_dtoa_r+0x4f2>
 8011f92:	4b96      	ldr	r3, [pc, #600]	; (80121ec <_dtoa_r+0x644>)
 8011f94:	2200      	movs	r2, #0
 8011f96:	4640      	mov	r0, r8
 8011f98:	4649      	mov	r1, r9
 8011f9a:	f7ee fd9f 	bl	8000adc <__aeabi_dcmplt>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d07b      	beq.n	801209a <_dtoa_r+0x4f2>
 8011fa2:	9b04      	ldr	r3, [sp, #16]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d078      	beq.n	801209a <_dtoa_r+0x4f2>
 8011fa8:	9b01      	ldr	r3, [sp, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	dd39      	ble.n	8012022 <_dtoa_r+0x47a>
 8011fae:	4b90      	ldr	r3, [pc, #576]	; (80121f0 <_dtoa_r+0x648>)
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	f7ee fb1f 	bl	80005f8 <__aeabi_dmul>
 8011fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fbe:	9e01      	ldr	r6, [sp, #4]
 8011fc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011fc4:	3501      	adds	r5, #1
 8011fc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011fca:	4628      	mov	r0, r5
 8011fcc:	f7ee faaa 	bl	8000524 <__aeabi_i2d>
 8011fd0:	4642      	mov	r2, r8
 8011fd2:	464b      	mov	r3, r9
 8011fd4:	f7ee fb10 	bl	80005f8 <__aeabi_dmul>
 8011fd8:	4b86      	ldr	r3, [pc, #536]	; (80121f4 <_dtoa_r+0x64c>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f7ee f956 	bl	800028c <__adddf3>
 8011fe0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fe8:	9303      	str	r3, [sp, #12]
 8011fea:	2e00      	cmp	r6, #0
 8011fec:	d158      	bne.n	80120a0 <_dtoa_r+0x4f8>
 8011fee:	4b82      	ldr	r3, [pc, #520]	; (80121f8 <_dtoa_r+0x650>)
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	4649      	mov	r1, r9
 8011ff6:	f7ee f947 	bl	8000288 <__aeabi_dsub>
 8011ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ffe:	4680      	mov	r8, r0
 8012000:	4689      	mov	r9, r1
 8012002:	f7ee fd89 	bl	8000b18 <__aeabi_dcmpgt>
 8012006:	2800      	cmp	r0, #0
 8012008:	f040 8296 	bne.w	8012538 <_dtoa_r+0x990>
 801200c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012010:	4640      	mov	r0, r8
 8012012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012016:	4649      	mov	r1, r9
 8012018:	f7ee fd60 	bl	8000adc <__aeabi_dcmplt>
 801201c:	2800      	cmp	r0, #0
 801201e:	f040 8289 	bne.w	8012534 <_dtoa_r+0x98c>
 8012022:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012028:	2b00      	cmp	r3, #0
 801202a:	f2c0 814e 	blt.w	80122ca <_dtoa_r+0x722>
 801202e:	f1bb 0f0e 	cmp.w	fp, #14
 8012032:	f300 814a 	bgt.w	80122ca <_dtoa_r+0x722>
 8012036:	4b6b      	ldr	r3, [pc, #428]	; (80121e4 <_dtoa_r+0x63c>)
 8012038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801203c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012042:	2b00      	cmp	r3, #0
 8012044:	f280 80dc 	bge.w	8012200 <_dtoa_r+0x658>
 8012048:	9b04      	ldr	r3, [sp, #16]
 801204a:	2b00      	cmp	r3, #0
 801204c:	f300 80d8 	bgt.w	8012200 <_dtoa_r+0x658>
 8012050:	f040 826f 	bne.w	8012532 <_dtoa_r+0x98a>
 8012054:	4b68      	ldr	r3, [pc, #416]	; (80121f8 <_dtoa_r+0x650>)
 8012056:	2200      	movs	r2, #0
 8012058:	4640      	mov	r0, r8
 801205a:	4649      	mov	r1, r9
 801205c:	f7ee facc 	bl	80005f8 <__aeabi_dmul>
 8012060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012064:	f7ee fd4e 	bl	8000b04 <__aeabi_dcmpge>
 8012068:	9e04      	ldr	r6, [sp, #16]
 801206a:	4637      	mov	r7, r6
 801206c:	2800      	cmp	r0, #0
 801206e:	f040 8245 	bne.w	80124fc <_dtoa_r+0x954>
 8012072:	9d00      	ldr	r5, [sp, #0]
 8012074:	2331      	movs	r3, #49	; 0x31
 8012076:	f805 3b01 	strb.w	r3, [r5], #1
 801207a:	f10b 0b01 	add.w	fp, fp, #1
 801207e:	e241      	b.n	8012504 <_dtoa_r+0x95c>
 8012080:	07f2      	lsls	r2, r6, #31
 8012082:	d505      	bpl.n	8012090 <_dtoa_r+0x4e8>
 8012084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012088:	f7ee fab6 	bl	80005f8 <__aeabi_dmul>
 801208c:	3501      	adds	r5, #1
 801208e:	2301      	movs	r3, #1
 8012090:	1076      	asrs	r6, r6, #1
 8012092:	3708      	adds	r7, #8
 8012094:	e773      	b.n	8011f7e <_dtoa_r+0x3d6>
 8012096:	2502      	movs	r5, #2
 8012098:	e775      	b.n	8011f86 <_dtoa_r+0x3de>
 801209a:	9e04      	ldr	r6, [sp, #16]
 801209c:	465f      	mov	r7, fp
 801209e:	e792      	b.n	8011fc6 <_dtoa_r+0x41e>
 80120a0:	9900      	ldr	r1, [sp, #0]
 80120a2:	4b50      	ldr	r3, [pc, #320]	; (80121e4 <_dtoa_r+0x63c>)
 80120a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120a8:	4431      	add	r1, r6
 80120aa:	9102      	str	r1, [sp, #8]
 80120ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120ae:	eeb0 9a47 	vmov.f32	s18, s14
 80120b2:	eef0 9a67 	vmov.f32	s19, s15
 80120b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80120ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80120be:	2900      	cmp	r1, #0
 80120c0:	d044      	beq.n	801214c <_dtoa_r+0x5a4>
 80120c2:	494e      	ldr	r1, [pc, #312]	; (80121fc <_dtoa_r+0x654>)
 80120c4:	2000      	movs	r0, #0
 80120c6:	f7ee fbc1 	bl	800084c <__aeabi_ddiv>
 80120ca:	ec53 2b19 	vmov	r2, r3, d9
 80120ce:	f7ee f8db 	bl	8000288 <__aeabi_dsub>
 80120d2:	9d00      	ldr	r5, [sp, #0]
 80120d4:	ec41 0b19 	vmov	d9, r0, r1
 80120d8:	4649      	mov	r1, r9
 80120da:	4640      	mov	r0, r8
 80120dc:	f7ee fd3c 	bl	8000b58 <__aeabi_d2iz>
 80120e0:	4606      	mov	r6, r0
 80120e2:	f7ee fa1f 	bl	8000524 <__aeabi_i2d>
 80120e6:	4602      	mov	r2, r0
 80120e8:	460b      	mov	r3, r1
 80120ea:	4640      	mov	r0, r8
 80120ec:	4649      	mov	r1, r9
 80120ee:	f7ee f8cb 	bl	8000288 <__aeabi_dsub>
 80120f2:	3630      	adds	r6, #48	; 0x30
 80120f4:	f805 6b01 	strb.w	r6, [r5], #1
 80120f8:	ec53 2b19 	vmov	r2, r3, d9
 80120fc:	4680      	mov	r8, r0
 80120fe:	4689      	mov	r9, r1
 8012100:	f7ee fcec 	bl	8000adc <__aeabi_dcmplt>
 8012104:	2800      	cmp	r0, #0
 8012106:	d164      	bne.n	80121d2 <_dtoa_r+0x62a>
 8012108:	4642      	mov	r2, r8
 801210a:	464b      	mov	r3, r9
 801210c:	4937      	ldr	r1, [pc, #220]	; (80121ec <_dtoa_r+0x644>)
 801210e:	2000      	movs	r0, #0
 8012110:	f7ee f8ba 	bl	8000288 <__aeabi_dsub>
 8012114:	ec53 2b19 	vmov	r2, r3, d9
 8012118:	f7ee fce0 	bl	8000adc <__aeabi_dcmplt>
 801211c:	2800      	cmp	r0, #0
 801211e:	f040 80b6 	bne.w	801228e <_dtoa_r+0x6e6>
 8012122:	9b02      	ldr	r3, [sp, #8]
 8012124:	429d      	cmp	r5, r3
 8012126:	f43f af7c 	beq.w	8012022 <_dtoa_r+0x47a>
 801212a:	4b31      	ldr	r3, [pc, #196]	; (80121f0 <_dtoa_r+0x648>)
 801212c:	ec51 0b19 	vmov	r0, r1, d9
 8012130:	2200      	movs	r2, #0
 8012132:	f7ee fa61 	bl	80005f8 <__aeabi_dmul>
 8012136:	4b2e      	ldr	r3, [pc, #184]	; (80121f0 <_dtoa_r+0x648>)
 8012138:	ec41 0b19 	vmov	d9, r0, r1
 801213c:	2200      	movs	r2, #0
 801213e:	4640      	mov	r0, r8
 8012140:	4649      	mov	r1, r9
 8012142:	f7ee fa59 	bl	80005f8 <__aeabi_dmul>
 8012146:	4680      	mov	r8, r0
 8012148:	4689      	mov	r9, r1
 801214a:	e7c5      	b.n	80120d8 <_dtoa_r+0x530>
 801214c:	ec51 0b17 	vmov	r0, r1, d7
 8012150:	f7ee fa52 	bl	80005f8 <__aeabi_dmul>
 8012154:	9b02      	ldr	r3, [sp, #8]
 8012156:	9d00      	ldr	r5, [sp, #0]
 8012158:	930f      	str	r3, [sp, #60]	; 0x3c
 801215a:	ec41 0b19 	vmov	d9, r0, r1
 801215e:	4649      	mov	r1, r9
 8012160:	4640      	mov	r0, r8
 8012162:	f7ee fcf9 	bl	8000b58 <__aeabi_d2iz>
 8012166:	4606      	mov	r6, r0
 8012168:	f7ee f9dc 	bl	8000524 <__aeabi_i2d>
 801216c:	3630      	adds	r6, #48	; 0x30
 801216e:	4602      	mov	r2, r0
 8012170:	460b      	mov	r3, r1
 8012172:	4640      	mov	r0, r8
 8012174:	4649      	mov	r1, r9
 8012176:	f7ee f887 	bl	8000288 <__aeabi_dsub>
 801217a:	f805 6b01 	strb.w	r6, [r5], #1
 801217e:	9b02      	ldr	r3, [sp, #8]
 8012180:	429d      	cmp	r5, r3
 8012182:	4680      	mov	r8, r0
 8012184:	4689      	mov	r9, r1
 8012186:	f04f 0200 	mov.w	r2, #0
 801218a:	d124      	bne.n	80121d6 <_dtoa_r+0x62e>
 801218c:	4b1b      	ldr	r3, [pc, #108]	; (80121fc <_dtoa_r+0x654>)
 801218e:	ec51 0b19 	vmov	r0, r1, d9
 8012192:	f7ee f87b 	bl	800028c <__adddf3>
 8012196:	4602      	mov	r2, r0
 8012198:	460b      	mov	r3, r1
 801219a:	4640      	mov	r0, r8
 801219c:	4649      	mov	r1, r9
 801219e:	f7ee fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d173      	bne.n	801228e <_dtoa_r+0x6e6>
 80121a6:	ec53 2b19 	vmov	r2, r3, d9
 80121aa:	4914      	ldr	r1, [pc, #80]	; (80121fc <_dtoa_r+0x654>)
 80121ac:	2000      	movs	r0, #0
 80121ae:	f7ee f86b 	bl	8000288 <__aeabi_dsub>
 80121b2:	4602      	mov	r2, r0
 80121b4:	460b      	mov	r3, r1
 80121b6:	4640      	mov	r0, r8
 80121b8:	4649      	mov	r1, r9
 80121ba:	f7ee fc8f 	bl	8000adc <__aeabi_dcmplt>
 80121be:	2800      	cmp	r0, #0
 80121c0:	f43f af2f 	beq.w	8012022 <_dtoa_r+0x47a>
 80121c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80121c6:	1e6b      	subs	r3, r5, #1
 80121c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80121ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80121ce:	2b30      	cmp	r3, #48	; 0x30
 80121d0:	d0f8      	beq.n	80121c4 <_dtoa_r+0x61c>
 80121d2:	46bb      	mov	fp, r7
 80121d4:	e04a      	b.n	801226c <_dtoa_r+0x6c4>
 80121d6:	4b06      	ldr	r3, [pc, #24]	; (80121f0 <_dtoa_r+0x648>)
 80121d8:	f7ee fa0e 	bl	80005f8 <__aeabi_dmul>
 80121dc:	4680      	mov	r8, r0
 80121de:	4689      	mov	r9, r1
 80121e0:	e7bd      	b.n	801215e <_dtoa_r+0x5b6>
 80121e2:	bf00      	nop
 80121e4:	080583b0 	.word	0x080583b0
 80121e8:	08058388 	.word	0x08058388
 80121ec:	3ff00000 	.word	0x3ff00000
 80121f0:	40240000 	.word	0x40240000
 80121f4:	401c0000 	.word	0x401c0000
 80121f8:	40140000 	.word	0x40140000
 80121fc:	3fe00000 	.word	0x3fe00000
 8012200:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012204:	9d00      	ldr	r5, [sp, #0]
 8012206:	4642      	mov	r2, r8
 8012208:	464b      	mov	r3, r9
 801220a:	4630      	mov	r0, r6
 801220c:	4639      	mov	r1, r7
 801220e:	f7ee fb1d 	bl	800084c <__aeabi_ddiv>
 8012212:	f7ee fca1 	bl	8000b58 <__aeabi_d2iz>
 8012216:	9001      	str	r0, [sp, #4]
 8012218:	f7ee f984 	bl	8000524 <__aeabi_i2d>
 801221c:	4642      	mov	r2, r8
 801221e:	464b      	mov	r3, r9
 8012220:	f7ee f9ea 	bl	80005f8 <__aeabi_dmul>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4630      	mov	r0, r6
 801222a:	4639      	mov	r1, r7
 801222c:	f7ee f82c 	bl	8000288 <__aeabi_dsub>
 8012230:	9e01      	ldr	r6, [sp, #4]
 8012232:	9f04      	ldr	r7, [sp, #16]
 8012234:	3630      	adds	r6, #48	; 0x30
 8012236:	f805 6b01 	strb.w	r6, [r5], #1
 801223a:	9e00      	ldr	r6, [sp, #0]
 801223c:	1bae      	subs	r6, r5, r6
 801223e:	42b7      	cmp	r7, r6
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	d134      	bne.n	80122b0 <_dtoa_r+0x708>
 8012246:	f7ee f821 	bl	800028c <__adddf3>
 801224a:	4642      	mov	r2, r8
 801224c:	464b      	mov	r3, r9
 801224e:	4606      	mov	r6, r0
 8012250:	460f      	mov	r7, r1
 8012252:	f7ee fc61 	bl	8000b18 <__aeabi_dcmpgt>
 8012256:	b9c8      	cbnz	r0, 801228c <_dtoa_r+0x6e4>
 8012258:	4642      	mov	r2, r8
 801225a:	464b      	mov	r3, r9
 801225c:	4630      	mov	r0, r6
 801225e:	4639      	mov	r1, r7
 8012260:	f7ee fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8012264:	b110      	cbz	r0, 801226c <_dtoa_r+0x6c4>
 8012266:	9b01      	ldr	r3, [sp, #4]
 8012268:	07db      	lsls	r3, r3, #31
 801226a:	d40f      	bmi.n	801228c <_dtoa_r+0x6e4>
 801226c:	4651      	mov	r1, sl
 801226e:	4620      	mov	r0, r4
 8012270:	f000 fb2a 	bl	80128c8 <_Bfree>
 8012274:	2300      	movs	r3, #0
 8012276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012278:	702b      	strb	r3, [r5, #0]
 801227a:	f10b 0301 	add.w	r3, fp, #1
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012282:	2b00      	cmp	r3, #0
 8012284:	f43f ace2 	beq.w	8011c4c <_dtoa_r+0xa4>
 8012288:	601d      	str	r5, [r3, #0]
 801228a:	e4df      	b.n	8011c4c <_dtoa_r+0xa4>
 801228c:	465f      	mov	r7, fp
 801228e:	462b      	mov	r3, r5
 8012290:	461d      	mov	r5, r3
 8012292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012296:	2a39      	cmp	r2, #57	; 0x39
 8012298:	d106      	bne.n	80122a8 <_dtoa_r+0x700>
 801229a:	9a00      	ldr	r2, [sp, #0]
 801229c:	429a      	cmp	r2, r3
 801229e:	d1f7      	bne.n	8012290 <_dtoa_r+0x6e8>
 80122a0:	9900      	ldr	r1, [sp, #0]
 80122a2:	2230      	movs	r2, #48	; 0x30
 80122a4:	3701      	adds	r7, #1
 80122a6:	700a      	strb	r2, [r1, #0]
 80122a8:	781a      	ldrb	r2, [r3, #0]
 80122aa:	3201      	adds	r2, #1
 80122ac:	701a      	strb	r2, [r3, #0]
 80122ae:	e790      	b.n	80121d2 <_dtoa_r+0x62a>
 80122b0:	4ba3      	ldr	r3, [pc, #652]	; (8012540 <_dtoa_r+0x998>)
 80122b2:	2200      	movs	r2, #0
 80122b4:	f7ee f9a0 	bl	80005f8 <__aeabi_dmul>
 80122b8:	2200      	movs	r2, #0
 80122ba:	2300      	movs	r3, #0
 80122bc:	4606      	mov	r6, r0
 80122be:	460f      	mov	r7, r1
 80122c0:	f7ee fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d09e      	beq.n	8012206 <_dtoa_r+0x65e>
 80122c8:	e7d0      	b.n	801226c <_dtoa_r+0x6c4>
 80122ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122cc:	2a00      	cmp	r2, #0
 80122ce:	f000 80ca 	beq.w	8012466 <_dtoa_r+0x8be>
 80122d2:	9a07      	ldr	r2, [sp, #28]
 80122d4:	2a01      	cmp	r2, #1
 80122d6:	f300 80ad 	bgt.w	8012434 <_dtoa_r+0x88c>
 80122da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122dc:	2a00      	cmp	r2, #0
 80122de:	f000 80a5 	beq.w	801242c <_dtoa_r+0x884>
 80122e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80122e6:	9e08      	ldr	r6, [sp, #32]
 80122e8:	9d05      	ldr	r5, [sp, #20]
 80122ea:	9a05      	ldr	r2, [sp, #20]
 80122ec:	441a      	add	r2, r3
 80122ee:	9205      	str	r2, [sp, #20]
 80122f0:	9a06      	ldr	r2, [sp, #24]
 80122f2:	2101      	movs	r1, #1
 80122f4:	441a      	add	r2, r3
 80122f6:	4620      	mov	r0, r4
 80122f8:	9206      	str	r2, [sp, #24]
 80122fa:	f000 fb9b 	bl	8012a34 <__i2b>
 80122fe:	4607      	mov	r7, r0
 8012300:	b165      	cbz	r5, 801231c <_dtoa_r+0x774>
 8012302:	9b06      	ldr	r3, [sp, #24]
 8012304:	2b00      	cmp	r3, #0
 8012306:	dd09      	ble.n	801231c <_dtoa_r+0x774>
 8012308:	42ab      	cmp	r3, r5
 801230a:	9a05      	ldr	r2, [sp, #20]
 801230c:	bfa8      	it	ge
 801230e:	462b      	movge	r3, r5
 8012310:	1ad2      	subs	r2, r2, r3
 8012312:	9205      	str	r2, [sp, #20]
 8012314:	9a06      	ldr	r2, [sp, #24]
 8012316:	1aed      	subs	r5, r5, r3
 8012318:	1ad3      	subs	r3, r2, r3
 801231a:	9306      	str	r3, [sp, #24]
 801231c:	9b08      	ldr	r3, [sp, #32]
 801231e:	b1f3      	cbz	r3, 801235e <_dtoa_r+0x7b6>
 8012320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012322:	2b00      	cmp	r3, #0
 8012324:	f000 80a3 	beq.w	801246e <_dtoa_r+0x8c6>
 8012328:	2e00      	cmp	r6, #0
 801232a:	dd10      	ble.n	801234e <_dtoa_r+0x7a6>
 801232c:	4639      	mov	r1, r7
 801232e:	4632      	mov	r2, r6
 8012330:	4620      	mov	r0, r4
 8012332:	f000 fc3f 	bl	8012bb4 <__pow5mult>
 8012336:	4652      	mov	r2, sl
 8012338:	4601      	mov	r1, r0
 801233a:	4607      	mov	r7, r0
 801233c:	4620      	mov	r0, r4
 801233e:	f000 fb8f 	bl	8012a60 <__multiply>
 8012342:	4651      	mov	r1, sl
 8012344:	4680      	mov	r8, r0
 8012346:	4620      	mov	r0, r4
 8012348:	f000 fabe 	bl	80128c8 <_Bfree>
 801234c:	46c2      	mov	sl, r8
 801234e:	9b08      	ldr	r3, [sp, #32]
 8012350:	1b9a      	subs	r2, r3, r6
 8012352:	d004      	beq.n	801235e <_dtoa_r+0x7b6>
 8012354:	4651      	mov	r1, sl
 8012356:	4620      	mov	r0, r4
 8012358:	f000 fc2c 	bl	8012bb4 <__pow5mult>
 801235c:	4682      	mov	sl, r0
 801235e:	2101      	movs	r1, #1
 8012360:	4620      	mov	r0, r4
 8012362:	f000 fb67 	bl	8012a34 <__i2b>
 8012366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012368:	2b00      	cmp	r3, #0
 801236a:	4606      	mov	r6, r0
 801236c:	f340 8081 	ble.w	8012472 <_dtoa_r+0x8ca>
 8012370:	461a      	mov	r2, r3
 8012372:	4601      	mov	r1, r0
 8012374:	4620      	mov	r0, r4
 8012376:	f000 fc1d 	bl	8012bb4 <__pow5mult>
 801237a:	9b07      	ldr	r3, [sp, #28]
 801237c:	2b01      	cmp	r3, #1
 801237e:	4606      	mov	r6, r0
 8012380:	dd7a      	ble.n	8012478 <_dtoa_r+0x8d0>
 8012382:	f04f 0800 	mov.w	r8, #0
 8012386:	6933      	ldr	r3, [r6, #16]
 8012388:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801238c:	6918      	ldr	r0, [r3, #16]
 801238e:	f000 fb03 	bl	8012998 <__hi0bits>
 8012392:	f1c0 0020 	rsb	r0, r0, #32
 8012396:	9b06      	ldr	r3, [sp, #24]
 8012398:	4418      	add	r0, r3
 801239a:	f010 001f 	ands.w	r0, r0, #31
 801239e:	f000 8094 	beq.w	80124ca <_dtoa_r+0x922>
 80123a2:	f1c0 0320 	rsb	r3, r0, #32
 80123a6:	2b04      	cmp	r3, #4
 80123a8:	f340 8085 	ble.w	80124b6 <_dtoa_r+0x90e>
 80123ac:	9b05      	ldr	r3, [sp, #20]
 80123ae:	f1c0 001c 	rsb	r0, r0, #28
 80123b2:	4403      	add	r3, r0
 80123b4:	9305      	str	r3, [sp, #20]
 80123b6:	9b06      	ldr	r3, [sp, #24]
 80123b8:	4403      	add	r3, r0
 80123ba:	4405      	add	r5, r0
 80123bc:	9306      	str	r3, [sp, #24]
 80123be:	9b05      	ldr	r3, [sp, #20]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	dd05      	ble.n	80123d0 <_dtoa_r+0x828>
 80123c4:	4651      	mov	r1, sl
 80123c6:	461a      	mov	r2, r3
 80123c8:	4620      	mov	r0, r4
 80123ca:	f000 fc4d 	bl	8012c68 <__lshift>
 80123ce:	4682      	mov	sl, r0
 80123d0:	9b06      	ldr	r3, [sp, #24]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	dd05      	ble.n	80123e2 <_dtoa_r+0x83a>
 80123d6:	4631      	mov	r1, r6
 80123d8:	461a      	mov	r2, r3
 80123da:	4620      	mov	r0, r4
 80123dc:	f000 fc44 	bl	8012c68 <__lshift>
 80123e0:	4606      	mov	r6, r0
 80123e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d072      	beq.n	80124ce <_dtoa_r+0x926>
 80123e8:	4631      	mov	r1, r6
 80123ea:	4650      	mov	r0, sl
 80123ec:	f000 fca8 	bl	8012d40 <__mcmp>
 80123f0:	2800      	cmp	r0, #0
 80123f2:	da6c      	bge.n	80124ce <_dtoa_r+0x926>
 80123f4:	2300      	movs	r3, #0
 80123f6:	4651      	mov	r1, sl
 80123f8:	220a      	movs	r2, #10
 80123fa:	4620      	mov	r0, r4
 80123fc:	f000 fa86 	bl	801290c <__multadd>
 8012400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012406:	4682      	mov	sl, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 81b0 	beq.w	801276e <_dtoa_r+0xbc6>
 801240e:	2300      	movs	r3, #0
 8012410:	4639      	mov	r1, r7
 8012412:	220a      	movs	r2, #10
 8012414:	4620      	mov	r0, r4
 8012416:	f000 fa79 	bl	801290c <__multadd>
 801241a:	9b01      	ldr	r3, [sp, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	4607      	mov	r7, r0
 8012420:	f300 8096 	bgt.w	8012550 <_dtoa_r+0x9a8>
 8012424:	9b07      	ldr	r3, [sp, #28]
 8012426:	2b02      	cmp	r3, #2
 8012428:	dc59      	bgt.n	80124de <_dtoa_r+0x936>
 801242a:	e091      	b.n	8012550 <_dtoa_r+0x9a8>
 801242c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801242e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012432:	e758      	b.n	80122e6 <_dtoa_r+0x73e>
 8012434:	9b04      	ldr	r3, [sp, #16]
 8012436:	1e5e      	subs	r6, r3, #1
 8012438:	9b08      	ldr	r3, [sp, #32]
 801243a:	42b3      	cmp	r3, r6
 801243c:	bfbf      	itttt	lt
 801243e:	9b08      	ldrlt	r3, [sp, #32]
 8012440:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012442:	9608      	strlt	r6, [sp, #32]
 8012444:	1af3      	sublt	r3, r6, r3
 8012446:	bfb4      	ite	lt
 8012448:	18d2      	addlt	r2, r2, r3
 801244a:	1b9e      	subge	r6, r3, r6
 801244c:	9b04      	ldr	r3, [sp, #16]
 801244e:	bfbc      	itt	lt
 8012450:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012452:	2600      	movlt	r6, #0
 8012454:	2b00      	cmp	r3, #0
 8012456:	bfb7      	itett	lt
 8012458:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801245c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012460:	1a9d      	sublt	r5, r3, r2
 8012462:	2300      	movlt	r3, #0
 8012464:	e741      	b.n	80122ea <_dtoa_r+0x742>
 8012466:	9e08      	ldr	r6, [sp, #32]
 8012468:	9d05      	ldr	r5, [sp, #20]
 801246a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801246c:	e748      	b.n	8012300 <_dtoa_r+0x758>
 801246e:	9a08      	ldr	r2, [sp, #32]
 8012470:	e770      	b.n	8012354 <_dtoa_r+0x7ac>
 8012472:	9b07      	ldr	r3, [sp, #28]
 8012474:	2b01      	cmp	r3, #1
 8012476:	dc19      	bgt.n	80124ac <_dtoa_r+0x904>
 8012478:	9b02      	ldr	r3, [sp, #8]
 801247a:	b9bb      	cbnz	r3, 80124ac <_dtoa_r+0x904>
 801247c:	9b03      	ldr	r3, [sp, #12]
 801247e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012482:	b99b      	cbnz	r3, 80124ac <_dtoa_r+0x904>
 8012484:	9b03      	ldr	r3, [sp, #12]
 8012486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801248a:	0d1b      	lsrs	r3, r3, #20
 801248c:	051b      	lsls	r3, r3, #20
 801248e:	b183      	cbz	r3, 80124b2 <_dtoa_r+0x90a>
 8012490:	9b05      	ldr	r3, [sp, #20]
 8012492:	3301      	adds	r3, #1
 8012494:	9305      	str	r3, [sp, #20]
 8012496:	9b06      	ldr	r3, [sp, #24]
 8012498:	3301      	adds	r3, #1
 801249a:	9306      	str	r3, [sp, #24]
 801249c:	f04f 0801 	mov.w	r8, #1
 80124a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f47f af6f 	bne.w	8012386 <_dtoa_r+0x7de>
 80124a8:	2001      	movs	r0, #1
 80124aa:	e774      	b.n	8012396 <_dtoa_r+0x7ee>
 80124ac:	f04f 0800 	mov.w	r8, #0
 80124b0:	e7f6      	b.n	80124a0 <_dtoa_r+0x8f8>
 80124b2:	4698      	mov	r8, r3
 80124b4:	e7f4      	b.n	80124a0 <_dtoa_r+0x8f8>
 80124b6:	d082      	beq.n	80123be <_dtoa_r+0x816>
 80124b8:	9a05      	ldr	r2, [sp, #20]
 80124ba:	331c      	adds	r3, #28
 80124bc:	441a      	add	r2, r3
 80124be:	9205      	str	r2, [sp, #20]
 80124c0:	9a06      	ldr	r2, [sp, #24]
 80124c2:	441a      	add	r2, r3
 80124c4:	441d      	add	r5, r3
 80124c6:	9206      	str	r2, [sp, #24]
 80124c8:	e779      	b.n	80123be <_dtoa_r+0x816>
 80124ca:	4603      	mov	r3, r0
 80124cc:	e7f4      	b.n	80124b8 <_dtoa_r+0x910>
 80124ce:	9b04      	ldr	r3, [sp, #16]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	dc37      	bgt.n	8012544 <_dtoa_r+0x99c>
 80124d4:	9b07      	ldr	r3, [sp, #28]
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	dd34      	ble.n	8012544 <_dtoa_r+0x99c>
 80124da:	9b04      	ldr	r3, [sp, #16]
 80124dc:	9301      	str	r3, [sp, #4]
 80124de:	9b01      	ldr	r3, [sp, #4]
 80124e0:	b963      	cbnz	r3, 80124fc <_dtoa_r+0x954>
 80124e2:	4631      	mov	r1, r6
 80124e4:	2205      	movs	r2, #5
 80124e6:	4620      	mov	r0, r4
 80124e8:	f000 fa10 	bl	801290c <__multadd>
 80124ec:	4601      	mov	r1, r0
 80124ee:	4606      	mov	r6, r0
 80124f0:	4650      	mov	r0, sl
 80124f2:	f000 fc25 	bl	8012d40 <__mcmp>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	f73f adbb 	bgt.w	8012072 <_dtoa_r+0x4ca>
 80124fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124fe:	9d00      	ldr	r5, [sp, #0]
 8012500:	ea6f 0b03 	mvn.w	fp, r3
 8012504:	f04f 0800 	mov.w	r8, #0
 8012508:	4631      	mov	r1, r6
 801250a:	4620      	mov	r0, r4
 801250c:	f000 f9dc 	bl	80128c8 <_Bfree>
 8012510:	2f00      	cmp	r7, #0
 8012512:	f43f aeab 	beq.w	801226c <_dtoa_r+0x6c4>
 8012516:	f1b8 0f00 	cmp.w	r8, #0
 801251a:	d005      	beq.n	8012528 <_dtoa_r+0x980>
 801251c:	45b8      	cmp	r8, r7
 801251e:	d003      	beq.n	8012528 <_dtoa_r+0x980>
 8012520:	4641      	mov	r1, r8
 8012522:	4620      	mov	r0, r4
 8012524:	f000 f9d0 	bl	80128c8 <_Bfree>
 8012528:	4639      	mov	r1, r7
 801252a:	4620      	mov	r0, r4
 801252c:	f000 f9cc 	bl	80128c8 <_Bfree>
 8012530:	e69c      	b.n	801226c <_dtoa_r+0x6c4>
 8012532:	2600      	movs	r6, #0
 8012534:	4637      	mov	r7, r6
 8012536:	e7e1      	b.n	80124fc <_dtoa_r+0x954>
 8012538:	46bb      	mov	fp, r7
 801253a:	4637      	mov	r7, r6
 801253c:	e599      	b.n	8012072 <_dtoa_r+0x4ca>
 801253e:	bf00      	nop
 8012540:	40240000 	.word	0x40240000
 8012544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 80c8 	beq.w	80126dc <_dtoa_r+0xb34>
 801254c:	9b04      	ldr	r3, [sp, #16]
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	2d00      	cmp	r5, #0
 8012552:	dd05      	ble.n	8012560 <_dtoa_r+0x9b8>
 8012554:	4639      	mov	r1, r7
 8012556:	462a      	mov	r2, r5
 8012558:	4620      	mov	r0, r4
 801255a:	f000 fb85 	bl	8012c68 <__lshift>
 801255e:	4607      	mov	r7, r0
 8012560:	f1b8 0f00 	cmp.w	r8, #0
 8012564:	d05b      	beq.n	801261e <_dtoa_r+0xa76>
 8012566:	6879      	ldr	r1, [r7, #4]
 8012568:	4620      	mov	r0, r4
 801256a:	f000 f96d 	bl	8012848 <_Balloc>
 801256e:	4605      	mov	r5, r0
 8012570:	b928      	cbnz	r0, 801257e <_dtoa_r+0x9d6>
 8012572:	4b83      	ldr	r3, [pc, #524]	; (8012780 <_dtoa_r+0xbd8>)
 8012574:	4602      	mov	r2, r0
 8012576:	f240 21ef 	movw	r1, #751	; 0x2ef
 801257a:	f7ff bb2e 	b.w	8011bda <_dtoa_r+0x32>
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	3202      	adds	r2, #2
 8012582:	0092      	lsls	r2, r2, #2
 8012584:	f107 010c 	add.w	r1, r7, #12
 8012588:	300c      	adds	r0, #12
 801258a:	f7ff fa58 	bl	8011a3e <memcpy>
 801258e:	2201      	movs	r2, #1
 8012590:	4629      	mov	r1, r5
 8012592:	4620      	mov	r0, r4
 8012594:	f000 fb68 	bl	8012c68 <__lshift>
 8012598:	9b00      	ldr	r3, [sp, #0]
 801259a:	3301      	adds	r3, #1
 801259c:	9304      	str	r3, [sp, #16]
 801259e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125a2:	4413      	add	r3, r2
 80125a4:	9308      	str	r3, [sp, #32]
 80125a6:	9b02      	ldr	r3, [sp, #8]
 80125a8:	f003 0301 	and.w	r3, r3, #1
 80125ac:	46b8      	mov	r8, r7
 80125ae:	9306      	str	r3, [sp, #24]
 80125b0:	4607      	mov	r7, r0
 80125b2:	9b04      	ldr	r3, [sp, #16]
 80125b4:	4631      	mov	r1, r6
 80125b6:	3b01      	subs	r3, #1
 80125b8:	4650      	mov	r0, sl
 80125ba:	9301      	str	r3, [sp, #4]
 80125bc:	f7ff fa6c 	bl	8011a98 <quorem>
 80125c0:	4641      	mov	r1, r8
 80125c2:	9002      	str	r0, [sp, #8]
 80125c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80125c8:	4650      	mov	r0, sl
 80125ca:	f000 fbb9 	bl	8012d40 <__mcmp>
 80125ce:	463a      	mov	r2, r7
 80125d0:	9005      	str	r0, [sp, #20]
 80125d2:	4631      	mov	r1, r6
 80125d4:	4620      	mov	r0, r4
 80125d6:	f000 fbcf 	bl	8012d78 <__mdiff>
 80125da:	68c2      	ldr	r2, [r0, #12]
 80125dc:	4605      	mov	r5, r0
 80125de:	bb02      	cbnz	r2, 8012622 <_dtoa_r+0xa7a>
 80125e0:	4601      	mov	r1, r0
 80125e2:	4650      	mov	r0, sl
 80125e4:	f000 fbac 	bl	8012d40 <__mcmp>
 80125e8:	4602      	mov	r2, r0
 80125ea:	4629      	mov	r1, r5
 80125ec:	4620      	mov	r0, r4
 80125ee:	9209      	str	r2, [sp, #36]	; 0x24
 80125f0:	f000 f96a 	bl	80128c8 <_Bfree>
 80125f4:	9b07      	ldr	r3, [sp, #28]
 80125f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125f8:	9d04      	ldr	r5, [sp, #16]
 80125fa:	ea43 0102 	orr.w	r1, r3, r2
 80125fe:	9b06      	ldr	r3, [sp, #24]
 8012600:	4319      	orrs	r1, r3
 8012602:	d110      	bne.n	8012626 <_dtoa_r+0xa7e>
 8012604:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012608:	d029      	beq.n	801265e <_dtoa_r+0xab6>
 801260a:	9b05      	ldr	r3, [sp, #20]
 801260c:	2b00      	cmp	r3, #0
 801260e:	dd02      	ble.n	8012616 <_dtoa_r+0xa6e>
 8012610:	9b02      	ldr	r3, [sp, #8]
 8012612:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012616:	9b01      	ldr	r3, [sp, #4]
 8012618:	f883 9000 	strb.w	r9, [r3]
 801261c:	e774      	b.n	8012508 <_dtoa_r+0x960>
 801261e:	4638      	mov	r0, r7
 8012620:	e7ba      	b.n	8012598 <_dtoa_r+0x9f0>
 8012622:	2201      	movs	r2, #1
 8012624:	e7e1      	b.n	80125ea <_dtoa_r+0xa42>
 8012626:	9b05      	ldr	r3, [sp, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	db04      	blt.n	8012636 <_dtoa_r+0xa8e>
 801262c:	9907      	ldr	r1, [sp, #28]
 801262e:	430b      	orrs	r3, r1
 8012630:	9906      	ldr	r1, [sp, #24]
 8012632:	430b      	orrs	r3, r1
 8012634:	d120      	bne.n	8012678 <_dtoa_r+0xad0>
 8012636:	2a00      	cmp	r2, #0
 8012638:	dded      	ble.n	8012616 <_dtoa_r+0xa6e>
 801263a:	4651      	mov	r1, sl
 801263c:	2201      	movs	r2, #1
 801263e:	4620      	mov	r0, r4
 8012640:	f000 fb12 	bl	8012c68 <__lshift>
 8012644:	4631      	mov	r1, r6
 8012646:	4682      	mov	sl, r0
 8012648:	f000 fb7a 	bl	8012d40 <__mcmp>
 801264c:	2800      	cmp	r0, #0
 801264e:	dc03      	bgt.n	8012658 <_dtoa_r+0xab0>
 8012650:	d1e1      	bne.n	8012616 <_dtoa_r+0xa6e>
 8012652:	f019 0f01 	tst.w	r9, #1
 8012656:	d0de      	beq.n	8012616 <_dtoa_r+0xa6e>
 8012658:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801265c:	d1d8      	bne.n	8012610 <_dtoa_r+0xa68>
 801265e:	9a01      	ldr	r2, [sp, #4]
 8012660:	2339      	movs	r3, #57	; 0x39
 8012662:	7013      	strb	r3, [r2, #0]
 8012664:	462b      	mov	r3, r5
 8012666:	461d      	mov	r5, r3
 8012668:	3b01      	subs	r3, #1
 801266a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801266e:	2a39      	cmp	r2, #57	; 0x39
 8012670:	d06c      	beq.n	801274c <_dtoa_r+0xba4>
 8012672:	3201      	adds	r2, #1
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	e747      	b.n	8012508 <_dtoa_r+0x960>
 8012678:	2a00      	cmp	r2, #0
 801267a:	dd07      	ble.n	801268c <_dtoa_r+0xae4>
 801267c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012680:	d0ed      	beq.n	801265e <_dtoa_r+0xab6>
 8012682:	9a01      	ldr	r2, [sp, #4]
 8012684:	f109 0301 	add.w	r3, r9, #1
 8012688:	7013      	strb	r3, [r2, #0]
 801268a:	e73d      	b.n	8012508 <_dtoa_r+0x960>
 801268c:	9b04      	ldr	r3, [sp, #16]
 801268e:	9a08      	ldr	r2, [sp, #32]
 8012690:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012694:	4293      	cmp	r3, r2
 8012696:	d043      	beq.n	8012720 <_dtoa_r+0xb78>
 8012698:	4651      	mov	r1, sl
 801269a:	2300      	movs	r3, #0
 801269c:	220a      	movs	r2, #10
 801269e:	4620      	mov	r0, r4
 80126a0:	f000 f934 	bl	801290c <__multadd>
 80126a4:	45b8      	cmp	r8, r7
 80126a6:	4682      	mov	sl, r0
 80126a8:	f04f 0300 	mov.w	r3, #0
 80126ac:	f04f 020a 	mov.w	r2, #10
 80126b0:	4641      	mov	r1, r8
 80126b2:	4620      	mov	r0, r4
 80126b4:	d107      	bne.n	80126c6 <_dtoa_r+0xb1e>
 80126b6:	f000 f929 	bl	801290c <__multadd>
 80126ba:	4680      	mov	r8, r0
 80126bc:	4607      	mov	r7, r0
 80126be:	9b04      	ldr	r3, [sp, #16]
 80126c0:	3301      	adds	r3, #1
 80126c2:	9304      	str	r3, [sp, #16]
 80126c4:	e775      	b.n	80125b2 <_dtoa_r+0xa0a>
 80126c6:	f000 f921 	bl	801290c <__multadd>
 80126ca:	4639      	mov	r1, r7
 80126cc:	4680      	mov	r8, r0
 80126ce:	2300      	movs	r3, #0
 80126d0:	220a      	movs	r2, #10
 80126d2:	4620      	mov	r0, r4
 80126d4:	f000 f91a 	bl	801290c <__multadd>
 80126d8:	4607      	mov	r7, r0
 80126da:	e7f0      	b.n	80126be <_dtoa_r+0xb16>
 80126dc:	9b04      	ldr	r3, [sp, #16]
 80126de:	9301      	str	r3, [sp, #4]
 80126e0:	9d00      	ldr	r5, [sp, #0]
 80126e2:	4631      	mov	r1, r6
 80126e4:	4650      	mov	r0, sl
 80126e6:	f7ff f9d7 	bl	8011a98 <quorem>
 80126ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80126ee:	9b00      	ldr	r3, [sp, #0]
 80126f0:	f805 9b01 	strb.w	r9, [r5], #1
 80126f4:	1aea      	subs	r2, r5, r3
 80126f6:	9b01      	ldr	r3, [sp, #4]
 80126f8:	4293      	cmp	r3, r2
 80126fa:	dd07      	ble.n	801270c <_dtoa_r+0xb64>
 80126fc:	4651      	mov	r1, sl
 80126fe:	2300      	movs	r3, #0
 8012700:	220a      	movs	r2, #10
 8012702:	4620      	mov	r0, r4
 8012704:	f000 f902 	bl	801290c <__multadd>
 8012708:	4682      	mov	sl, r0
 801270a:	e7ea      	b.n	80126e2 <_dtoa_r+0xb3a>
 801270c:	9b01      	ldr	r3, [sp, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	bfc8      	it	gt
 8012712:	461d      	movgt	r5, r3
 8012714:	9b00      	ldr	r3, [sp, #0]
 8012716:	bfd8      	it	le
 8012718:	2501      	movle	r5, #1
 801271a:	441d      	add	r5, r3
 801271c:	f04f 0800 	mov.w	r8, #0
 8012720:	4651      	mov	r1, sl
 8012722:	2201      	movs	r2, #1
 8012724:	4620      	mov	r0, r4
 8012726:	f000 fa9f 	bl	8012c68 <__lshift>
 801272a:	4631      	mov	r1, r6
 801272c:	4682      	mov	sl, r0
 801272e:	f000 fb07 	bl	8012d40 <__mcmp>
 8012732:	2800      	cmp	r0, #0
 8012734:	dc96      	bgt.n	8012664 <_dtoa_r+0xabc>
 8012736:	d102      	bne.n	801273e <_dtoa_r+0xb96>
 8012738:	f019 0f01 	tst.w	r9, #1
 801273c:	d192      	bne.n	8012664 <_dtoa_r+0xabc>
 801273e:	462b      	mov	r3, r5
 8012740:	461d      	mov	r5, r3
 8012742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012746:	2a30      	cmp	r2, #48	; 0x30
 8012748:	d0fa      	beq.n	8012740 <_dtoa_r+0xb98>
 801274a:	e6dd      	b.n	8012508 <_dtoa_r+0x960>
 801274c:	9a00      	ldr	r2, [sp, #0]
 801274e:	429a      	cmp	r2, r3
 8012750:	d189      	bne.n	8012666 <_dtoa_r+0xabe>
 8012752:	f10b 0b01 	add.w	fp, fp, #1
 8012756:	2331      	movs	r3, #49	; 0x31
 8012758:	e796      	b.n	8012688 <_dtoa_r+0xae0>
 801275a:	4b0a      	ldr	r3, [pc, #40]	; (8012784 <_dtoa_r+0xbdc>)
 801275c:	f7ff ba99 	b.w	8011c92 <_dtoa_r+0xea>
 8012760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012762:	2b00      	cmp	r3, #0
 8012764:	f47f aa6d 	bne.w	8011c42 <_dtoa_r+0x9a>
 8012768:	4b07      	ldr	r3, [pc, #28]	; (8012788 <_dtoa_r+0xbe0>)
 801276a:	f7ff ba92 	b.w	8011c92 <_dtoa_r+0xea>
 801276e:	9b01      	ldr	r3, [sp, #4]
 8012770:	2b00      	cmp	r3, #0
 8012772:	dcb5      	bgt.n	80126e0 <_dtoa_r+0xb38>
 8012774:	9b07      	ldr	r3, [sp, #28]
 8012776:	2b02      	cmp	r3, #2
 8012778:	f73f aeb1 	bgt.w	80124de <_dtoa_r+0x936>
 801277c:	e7b0      	b.n	80126e0 <_dtoa_r+0xb38>
 801277e:	bf00      	nop
 8012780:	08058319 	.word	0x08058319
 8012784:	080584ab 	.word	0x080584ab
 8012788:	080582b4 	.word	0x080582b4

0801278c <_free_r>:
 801278c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801278e:	2900      	cmp	r1, #0
 8012790:	d044      	beq.n	801281c <_free_r+0x90>
 8012792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012796:	9001      	str	r0, [sp, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	f1a1 0404 	sub.w	r4, r1, #4
 801279e:	bfb8      	it	lt
 80127a0:	18e4      	addlt	r4, r4, r3
 80127a2:	f7fe f9bf 	bl	8010b24 <__malloc_lock>
 80127a6:	4a1e      	ldr	r2, [pc, #120]	; (8012820 <_free_r+0x94>)
 80127a8:	9801      	ldr	r0, [sp, #4]
 80127aa:	6813      	ldr	r3, [r2, #0]
 80127ac:	b933      	cbnz	r3, 80127bc <_free_r+0x30>
 80127ae:	6063      	str	r3, [r4, #4]
 80127b0:	6014      	str	r4, [r2, #0]
 80127b2:	b003      	add	sp, #12
 80127b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127b8:	f7fe b9ba 	b.w	8010b30 <__malloc_unlock>
 80127bc:	42a3      	cmp	r3, r4
 80127be:	d908      	bls.n	80127d2 <_free_r+0x46>
 80127c0:	6825      	ldr	r5, [r4, #0]
 80127c2:	1961      	adds	r1, r4, r5
 80127c4:	428b      	cmp	r3, r1
 80127c6:	bf01      	itttt	eq
 80127c8:	6819      	ldreq	r1, [r3, #0]
 80127ca:	685b      	ldreq	r3, [r3, #4]
 80127cc:	1949      	addeq	r1, r1, r5
 80127ce:	6021      	streq	r1, [r4, #0]
 80127d0:	e7ed      	b.n	80127ae <_free_r+0x22>
 80127d2:	461a      	mov	r2, r3
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	b10b      	cbz	r3, 80127dc <_free_r+0x50>
 80127d8:	42a3      	cmp	r3, r4
 80127da:	d9fa      	bls.n	80127d2 <_free_r+0x46>
 80127dc:	6811      	ldr	r1, [r2, #0]
 80127de:	1855      	adds	r5, r2, r1
 80127e0:	42a5      	cmp	r5, r4
 80127e2:	d10b      	bne.n	80127fc <_free_r+0x70>
 80127e4:	6824      	ldr	r4, [r4, #0]
 80127e6:	4421      	add	r1, r4
 80127e8:	1854      	adds	r4, r2, r1
 80127ea:	42a3      	cmp	r3, r4
 80127ec:	6011      	str	r1, [r2, #0]
 80127ee:	d1e0      	bne.n	80127b2 <_free_r+0x26>
 80127f0:	681c      	ldr	r4, [r3, #0]
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	6053      	str	r3, [r2, #4]
 80127f6:	440c      	add	r4, r1
 80127f8:	6014      	str	r4, [r2, #0]
 80127fa:	e7da      	b.n	80127b2 <_free_r+0x26>
 80127fc:	d902      	bls.n	8012804 <_free_r+0x78>
 80127fe:	230c      	movs	r3, #12
 8012800:	6003      	str	r3, [r0, #0]
 8012802:	e7d6      	b.n	80127b2 <_free_r+0x26>
 8012804:	6825      	ldr	r5, [r4, #0]
 8012806:	1961      	adds	r1, r4, r5
 8012808:	428b      	cmp	r3, r1
 801280a:	bf04      	itt	eq
 801280c:	6819      	ldreq	r1, [r3, #0]
 801280e:	685b      	ldreq	r3, [r3, #4]
 8012810:	6063      	str	r3, [r4, #4]
 8012812:	bf04      	itt	eq
 8012814:	1949      	addeq	r1, r1, r5
 8012816:	6021      	streq	r1, [r4, #0]
 8012818:	6054      	str	r4, [r2, #4]
 801281a:	e7ca      	b.n	80127b2 <_free_r+0x26>
 801281c:	b003      	add	sp, #12
 801281e:	bd30      	pop	{r4, r5, pc}
 8012820:	20003d84 	.word	0x20003d84

08012824 <__ascii_mbtowc>:
 8012824:	b082      	sub	sp, #8
 8012826:	b901      	cbnz	r1, 801282a <__ascii_mbtowc+0x6>
 8012828:	a901      	add	r1, sp, #4
 801282a:	b142      	cbz	r2, 801283e <__ascii_mbtowc+0x1a>
 801282c:	b14b      	cbz	r3, 8012842 <__ascii_mbtowc+0x1e>
 801282e:	7813      	ldrb	r3, [r2, #0]
 8012830:	600b      	str	r3, [r1, #0]
 8012832:	7812      	ldrb	r2, [r2, #0]
 8012834:	1e10      	subs	r0, r2, #0
 8012836:	bf18      	it	ne
 8012838:	2001      	movne	r0, #1
 801283a:	b002      	add	sp, #8
 801283c:	4770      	bx	lr
 801283e:	4610      	mov	r0, r2
 8012840:	e7fb      	b.n	801283a <__ascii_mbtowc+0x16>
 8012842:	f06f 0001 	mvn.w	r0, #1
 8012846:	e7f8      	b.n	801283a <__ascii_mbtowc+0x16>

08012848 <_Balloc>:
 8012848:	b570      	push	{r4, r5, r6, lr}
 801284a:	69c6      	ldr	r6, [r0, #28]
 801284c:	4604      	mov	r4, r0
 801284e:	460d      	mov	r5, r1
 8012850:	b976      	cbnz	r6, 8012870 <_Balloc+0x28>
 8012852:	2010      	movs	r0, #16
 8012854:	f7fe f8b6 	bl	80109c4 <malloc>
 8012858:	4602      	mov	r2, r0
 801285a:	61e0      	str	r0, [r4, #28]
 801285c:	b920      	cbnz	r0, 8012868 <_Balloc+0x20>
 801285e:	4b18      	ldr	r3, [pc, #96]	; (80128c0 <_Balloc+0x78>)
 8012860:	4818      	ldr	r0, [pc, #96]	; (80128c4 <_Balloc+0x7c>)
 8012862:	216b      	movs	r1, #107	; 0x6b
 8012864:	f7ff f8fa 	bl	8011a5c <__assert_func>
 8012868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801286c:	6006      	str	r6, [r0, #0]
 801286e:	60c6      	str	r6, [r0, #12]
 8012870:	69e6      	ldr	r6, [r4, #28]
 8012872:	68f3      	ldr	r3, [r6, #12]
 8012874:	b183      	cbz	r3, 8012898 <_Balloc+0x50>
 8012876:	69e3      	ldr	r3, [r4, #28]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801287e:	b9b8      	cbnz	r0, 80128b0 <_Balloc+0x68>
 8012880:	2101      	movs	r1, #1
 8012882:	fa01 f605 	lsl.w	r6, r1, r5
 8012886:	1d72      	adds	r2, r6, #5
 8012888:	0092      	lsls	r2, r2, #2
 801288a:	4620      	mov	r0, r4
 801288c:	f001 fb0b 	bl	8013ea6 <_calloc_r>
 8012890:	b160      	cbz	r0, 80128ac <_Balloc+0x64>
 8012892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012896:	e00e      	b.n	80128b6 <_Balloc+0x6e>
 8012898:	2221      	movs	r2, #33	; 0x21
 801289a:	2104      	movs	r1, #4
 801289c:	4620      	mov	r0, r4
 801289e:	f001 fb02 	bl	8013ea6 <_calloc_r>
 80128a2:	69e3      	ldr	r3, [r4, #28]
 80128a4:	60f0      	str	r0, [r6, #12]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1e4      	bne.n	8012876 <_Balloc+0x2e>
 80128ac:	2000      	movs	r0, #0
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	6802      	ldr	r2, [r0, #0]
 80128b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80128b6:	2300      	movs	r3, #0
 80128b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80128bc:	e7f7      	b.n	80128ae <_Balloc+0x66>
 80128be:	bf00      	nop
 80128c0:	080581fd 	.word	0x080581fd
 80128c4:	0805832a 	.word	0x0805832a

080128c8 <_Bfree>:
 80128c8:	b570      	push	{r4, r5, r6, lr}
 80128ca:	69c6      	ldr	r6, [r0, #28]
 80128cc:	4605      	mov	r5, r0
 80128ce:	460c      	mov	r4, r1
 80128d0:	b976      	cbnz	r6, 80128f0 <_Bfree+0x28>
 80128d2:	2010      	movs	r0, #16
 80128d4:	f7fe f876 	bl	80109c4 <malloc>
 80128d8:	4602      	mov	r2, r0
 80128da:	61e8      	str	r0, [r5, #28]
 80128dc:	b920      	cbnz	r0, 80128e8 <_Bfree+0x20>
 80128de:	4b09      	ldr	r3, [pc, #36]	; (8012904 <_Bfree+0x3c>)
 80128e0:	4809      	ldr	r0, [pc, #36]	; (8012908 <_Bfree+0x40>)
 80128e2:	218f      	movs	r1, #143	; 0x8f
 80128e4:	f7ff f8ba 	bl	8011a5c <__assert_func>
 80128e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128ec:	6006      	str	r6, [r0, #0]
 80128ee:	60c6      	str	r6, [r0, #12]
 80128f0:	b13c      	cbz	r4, 8012902 <_Bfree+0x3a>
 80128f2:	69eb      	ldr	r3, [r5, #28]
 80128f4:	6862      	ldr	r2, [r4, #4]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128fc:	6021      	str	r1, [r4, #0]
 80128fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	080581fd 	.word	0x080581fd
 8012908:	0805832a 	.word	0x0805832a

0801290c <__multadd>:
 801290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012910:	690d      	ldr	r5, [r1, #16]
 8012912:	4607      	mov	r7, r0
 8012914:	460c      	mov	r4, r1
 8012916:	461e      	mov	r6, r3
 8012918:	f101 0c14 	add.w	ip, r1, #20
 801291c:	2000      	movs	r0, #0
 801291e:	f8dc 3000 	ldr.w	r3, [ip]
 8012922:	b299      	uxth	r1, r3
 8012924:	fb02 6101 	mla	r1, r2, r1, r6
 8012928:	0c1e      	lsrs	r6, r3, #16
 801292a:	0c0b      	lsrs	r3, r1, #16
 801292c:	fb02 3306 	mla	r3, r2, r6, r3
 8012930:	b289      	uxth	r1, r1
 8012932:	3001      	adds	r0, #1
 8012934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012938:	4285      	cmp	r5, r0
 801293a:	f84c 1b04 	str.w	r1, [ip], #4
 801293e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012942:	dcec      	bgt.n	801291e <__multadd+0x12>
 8012944:	b30e      	cbz	r6, 801298a <__multadd+0x7e>
 8012946:	68a3      	ldr	r3, [r4, #8]
 8012948:	42ab      	cmp	r3, r5
 801294a:	dc19      	bgt.n	8012980 <__multadd+0x74>
 801294c:	6861      	ldr	r1, [r4, #4]
 801294e:	4638      	mov	r0, r7
 8012950:	3101      	adds	r1, #1
 8012952:	f7ff ff79 	bl	8012848 <_Balloc>
 8012956:	4680      	mov	r8, r0
 8012958:	b928      	cbnz	r0, 8012966 <__multadd+0x5a>
 801295a:	4602      	mov	r2, r0
 801295c:	4b0c      	ldr	r3, [pc, #48]	; (8012990 <__multadd+0x84>)
 801295e:	480d      	ldr	r0, [pc, #52]	; (8012994 <__multadd+0x88>)
 8012960:	21ba      	movs	r1, #186	; 0xba
 8012962:	f7ff f87b 	bl	8011a5c <__assert_func>
 8012966:	6922      	ldr	r2, [r4, #16]
 8012968:	3202      	adds	r2, #2
 801296a:	f104 010c 	add.w	r1, r4, #12
 801296e:	0092      	lsls	r2, r2, #2
 8012970:	300c      	adds	r0, #12
 8012972:	f7ff f864 	bl	8011a3e <memcpy>
 8012976:	4621      	mov	r1, r4
 8012978:	4638      	mov	r0, r7
 801297a:	f7ff ffa5 	bl	80128c8 <_Bfree>
 801297e:	4644      	mov	r4, r8
 8012980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012984:	3501      	adds	r5, #1
 8012986:	615e      	str	r6, [r3, #20]
 8012988:	6125      	str	r5, [r4, #16]
 801298a:	4620      	mov	r0, r4
 801298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012990:	08058319 	.word	0x08058319
 8012994:	0805832a 	.word	0x0805832a

08012998 <__hi0bits>:
 8012998:	0c03      	lsrs	r3, r0, #16
 801299a:	041b      	lsls	r3, r3, #16
 801299c:	b9d3      	cbnz	r3, 80129d4 <__hi0bits+0x3c>
 801299e:	0400      	lsls	r0, r0, #16
 80129a0:	2310      	movs	r3, #16
 80129a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80129a6:	bf04      	itt	eq
 80129a8:	0200      	lsleq	r0, r0, #8
 80129aa:	3308      	addeq	r3, #8
 80129ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80129b0:	bf04      	itt	eq
 80129b2:	0100      	lsleq	r0, r0, #4
 80129b4:	3304      	addeq	r3, #4
 80129b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80129ba:	bf04      	itt	eq
 80129bc:	0080      	lsleq	r0, r0, #2
 80129be:	3302      	addeq	r3, #2
 80129c0:	2800      	cmp	r0, #0
 80129c2:	db05      	blt.n	80129d0 <__hi0bits+0x38>
 80129c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80129c8:	f103 0301 	add.w	r3, r3, #1
 80129cc:	bf08      	it	eq
 80129ce:	2320      	moveq	r3, #32
 80129d0:	4618      	mov	r0, r3
 80129d2:	4770      	bx	lr
 80129d4:	2300      	movs	r3, #0
 80129d6:	e7e4      	b.n	80129a2 <__hi0bits+0xa>

080129d8 <__lo0bits>:
 80129d8:	6803      	ldr	r3, [r0, #0]
 80129da:	f013 0207 	ands.w	r2, r3, #7
 80129de:	d00c      	beq.n	80129fa <__lo0bits+0x22>
 80129e0:	07d9      	lsls	r1, r3, #31
 80129e2:	d422      	bmi.n	8012a2a <__lo0bits+0x52>
 80129e4:	079a      	lsls	r2, r3, #30
 80129e6:	bf49      	itett	mi
 80129e8:	085b      	lsrmi	r3, r3, #1
 80129ea:	089b      	lsrpl	r3, r3, #2
 80129ec:	6003      	strmi	r3, [r0, #0]
 80129ee:	2201      	movmi	r2, #1
 80129f0:	bf5c      	itt	pl
 80129f2:	6003      	strpl	r3, [r0, #0]
 80129f4:	2202      	movpl	r2, #2
 80129f6:	4610      	mov	r0, r2
 80129f8:	4770      	bx	lr
 80129fa:	b299      	uxth	r1, r3
 80129fc:	b909      	cbnz	r1, 8012a02 <__lo0bits+0x2a>
 80129fe:	0c1b      	lsrs	r3, r3, #16
 8012a00:	2210      	movs	r2, #16
 8012a02:	b2d9      	uxtb	r1, r3
 8012a04:	b909      	cbnz	r1, 8012a0a <__lo0bits+0x32>
 8012a06:	3208      	adds	r2, #8
 8012a08:	0a1b      	lsrs	r3, r3, #8
 8012a0a:	0719      	lsls	r1, r3, #28
 8012a0c:	bf04      	itt	eq
 8012a0e:	091b      	lsreq	r3, r3, #4
 8012a10:	3204      	addeq	r2, #4
 8012a12:	0799      	lsls	r1, r3, #30
 8012a14:	bf04      	itt	eq
 8012a16:	089b      	lsreq	r3, r3, #2
 8012a18:	3202      	addeq	r2, #2
 8012a1a:	07d9      	lsls	r1, r3, #31
 8012a1c:	d403      	bmi.n	8012a26 <__lo0bits+0x4e>
 8012a1e:	085b      	lsrs	r3, r3, #1
 8012a20:	f102 0201 	add.w	r2, r2, #1
 8012a24:	d003      	beq.n	8012a2e <__lo0bits+0x56>
 8012a26:	6003      	str	r3, [r0, #0]
 8012a28:	e7e5      	b.n	80129f6 <__lo0bits+0x1e>
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	e7e3      	b.n	80129f6 <__lo0bits+0x1e>
 8012a2e:	2220      	movs	r2, #32
 8012a30:	e7e1      	b.n	80129f6 <__lo0bits+0x1e>
	...

08012a34 <__i2b>:
 8012a34:	b510      	push	{r4, lr}
 8012a36:	460c      	mov	r4, r1
 8012a38:	2101      	movs	r1, #1
 8012a3a:	f7ff ff05 	bl	8012848 <_Balloc>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	b928      	cbnz	r0, 8012a4e <__i2b+0x1a>
 8012a42:	4b05      	ldr	r3, [pc, #20]	; (8012a58 <__i2b+0x24>)
 8012a44:	4805      	ldr	r0, [pc, #20]	; (8012a5c <__i2b+0x28>)
 8012a46:	f240 1145 	movw	r1, #325	; 0x145
 8012a4a:	f7ff f807 	bl	8011a5c <__assert_func>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	6144      	str	r4, [r0, #20]
 8012a52:	6103      	str	r3, [r0, #16]
 8012a54:	bd10      	pop	{r4, pc}
 8012a56:	bf00      	nop
 8012a58:	08058319 	.word	0x08058319
 8012a5c:	0805832a 	.word	0x0805832a

08012a60 <__multiply>:
 8012a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	4691      	mov	r9, r2
 8012a66:	690a      	ldr	r2, [r1, #16]
 8012a68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	bfb8      	it	lt
 8012a70:	460b      	movlt	r3, r1
 8012a72:	460c      	mov	r4, r1
 8012a74:	bfbc      	itt	lt
 8012a76:	464c      	movlt	r4, r9
 8012a78:	4699      	movlt	r9, r3
 8012a7a:	6927      	ldr	r7, [r4, #16]
 8012a7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	6861      	ldr	r1, [r4, #4]
 8012a84:	eb07 060a 	add.w	r6, r7, sl
 8012a88:	42b3      	cmp	r3, r6
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	bfb8      	it	lt
 8012a8e:	3101      	addlt	r1, #1
 8012a90:	f7ff feda 	bl	8012848 <_Balloc>
 8012a94:	b930      	cbnz	r0, 8012aa4 <__multiply+0x44>
 8012a96:	4602      	mov	r2, r0
 8012a98:	4b44      	ldr	r3, [pc, #272]	; (8012bac <__multiply+0x14c>)
 8012a9a:	4845      	ldr	r0, [pc, #276]	; (8012bb0 <__multiply+0x150>)
 8012a9c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012aa0:	f7fe ffdc 	bl	8011a5c <__assert_func>
 8012aa4:	f100 0514 	add.w	r5, r0, #20
 8012aa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012aac:	462b      	mov	r3, r5
 8012aae:	2200      	movs	r2, #0
 8012ab0:	4543      	cmp	r3, r8
 8012ab2:	d321      	bcc.n	8012af8 <__multiply+0x98>
 8012ab4:	f104 0314 	add.w	r3, r4, #20
 8012ab8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012abc:	f109 0314 	add.w	r3, r9, #20
 8012ac0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012ac4:	9202      	str	r2, [sp, #8]
 8012ac6:	1b3a      	subs	r2, r7, r4
 8012ac8:	3a15      	subs	r2, #21
 8012aca:	f022 0203 	bic.w	r2, r2, #3
 8012ace:	3204      	adds	r2, #4
 8012ad0:	f104 0115 	add.w	r1, r4, #21
 8012ad4:	428f      	cmp	r7, r1
 8012ad6:	bf38      	it	cc
 8012ad8:	2204      	movcc	r2, #4
 8012ada:	9201      	str	r2, [sp, #4]
 8012adc:	9a02      	ldr	r2, [sp, #8]
 8012ade:	9303      	str	r3, [sp, #12]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d80c      	bhi.n	8012afe <__multiply+0x9e>
 8012ae4:	2e00      	cmp	r6, #0
 8012ae6:	dd03      	ble.n	8012af0 <__multiply+0x90>
 8012ae8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d05b      	beq.n	8012ba8 <__multiply+0x148>
 8012af0:	6106      	str	r6, [r0, #16]
 8012af2:	b005      	add	sp, #20
 8012af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af8:	f843 2b04 	str.w	r2, [r3], #4
 8012afc:	e7d8      	b.n	8012ab0 <__multiply+0x50>
 8012afe:	f8b3 a000 	ldrh.w	sl, [r3]
 8012b02:	f1ba 0f00 	cmp.w	sl, #0
 8012b06:	d024      	beq.n	8012b52 <__multiply+0xf2>
 8012b08:	f104 0e14 	add.w	lr, r4, #20
 8012b0c:	46a9      	mov	r9, r5
 8012b0e:	f04f 0c00 	mov.w	ip, #0
 8012b12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012b16:	f8d9 1000 	ldr.w	r1, [r9]
 8012b1a:	fa1f fb82 	uxth.w	fp, r2
 8012b1e:	b289      	uxth	r1, r1
 8012b20:	fb0a 110b 	mla	r1, sl, fp, r1
 8012b24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012b28:	f8d9 2000 	ldr.w	r2, [r9]
 8012b2c:	4461      	add	r1, ip
 8012b2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012b32:	fb0a c20b 	mla	r2, sl, fp, ip
 8012b36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012b3a:	b289      	uxth	r1, r1
 8012b3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012b40:	4577      	cmp	r7, lr
 8012b42:	f849 1b04 	str.w	r1, [r9], #4
 8012b46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012b4a:	d8e2      	bhi.n	8012b12 <__multiply+0xb2>
 8012b4c:	9a01      	ldr	r2, [sp, #4]
 8012b4e:	f845 c002 	str.w	ip, [r5, r2]
 8012b52:	9a03      	ldr	r2, [sp, #12]
 8012b54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012b58:	3304      	adds	r3, #4
 8012b5a:	f1b9 0f00 	cmp.w	r9, #0
 8012b5e:	d021      	beq.n	8012ba4 <__multiply+0x144>
 8012b60:	6829      	ldr	r1, [r5, #0]
 8012b62:	f104 0c14 	add.w	ip, r4, #20
 8012b66:	46ae      	mov	lr, r5
 8012b68:	f04f 0a00 	mov.w	sl, #0
 8012b6c:	f8bc b000 	ldrh.w	fp, [ip]
 8012b70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012b74:	fb09 220b 	mla	r2, r9, fp, r2
 8012b78:	4452      	add	r2, sl
 8012b7a:	b289      	uxth	r1, r1
 8012b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012b80:	f84e 1b04 	str.w	r1, [lr], #4
 8012b84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012b88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b8c:	f8be 1000 	ldrh.w	r1, [lr]
 8012b90:	fb09 110a 	mla	r1, r9, sl, r1
 8012b94:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012b98:	4567      	cmp	r7, ip
 8012b9a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b9e:	d8e5      	bhi.n	8012b6c <__multiply+0x10c>
 8012ba0:	9a01      	ldr	r2, [sp, #4]
 8012ba2:	50a9      	str	r1, [r5, r2]
 8012ba4:	3504      	adds	r5, #4
 8012ba6:	e799      	b.n	8012adc <__multiply+0x7c>
 8012ba8:	3e01      	subs	r6, #1
 8012baa:	e79b      	b.n	8012ae4 <__multiply+0x84>
 8012bac:	08058319 	.word	0x08058319
 8012bb0:	0805832a 	.word	0x0805832a

08012bb4 <__pow5mult>:
 8012bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bb8:	4615      	mov	r5, r2
 8012bba:	f012 0203 	ands.w	r2, r2, #3
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	460f      	mov	r7, r1
 8012bc2:	d007      	beq.n	8012bd4 <__pow5mult+0x20>
 8012bc4:	4c25      	ldr	r4, [pc, #148]	; (8012c5c <__pow5mult+0xa8>)
 8012bc6:	3a01      	subs	r2, #1
 8012bc8:	2300      	movs	r3, #0
 8012bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012bce:	f7ff fe9d 	bl	801290c <__multadd>
 8012bd2:	4607      	mov	r7, r0
 8012bd4:	10ad      	asrs	r5, r5, #2
 8012bd6:	d03d      	beq.n	8012c54 <__pow5mult+0xa0>
 8012bd8:	69f4      	ldr	r4, [r6, #28]
 8012bda:	b97c      	cbnz	r4, 8012bfc <__pow5mult+0x48>
 8012bdc:	2010      	movs	r0, #16
 8012bde:	f7fd fef1 	bl	80109c4 <malloc>
 8012be2:	4602      	mov	r2, r0
 8012be4:	61f0      	str	r0, [r6, #28]
 8012be6:	b928      	cbnz	r0, 8012bf4 <__pow5mult+0x40>
 8012be8:	4b1d      	ldr	r3, [pc, #116]	; (8012c60 <__pow5mult+0xac>)
 8012bea:	481e      	ldr	r0, [pc, #120]	; (8012c64 <__pow5mult+0xb0>)
 8012bec:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012bf0:	f7fe ff34 	bl	8011a5c <__assert_func>
 8012bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012bf8:	6004      	str	r4, [r0, #0]
 8012bfa:	60c4      	str	r4, [r0, #12]
 8012bfc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c04:	b94c      	cbnz	r4, 8012c1a <__pow5mult+0x66>
 8012c06:	f240 2171 	movw	r1, #625	; 0x271
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f7ff ff12 	bl	8012a34 <__i2b>
 8012c10:	2300      	movs	r3, #0
 8012c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c16:	4604      	mov	r4, r0
 8012c18:	6003      	str	r3, [r0, #0]
 8012c1a:	f04f 0900 	mov.w	r9, #0
 8012c1e:	07eb      	lsls	r3, r5, #31
 8012c20:	d50a      	bpl.n	8012c38 <__pow5mult+0x84>
 8012c22:	4639      	mov	r1, r7
 8012c24:	4622      	mov	r2, r4
 8012c26:	4630      	mov	r0, r6
 8012c28:	f7ff ff1a 	bl	8012a60 <__multiply>
 8012c2c:	4639      	mov	r1, r7
 8012c2e:	4680      	mov	r8, r0
 8012c30:	4630      	mov	r0, r6
 8012c32:	f7ff fe49 	bl	80128c8 <_Bfree>
 8012c36:	4647      	mov	r7, r8
 8012c38:	106d      	asrs	r5, r5, #1
 8012c3a:	d00b      	beq.n	8012c54 <__pow5mult+0xa0>
 8012c3c:	6820      	ldr	r0, [r4, #0]
 8012c3e:	b938      	cbnz	r0, 8012c50 <__pow5mult+0x9c>
 8012c40:	4622      	mov	r2, r4
 8012c42:	4621      	mov	r1, r4
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7ff ff0b 	bl	8012a60 <__multiply>
 8012c4a:	6020      	str	r0, [r4, #0]
 8012c4c:	f8c0 9000 	str.w	r9, [r0]
 8012c50:	4604      	mov	r4, r0
 8012c52:	e7e4      	b.n	8012c1e <__pow5mult+0x6a>
 8012c54:	4638      	mov	r0, r7
 8012c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c5a:	bf00      	nop
 8012c5c:	08058478 	.word	0x08058478
 8012c60:	080581fd 	.word	0x080581fd
 8012c64:	0805832a 	.word	0x0805832a

08012c68 <__lshift>:
 8012c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c6c:	460c      	mov	r4, r1
 8012c6e:	6849      	ldr	r1, [r1, #4]
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c76:	68a3      	ldr	r3, [r4, #8]
 8012c78:	4607      	mov	r7, r0
 8012c7a:	4691      	mov	r9, r2
 8012c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c80:	f108 0601 	add.w	r6, r8, #1
 8012c84:	42b3      	cmp	r3, r6
 8012c86:	db0b      	blt.n	8012ca0 <__lshift+0x38>
 8012c88:	4638      	mov	r0, r7
 8012c8a:	f7ff fddd 	bl	8012848 <_Balloc>
 8012c8e:	4605      	mov	r5, r0
 8012c90:	b948      	cbnz	r0, 8012ca6 <__lshift+0x3e>
 8012c92:	4602      	mov	r2, r0
 8012c94:	4b28      	ldr	r3, [pc, #160]	; (8012d38 <__lshift+0xd0>)
 8012c96:	4829      	ldr	r0, [pc, #164]	; (8012d3c <__lshift+0xd4>)
 8012c98:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012c9c:	f7fe fede 	bl	8011a5c <__assert_func>
 8012ca0:	3101      	adds	r1, #1
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	e7ee      	b.n	8012c84 <__lshift+0x1c>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f100 0114 	add.w	r1, r0, #20
 8012cac:	f100 0210 	add.w	r2, r0, #16
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	4553      	cmp	r3, sl
 8012cb4:	db33      	blt.n	8012d1e <__lshift+0xb6>
 8012cb6:	6920      	ldr	r0, [r4, #16]
 8012cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cbc:	f104 0314 	add.w	r3, r4, #20
 8012cc0:	f019 091f 	ands.w	r9, r9, #31
 8012cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012ccc:	d02b      	beq.n	8012d26 <__lshift+0xbe>
 8012cce:	f1c9 0e20 	rsb	lr, r9, #32
 8012cd2:	468a      	mov	sl, r1
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	6818      	ldr	r0, [r3, #0]
 8012cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8012cdc:	4310      	orrs	r0, r2
 8012cde:	f84a 0b04 	str.w	r0, [sl], #4
 8012ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ce6:	459c      	cmp	ip, r3
 8012ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8012cec:	d8f3      	bhi.n	8012cd6 <__lshift+0x6e>
 8012cee:	ebac 0304 	sub.w	r3, ip, r4
 8012cf2:	3b15      	subs	r3, #21
 8012cf4:	f023 0303 	bic.w	r3, r3, #3
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	f104 0015 	add.w	r0, r4, #21
 8012cfe:	4584      	cmp	ip, r0
 8012d00:	bf38      	it	cc
 8012d02:	2304      	movcc	r3, #4
 8012d04:	50ca      	str	r2, [r1, r3]
 8012d06:	b10a      	cbz	r2, 8012d0c <__lshift+0xa4>
 8012d08:	f108 0602 	add.w	r6, r8, #2
 8012d0c:	3e01      	subs	r6, #1
 8012d0e:	4638      	mov	r0, r7
 8012d10:	612e      	str	r6, [r5, #16]
 8012d12:	4621      	mov	r1, r4
 8012d14:	f7ff fdd8 	bl	80128c8 <_Bfree>
 8012d18:	4628      	mov	r0, r5
 8012d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d22:	3301      	adds	r3, #1
 8012d24:	e7c5      	b.n	8012cb2 <__lshift+0x4a>
 8012d26:	3904      	subs	r1, #4
 8012d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d30:	459c      	cmp	ip, r3
 8012d32:	d8f9      	bhi.n	8012d28 <__lshift+0xc0>
 8012d34:	e7ea      	b.n	8012d0c <__lshift+0xa4>
 8012d36:	bf00      	nop
 8012d38:	08058319 	.word	0x08058319
 8012d3c:	0805832a 	.word	0x0805832a

08012d40 <__mcmp>:
 8012d40:	b530      	push	{r4, r5, lr}
 8012d42:	6902      	ldr	r2, [r0, #16]
 8012d44:	690c      	ldr	r4, [r1, #16]
 8012d46:	1b12      	subs	r2, r2, r4
 8012d48:	d10e      	bne.n	8012d68 <__mcmp+0x28>
 8012d4a:	f100 0314 	add.w	r3, r0, #20
 8012d4e:	3114      	adds	r1, #20
 8012d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012d60:	42a5      	cmp	r5, r4
 8012d62:	d003      	beq.n	8012d6c <__mcmp+0x2c>
 8012d64:	d305      	bcc.n	8012d72 <__mcmp+0x32>
 8012d66:	2201      	movs	r2, #1
 8012d68:	4610      	mov	r0, r2
 8012d6a:	bd30      	pop	{r4, r5, pc}
 8012d6c:	4283      	cmp	r3, r0
 8012d6e:	d3f3      	bcc.n	8012d58 <__mcmp+0x18>
 8012d70:	e7fa      	b.n	8012d68 <__mcmp+0x28>
 8012d72:	f04f 32ff 	mov.w	r2, #4294967295
 8012d76:	e7f7      	b.n	8012d68 <__mcmp+0x28>

08012d78 <__mdiff>:
 8012d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	460c      	mov	r4, r1
 8012d7e:	4606      	mov	r6, r0
 8012d80:	4611      	mov	r1, r2
 8012d82:	4620      	mov	r0, r4
 8012d84:	4690      	mov	r8, r2
 8012d86:	f7ff ffdb 	bl	8012d40 <__mcmp>
 8012d8a:	1e05      	subs	r5, r0, #0
 8012d8c:	d110      	bne.n	8012db0 <__mdiff+0x38>
 8012d8e:	4629      	mov	r1, r5
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7ff fd59 	bl	8012848 <_Balloc>
 8012d96:	b930      	cbnz	r0, 8012da6 <__mdiff+0x2e>
 8012d98:	4b3a      	ldr	r3, [pc, #232]	; (8012e84 <__mdiff+0x10c>)
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	f240 2137 	movw	r1, #567	; 0x237
 8012da0:	4839      	ldr	r0, [pc, #228]	; (8012e88 <__mdiff+0x110>)
 8012da2:	f7fe fe5b 	bl	8011a5c <__assert_func>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db0:	bfa4      	itt	ge
 8012db2:	4643      	movge	r3, r8
 8012db4:	46a0      	movge	r8, r4
 8012db6:	4630      	mov	r0, r6
 8012db8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012dbc:	bfa6      	itte	ge
 8012dbe:	461c      	movge	r4, r3
 8012dc0:	2500      	movge	r5, #0
 8012dc2:	2501      	movlt	r5, #1
 8012dc4:	f7ff fd40 	bl	8012848 <_Balloc>
 8012dc8:	b920      	cbnz	r0, 8012dd4 <__mdiff+0x5c>
 8012dca:	4b2e      	ldr	r3, [pc, #184]	; (8012e84 <__mdiff+0x10c>)
 8012dcc:	4602      	mov	r2, r0
 8012dce:	f240 2145 	movw	r1, #581	; 0x245
 8012dd2:	e7e5      	b.n	8012da0 <__mdiff+0x28>
 8012dd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012dd8:	6926      	ldr	r6, [r4, #16]
 8012dda:	60c5      	str	r5, [r0, #12]
 8012ddc:	f104 0914 	add.w	r9, r4, #20
 8012de0:	f108 0514 	add.w	r5, r8, #20
 8012de4:	f100 0e14 	add.w	lr, r0, #20
 8012de8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012dec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012df0:	f108 0210 	add.w	r2, r8, #16
 8012df4:	46f2      	mov	sl, lr
 8012df6:	2100      	movs	r1, #0
 8012df8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012dfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012e00:	fa11 f88b 	uxtah	r8, r1, fp
 8012e04:	b299      	uxth	r1, r3
 8012e06:	0c1b      	lsrs	r3, r3, #16
 8012e08:	eba8 0801 	sub.w	r8, r8, r1
 8012e0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012e10:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012e14:	fa1f f888 	uxth.w	r8, r8
 8012e18:	1419      	asrs	r1, r3, #16
 8012e1a:	454e      	cmp	r6, r9
 8012e1c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012e20:	f84a 3b04 	str.w	r3, [sl], #4
 8012e24:	d8e8      	bhi.n	8012df8 <__mdiff+0x80>
 8012e26:	1b33      	subs	r3, r6, r4
 8012e28:	3b15      	subs	r3, #21
 8012e2a:	f023 0303 	bic.w	r3, r3, #3
 8012e2e:	3304      	adds	r3, #4
 8012e30:	3415      	adds	r4, #21
 8012e32:	42a6      	cmp	r6, r4
 8012e34:	bf38      	it	cc
 8012e36:	2304      	movcc	r3, #4
 8012e38:	441d      	add	r5, r3
 8012e3a:	4473      	add	r3, lr
 8012e3c:	469e      	mov	lr, r3
 8012e3e:	462e      	mov	r6, r5
 8012e40:	4566      	cmp	r6, ip
 8012e42:	d30e      	bcc.n	8012e62 <__mdiff+0xea>
 8012e44:	f10c 0203 	add.w	r2, ip, #3
 8012e48:	1b52      	subs	r2, r2, r5
 8012e4a:	f022 0203 	bic.w	r2, r2, #3
 8012e4e:	3d03      	subs	r5, #3
 8012e50:	45ac      	cmp	ip, r5
 8012e52:	bf38      	it	cc
 8012e54:	2200      	movcc	r2, #0
 8012e56:	4413      	add	r3, r2
 8012e58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012e5c:	b17a      	cbz	r2, 8012e7e <__mdiff+0x106>
 8012e5e:	6107      	str	r7, [r0, #16]
 8012e60:	e7a4      	b.n	8012dac <__mdiff+0x34>
 8012e62:	f856 8b04 	ldr.w	r8, [r6], #4
 8012e66:	fa11 f288 	uxtah	r2, r1, r8
 8012e6a:	1414      	asrs	r4, r2, #16
 8012e6c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012e70:	b292      	uxth	r2, r2
 8012e72:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012e76:	f84e 2b04 	str.w	r2, [lr], #4
 8012e7a:	1421      	asrs	r1, r4, #16
 8012e7c:	e7e0      	b.n	8012e40 <__mdiff+0xc8>
 8012e7e:	3f01      	subs	r7, #1
 8012e80:	e7ea      	b.n	8012e58 <__mdiff+0xe0>
 8012e82:	bf00      	nop
 8012e84:	08058319 	.word	0x08058319
 8012e88:	0805832a 	.word	0x0805832a

08012e8c <__d2b>:
 8012e8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e90:	460f      	mov	r7, r1
 8012e92:	2101      	movs	r1, #1
 8012e94:	ec59 8b10 	vmov	r8, r9, d0
 8012e98:	4616      	mov	r6, r2
 8012e9a:	f7ff fcd5 	bl	8012848 <_Balloc>
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	b930      	cbnz	r0, 8012eb0 <__d2b+0x24>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	4b24      	ldr	r3, [pc, #144]	; (8012f38 <__d2b+0xac>)
 8012ea6:	4825      	ldr	r0, [pc, #148]	; (8012f3c <__d2b+0xb0>)
 8012ea8:	f240 310f 	movw	r1, #783	; 0x30f
 8012eac:	f7fe fdd6 	bl	8011a5c <__assert_func>
 8012eb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012eb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012eb8:	bb2d      	cbnz	r5, 8012f06 <__d2b+0x7a>
 8012eba:	9301      	str	r3, [sp, #4]
 8012ebc:	f1b8 0300 	subs.w	r3, r8, #0
 8012ec0:	d026      	beq.n	8012f10 <__d2b+0x84>
 8012ec2:	4668      	mov	r0, sp
 8012ec4:	9300      	str	r3, [sp, #0]
 8012ec6:	f7ff fd87 	bl	80129d8 <__lo0bits>
 8012eca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012ece:	b1e8      	cbz	r0, 8012f0c <__d2b+0x80>
 8012ed0:	f1c0 0320 	rsb	r3, r0, #32
 8012ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ed8:	430b      	orrs	r3, r1
 8012eda:	40c2      	lsrs	r2, r0
 8012edc:	6163      	str	r3, [r4, #20]
 8012ede:	9201      	str	r2, [sp, #4]
 8012ee0:	9b01      	ldr	r3, [sp, #4]
 8012ee2:	61a3      	str	r3, [r4, #24]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	bf14      	ite	ne
 8012ee8:	2202      	movne	r2, #2
 8012eea:	2201      	moveq	r2, #1
 8012eec:	6122      	str	r2, [r4, #16]
 8012eee:	b1bd      	cbz	r5, 8012f20 <__d2b+0x94>
 8012ef0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012ef4:	4405      	add	r5, r0
 8012ef6:	603d      	str	r5, [r7, #0]
 8012ef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012efc:	6030      	str	r0, [r6, #0]
 8012efe:	4620      	mov	r0, r4
 8012f00:	b003      	add	sp, #12
 8012f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f0a:	e7d6      	b.n	8012eba <__d2b+0x2e>
 8012f0c:	6161      	str	r1, [r4, #20]
 8012f0e:	e7e7      	b.n	8012ee0 <__d2b+0x54>
 8012f10:	a801      	add	r0, sp, #4
 8012f12:	f7ff fd61 	bl	80129d8 <__lo0bits>
 8012f16:	9b01      	ldr	r3, [sp, #4]
 8012f18:	6163      	str	r3, [r4, #20]
 8012f1a:	3020      	adds	r0, #32
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	e7e5      	b.n	8012eec <__d2b+0x60>
 8012f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f28:	6038      	str	r0, [r7, #0]
 8012f2a:	6918      	ldr	r0, [r3, #16]
 8012f2c:	f7ff fd34 	bl	8012998 <__hi0bits>
 8012f30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f34:	e7e2      	b.n	8012efc <__d2b+0x70>
 8012f36:	bf00      	nop
 8012f38:	08058319 	.word	0x08058319
 8012f3c:	0805832a 	.word	0x0805832a

08012f40 <__ascii_wctomb>:
 8012f40:	b149      	cbz	r1, 8012f56 <__ascii_wctomb+0x16>
 8012f42:	2aff      	cmp	r2, #255	; 0xff
 8012f44:	bf85      	ittet	hi
 8012f46:	238a      	movhi	r3, #138	; 0x8a
 8012f48:	6003      	strhi	r3, [r0, #0]
 8012f4a:	700a      	strbls	r2, [r1, #0]
 8012f4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012f50:	bf98      	it	ls
 8012f52:	2001      	movls	r0, #1
 8012f54:	4770      	bx	lr
 8012f56:	4608      	mov	r0, r1
 8012f58:	4770      	bx	lr

08012f5a <__ssputs_r>:
 8012f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f5e:	688e      	ldr	r6, [r1, #8]
 8012f60:	461f      	mov	r7, r3
 8012f62:	42be      	cmp	r6, r7
 8012f64:	680b      	ldr	r3, [r1, #0]
 8012f66:	4682      	mov	sl, r0
 8012f68:	460c      	mov	r4, r1
 8012f6a:	4690      	mov	r8, r2
 8012f6c:	d82c      	bhi.n	8012fc8 <__ssputs_r+0x6e>
 8012f6e:	898a      	ldrh	r2, [r1, #12]
 8012f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012f74:	d026      	beq.n	8012fc4 <__ssputs_r+0x6a>
 8012f76:	6965      	ldr	r5, [r4, #20]
 8012f78:	6909      	ldr	r1, [r1, #16]
 8012f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f7e:	eba3 0901 	sub.w	r9, r3, r1
 8012f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f86:	1c7b      	adds	r3, r7, #1
 8012f88:	444b      	add	r3, r9
 8012f8a:	106d      	asrs	r5, r5, #1
 8012f8c:	429d      	cmp	r5, r3
 8012f8e:	bf38      	it	cc
 8012f90:	461d      	movcc	r5, r3
 8012f92:	0553      	lsls	r3, r2, #21
 8012f94:	d527      	bpl.n	8012fe6 <__ssputs_r+0x8c>
 8012f96:	4629      	mov	r1, r5
 8012f98:	f7fd fd44 	bl	8010a24 <_malloc_r>
 8012f9c:	4606      	mov	r6, r0
 8012f9e:	b360      	cbz	r0, 8012ffa <__ssputs_r+0xa0>
 8012fa0:	6921      	ldr	r1, [r4, #16]
 8012fa2:	464a      	mov	r2, r9
 8012fa4:	f7fe fd4b 	bl	8011a3e <memcpy>
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fb2:	81a3      	strh	r3, [r4, #12]
 8012fb4:	6126      	str	r6, [r4, #16]
 8012fb6:	6165      	str	r5, [r4, #20]
 8012fb8:	444e      	add	r6, r9
 8012fba:	eba5 0509 	sub.w	r5, r5, r9
 8012fbe:	6026      	str	r6, [r4, #0]
 8012fc0:	60a5      	str	r5, [r4, #8]
 8012fc2:	463e      	mov	r6, r7
 8012fc4:	42be      	cmp	r6, r7
 8012fc6:	d900      	bls.n	8012fca <__ssputs_r+0x70>
 8012fc8:	463e      	mov	r6, r7
 8012fca:	6820      	ldr	r0, [r4, #0]
 8012fcc:	4632      	mov	r2, r6
 8012fce:	4641      	mov	r1, r8
 8012fd0:	f000 ff48 	bl	8013e64 <memmove>
 8012fd4:	68a3      	ldr	r3, [r4, #8]
 8012fd6:	1b9b      	subs	r3, r3, r6
 8012fd8:	60a3      	str	r3, [r4, #8]
 8012fda:	6823      	ldr	r3, [r4, #0]
 8012fdc:	4433      	add	r3, r6
 8012fde:	6023      	str	r3, [r4, #0]
 8012fe0:	2000      	movs	r0, #0
 8012fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fe6:	462a      	mov	r2, r5
 8012fe8:	f000 ff73 	bl	8013ed2 <_realloc_r>
 8012fec:	4606      	mov	r6, r0
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d1e0      	bne.n	8012fb4 <__ssputs_r+0x5a>
 8012ff2:	6921      	ldr	r1, [r4, #16]
 8012ff4:	4650      	mov	r0, sl
 8012ff6:	f7ff fbc9 	bl	801278c <_free_r>
 8012ffa:	230c      	movs	r3, #12
 8012ffc:	f8ca 3000 	str.w	r3, [sl]
 8013000:	89a3      	ldrh	r3, [r4, #12]
 8013002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013006:	81a3      	strh	r3, [r4, #12]
 8013008:	f04f 30ff 	mov.w	r0, #4294967295
 801300c:	e7e9      	b.n	8012fe2 <__ssputs_r+0x88>
	...

08013010 <_svfiprintf_r>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	4698      	mov	r8, r3
 8013016:	898b      	ldrh	r3, [r1, #12]
 8013018:	061b      	lsls	r3, r3, #24
 801301a:	b09d      	sub	sp, #116	; 0x74
 801301c:	4607      	mov	r7, r0
 801301e:	460d      	mov	r5, r1
 8013020:	4614      	mov	r4, r2
 8013022:	d50e      	bpl.n	8013042 <_svfiprintf_r+0x32>
 8013024:	690b      	ldr	r3, [r1, #16]
 8013026:	b963      	cbnz	r3, 8013042 <_svfiprintf_r+0x32>
 8013028:	2140      	movs	r1, #64	; 0x40
 801302a:	f7fd fcfb 	bl	8010a24 <_malloc_r>
 801302e:	6028      	str	r0, [r5, #0]
 8013030:	6128      	str	r0, [r5, #16]
 8013032:	b920      	cbnz	r0, 801303e <_svfiprintf_r+0x2e>
 8013034:	230c      	movs	r3, #12
 8013036:	603b      	str	r3, [r7, #0]
 8013038:	f04f 30ff 	mov.w	r0, #4294967295
 801303c:	e0d0      	b.n	80131e0 <_svfiprintf_r+0x1d0>
 801303e:	2340      	movs	r3, #64	; 0x40
 8013040:	616b      	str	r3, [r5, #20]
 8013042:	2300      	movs	r3, #0
 8013044:	9309      	str	r3, [sp, #36]	; 0x24
 8013046:	2320      	movs	r3, #32
 8013048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801304c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013050:	2330      	movs	r3, #48	; 0x30
 8013052:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80131f8 <_svfiprintf_r+0x1e8>
 8013056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801305a:	f04f 0901 	mov.w	r9, #1
 801305e:	4623      	mov	r3, r4
 8013060:	469a      	mov	sl, r3
 8013062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013066:	b10a      	cbz	r2, 801306c <_svfiprintf_r+0x5c>
 8013068:	2a25      	cmp	r2, #37	; 0x25
 801306a:	d1f9      	bne.n	8013060 <_svfiprintf_r+0x50>
 801306c:	ebba 0b04 	subs.w	fp, sl, r4
 8013070:	d00b      	beq.n	801308a <_svfiprintf_r+0x7a>
 8013072:	465b      	mov	r3, fp
 8013074:	4622      	mov	r2, r4
 8013076:	4629      	mov	r1, r5
 8013078:	4638      	mov	r0, r7
 801307a:	f7ff ff6e 	bl	8012f5a <__ssputs_r>
 801307e:	3001      	adds	r0, #1
 8013080:	f000 80a9 	beq.w	80131d6 <_svfiprintf_r+0x1c6>
 8013084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013086:	445a      	add	r2, fp
 8013088:	9209      	str	r2, [sp, #36]	; 0x24
 801308a:	f89a 3000 	ldrb.w	r3, [sl]
 801308e:	2b00      	cmp	r3, #0
 8013090:	f000 80a1 	beq.w	80131d6 <_svfiprintf_r+0x1c6>
 8013094:	2300      	movs	r3, #0
 8013096:	f04f 32ff 	mov.w	r2, #4294967295
 801309a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801309e:	f10a 0a01 	add.w	sl, sl, #1
 80130a2:	9304      	str	r3, [sp, #16]
 80130a4:	9307      	str	r3, [sp, #28]
 80130a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130aa:	931a      	str	r3, [sp, #104]	; 0x68
 80130ac:	4654      	mov	r4, sl
 80130ae:	2205      	movs	r2, #5
 80130b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130b4:	4850      	ldr	r0, [pc, #320]	; (80131f8 <_svfiprintf_r+0x1e8>)
 80130b6:	f7ed f88b 	bl	80001d0 <memchr>
 80130ba:	9a04      	ldr	r2, [sp, #16]
 80130bc:	b9d8      	cbnz	r0, 80130f6 <_svfiprintf_r+0xe6>
 80130be:	06d0      	lsls	r0, r2, #27
 80130c0:	bf44      	itt	mi
 80130c2:	2320      	movmi	r3, #32
 80130c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130c8:	0711      	lsls	r1, r2, #28
 80130ca:	bf44      	itt	mi
 80130cc:	232b      	movmi	r3, #43	; 0x2b
 80130ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130d2:	f89a 3000 	ldrb.w	r3, [sl]
 80130d6:	2b2a      	cmp	r3, #42	; 0x2a
 80130d8:	d015      	beq.n	8013106 <_svfiprintf_r+0xf6>
 80130da:	9a07      	ldr	r2, [sp, #28]
 80130dc:	4654      	mov	r4, sl
 80130de:	2000      	movs	r0, #0
 80130e0:	f04f 0c0a 	mov.w	ip, #10
 80130e4:	4621      	mov	r1, r4
 80130e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130ea:	3b30      	subs	r3, #48	; 0x30
 80130ec:	2b09      	cmp	r3, #9
 80130ee:	d94d      	bls.n	801318c <_svfiprintf_r+0x17c>
 80130f0:	b1b0      	cbz	r0, 8013120 <_svfiprintf_r+0x110>
 80130f2:	9207      	str	r2, [sp, #28]
 80130f4:	e014      	b.n	8013120 <_svfiprintf_r+0x110>
 80130f6:	eba0 0308 	sub.w	r3, r0, r8
 80130fa:	fa09 f303 	lsl.w	r3, r9, r3
 80130fe:	4313      	orrs	r3, r2
 8013100:	9304      	str	r3, [sp, #16]
 8013102:	46a2      	mov	sl, r4
 8013104:	e7d2      	b.n	80130ac <_svfiprintf_r+0x9c>
 8013106:	9b03      	ldr	r3, [sp, #12]
 8013108:	1d19      	adds	r1, r3, #4
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	9103      	str	r1, [sp, #12]
 801310e:	2b00      	cmp	r3, #0
 8013110:	bfbb      	ittet	lt
 8013112:	425b      	neglt	r3, r3
 8013114:	f042 0202 	orrlt.w	r2, r2, #2
 8013118:	9307      	strge	r3, [sp, #28]
 801311a:	9307      	strlt	r3, [sp, #28]
 801311c:	bfb8      	it	lt
 801311e:	9204      	strlt	r2, [sp, #16]
 8013120:	7823      	ldrb	r3, [r4, #0]
 8013122:	2b2e      	cmp	r3, #46	; 0x2e
 8013124:	d10c      	bne.n	8013140 <_svfiprintf_r+0x130>
 8013126:	7863      	ldrb	r3, [r4, #1]
 8013128:	2b2a      	cmp	r3, #42	; 0x2a
 801312a:	d134      	bne.n	8013196 <_svfiprintf_r+0x186>
 801312c:	9b03      	ldr	r3, [sp, #12]
 801312e:	1d1a      	adds	r2, r3, #4
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	9203      	str	r2, [sp, #12]
 8013134:	2b00      	cmp	r3, #0
 8013136:	bfb8      	it	lt
 8013138:	f04f 33ff 	movlt.w	r3, #4294967295
 801313c:	3402      	adds	r4, #2
 801313e:	9305      	str	r3, [sp, #20]
 8013140:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013208 <_svfiprintf_r+0x1f8>
 8013144:	7821      	ldrb	r1, [r4, #0]
 8013146:	2203      	movs	r2, #3
 8013148:	4650      	mov	r0, sl
 801314a:	f7ed f841 	bl	80001d0 <memchr>
 801314e:	b138      	cbz	r0, 8013160 <_svfiprintf_r+0x150>
 8013150:	9b04      	ldr	r3, [sp, #16]
 8013152:	eba0 000a 	sub.w	r0, r0, sl
 8013156:	2240      	movs	r2, #64	; 0x40
 8013158:	4082      	lsls	r2, r0
 801315a:	4313      	orrs	r3, r2
 801315c:	3401      	adds	r4, #1
 801315e:	9304      	str	r3, [sp, #16]
 8013160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013164:	4825      	ldr	r0, [pc, #148]	; (80131fc <_svfiprintf_r+0x1ec>)
 8013166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801316a:	2206      	movs	r2, #6
 801316c:	f7ed f830 	bl	80001d0 <memchr>
 8013170:	2800      	cmp	r0, #0
 8013172:	d038      	beq.n	80131e6 <_svfiprintf_r+0x1d6>
 8013174:	4b22      	ldr	r3, [pc, #136]	; (8013200 <_svfiprintf_r+0x1f0>)
 8013176:	bb1b      	cbnz	r3, 80131c0 <_svfiprintf_r+0x1b0>
 8013178:	9b03      	ldr	r3, [sp, #12]
 801317a:	3307      	adds	r3, #7
 801317c:	f023 0307 	bic.w	r3, r3, #7
 8013180:	3308      	adds	r3, #8
 8013182:	9303      	str	r3, [sp, #12]
 8013184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013186:	4433      	add	r3, r6
 8013188:	9309      	str	r3, [sp, #36]	; 0x24
 801318a:	e768      	b.n	801305e <_svfiprintf_r+0x4e>
 801318c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013190:	460c      	mov	r4, r1
 8013192:	2001      	movs	r0, #1
 8013194:	e7a6      	b.n	80130e4 <_svfiprintf_r+0xd4>
 8013196:	2300      	movs	r3, #0
 8013198:	3401      	adds	r4, #1
 801319a:	9305      	str	r3, [sp, #20]
 801319c:	4619      	mov	r1, r3
 801319e:	f04f 0c0a 	mov.w	ip, #10
 80131a2:	4620      	mov	r0, r4
 80131a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131a8:	3a30      	subs	r2, #48	; 0x30
 80131aa:	2a09      	cmp	r2, #9
 80131ac:	d903      	bls.n	80131b6 <_svfiprintf_r+0x1a6>
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d0c6      	beq.n	8013140 <_svfiprintf_r+0x130>
 80131b2:	9105      	str	r1, [sp, #20]
 80131b4:	e7c4      	b.n	8013140 <_svfiprintf_r+0x130>
 80131b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80131ba:	4604      	mov	r4, r0
 80131bc:	2301      	movs	r3, #1
 80131be:	e7f0      	b.n	80131a2 <_svfiprintf_r+0x192>
 80131c0:	ab03      	add	r3, sp, #12
 80131c2:	9300      	str	r3, [sp, #0]
 80131c4:	462a      	mov	r2, r5
 80131c6:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <_svfiprintf_r+0x1f4>)
 80131c8:	a904      	add	r1, sp, #16
 80131ca:	4638      	mov	r0, r7
 80131cc:	f7fd fde4 	bl	8010d98 <_printf_float>
 80131d0:	1c42      	adds	r2, r0, #1
 80131d2:	4606      	mov	r6, r0
 80131d4:	d1d6      	bne.n	8013184 <_svfiprintf_r+0x174>
 80131d6:	89ab      	ldrh	r3, [r5, #12]
 80131d8:	065b      	lsls	r3, r3, #25
 80131da:	f53f af2d 	bmi.w	8013038 <_svfiprintf_r+0x28>
 80131de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131e0:	b01d      	add	sp, #116	; 0x74
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e6:	ab03      	add	r3, sp, #12
 80131e8:	9300      	str	r3, [sp, #0]
 80131ea:	462a      	mov	r2, r5
 80131ec:	4b05      	ldr	r3, [pc, #20]	; (8013204 <_svfiprintf_r+0x1f4>)
 80131ee:	a904      	add	r1, sp, #16
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7fe f875 	bl	80112e0 <_printf_i>
 80131f6:	e7eb      	b.n	80131d0 <_svfiprintf_r+0x1c0>
 80131f8:	08058484 	.word	0x08058484
 80131fc:	0805848e 	.word	0x0805848e
 8013200:	08010d99 	.word	0x08010d99
 8013204:	08012f5b 	.word	0x08012f5b
 8013208:	0805848a 	.word	0x0805848a

0801320c <_sungetc_r>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	1c4b      	adds	r3, r1, #1
 8013210:	4614      	mov	r4, r2
 8013212:	d103      	bne.n	801321c <_sungetc_r+0x10>
 8013214:	f04f 35ff 	mov.w	r5, #4294967295
 8013218:	4628      	mov	r0, r5
 801321a:	bd38      	pop	{r3, r4, r5, pc}
 801321c:	8993      	ldrh	r3, [r2, #12]
 801321e:	f023 0320 	bic.w	r3, r3, #32
 8013222:	8193      	strh	r3, [r2, #12]
 8013224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013226:	6852      	ldr	r2, [r2, #4]
 8013228:	b2cd      	uxtb	r5, r1
 801322a:	b18b      	cbz	r3, 8013250 <_sungetc_r+0x44>
 801322c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801322e:	4293      	cmp	r3, r2
 8013230:	dd08      	ble.n	8013244 <_sungetc_r+0x38>
 8013232:	6823      	ldr	r3, [r4, #0]
 8013234:	1e5a      	subs	r2, r3, #1
 8013236:	6022      	str	r2, [r4, #0]
 8013238:	f803 5c01 	strb.w	r5, [r3, #-1]
 801323c:	6863      	ldr	r3, [r4, #4]
 801323e:	3301      	adds	r3, #1
 8013240:	6063      	str	r3, [r4, #4]
 8013242:	e7e9      	b.n	8013218 <_sungetc_r+0xc>
 8013244:	4621      	mov	r1, r4
 8013246:	f000 fd3e 	bl	8013cc6 <__submore>
 801324a:	2800      	cmp	r0, #0
 801324c:	d0f1      	beq.n	8013232 <_sungetc_r+0x26>
 801324e:	e7e1      	b.n	8013214 <_sungetc_r+0x8>
 8013250:	6921      	ldr	r1, [r4, #16]
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	b151      	cbz	r1, 801326c <_sungetc_r+0x60>
 8013256:	4299      	cmp	r1, r3
 8013258:	d208      	bcs.n	801326c <_sungetc_r+0x60>
 801325a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801325e:	42a9      	cmp	r1, r5
 8013260:	d104      	bne.n	801326c <_sungetc_r+0x60>
 8013262:	3b01      	subs	r3, #1
 8013264:	3201      	adds	r2, #1
 8013266:	6023      	str	r3, [r4, #0]
 8013268:	6062      	str	r2, [r4, #4]
 801326a:	e7d5      	b.n	8013218 <_sungetc_r+0xc>
 801326c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013274:	6363      	str	r3, [r4, #52]	; 0x34
 8013276:	2303      	movs	r3, #3
 8013278:	63a3      	str	r3, [r4, #56]	; 0x38
 801327a:	4623      	mov	r3, r4
 801327c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013280:	6023      	str	r3, [r4, #0]
 8013282:	2301      	movs	r3, #1
 8013284:	e7dc      	b.n	8013240 <_sungetc_r+0x34>

08013286 <__ssrefill_r>:
 8013286:	b510      	push	{r4, lr}
 8013288:	460c      	mov	r4, r1
 801328a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801328c:	b169      	cbz	r1, 80132aa <__ssrefill_r+0x24>
 801328e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013292:	4299      	cmp	r1, r3
 8013294:	d001      	beq.n	801329a <__ssrefill_r+0x14>
 8013296:	f7ff fa79 	bl	801278c <_free_r>
 801329a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801329c:	6063      	str	r3, [r4, #4]
 801329e:	2000      	movs	r0, #0
 80132a0:	6360      	str	r0, [r4, #52]	; 0x34
 80132a2:	b113      	cbz	r3, 80132aa <__ssrefill_r+0x24>
 80132a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80132a6:	6023      	str	r3, [r4, #0]
 80132a8:	bd10      	pop	{r4, pc}
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	2300      	movs	r3, #0
 80132b0:	6063      	str	r3, [r4, #4]
 80132b2:	89a3      	ldrh	r3, [r4, #12]
 80132b4:	f043 0320 	orr.w	r3, r3, #32
 80132b8:	81a3      	strh	r3, [r4, #12]
 80132ba:	f04f 30ff 	mov.w	r0, #4294967295
 80132be:	e7f3      	b.n	80132a8 <__ssrefill_r+0x22>

080132c0 <__ssvfiscanf_r>:
 80132c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132c4:	460c      	mov	r4, r1
 80132c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80132ca:	2100      	movs	r1, #0
 80132cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80132d0:	49a6      	ldr	r1, [pc, #664]	; (801356c <__ssvfiscanf_r+0x2ac>)
 80132d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80132d4:	f10d 0804 	add.w	r8, sp, #4
 80132d8:	49a5      	ldr	r1, [pc, #660]	; (8013570 <__ssvfiscanf_r+0x2b0>)
 80132da:	4fa6      	ldr	r7, [pc, #664]	; (8013574 <__ssvfiscanf_r+0x2b4>)
 80132dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013578 <__ssvfiscanf_r+0x2b8>
 80132e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80132e4:	4606      	mov	r6, r0
 80132e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	7813      	ldrb	r3, [r2, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 815a 	beq.w	80135a6 <__ssvfiscanf_r+0x2e6>
 80132f2:	5cf9      	ldrb	r1, [r7, r3]
 80132f4:	f011 0108 	ands.w	r1, r1, #8
 80132f8:	f102 0501 	add.w	r5, r2, #1
 80132fc:	d019      	beq.n	8013332 <__ssvfiscanf_r+0x72>
 80132fe:	6863      	ldr	r3, [r4, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	dd0f      	ble.n	8013324 <__ssvfiscanf_r+0x64>
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	781a      	ldrb	r2, [r3, #0]
 8013308:	5cba      	ldrb	r2, [r7, r2]
 801330a:	0712      	lsls	r2, r2, #28
 801330c:	d401      	bmi.n	8013312 <__ssvfiscanf_r+0x52>
 801330e:	462a      	mov	r2, r5
 8013310:	e7eb      	b.n	80132ea <__ssvfiscanf_r+0x2a>
 8013312:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013314:	3201      	adds	r2, #1
 8013316:	9245      	str	r2, [sp, #276]	; 0x114
 8013318:	6862      	ldr	r2, [r4, #4]
 801331a:	3301      	adds	r3, #1
 801331c:	3a01      	subs	r2, #1
 801331e:	6062      	str	r2, [r4, #4]
 8013320:	6023      	str	r3, [r4, #0]
 8013322:	e7ec      	b.n	80132fe <__ssvfiscanf_r+0x3e>
 8013324:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013326:	4621      	mov	r1, r4
 8013328:	4630      	mov	r0, r6
 801332a:	4798      	blx	r3
 801332c:	2800      	cmp	r0, #0
 801332e:	d0e9      	beq.n	8013304 <__ssvfiscanf_r+0x44>
 8013330:	e7ed      	b.n	801330e <__ssvfiscanf_r+0x4e>
 8013332:	2b25      	cmp	r3, #37	; 0x25
 8013334:	d012      	beq.n	801335c <__ssvfiscanf_r+0x9c>
 8013336:	469a      	mov	sl, r3
 8013338:	6863      	ldr	r3, [r4, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f340 8091 	ble.w	8013462 <__ssvfiscanf_r+0x1a2>
 8013340:	6822      	ldr	r2, [r4, #0]
 8013342:	7813      	ldrb	r3, [r2, #0]
 8013344:	4553      	cmp	r3, sl
 8013346:	f040 812e 	bne.w	80135a6 <__ssvfiscanf_r+0x2e6>
 801334a:	6863      	ldr	r3, [r4, #4]
 801334c:	3b01      	subs	r3, #1
 801334e:	6063      	str	r3, [r4, #4]
 8013350:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013352:	3201      	adds	r2, #1
 8013354:	3301      	adds	r3, #1
 8013356:	6022      	str	r2, [r4, #0]
 8013358:	9345      	str	r3, [sp, #276]	; 0x114
 801335a:	e7d8      	b.n	801330e <__ssvfiscanf_r+0x4e>
 801335c:	9141      	str	r1, [sp, #260]	; 0x104
 801335e:	9143      	str	r1, [sp, #268]	; 0x10c
 8013360:	7853      	ldrb	r3, [r2, #1]
 8013362:	2b2a      	cmp	r3, #42	; 0x2a
 8013364:	bf02      	ittt	eq
 8013366:	2310      	moveq	r3, #16
 8013368:	1c95      	addeq	r5, r2, #2
 801336a:	9341      	streq	r3, [sp, #260]	; 0x104
 801336c:	220a      	movs	r2, #10
 801336e:	46aa      	mov	sl, r5
 8013370:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013374:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013378:	2b09      	cmp	r3, #9
 801337a:	d91c      	bls.n	80133b6 <__ssvfiscanf_r+0xf6>
 801337c:	487e      	ldr	r0, [pc, #504]	; (8013578 <__ssvfiscanf_r+0x2b8>)
 801337e:	2203      	movs	r2, #3
 8013380:	f7ec ff26 	bl	80001d0 <memchr>
 8013384:	b138      	cbz	r0, 8013396 <__ssvfiscanf_r+0xd6>
 8013386:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013388:	eba0 0009 	sub.w	r0, r0, r9
 801338c:	2301      	movs	r3, #1
 801338e:	4083      	lsls	r3, r0
 8013390:	4313      	orrs	r3, r2
 8013392:	9341      	str	r3, [sp, #260]	; 0x104
 8013394:	4655      	mov	r5, sl
 8013396:	f815 3b01 	ldrb.w	r3, [r5], #1
 801339a:	2b78      	cmp	r3, #120	; 0x78
 801339c:	d806      	bhi.n	80133ac <__ssvfiscanf_r+0xec>
 801339e:	2b57      	cmp	r3, #87	; 0x57
 80133a0:	d810      	bhi.n	80133c4 <__ssvfiscanf_r+0x104>
 80133a2:	2b25      	cmp	r3, #37	; 0x25
 80133a4:	d0c7      	beq.n	8013336 <__ssvfiscanf_r+0x76>
 80133a6:	d857      	bhi.n	8013458 <__ssvfiscanf_r+0x198>
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d065      	beq.n	8013478 <__ssvfiscanf_r+0x1b8>
 80133ac:	2303      	movs	r3, #3
 80133ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80133b0:	230a      	movs	r3, #10
 80133b2:	9342      	str	r3, [sp, #264]	; 0x108
 80133b4:	e076      	b.n	80134a4 <__ssvfiscanf_r+0x1e4>
 80133b6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80133b8:	fb02 1103 	mla	r1, r2, r3, r1
 80133bc:	3930      	subs	r1, #48	; 0x30
 80133be:	9143      	str	r1, [sp, #268]	; 0x10c
 80133c0:	4655      	mov	r5, sl
 80133c2:	e7d4      	b.n	801336e <__ssvfiscanf_r+0xae>
 80133c4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80133c8:	2a20      	cmp	r2, #32
 80133ca:	d8ef      	bhi.n	80133ac <__ssvfiscanf_r+0xec>
 80133cc:	a101      	add	r1, pc, #4	; (adr r1, 80133d4 <__ssvfiscanf_r+0x114>)
 80133ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80133d2:	bf00      	nop
 80133d4:	08013487 	.word	0x08013487
 80133d8:	080133ad 	.word	0x080133ad
 80133dc:	080133ad 	.word	0x080133ad
 80133e0:	080134e5 	.word	0x080134e5
 80133e4:	080133ad 	.word	0x080133ad
 80133e8:	080133ad 	.word	0x080133ad
 80133ec:	080133ad 	.word	0x080133ad
 80133f0:	080133ad 	.word	0x080133ad
 80133f4:	080133ad 	.word	0x080133ad
 80133f8:	080133ad 	.word	0x080133ad
 80133fc:	080133ad 	.word	0x080133ad
 8013400:	080134fb 	.word	0x080134fb
 8013404:	080134e1 	.word	0x080134e1
 8013408:	0801345f 	.word	0x0801345f
 801340c:	0801345f 	.word	0x0801345f
 8013410:	0801345f 	.word	0x0801345f
 8013414:	080133ad 	.word	0x080133ad
 8013418:	0801349d 	.word	0x0801349d
 801341c:	080133ad 	.word	0x080133ad
 8013420:	080133ad 	.word	0x080133ad
 8013424:	080133ad 	.word	0x080133ad
 8013428:	080133ad 	.word	0x080133ad
 801342c:	0801350b 	.word	0x0801350b
 8013430:	080134d9 	.word	0x080134d9
 8013434:	0801347f 	.word	0x0801347f
 8013438:	080133ad 	.word	0x080133ad
 801343c:	080133ad 	.word	0x080133ad
 8013440:	08013507 	.word	0x08013507
 8013444:	080133ad 	.word	0x080133ad
 8013448:	080134e1 	.word	0x080134e1
 801344c:	080133ad 	.word	0x080133ad
 8013450:	080133ad 	.word	0x080133ad
 8013454:	08013487 	.word	0x08013487
 8013458:	3b45      	subs	r3, #69	; 0x45
 801345a:	2b02      	cmp	r3, #2
 801345c:	d8a6      	bhi.n	80133ac <__ssvfiscanf_r+0xec>
 801345e:	2305      	movs	r3, #5
 8013460:	e01f      	b.n	80134a2 <__ssvfiscanf_r+0x1e2>
 8013462:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013464:	4621      	mov	r1, r4
 8013466:	4630      	mov	r0, r6
 8013468:	4798      	blx	r3
 801346a:	2800      	cmp	r0, #0
 801346c:	f43f af68 	beq.w	8013340 <__ssvfiscanf_r+0x80>
 8013470:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013472:	2800      	cmp	r0, #0
 8013474:	f040 808d 	bne.w	8013592 <__ssvfiscanf_r+0x2d2>
 8013478:	f04f 30ff 	mov.w	r0, #4294967295
 801347c:	e08f      	b.n	801359e <__ssvfiscanf_r+0x2de>
 801347e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013480:	f042 0220 	orr.w	r2, r2, #32
 8013484:	9241      	str	r2, [sp, #260]	; 0x104
 8013486:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801348c:	9241      	str	r2, [sp, #260]	; 0x104
 801348e:	2210      	movs	r2, #16
 8013490:	2b6f      	cmp	r3, #111	; 0x6f
 8013492:	9242      	str	r2, [sp, #264]	; 0x108
 8013494:	bf34      	ite	cc
 8013496:	2303      	movcc	r3, #3
 8013498:	2304      	movcs	r3, #4
 801349a:	e002      	b.n	80134a2 <__ssvfiscanf_r+0x1e2>
 801349c:	2300      	movs	r3, #0
 801349e:	9342      	str	r3, [sp, #264]	; 0x108
 80134a0:	2303      	movs	r3, #3
 80134a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80134a4:	6863      	ldr	r3, [r4, #4]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	dd3d      	ble.n	8013526 <__ssvfiscanf_r+0x266>
 80134aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80134ac:	0659      	lsls	r1, r3, #25
 80134ae:	d404      	bmi.n	80134ba <__ssvfiscanf_r+0x1fa>
 80134b0:	6823      	ldr	r3, [r4, #0]
 80134b2:	781a      	ldrb	r2, [r3, #0]
 80134b4:	5cba      	ldrb	r2, [r7, r2]
 80134b6:	0712      	lsls	r2, r2, #28
 80134b8:	d43c      	bmi.n	8013534 <__ssvfiscanf_r+0x274>
 80134ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80134bc:	2b02      	cmp	r3, #2
 80134be:	dc4b      	bgt.n	8013558 <__ssvfiscanf_r+0x298>
 80134c0:	466b      	mov	r3, sp
 80134c2:	4622      	mov	r2, r4
 80134c4:	a941      	add	r1, sp, #260	; 0x104
 80134c6:	4630      	mov	r0, r6
 80134c8:	f000 f9b6 	bl	8013838 <_scanf_chars>
 80134cc:	2801      	cmp	r0, #1
 80134ce:	d06a      	beq.n	80135a6 <__ssvfiscanf_r+0x2e6>
 80134d0:	2802      	cmp	r0, #2
 80134d2:	f47f af1c 	bne.w	801330e <__ssvfiscanf_r+0x4e>
 80134d6:	e7cb      	b.n	8013470 <__ssvfiscanf_r+0x1b0>
 80134d8:	2308      	movs	r3, #8
 80134da:	9342      	str	r3, [sp, #264]	; 0x108
 80134dc:	2304      	movs	r3, #4
 80134de:	e7e0      	b.n	80134a2 <__ssvfiscanf_r+0x1e2>
 80134e0:	220a      	movs	r2, #10
 80134e2:	e7d5      	b.n	8013490 <__ssvfiscanf_r+0x1d0>
 80134e4:	4629      	mov	r1, r5
 80134e6:	4640      	mov	r0, r8
 80134e8:	f000 fbb4 	bl	8013c54 <__sccl>
 80134ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80134ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134f2:	9341      	str	r3, [sp, #260]	; 0x104
 80134f4:	4605      	mov	r5, r0
 80134f6:	2301      	movs	r3, #1
 80134f8:	e7d3      	b.n	80134a2 <__ssvfiscanf_r+0x1e2>
 80134fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80134fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013500:	9341      	str	r3, [sp, #260]	; 0x104
 8013502:	2300      	movs	r3, #0
 8013504:	e7cd      	b.n	80134a2 <__ssvfiscanf_r+0x1e2>
 8013506:	2302      	movs	r3, #2
 8013508:	e7cb      	b.n	80134a2 <__ssvfiscanf_r+0x1e2>
 801350a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801350c:	06c3      	lsls	r3, r0, #27
 801350e:	f53f aefe 	bmi.w	801330e <__ssvfiscanf_r+0x4e>
 8013512:	9b00      	ldr	r3, [sp, #0]
 8013514:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013516:	1d19      	adds	r1, r3, #4
 8013518:	9100      	str	r1, [sp, #0]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	07c0      	lsls	r0, r0, #31
 801351e:	bf4c      	ite	mi
 8013520:	801a      	strhmi	r2, [r3, #0]
 8013522:	601a      	strpl	r2, [r3, #0]
 8013524:	e6f3      	b.n	801330e <__ssvfiscanf_r+0x4e>
 8013526:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013528:	4621      	mov	r1, r4
 801352a:	4630      	mov	r0, r6
 801352c:	4798      	blx	r3
 801352e:	2800      	cmp	r0, #0
 8013530:	d0bb      	beq.n	80134aa <__ssvfiscanf_r+0x1ea>
 8013532:	e79d      	b.n	8013470 <__ssvfiscanf_r+0x1b0>
 8013534:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013536:	3201      	adds	r2, #1
 8013538:	9245      	str	r2, [sp, #276]	; 0x114
 801353a:	6862      	ldr	r2, [r4, #4]
 801353c:	3a01      	subs	r2, #1
 801353e:	2a00      	cmp	r2, #0
 8013540:	6062      	str	r2, [r4, #4]
 8013542:	dd02      	ble.n	801354a <__ssvfiscanf_r+0x28a>
 8013544:	3301      	adds	r3, #1
 8013546:	6023      	str	r3, [r4, #0]
 8013548:	e7b2      	b.n	80134b0 <__ssvfiscanf_r+0x1f0>
 801354a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801354c:	4621      	mov	r1, r4
 801354e:	4630      	mov	r0, r6
 8013550:	4798      	blx	r3
 8013552:	2800      	cmp	r0, #0
 8013554:	d0ac      	beq.n	80134b0 <__ssvfiscanf_r+0x1f0>
 8013556:	e78b      	b.n	8013470 <__ssvfiscanf_r+0x1b0>
 8013558:	2b04      	cmp	r3, #4
 801355a:	dc0f      	bgt.n	801357c <__ssvfiscanf_r+0x2bc>
 801355c:	466b      	mov	r3, sp
 801355e:	4622      	mov	r2, r4
 8013560:	a941      	add	r1, sp, #260	; 0x104
 8013562:	4630      	mov	r0, r6
 8013564:	f000 f9c2 	bl	80138ec <_scanf_i>
 8013568:	e7b0      	b.n	80134cc <__ssvfiscanf_r+0x20c>
 801356a:	bf00      	nop
 801356c:	0801320d 	.word	0x0801320d
 8013570:	08013287 	.word	0x08013287
 8013574:	080580cb 	.word	0x080580cb
 8013578:	0805848a 	.word	0x0805848a
 801357c:	4b0b      	ldr	r3, [pc, #44]	; (80135ac <__ssvfiscanf_r+0x2ec>)
 801357e:	2b00      	cmp	r3, #0
 8013580:	f43f aec5 	beq.w	801330e <__ssvfiscanf_r+0x4e>
 8013584:	466b      	mov	r3, sp
 8013586:	4622      	mov	r2, r4
 8013588:	a941      	add	r1, sp, #260	; 0x104
 801358a:	4630      	mov	r0, r6
 801358c:	f3af 8000 	nop.w
 8013590:	e79c      	b.n	80134cc <__ssvfiscanf_r+0x20c>
 8013592:	89a3      	ldrh	r3, [r4, #12]
 8013594:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013598:	bf18      	it	ne
 801359a:	f04f 30ff 	movne.w	r0, #4294967295
 801359e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80135a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80135a8:	e7f9      	b.n	801359e <__ssvfiscanf_r+0x2de>
 80135aa:	bf00      	nop
 80135ac:	00000000 	.word	0x00000000

080135b0 <__sfputc_r>:
 80135b0:	6893      	ldr	r3, [r2, #8]
 80135b2:	3b01      	subs	r3, #1
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	b410      	push	{r4}
 80135b8:	6093      	str	r3, [r2, #8]
 80135ba:	da08      	bge.n	80135ce <__sfputc_r+0x1e>
 80135bc:	6994      	ldr	r4, [r2, #24]
 80135be:	42a3      	cmp	r3, r4
 80135c0:	db01      	blt.n	80135c6 <__sfputc_r+0x16>
 80135c2:	290a      	cmp	r1, #10
 80135c4:	d103      	bne.n	80135ce <__sfputc_r+0x1e>
 80135c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135ca:	f000 bbb6 	b.w	8013d3a <__swbuf_r>
 80135ce:	6813      	ldr	r3, [r2, #0]
 80135d0:	1c58      	adds	r0, r3, #1
 80135d2:	6010      	str	r0, [r2, #0]
 80135d4:	7019      	strb	r1, [r3, #0]
 80135d6:	4608      	mov	r0, r1
 80135d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135dc:	4770      	bx	lr

080135de <__sfputs_r>:
 80135de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135e0:	4606      	mov	r6, r0
 80135e2:	460f      	mov	r7, r1
 80135e4:	4614      	mov	r4, r2
 80135e6:	18d5      	adds	r5, r2, r3
 80135e8:	42ac      	cmp	r4, r5
 80135ea:	d101      	bne.n	80135f0 <__sfputs_r+0x12>
 80135ec:	2000      	movs	r0, #0
 80135ee:	e007      	b.n	8013600 <__sfputs_r+0x22>
 80135f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135f4:	463a      	mov	r2, r7
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7ff ffda 	bl	80135b0 <__sfputc_r>
 80135fc:	1c43      	adds	r3, r0, #1
 80135fe:	d1f3      	bne.n	80135e8 <__sfputs_r+0xa>
 8013600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013604 <_vfiprintf_r>:
 8013604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013608:	460d      	mov	r5, r1
 801360a:	b09d      	sub	sp, #116	; 0x74
 801360c:	4614      	mov	r4, r2
 801360e:	4698      	mov	r8, r3
 8013610:	4606      	mov	r6, r0
 8013612:	b118      	cbz	r0, 801361c <_vfiprintf_r+0x18>
 8013614:	6a03      	ldr	r3, [r0, #32]
 8013616:	b90b      	cbnz	r3, 801361c <_vfiprintf_r+0x18>
 8013618:	f7fe f810 	bl	801163c <__sinit>
 801361c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801361e:	07d9      	lsls	r1, r3, #31
 8013620:	d405      	bmi.n	801362e <_vfiprintf_r+0x2a>
 8013622:	89ab      	ldrh	r3, [r5, #12]
 8013624:	059a      	lsls	r2, r3, #22
 8013626:	d402      	bmi.n	801362e <_vfiprintf_r+0x2a>
 8013628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801362a:	f7fe f9fe 	bl	8011a2a <__retarget_lock_acquire_recursive>
 801362e:	89ab      	ldrh	r3, [r5, #12]
 8013630:	071b      	lsls	r3, r3, #28
 8013632:	d501      	bpl.n	8013638 <_vfiprintf_r+0x34>
 8013634:	692b      	ldr	r3, [r5, #16]
 8013636:	b99b      	cbnz	r3, 8013660 <_vfiprintf_r+0x5c>
 8013638:	4629      	mov	r1, r5
 801363a:	4630      	mov	r0, r6
 801363c:	f000 fbba 	bl	8013db4 <__swsetup_r>
 8013640:	b170      	cbz	r0, 8013660 <_vfiprintf_r+0x5c>
 8013642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013644:	07dc      	lsls	r4, r3, #31
 8013646:	d504      	bpl.n	8013652 <_vfiprintf_r+0x4e>
 8013648:	f04f 30ff 	mov.w	r0, #4294967295
 801364c:	b01d      	add	sp, #116	; 0x74
 801364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013652:	89ab      	ldrh	r3, [r5, #12]
 8013654:	0598      	lsls	r0, r3, #22
 8013656:	d4f7      	bmi.n	8013648 <_vfiprintf_r+0x44>
 8013658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801365a:	f7fe f9e7 	bl	8011a2c <__retarget_lock_release_recursive>
 801365e:	e7f3      	b.n	8013648 <_vfiprintf_r+0x44>
 8013660:	2300      	movs	r3, #0
 8013662:	9309      	str	r3, [sp, #36]	; 0x24
 8013664:	2320      	movs	r3, #32
 8013666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801366a:	f8cd 800c 	str.w	r8, [sp, #12]
 801366e:	2330      	movs	r3, #48	; 0x30
 8013670:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013824 <_vfiprintf_r+0x220>
 8013674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013678:	f04f 0901 	mov.w	r9, #1
 801367c:	4623      	mov	r3, r4
 801367e:	469a      	mov	sl, r3
 8013680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013684:	b10a      	cbz	r2, 801368a <_vfiprintf_r+0x86>
 8013686:	2a25      	cmp	r2, #37	; 0x25
 8013688:	d1f9      	bne.n	801367e <_vfiprintf_r+0x7a>
 801368a:	ebba 0b04 	subs.w	fp, sl, r4
 801368e:	d00b      	beq.n	80136a8 <_vfiprintf_r+0xa4>
 8013690:	465b      	mov	r3, fp
 8013692:	4622      	mov	r2, r4
 8013694:	4629      	mov	r1, r5
 8013696:	4630      	mov	r0, r6
 8013698:	f7ff ffa1 	bl	80135de <__sfputs_r>
 801369c:	3001      	adds	r0, #1
 801369e:	f000 80a9 	beq.w	80137f4 <_vfiprintf_r+0x1f0>
 80136a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136a4:	445a      	add	r2, fp
 80136a6:	9209      	str	r2, [sp, #36]	; 0x24
 80136a8:	f89a 3000 	ldrb.w	r3, [sl]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 80a1 	beq.w	80137f4 <_vfiprintf_r+0x1f0>
 80136b2:	2300      	movs	r3, #0
 80136b4:	f04f 32ff 	mov.w	r2, #4294967295
 80136b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136bc:	f10a 0a01 	add.w	sl, sl, #1
 80136c0:	9304      	str	r3, [sp, #16]
 80136c2:	9307      	str	r3, [sp, #28]
 80136c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136c8:	931a      	str	r3, [sp, #104]	; 0x68
 80136ca:	4654      	mov	r4, sl
 80136cc:	2205      	movs	r2, #5
 80136ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136d2:	4854      	ldr	r0, [pc, #336]	; (8013824 <_vfiprintf_r+0x220>)
 80136d4:	f7ec fd7c 	bl	80001d0 <memchr>
 80136d8:	9a04      	ldr	r2, [sp, #16]
 80136da:	b9d8      	cbnz	r0, 8013714 <_vfiprintf_r+0x110>
 80136dc:	06d1      	lsls	r1, r2, #27
 80136de:	bf44      	itt	mi
 80136e0:	2320      	movmi	r3, #32
 80136e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136e6:	0713      	lsls	r3, r2, #28
 80136e8:	bf44      	itt	mi
 80136ea:	232b      	movmi	r3, #43	; 0x2b
 80136ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136f0:	f89a 3000 	ldrb.w	r3, [sl]
 80136f4:	2b2a      	cmp	r3, #42	; 0x2a
 80136f6:	d015      	beq.n	8013724 <_vfiprintf_r+0x120>
 80136f8:	9a07      	ldr	r2, [sp, #28]
 80136fa:	4654      	mov	r4, sl
 80136fc:	2000      	movs	r0, #0
 80136fe:	f04f 0c0a 	mov.w	ip, #10
 8013702:	4621      	mov	r1, r4
 8013704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013708:	3b30      	subs	r3, #48	; 0x30
 801370a:	2b09      	cmp	r3, #9
 801370c:	d94d      	bls.n	80137aa <_vfiprintf_r+0x1a6>
 801370e:	b1b0      	cbz	r0, 801373e <_vfiprintf_r+0x13a>
 8013710:	9207      	str	r2, [sp, #28]
 8013712:	e014      	b.n	801373e <_vfiprintf_r+0x13a>
 8013714:	eba0 0308 	sub.w	r3, r0, r8
 8013718:	fa09 f303 	lsl.w	r3, r9, r3
 801371c:	4313      	orrs	r3, r2
 801371e:	9304      	str	r3, [sp, #16]
 8013720:	46a2      	mov	sl, r4
 8013722:	e7d2      	b.n	80136ca <_vfiprintf_r+0xc6>
 8013724:	9b03      	ldr	r3, [sp, #12]
 8013726:	1d19      	adds	r1, r3, #4
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	9103      	str	r1, [sp, #12]
 801372c:	2b00      	cmp	r3, #0
 801372e:	bfbb      	ittet	lt
 8013730:	425b      	neglt	r3, r3
 8013732:	f042 0202 	orrlt.w	r2, r2, #2
 8013736:	9307      	strge	r3, [sp, #28]
 8013738:	9307      	strlt	r3, [sp, #28]
 801373a:	bfb8      	it	lt
 801373c:	9204      	strlt	r2, [sp, #16]
 801373e:	7823      	ldrb	r3, [r4, #0]
 8013740:	2b2e      	cmp	r3, #46	; 0x2e
 8013742:	d10c      	bne.n	801375e <_vfiprintf_r+0x15a>
 8013744:	7863      	ldrb	r3, [r4, #1]
 8013746:	2b2a      	cmp	r3, #42	; 0x2a
 8013748:	d134      	bne.n	80137b4 <_vfiprintf_r+0x1b0>
 801374a:	9b03      	ldr	r3, [sp, #12]
 801374c:	1d1a      	adds	r2, r3, #4
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	9203      	str	r2, [sp, #12]
 8013752:	2b00      	cmp	r3, #0
 8013754:	bfb8      	it	lt
 8013756:	f04f 33ff 	movlt.w	r3, #4294967295
 801375a:	3402      	adds	r4, #2
 801375c:	9305      	str	r3, [sp, #20]
 801375e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013834 <_vfiprintf_r+0x230>
 8013762:	7821      	ldrb	r1, [r4, #0]
 8013764:	2203      	movs	r2, #3
 8013766:	4650      	mov	r0, sl
 8013768:	f7ec fd32 	bl	80001d0 <memchr>
 801376c:	b138      	cbz	r0, 801377e <_vfiprintf_r+0x17a>
 801376e:	9b04      	ldr	r3, [sp, #16]
 8013770:	eba0 000a 	sub.w	r0, r0, sl
 8013774:	2240      	movs	r2, #64	; 0x40
 8013776:	4082      	lsls	r2, r0
 8013778:	4313      	orrs	r3, r2
 801377a:	3401      	adds	r4, #1
 801377c:	9304      	str	r3, [sp, #16]
 801377e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013782:	4829      	ldr	r0, [pc, #164]	; (8013828 <_vfiprintf_r+0x224>)
 8013784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013788:	2206      	movs	r2, #6
 801378a:	f7ec fd21 	bl	80001d0 <memchr>
 801378e:	2800      	cmp	r0, #0
 8013790:	d03f      	beq.n	8013812 <_vfiprintf_r+0x20e>
 8013792:	4b26      	ldr	r3, [pc, #152]	; (801382c <_vfiprintf_r+0x228>)
 8013794:	bb1b      	cbnz	r3, 80137de <_vfiprintf_r+0x1da>
 8013796:	9b03      	ldr	r3, [sp, #12]
 8013798:	3307      	adds	r3, #7
 801379a:	f023 0307 	bic.w	r3, r3, #7
 801379e:	3308      	adds	r3, #8
 80137a0:	9303      	str	r3, [sp, #12]
 80137a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137a4:	443b      	add	r3, r7
 80137a6:	9309      	str	r3, [sp, #36]	; 0x24
 80137a8:	e768      	b.n	801367c <_vfiprintf_r+0x78>
 80137aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80137ae:	460c      	mov	r4, r1
 80137b0:	2001      	movs	r0, #1
 80137b2:	e7a6      	b.n	8013702 <_vfiprintf_r+0xfe>
 80137b4:	2300      	movs	r3, #0
 80137b6:	3401      	adds	r4, #1
 80137b8:	9305      	str	r3, [sp, #20]
 80137ba:	4619      	mov	r1, r3
 80137bc:	f04f 0c0a 	mov.w	ip, #10
 80137c0:	4620      	mov	r0, r4
 80137c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137c6:	3a30      	subs	r2, #48	; 0x30
 80137c8:	2a09      	cmp	r2, #9
 80137ca:	d903      	bls.n	80137d4 <_vfiprintf_r+0x1d0>
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d0c6      	beq.n	801375e <_vfiprintf_r+0x15a>
 80137d0:	9105      	str	r1, [sp, #20]
 80137d2:	e7c4      	b.n	801375e <_vfiprintf_r+0x15a>
 80137d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80137d8:	4604      	mov	r4, r0
 80137da:	2301      	movs	r3, #1
 80137dc:	e7f0      	b.n	80137c0 <_vfiprintf_r+0x1bc>
 80137de:	ab03      	add	r3, sp, #12
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	462a      	mov	r2, r5
 80137e4:	4b12      	ldr	r3, [pc, #72]	; (8013830 <_vfiprintf_r+0x22c>)
 80137e6:	a904      	add	r1, sp, #16
 80137e8:	4630      	mov	r0, r6
 80137ea:	f7fd fad5 	bl	8010d98 <_printf_float>
 80137ee:	4607      	mov	r7, r0
 80137f0:	1c78      	adds	r0, r7, #1
 80137f2:	d1d6      	bne.n	80137a2 <_vfiprintf_r+0x19e>
 80137f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137f6:	07d9      	lsls	r1, r3, #31
 80137f8:	d405      	bmi.n	8013806 <_vfiprintf_r+0x202>
 80137fa:	89ab      	ldrh	r3, [r5, #12]
 80137fc:	059a      	lsls	r2, r3, #22
 80137fe:	d402      	bmi.n	8013806 <_vfiprintf_r+0x202>
 8013800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013802:	f7fe f913 	bl	8011a2c <__retarget_lock_release_recursive>
 8013806:	89ab      	ldrh	r3, [r5, #12]
 8013808:	065b      	lsls	r3, r3, #25
 801380a:	f53f af1d 	bmi.w	8013648 <_vfiprintf_r+0x44>
 801380e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013810:	e71c      	b.n	801364c <_vfiprintf_r+0x48>
 8013812:	ab03      	add	r3, sp, #12
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	462a      	mov	r2, r5
 8013818:	4b05      	ldr	r3, [pc, #20]	; (8013830 <_vfiprintf_r+0x22c>)
 801381a:	a904      	add	r1, sp, #16
 801381c:	4630      	mov	r0, r6
 801381e:	f7fd fd5f 	bl	80112e0 <_printf_i>
 8013822:	e7e4      	b.n	80137ee <_vfiprintf_r+0x1ea>
 8013824:	08058484 	.word	0x08058484
 8013828:	0805848e 	.word	0x0805848e
 801382c:	08010d99 	.word	0x08010d99
 8013830:	080135df 	.word	0x080135df
 8013834:	0805848a 	.word	0x0805848a

08013838 <_scanf_chars>:
 8013838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801383c:	4615      	mov	r5, r2
 801383e:	688a      	ldr	r2, [r1, #8]
 8013840:	4680      	mov	r8, r0
 8013842:	460c      	mov	r4, r1
 8013844:	b932      	cbnz	r2, 8013854 <_scanf_chars+0x1c>
 8013846:	698a      	ldr	r2, [r1, #24]
 8013848:	2a00      	cmp	r2, #0
 801384a:	bf0c      	ite	eq
 801384c:	2201      	moveq	r2, #1
 801384e:	f04f 32ff 	movne.w	r2, #4294967295
 8013852:	608a      	str	r2, [r1, #8]
 8013854:	6822      	ldr	r2, [r4, #0]
 8013856:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80138e8 <_scanf_chars+0xb0>
 801385a:	06d1      	lsls	r1, r2, #27
 801385c:	bf5f      	itttt	pl
 801385e:	681a      	ldrpl	r2, [r3, #0]
 8013860:	1d11      	addpl	r1, r2, #4
 8013862:	6019      	strpl	r1, [r3, #0]
 8013864:	6816      	ldrpl	r6, [r2, #0]
 8013866:	2700      	movs	r7, #0
 8013868:	69a0      	ldr	r0, [r4, #24]
 801386a:	b188      	cbz	r0, 8013890 <_scanf_chars+0x58>
 801386c:	2801      	cmp	r0, #1
 801386e:	d107      	bne.n	8013880 <_scanf_chars+0x48>
 8013870:	682a      	ldr	r2, [r5, #0]
 8013872:	7811      	ldrb	r1, [r2, #0]
 8013874:	6962      	ldr	r2, [r4, #20]
 8013876:	5c52      	ldrb	r2, [r2, r1]
 8013878:	b952      	cbnz	r2, 8013890 <_scanf_chars+0x58>
 801387a:	2f00      	cmp	r7, #0
 801387c:	d031      	beq.n	80138e2 <_scanf_chars+0xaa>
 801387e:	e022      	b.n	80138c6 <_scanf_chars+0x8e>
 8013880:	2802      	cmp	r0, #2
 8013882:	d120      	bne.n	80138c6 <_scanf_chars+0x8e>
 8013884:	682b      	ldr	r3, [r5, #0]
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	f819 3003 	ldrb.w	r3, [r9, r3]
 801388c:	071b      	lsls	r3, r3, #28
 801388e:	d41a      	bmi.n	80138c6 <_scanf_chars+0x8e>
 8013890:	6823      	ldr	r3, [r4, #0]
 8013892:	06da      	lsls	r2, r3, #27
 8013894:	bf5e      	ittt	pl
 8013896:	682b      	ldrpl	r3, [r5, #0]
 8013898:	781b      	ldrbpl	r3, [r3, #0]
 801389a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801389e:	682a      	ldr	r2, [r5, #0]
 80138a0:	686b      	ldr	r3, [r5, #4]
 80138a2:	3201      	adds	r2, #1
 80138a4:	602a      	str	r2, [r5, #0]
 80138a6:	68a2      	ldr	r2, [r4, #8]
 80138a8:	3b01      	subs	r3, #1
 80138aa:	3a01      	subs	r2, #1
 80138ac:	606b      	str	r3, [r5, #4]
 80138ae:	3701      	adds	r7, #1
 80138b0:	60a2      	str	r2, [r4, #8]
 80138b2:	b142      	cbz	r2, 80138c6 <_scanf_chars+0x8e>
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	dcd7      	bgt.n	8013868 <_scanf_chars+0x30>
 80138b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80138bc:	4629      	mov	r1, r5
 80138be:	4640      	mov	r0, r8
 80138c0:	4798      	blx	r3
 80138c2:	2800      	cmp	r0, #0
 80138c4:	d0d0      	beq.n	8013868 <_scanf_chars+0x30>
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	f013 0310 	ands.w	r3, r3, #16
 80138cc:	d105      	bne.n	80138da <_scanf_chars+0xa2>
 80138ce:	68e2      	ldr	r2, [r4, #12]
 80138d0:	3201      	adds	r2, #1
 80138d2:	60e2      	str	r2, [r4, #12]
 80138d4:	69a2      	ldr	r2, [r4, #24]
 80138d6:	b102      	cbz	r2, 80138da <_scanf_chars+0xa2>
 80138d8:	7033      	strb	r3, [r6, #0]
 80138da:	6923      	ldr	r3, [r4, #16]
 80138dc:	443b      	add	r3, r7
 80138de:	6123      	str	r3, [r4, #16]
 80138e0:	2000      	movs	r0, #0
 80138e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138e6:	bf00      	nop
 80138e8:	080580cb 	.word	0x080580cb

080138ec <_scanf_i>:
 80138ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f0:	4698      	mov	r8, r3
 80138f2:	4b74      	ldr	r3, [pc, #464]	; (8013ac4 <_scanf_i+0x1d8>)
 80138f4:	460c      	mov	r4, r1
 80138f6:	4682      	mov	sl, r0
 80138f8:	4616      	mov	r6, r2
 80138fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80138fe:	b087      	sub	sp, #28
 8013900:	ab03      	add	r3, sp, #12
 8013902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013906:	4b70      	ldr	r3, [pc, #448]	; (8013ac8 <_scanf_i+0x1dc>)
 8013908:	69a1      	ldr	r1, [r4, #24]
 801390a:	4a70      	ldr	r2, [pc, #448]	; (8013acc <_scanf_i+0x1e0>)
 801390c:	2903      	cmp	r1, #3
 801390e:	bf18      	it	ne
 8013910:	461a      	movne	r2, r3
 8013912:	68a3      	ldr	r3, [r4, #8]
 8013914:	9201      	str	r2, [sp, #4]
 8013916:	1e5a      	subs	r2, r3, #1
 8013918:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801391c:	bf88      	it	hi
 801391e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013922:	4627      	mov	r7, r4
 8013924:	bf82      	ittt	hi
 8013926:	eb03 0905 	addhi.w	r9, r3, r5
 801392a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801392e:	60a3      	strhi	r3, [r4, #8]
 8013930:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013934:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013938:	bf98      	it	ls
 801393a:	f04f 0900 	movls.w	r9, #0
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	463d      	mov	r5, r7
 8013942:	f04f 0b00 	mov.w	fp, #0
 8013946:	6831      	ldr	r1, [r6, #0]
 8013948:	ab03      	add	r3, sp, #12
 801394a:	7809      	ldrb	r1, [r1, #0]
 801394c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013950:	2202      	movs	r2, #2
 8013952:	f7ec fc3d 	bl	80001d0 <memchr>
 8013956:	b328      	cbz	r0, 80139a4 <_scanf_i+0xb8>
 8013958:	f1bb 0f01 	cmp.w	fp, #1
 801395c:	d159      	bne.n	8013a12 <_scanf_i+0x126>
 801395e:	6862      	ldr	r2, [r4, #4]
 8013960:	b92a      	cbnz	r2, 801396e <_scanf_i+0x82>
 8013962:	6822      	ldr	r2, [r4, #0]
 8013964:	2308      	movs	r3, #8
 8013966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801396a:	6063      	str	r3, [r4, #4]
 801396c:	6022      	str	r2, [r4, #0]
 801396e:	6822      	ldr	r2, [r4, #0]
 8013970:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013974:	6022      	str	r2, [r4, #0]
 8013976:	68a2      	ldr	r2, [r4, #8]
 8013978:	1e51      	subs	r1, r2, #1
 801397a:	60a1      	str	r1, [r4, #8]
 801397c:	b192      	cbz	r2, 80139a4 <_scanf_i+0xb8>
 801397e:	6832      	ldr	r2, [r6, #0]
 8013980:	1c51      	adds	r1, r2, #1
 8013982:	6031      	str	r1, [r6, #0]
 8013984:	7812      	ldrb	r2, [r2, #0]
 8013986:	f805 2b01 	strb.w	r2, [r5], #1
 801398a:	6872      	ldr	r2, [r6, #4]
 801398c:	3a01      	subs	r2, #1
 801398e:	2a00      	cmp	r2, #0
 8013990:	6072      	str	r2, [r6, #4]
 8013992:	dc07      	bgt.n	80139a4 <_scanf_i+0xb8>
 8013994:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013998:	4631      	mov	r1, r6
 801399a:	4650      	mov	r0, sl
 801399c:	4790      	blx	r2
 801399e:	2800      	cmp	r0, #0
 80139a0:	f040 8085 	bne.w	8013aae <_scanf_i+0x1c2>
 80139a4:	f10b 0b01 	add.w	fp, fp, #1
 80139a8:	f1bb 0f03 	cmp.w	fp, #3
 80139ac:	d1cb      	bne.n	8013946 <_scanf_i+0x5a>
 80139ae:	6863      	ldr	r3, [r4, #4]
 80139b0:	b90b      	cbnz	r3, 80139b6 <_scanf_i+0xca>
 80139b2:	230a      	movs	r3, #10
 80139b4:	6063      	str	r3, [r4, #4]
 80139b6:	6863      	ldr	r3, [r4, #4]
 80139b8:	4945      	ldr	r1, [pc, #276]	; (8013ad0 <_scanf_i+0x1e4>)
 80139ba:	6960      	ldr	r0, [r4, #20]
 80139bc:	1ac9      	subs	r1, r1, r3
 80139be:	f000 f949 	bl	8013c54 <__sccl>
 80139c2:	f04f 0b00 	mov.w	fp, #0
 80139c6:	68a3      	ldr	r3, [r4, #8]
 80139c8:	6822      	ldr	r2, [r4, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d03d      	beq.n	8013a4a <_scanf_i+0x15e>
 80139ce:	6831      	ldr	r1, [r6, #0]
 80139d0:	6960      	ldr	r0, [r4, #20]
 80139d2:	f891 c000 	ldrb.w	ip, [r1]
 80139d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80139da:	2800      	cmp	r0, #0
 80139dc:	d035      	beq.n	8013a4a <_scanf_i+0x15e>
 80139de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80139e2:	d124      	bne.n	8013a2e <_scanf_i+0x142>
 80139e4:	0510      	lsls	r0, r2, #20
 80139e6:	d522      	bpl.n	8013a2e <_scanf_i+0x142>
 80139e8:	f10b 0b01 	add.w	fp, fp, #1
 80139ec:	f1b9 0f00 	cmp.w	r9, #0
 80139f0:	d003      	beq.n	80139fa <_scanf_i+0x10e>
 80139f2:	3301      	adds	r3, #1
 80139f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80139f8:	60a3      	str	r3, [r4, #8]
 80139fa:	6873      	ldr	r3, [r6, #4]
 80139fc:	3b01      	subs	r3, #1
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	6073      	str	r3, [r6, #4]
 8013a02:	dd1b      	ble.n	8013a3c <_scanf_i+0x150>
 8013a04:	6833      	ldr	r3, [r6, #0]
 8013a06:	3301      	adds	r3, #1
 8013a08:	6033      	str	r3, [r6, #0]
 8013a0a:	68a3      	ldr	r3, [r4, #8]
 8013a0c:	3b01      	subs	r3, #1
 8013a0e:	60a3      	str	r3, [r4, #8]
 8013a10:	e7d9      	b.n	80139c6 <_scanf_i+0xda>
 8013a12:	f1bb 0f02 	cmp.w	fp, #2
 8013a16:	d1ae      	bne.n	8013976 <_scanf_i+0x8a>
 8013a18:	6822      	ldr	r2, [r4, #0]
 8013a1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013a1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013a22:	d1bf      	bne.n	80139a4 <_scanf_i+0xb8>
 8013a24:	2310      	movs	r3, #16
 8013a26:	6063      	str	r3, [r4, #4]
 8013a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013a2c:	e7a2      	b.n	8013974 <_scanf_i+0x88>
 8013a2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013a32:	6022      	str	r2, [r4, #0]
 8013a34:	780b      	ldrb	r3, [r1, #0]
 8013a36:	f805 3b01 	strb.w	r3, [r5], #1
 8013a3a:	e7de      	b.n	80139fa <_scanf_i+0x10e>
 8013a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013a40:	4631      	mov	r1, r6
 8013a42:	4650      	mov	r0, sl
 8013a44:	4798      	blx	r3
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d0df      	beq.n	8013a0a <_scanf_i+0x11e>
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	05d9      	lsls	r1, r3, #23
 8013a4e:	d50d      	bpl.n	8013a6c <_scanf_i+0x180>
 8013a50:	42bd      	cmp	r5, r7
 8013a52:	d909      	bls.n	8013a68 <_scanf_i+0x17c>
 8013a54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	4650      	mov	r0, sl
 8013a60:	4798      	blx	r3
 8013a62:	f105 39ff 	add.w	r9, r5, #4294967295
 8013a66:	464d      	mov	r5, r9
 8013a68:	42bd      	cmp	r5, r7
 8013a6a:	d028      	beq.n	8013abe <_scanf_i+0x1d2>
 8013a6c:	6822      	ldr	r2, [r4, #0]
 8013a6e:	f012 0210 	ands.w	r2, r2, #16
 8013a72:	d113      	bne.n	8013a9c <_scanf_i+0x1b0>
 8013a74:	702a      	strb	r2, [r5, #0]
 8013a76:	6863      	ldr	r3, [r4, #4]
 8013a78:	9e01      	ldr	r6, [sp, #4]
 8013a7a:	4639      	mov	r1, r7
 8013a7c:	4650      	mov	r0, sl
 8013a7e:	47b0      	blx	r6
 8013a80:	f8d8 3000 	ldr.w	r3, [r8]
 8013a84:	6821      	ldr	r1, [r4, #0]
 8013a86:	1d1a      	adds	r2, r3, #4
 8013a88:	f8c8 2000 	str.w	r2, [r8]
 8013a8c:	f011 0f20 	tst.w	r1, #32
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	d00f      	beq.n	8013ab4 <_scanf_i+0x1c8>
 8013a94:	6018      	str	r0, [r3, #0]
 8013a96:	68e3      	ldr	r3, [r4, #12]
 8013a98:	3301      	adds	r3, #1
 8013a9a:	60e3      	str	r3, [r4, #12]
 8013a9c:	6923      	ldr	r3, [r4, #16]
 8013a9e:	1bed      	subs	r5, r5, r7
 8013aa0:	445d      	add	r5, fp
 8013aa2:	442b      	add	r3, r5
 8013aa4:	6123      	str	r3, [r4, #16]
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	b007      	add	sp, #28
 8013aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aae:	f04f 0b00 	mov.w	fp, #0
 8013ab2:	e7ca      	b.n	8013a4a <_scanf_i+0x15e>
 8013ab4:	07ca      	lsls	r2, r1, #31
 8013ab6:	bf4c      	ite	mi
 8013ab8:	8018      	strhmi	r0, [r3, #0]
 8013aba:	6018      	strpl	r0, [r3, #0]
 8013abc:	e7eb      	b.n	8013a96 <_scanf_i+0x1aa>
 8013abe:	2001      	movs	r0, #1
 8013ac0:	e7f2      	b.n	8013aa8 <_scanf_i+0x1bc>
 8013ac2:	bf00      	nop
 8013ac4:	08014c80 	.word	0x08014c80
 8013ac8:	08014015 	.word	0x08014015
 8013acc:	08010c41 	.word	0x08010c41
 8013ad0:	080584a5 	.word	0x080584a5

08013ad4 <__sflush_r>:
 8013ad4:	898a      	ldrh	r2, [r1, #12]
 8013ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ada:	4605      	mov	r5, r0
 8013adc:	0710      	lsls	r0, r2, #28
 8013ade:	460c      	mov	r4, r1
 8013ae0:	d458      	bmi.n	8013b94 <__sflush_r+0xc0>
 8013ae2:	684b      	ldr	r3, [r1, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	dc05      	bgt.n	8013af4 <__sflush_r+0x20>
 8013ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	dc02      	bgt.n	8013af4 <__sflush_r+0x20>
 8013aee:	2000      	movs	r0, #0
 8013af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013af6:	2e00      	cmp	r6, #0
 8013af8:	d0f9      	beq.n	8013aee <__sflush_r+0x1a>
 8013afa:	2300      	movs	r3, #0
 8013afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b00:	682f      	ldr	r7, [r5, #0]
 8013b02:	6a21      	ldr	r1, [r4, #32]
 8013b04:	602b      	str	r3, [r5, #0]
 8013b06:	d032      	beq.n	8013b6e <__sflush_r+0x9a>
 8013b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b0a:	89a3      	ldrh	r3, [r4, #12]
 8013b0c:	075a      	lsls	r2, r3, #29
 8013b0e:	d505      	bpl.n	8013b1c <__sflush_r+0x48>
 8013b10:	6863      	ldr	r3, [r4, #4]
 8013b12:	1ac0      	subs	r0, r0, r3
 8013b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b16:	b10b      	cbz	r3, 8013b1c <__sflush_r+0x48>
 8013b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b1a:	1ac0      	subs	r0, r0, r3
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	4602      	mov	r2, r0
 8013b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b22:	6a21      	ldr	r1, [r4, #32]
 8013b24:	4628      	mov	r0, r5
 8013b26:	47b0      	blx	r6
 8013b28:	1c43      	adds	r3, r0, #1
 8013b2a:	89a3      	ldrh	r3, [r4, #12]
 8013b2c:	d106      	bne.n	8013b3c <__sflush_r+0x68>
 8013b2e:	6829      	ldr	r1, [r5, #0]
 8013b30:	291d      	cmp	r1, #29
 8013b32:	d82b      	bhi.n	8013b8c <__sflush_r+0xb8>
 8013b34:	4a29      	ldr	r2, [pc, #164]	; (8013bdc <__sflush_r+0x108>)
 8013b36:	410a      	asrs	r2, r1
 8013b38:	07d6      	lsls	r6, r2, #31
 8013b3a:	d427      	bmi.n	8013b8c <__sflush_r+0xb8>
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	6062      	str	r2, [r4, #4]
 8013b40:	04d9      	lsls	r1, r3, #19
 8013b42:	6922      	ldr	r2, [r4, #16]
 8013b44:	6022      	str	r2, [r4, #0]
 8013b46:	d504      	bpl.n	8013b52 <__sflush_r+0x7e>
 8013b48:	1c42      	adds	r2, r0, #1
 8013b4a:	d101      	bne.n	8013b50 <__sflush_r+0x7c>
 8013b4c:	682b      	ldr	r3, [r5, #0]
 8013b4e:	b903      	cbnz	r3, 8013b52 <__sflush_r+0x7e>
 8013b50:	6560      	str	r0, [r4, #84]	; 0x54
 8013b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b54:	602f      	str	r7, [r5, #0]
 8013b56:	2900      	cmp	r1, #0
 8013b58:	d0c9      	beq.n	8013aee <__sflush_r+0x1a>
 8013b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b5e:	4299      	cmp	r1, r3
 8013b60:	d002      	beq.n	8013b68 <__sflush_r+0x94>
 8013b62:	4628      	mov	r0, r5
 8013b64:	f7fe fe12 	bl	801278c <_free_r>
 8013b68:	2000      	movs	r0, #0
 8013b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8013b6c:	e7c0      	b.n	8013af0 <__sflush_r+0x1c>
 8013b6e:	2301      	movs	r3, #1
 8013b70:	4628      	mov	r0, r5
 8013b72:	47b0      	blx	r6
 8013b74:	1c41      	adds	r1, r0, #1
 8013b76:	d1c8      	bne.n	8013b0a <__sflush_r+0x36>
 8013b78:	682b      	ldr	r3, [r5, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d0c5      	beq.n	8013b0a <__sflush_r+0x36>
 8013b7e:	2b1d      	cmp	r3, #29
 8013b80:	d001      	beq.n	8013b86 <__sflush_r+0xb2>
 8013b82:	2b16      	cmp	r3, #22
 8013b84:	d101      	bne.n	8013b8a <__sflush_r+0xb6>
 8013b86:	602f      	str	r7, [r5, #0]
 8013b88:	e7b1      	b.n	8013aee <__sflush_r+0x1a>
 8013b8a:	89a3      	ldrh	r3, [r4, #12]
 8013b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b90:	81a3      	strh	r3, [r4, #12]
 8013b92:	e7ad      	b.n	8013af0 <__sflush_r+0x1c>
 8013b94:	690f      	ldr	r7, [r1, #16]
 8013b96:	2f00      	cmp	r7, #0
 8013b98:	d0a9      	beq.n	8013aee <__sflush_r+0x1a>
 8013b9a:	0793      	lsls	r3, r2, #30
 8013b9c:	680e      	ldr	r6, [r1, #0]
 8013b9e:	bf08      	it	eq
 8013ba0:	694b      	ldreq	r3, [r1, #20]
 8013ba2:	600f      	str	r7, [r1, #0]
 8013ba4:	bf18      	it	ne
 8013ba6:	2300      	movne	r3, #0
 8013ba8:	eba6 0807 	sub.w	r8, r6, r7
 8013bac:	608b      	str	r3, [r1, #8]
 8013bae:	f1b8 0f00 	cmp.w	r8, #0
 8013bb2:	dd9c      	ble.n	8013aee <__sflush_r+0x1a>
 8013bb4:	6a21      	ldr	r1, [r4, #32]
 8013bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bb8:	4643      	mov	r3, r8
 8013bba:	463a      	mov	r2, r7
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	47b0      	blx	r6
 8013bc0:	2800      	cmp	r0, #0
 8013bc2:	dc06      	bgt.n	8013bd2 <__sflush_r+0xfe>
 8013bc4:	89a3      	ldrh	r3, [r4, #12]
 8013bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bca:	81a3      	strh	r3, [r4, #12]
 8013bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd0:	e78e      	b.n	8013af0 <__sflush_r+0x1c>
 8013bd2:	4407      	add	r7, r0
 8013bd4:	eba8 0800 	sub.w	r8, r8, r0
 8013bd8:	e7e9      	b.n	8013bae <__sflush_r+0xda>
 8013bda:	bf00      	nop
 8013bdc:	dfbffffe 	.word	0xdfbffffe

08013be0 <_fflush_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	690b      	ldr	r3, [r1, #16]
 8013be4:	4605      	mov	r5, r0
 8013be6:	460c      	mov	r4, r1
 8013be8:	b913      	cbnz	r3, 8013bf0 <_fflush_r+0x10>
 8013bea:	2500      	movs	r5, #0
 8013bec:	4628      	mov	r0, r5
 8013bee:	bd38      	pop	{r3, r4, r5, pc}
 8013bf0:	b118      	cbz	r0, 8013bfa <_fflush_r+0x1a>
 8013bf2:	6a03      	ldr	r3, [r0, #32]
 8013bf4:	b90b      	cbnz	r3, 8013bfa <_fflush_r+0x1a>
 8013bf6:	f7fd fd21 	bl	801163c <__sinit>
 8013bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d0f3      	beq.n	8013bea <_fflush_r+0xa>
 8013c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c04:	07d0      	lsls	r0, r2, #31
 8013c06:	d404      	bmi.n	8013c12 <_fflush_r+0x32>
 8013c08:	0599      	lsls	r1, r3, #22
 8013c0a:	d402      	bmi.n	8013c12 <_fflush_r+0x32>
 8013c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c0e:	f7fd ff0c 	bl	8011a2a <__retarget_lock_acquire_recursive>
 8013c12:	4628      	mov	r0, r5
 8013c14:	4621      	mov	r1, r4
 8013c16:	f7ff ff5d 	bl	8013ad4 <__sflush_r>
 8013c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c1c:	07da      	lsls	r2, r3, #31
 8013c1e:	4605      	mov	r5, r0
 8013c20:	d4e4      	bmi.n	8013bec <_fflush_r+0xc>
 8013c22:	89a3      	ldrh	r3, [r4, #12]
 8013c24:	059b      	lsls	r3, r3, #22
 8013c26:	d4e1      	bmi.n	8013bec <_fflush_r+0xc>
 8013c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c2a:	f7fd feff 	bl	8011a2c <__retarget_lock_release_recursive>
 8013c2e:	e7dd      	b.n	8013bec <_fflush_r+0xc>

08013c30 <fiprintf>:
 8013c30:	b40e      	push	{r1, r2, r3}
 8013c32:	b503      	push	{r0, r1, lr}
 8013c34:	4601      	mov	r1, r0
 8013c36:	ab03      	add	r3, sp, #12
 8013c38:	4805      	ldr	r0, [pc, #20]	; (8013c50 <fiprintf+0x20>)
 8013c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c3e:	6800      	ldr	r0, [r0, #0]
 8013c40:	9301      	str	r3, [sp, #4]
 8013c42:	f7ff fcdf 	bl	8013604 <_vfiprintf_r>
 8013c46:	b002      	add	sp, #8
 8013c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c4c:	b003      	add	sp, #12
 8013c4e:	4770      	bx	lr
 8013c50:	20000e50 	.word	0x20000e50

08013c54 <__sccl>:
 8013c54:	b570      	push	{r4, r5, r6, lr}
 8013c56:	780b      	ldrb	r3, [r1, #0]
 8013c58:	4604      	mov	r4, r0
 8013c5a:	2b5e      	cmp	r3, #94	; 0x5e
 8013c5c:	bf0b      	itete	eq
 8013c5e:	784b      	ldrbeq	r3, [r1, #1]
 8013c60:	1c4a      	addne	r2, r1, #1
 8013c62:	1c8a      	addeq	r2, r1, #2
 8013c64:	2100      	movne	r1, #0
 8013c66:	bf08      	it	eq
 8013c68:	2101      	moveq	r1, #1
 8013c6a:	3801      	subs	r0, #1
 8013c6c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013c70:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013c74:	42a8      	cmp	r0, r5
 8013c76:	d1fb      	bne.n	8013c70 <__sccl+0x1c>
 8013c78:	b90b      	cbnz	r3, 8013c7e <__sccl+0x2a>
 8013c7a:	1e50      	subs	r0, r2, #1
 8013c7c:	bd70      	pop	{r4, r5, r6, pc}
 8013c7e:	f081 0101 	eor.w	r1, r1, #1
 8013c82:	54e1      	strb	r1, [r4, r3]
 8013c84:	4610      	mov	r0, r2
 8013c86:	4602      	mov	r2, r0
 8013c88:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013c8c:	2d2d      	cmp	r5, #45	; 0x2d
 8013c8e:	d005      	beq.n	8013c9c <__sccl+0x48>
 8013c90:	2d5d      	cmp	r5, #93	; 0x5d
 8013c92:	d016      	beq.n	8013cc2 <__sccl+0x6e>
 8013c94:	2d00      	cmp	r5, #0
 8013c96:	d0f1      	beq.n	8013c7c <__sccl+0x28>
 8013c98:	462b      	mov	r3, r5
 8013c9a:	e7f2      	b.n	8013c82 <__sccl+0x2e>
 8013c9c:	7846      	ldrb	r6, [r0, #1]
 8013c9e:	2e5d      	cmp	r6, #93	; 0x5d
 8013ca0:	d0fa      	beq.n	8013c98 <__sccl+0x44>
 8013ca2:	42b3      	cmp	r3, r6
 8013ca4:	dcf8      	bgt.n	8013c98 <__sccl+0x44>
 8013ca6:	3002      	adds	r0, #2
 8013ca8:	461a      	mov	r2, r3
 8013caa:	3201      	adds	r2, #1
 8013cac:	4296      	cmp	r6, r2
 8013cae:	54a1      	strb	r1, [r4, r2]
 8013cb0:	dcfb      	bgt.n	8013caa <__sccl+0x56>
 8013cb2:	1af2      	subs	r2, r6, r3
 8013cb4:	3a01      	subs	r2, #1
 8013cb6:	1c5d      	adds	r5, r3, #1
 8013cb8:	42b3      	cmp	r3, r6
 8013cba:	bfa8      	it	ge
 8013cbc:	2200      	movge	r2, #0
 8013cbe:	18ab      	adds	r3, r5, r2
 8013cc0:	e7e1      	b.n	8013c86 <__sccl+0x32>
 8013cc2:	4610      	mov	r0, r2
 8013cc4:	e7da      	b.n	8013c7c <__sccl+0x28>

08013cc6 <__submore>:
 8013cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cca:	460c      	mov	r4, r1
 8013ccc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cd2:	4299      	cmp	r1, r3
 8013cd4:	d11d      	bne.n	8013d12 <__submore+0x4c>
 8013cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013cda:	f7fc fea3 	bl	8010a24 <_malloc_r>
 8013cde:	b918      	cbnz	r0, 8013ce8 <__submore+0x22>
 8013ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cec:	63a3      	str	r3, [r4, #56]	; 0x38
 8013cee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8013cf4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013cf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013cfc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013d00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013d04:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013d08:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013d0c:	6020      	str	r0, [r4, #0]
 8013d0e:	2000      	movs	r0, #0
 8013d10:	e7e8      	b.n	8013ce4 <__submore+0x1e>
 8013d12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013d14:	0077      	lsls	r7, r6, #1
 8013d16:	463a      	mov	r2, r7
 8013d18:	f000 f8db 	bl	8013ed2 <_realloc_r>
 8013d1c:	4605      	mov	r5, r0
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d0de      	beq.n	8013ce0 <__submore+0x1a>
 8013d22:	eb00 0806 	add.w	r8, r0, r6
 8013d26:	4601      	mov	r1, r0
 8013d28:	4632      	mov	r2, r6
 8013d2a:	4640      	mov	r0, r8
 8013d2c:	f7fd fe87 	bl	8011a3e <memcpy>
 8013d30:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013d34:	f8c4 8000 	str.w	r8, [r4]
 8013d38:	e7e9      	b.n	8013d0e <__submore+0x48>

08013d3a <__swbuf_r>:
 8013d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d3c:	460e      	mov	r6, r1
 8013d3e:	4614      	mov	r4, r2
 8013d40:	4605      	mov	r5, r0
 8013d42:	b118      	cbz	r0, 8013d4c <__swbuf_r+0x12>
 8013d44:	6a03      	ldr	r3, [r0, #32]
 8013d46:	b90b      	cbnz	r3, 8013d4c <__swbuf_r+0x12>
 8013d48:	f7fd fc78 	bl	801163c <__sinit>
 8013d4c:	69a3      	ldr	r3, [r4, #24]
 8013d4e:	60a3      	str	r3, [r4, #8]
 8013d50:	89a3      	ldrh	r3, [r4, #12]
 8013d52:	071a      	lsls	r2, r3, #28
 8013d54:	d525      	bpl.n	8013da2 <__swbuf_r+0x68>
 8013d56:	6923      	ldr	r3, [r4, #16]
 8013d58:	b31b      	cbz	r3, 8013da2 <__swbuf_r+0x68>
 8013d5a:	6823      	ldr	r3, [r4, #0]
 8013d5c:	6922      	ldr	r2, [r4, #16]
 8013d5e:	1a98      	subs	r0, r3, r2
 8013d60:	6963      	ldr	r3, [r4, #20]
 8013d62:	b2f6      	uxtb	r6, r6
 8013d64:	4283      	cmp	r3, r0
 8013d66:	4637      	mov	r7, r6
 8013d68:	dc04      	bgt.n	8013d74 <__swbuf_r+0x3a>
 8013d6a:	4621      	mov	r1, r4
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	f7ff ff37 	bl	8013be0 <_fflush_r>
 8013d72:	b9e0      	cbnz	r0, 8013dae <__swbuf_r+0x74>
 8013d74:	68a3      	ldr	r3, [r4, #8]
 8013d76:	3b01      	subs	r3, #1
 8013d78:	60a3      	str	r3, [r4, #8]
 8013d7a:	6823      	ldr	r3, [r4, #0]
 8013d7c:	1c5a      	adds	r2, r3, #1
 8013d7e:	6022      	str	r2, [r4, #0]
 8013d80:	701e      	strb	r6, [r3, #0]
 8013d82:	6962      	ldr	r2, [r4, #20]
 8013d84:	1c43      	adds	r3, r0, #1
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d004      	beq.n	8013d94 <__swbuf_r+0x5a>
 8013d8a:	89a3      	ldrh	r3, [r4, #12]
 8013d8c:	07db      	lsls	r3, r3, #31
 8013d8e:	d506      	bpl.n	8013d9e <__swbuf_r+0x64>
 8013d90:	2e0a      	cmp	r6, #10
 8013d92:	d104      	bne.n	8013d9e <__swbuf_r+0x64>
 8013d94:	4621      	mov	r1, r4
 8013d96:	4628      	mov	r0, r5
 8013d98:	f7ff ff22 	bl	8013be0 <_fflush_r>
 8013d9c:	b938      	cbnz	r0, 8013dae <__swbuf_r+0x74>
 8013d9e:	4638      	mov	r0, r7
 8013da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013da2:	4621      	mov	r1, r4
 8013da4:	4628      	mov	r0, r5
 8013da6:	f000 f805 	bl	8013db4 <__swsetup_r>
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d0d5      	beq.n	8013d5a <__swbuf_r+0x20>
 8013dae:	f04f 37ff 	mov.w	r7, #4294967295
 8013db2:	e7f4      	b.n	8013d9e <__swbuf_r+0x64>

08013db4 <__swsetup_r>:
 8013db4:	b538      	push	{r3, r4, r5, lr}
 8013db6:	4b2a      	ldr	r3, [pc, #168]	; (8013e60 <__swsetup_r+0xac>)
 8013db8:	4605      	mov	r5, r0
 8013dba:	6818      	ldr	r0, [r3, #0]
 8013dbc:	460c      	mov	r4, r1
 8013dbe:	b118      	cbz	r0, 8013dc8 <__swsetup_r+0x14>
 8013dc0:	6a03      	ldr	r3, [r0, #32]
 8013dc2:	b90b      	cbnz	r3, 8013dc8 <__swsetup_r+0x14>
 8013dc4:	f7fd fc3a 	bl	801163c <__sinit>
 8013dc8:	89a3      	ldrh	r3, [r4, #12]
 8013dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013dce:	0718      	lsls	r0, r3, #28
 8013dd0:	d422      	bmi.n	8013e18 <__swsetup_r+0x64>
 8013dd2:	06d9      	lsls	r1, r3, #27
 8013dd4:	d407      	bmi.n	8013de6 <__swsetup_r+0x32>
 8013dd6:	2309      	movs	r3, #9
 8013dd8:	602b      	str	r3, [r5, #0]
 8013dda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013dde:	81a3      	strh	r3, [r4, #12]
 8013de0:	f04f 30ff 	mov.w	r0, #4294967295
 8013de4:	e034      	b.n	8013e50 <__swsetup_r+0x9c>
 8013de6:	0758      	lsls	r0, r3, #29
 8013de8:	d512      	bpl.n	8013e10 <__swsetup_r+0x5c>
 8013dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013dec:	b141      	cbz	r1, 8013e00 <__swsetup_r+0x4c>
 8013dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013df2:	4299      	cmp	r1, r3
 8013df4:	d002      	beq.n	8013dfc <__swsetup_r+0x48>
 8013df6:	4628      	mov	r0, r5
 8013df8:	f7fe fcc8 	bl	801278c <_free_r>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e06:	81a3      	strh	r3, [r4, #12]
 8013e08:	2300      	movs	r3, #0
 8013e0a:	6063      	str	r3, [r4, #4]
 8013e0c:	6923      	ldr	r3, [r4, #16]
 8013e0e:	6023      	str	r3, [r4, #0]
 8013e10:	89a3      	ldrh	r3, [r4, #12]
 8013e12:	f043 0308 	orr.w	r3, r3, #8
 8013e16:	81a3      	strh	r3, [r4, #12]
 8013e18:	6923      	ldr	r3, [r4, #16]
 8013e1a:	b94b      	cbnz	r3, 8013e30 <__swsetup_r+0x7c>
 8013e1c:	89a3      	ldrh	r3, [r4, #12]
 8013e1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e26:	d003      	beq.n	8013e30 <__swsetup_r+0x7c>
 8013e28:	4621      	mov	r1, r4
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	f000 f91a 	bl	8014064 <__smakebuf_r>
 8013e30:	89a0      	ldrh	r0, [r4, #12]
 8013e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e36:	f010 0301 	ands.w	r3, r0, #1
 8013e3a:	d00a      	beq.n	8013e52 <__swsetup_r+0x9e>
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	60a3      	str	r3, [r4, #8]
 8013e40:	6963      	ldr	r3, [r4, #20]
 8013e42:	425b      	negs	r3, r3
 8013e44:	61a3      	str	r3, [r4, #24]
 8013e46:	6923      	ldr	r3, [r4, #16]
 8013e48:	b943      	cbnz	r3, 8013e5c <__swsetup_r+0xa8>
 8013e4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e4e:	d1c4      	bne.n	8013dda <__swsetup_r+0x26>
 8013e50:	bd38      	pop	{r3, r4, r5, pc}
 8013e52:	0781      	lsls	r1, r0, #30
 8013e54:	bf58      	it	pl
 8013e56:	6963      	ldrpl	r3, [r4, #20]
 8013e58:	60a3      	str	r3, [r4, #8]
 8013e5a:	e7f4      	b.n	8013e46 <__swsetup_r+0x92>
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	e7f7      	b.n	8013e50 <__swsetup_r+0x9c>
 8013e60:	20000e50 	.word	0x20000e50

08013e64 <memmove>:
 8013e64:	4288      	cmp	r0, r1
 8013e66:	b510      	push	{r4, lr}
 8013e68:	eb01 0402 	add.w	r4, r1, r2
 8013e6c:	d902      	bls.n	8013e74 <memmove+0x10>
 8013e6e:	4284      	cmp	r4, r0
 8013e70:	4623      	mov	r3, r4
 8013e72:	d807      	bhi.n	8013e84 <memmove+0x20>
 8013e74:	1e43      	subs	r3, r0, #1
 8013e76:	42a1      	cmp	r1, r4
 8013e78:	d008      	beq.n	8013e8c <memmove+0x28>
 8013e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e82:	e7f8      	b.n	8013e76 <memmove+0x12>
 8013e84:	4402      	add	r2, r0
 8013e86:	4601      	mov	r1, r0
 8013e88:	428a      	cmp	r2, r1
 8013e8a:	d100      	bne.n	8013e8e <memmove+0x2a>
 8013e8c:	bd10      	pop	{r4, pc}
 8013e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e96:	e7f7      	b.n	8013e88 <memmove+0x24>

08013e98 <abort>:
 8013e98:	b508      	push	{r3, lr}
 8013e9a:	2006      	movs	r0, #6
 8013e9c:	f000 f946 	bl	801412c <raise>
 8013ea0:	2001      	movs	r0, #1
 8013ea2:	f7ed fe2b 	bl	8001afc <_exit>

08013ea6 <_calloc_r>:
 8013ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ea8:	fba1 2402 	umull	r2, r4, r1, r2
 8013eac:	b94c      	cbnz	r4, 8013ec2 <_calloc_r+0x1c>
 8013eae:	4611      	mov	r1, r2
 8013eb0:	9201      	str	r2, [sp, #4]
 8013eb2:	f7fc fdb7 	bl	8010a24 <_malloc_r>
 8013eb6:	9a01      	ldr	r2, [sp, #4]
 8013eb8:	4605      	mov	r5, r0
 8013eba:	b930      	cbnz	r0, 8013eca <_calloc_r+0x24>
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	b003      	add	sp, #12
 8013ec0:	bd30      	pop	{r4, r5, pc}
 8013ec2:	220c      	movs	r2, #12
 8013ec4:	6002      	str	r2, [r0, #0]
 8013ec6:	2500      	movs	r5, #0
 8013ec8:	e7f8      	b.n	8013ebc <_calloc_r+0x16>
 8013eca:	4621      	mov	r1, r4
 8013ecc:	f7fd fc8f 	bl	80117ee <memset>
 8013ed0:	e7f4      	b.n	8013ebc <_calloc_r+0x16>

08013ed2 <_realloc_r>:
 8013ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed6:	4680      	mov	r8, r0
 8013ed8:	4614      	mov	r4, r2
 8013eda:	460e      	mov	r6, r1
 8013edc:	b921      	cbnz	r1, 8013ee8 <_realloc_r+0x16>
 8013ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee2:	4611      	mov	r1, r2
 8013ee4:	f7fc bd9e 	b.w	8010a24 <_malloc_r>
 8013ee8:	b92a      	cbnz	r2, 8013ef6 <_realloc_r+0x24>
 8013eea:	f7fe fc4f 	bl	801278c <_free_r>
 8013eee:	4625      	mov	r5, r4
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef6:	f000 f957 	bl	80141a8 <_malloc_usable_size_r>
 8013efa:	4284      	cmp	r4, r0
 8013efc:	4607      	mov	r7, r0
 8013efe:	d802      	bhi.n	8013f06 <_realloc_r+0x34>
 8013f00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013f04:	d812      	bhi.n	8013f2c <_realloc_r+0x5a>
 8013f06:	4621      	mov	r1, r4
 8013f08:	4640      	mov	r0, r8
 8013f0a:	f7fc fd8b 	bl	8010a24 <_malloc_r>
 8013f0e:	4605      	mov	r5, r0
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d0ed      	beq.n	8013ef0 <_realloc_r+0x1e>
 8013f14:	42bc      	cmp	r4, r7
 8013f16:	4622      	mov	r2, r4
 8013f18:	4631      	mov	r1, r6
 8013f1a:	bf28      	it	cs
 8013f1c:	463a      	movcs	r2, r7
 8013f1e:	f7fd fd8e 	bl	8011a3e <memcpy>
 8013f22:	4631      	mov	r1, r6
 8013f24:	4640      	mov	r0, r8
 8013f26:	f7fe fc31 	bl	801278c <_free_r>
 8013f2a:	e7e1      	b.n	8013ef0 <_realloc_r+0x1e>
 8013f2c:	4635      	mov	r5, r6
 8013f2e:	e7df      	b.n	8013ef0 <_realloc_r+0x1e>

08013f30 <_strtoul_l.constprop.0>:
 8013f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f34:	4f36      	ldr	r7, [pc, #216]	; (8014010 <_strtoul_l.constprop.0+0xe0>)
 8013f36:	4686      	mov	lr, r0
 8013f38:	460d      	mov	r5, r1
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f40:	5d3e      	ldrb	r6, [r7, r4]
 8013f42:	f016 0608 	ands.w	r6, r6, #8
 8013f46:	d1f8      	bne.n	8013f3a <_strtoul_l.constprop.0+0xa>
 8013f48:	2c2d      	cmp	r4, #45	; 0x2d
 8013f4a:	d130      	bne.n	8013fae <_strtoul_l.constprop.0+0x7e>
 8013f4c:	782c      	ldrb	r4, [r5, #0]
 8013f4e:	2601      	movs	r6, #1
 8013f50:	1c85      	adds	r5, r0, #2
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d057      	beq.n	8014006 <_strtoul_l.constprop.0+0xd6>
 8013f56:	2b10      	cmp	r3, #16
 8013f58:	d109      	bne.n	8013f6e <_strtoul_l.constprop.0+0x3e>
 8013f5a:	2c30      	cmp	r4, #48	; 0x30
 8013f5c:	d107      	bne.n	8013f6e <_strtoul_l.constprop.0+0x3e>
 8013f5e:	7828      	ldrb	r0, [r5, #0]
 8013f60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013f64:	2858      	cmp	r0, #88	; 0x58
 8013f66:	d149      	bne.n	8013ffc <_strtoul_l.constprop.0+0xcc>
 8013f68:	786c      	ldrb	r4, [r5, #1]
 8013f6a:	2310      	movs	r3, #16
 8013f6c:	3502      	adds	r5, #2
 8013f6e:	f04f 38ff 	mov.w	r8, #4294967295
 8013f72:	2700      	movs	r7, #0
 8013f74:	fbb8 f8f3 	udiv	r8, r8, r3
 8013f78:	fb03 f908 	mul.w	r9, r3, r8
 8013f7c:	ea6f 0909 	mvn.w	r9, r9
 8013f80:	4638      	mov	r0, r7
 8013f82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013f86:	f1bc 0f09 	cmp.w	ip, #9
 8013f8a:	d815      	bhi.n	8013fb8 <_strtoul_l.constprop.0+0x88>
 8013f8c:	4664      	mov	r4, ip
 8013f8e:	42a3      	cmp	r3, r4
 8013f90:	dd23      	ble.n	8013fda <_strtoul_l.constprop.0+0xaa>
 8013f92:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013f96:	d007      	beq.n	8013fa8 <_strtoul_l.constprop.0+0x78>
 8013f98:	4580      	cmp	r8, r0
 8013f9a:	d31b      	bcc.n	8013fd4 <_strtoul_l.constprop.0+0xa4>
 8013f9c:	d101      	bne.n	8013fa2 <_strtoul_l.constprop.0+0x72>
 8013f9e:	45a1      	cmp	r9, r4
 8013fa0:	db18      	blt.n	8013fd4 <_strtoul_l.constprop.0+0xa4>
 8013fa2:	fb00 4003 	mla	r0, r0, r3, r4
 8013fa6:	2701      	movs	r7, #1
 8013fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013fac:	e7e9      	b.n	8013f82 <_strtoul_l.constprop.0+0x52>
 8013fae:	2c2b      	cmp	r4, #43	; 0x2b
 8013fb0:	bf04      	itt	eq
 8013fb2:	782c      	ldrbeq	r4, [r5, #0]
 8013fb4:	1c85      	addeq	r5, r0, #2
 8013fb6:	e7cc      	b.n	8013f52 <_strtoul_l.constprop.0+0x22>
 8013fb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013fbc:	f1bc 0f19 	cmp.w	ip, #25
 8013fc0:	d801      	bhi.n	8013fc6 <_strtoul_l.constprop.0+0x96>
 8013fc2:	3c37      	subs	r4, #55	; 0x37
 8013fc4:	e7e3      	b.n	8013f8e <_strtoul_l.constprop.0+0x5e>
 8013fc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013fca:	f1bc 0f19 	cmp.w	ip, #25
 8013fce:	d804      	bhi.n	8013fda <_strtoul_l.constprop.0+0xaa>
 8013fd0:	3c57      	subs	r4, #87	; 0x57
 8013fd2:	e7dc      	b.n	8013f8e <_strtoul_l.constprop.0+0x5e>
 8013fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8013fd8:	e7e6      	b.n	8013fa8 <_strtoul_l.constprop.0+0x78>
 8013fda:	1c7b      	adds	r3, r7, #1
 8013fdc:	d106      	bne.n	8013fec <_strtoul_l.constprop.0+0xbc>
 8013fde:	2322      	movs	r3, #34	; 0x22
 8013fe0:	f8ce 3000 	str.w	r3, [lr]
 8013fe4:	4638      	mov	r0, r7
 8013fe6:	b932      	cbnz	r2, 8013ff6 <_strtoul_l.constprop.0+0xc6>
 8013fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fec:	b106      	cbz	r6, 8013ff0 <_strtoul_l.constprop.0+0xc0>
 8013fee:	4240      	negs	r0, r0
 8013ff0:	2a00      	cmp	r2, #0
 8013ff2:	d0f9      	beq.n	8013fe8 <_strtoul_l.constprop.0+0xb8>
 8013ff4:	b107      	cbz	r7, 8013ff8 <_strtoul_l.constprop.0+0xc8>
 8013ff6:	1e69      	subs	r1, r5, #1
 8013ff8:	6011      	str	r1, [r2, #0]
 8013ffa:	e7f5      	b.n	8013fe8 <_strtoul_l.constprop.0+0xb8>
 8013ffc:	2430      	movs	r4, #48	; 0x30
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d1b5      	bne.n	8013f6e <_strtoul_l.constprop.0+0x3e>
 8014002:	2308      	movs	r3, #8
 8014004:	e7b3      	b.n	8013f6e <_strtoul_l.constprop.0+0x3e>
 8014006:	2c30      	cmp	r4, #48	; 0x30
 8014008:	d0a9      	beq.n	8013f5e <_strtoul_l.constprop.0+0x2e>
 801400a:	230a      	movs	r3, #10
 801400c:	e7af      	b.n	8013f6e <_strtoul_l.constprop.0+0x3e>
 801400e:	bf00      	nop
 8014010:	080580cb 	.word	0x080580cb

08014014 <_strtoul_r>:
 8014014:	f7ff bf8c 	b.w	8013f30 <_strtoul_l.constprop.0>

08014018 <__swhatbuf_r>:
 8014018:	b570      	push	{r4, r5, r6, lr}
 801401a:	460c      	mov	r4, r1
 801401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014020:	2900      	cmp	r1, #0
 8014022:	b096      	sub	sp, #88	; 0x58
 8014024:	4615      	mov	r5, r2
 8014026:	461e      	mov	r6, r3
 8014028:	da0d      	bge.n	8014046 <__swhatbuf_r+0x2e>
 801402a:	89a3      	ldrh	r3, [r4, #12]
 801402c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014030:	f04f 0100 	mov.w	r1, #0
 8014034:	bf0c      	ite	eq
 8014036:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801403a:	2340      	movne	r3, #64	; 0x40
 801403c:	2000      	movs	r0, #0
 801403e:	6031      	str	r1, [r6, #0]
 8014040:	602b      	str	r3, [r5, #0]
 8014042:	b016      	add	sp, #88	; 0x58
 8014044:	bd70      	pop	{r4, r5, r6, pc}
 8014046:	466a      	mov	r2, sp
 8014048:	f000 f878 	bl	801413c <_fstat_r>
 801404c:	2800      	cmp	r0, #0
 801404e:	dbec      	blt.n	801402a <__swhatbuf_r+0x12>
 8014050:	9901      	ldr	r1, [sp, #4]
 8014052:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014056:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801405a:	4259      	negs	r1, r3
 801405c:	4159      	adcs	r1, r3
 801405e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014062:	e7eb      	b.n	801403c <__swhatbuf_r+0x24>

08014064 <__smakebuf_r>:
 8014064:	898b      	ldrh	r3, [r1, #12]
 8014066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014068:	079d      	lsls	r5, r3, #30
 801406a:	4606      	mov	r6, r0
 801406c:	460c      	mov	r4, r1
 801406e:	d507      	bpl.n	8014080 <__smakebuf_r+0x1c>
 8014070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014074:	6023      	str	r3, [r4, #0]
 8014076:	6123      	str	r3, [r4, #16]
 8014078:	2301      	movs	r3, #1
 801407a:	6163      	str	r3, [r4, #20]
 801407c:	b002      	add	sp, #8
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	ab01      	add	r3, sp, #4
 8014082:	466a      	mov	r2, sp
 8014084:	f7ff ffc8 	bl	8014018 <__swhatbuf_r>
 8014088:	9900      	ldr	r1, [sp, #0]
 801408a:	4605      	mov	r5, r0
 801408c:	4630      	mov	r0, r6
 801408e:	f7fc fcc9 	bl	8010a24 <_malloc_r>
 8014092:	b948      	cbnz	r0, 80140a8 <__smakebuf_r+0x44>
 8014094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014098:	059a      	lsls	r2, r3, #22
 801409a:	d4ef      	bmi.n	801407c <__smakebuf_r+0x18>
 801409c:	f023 0303 	bic.w	r3, r3, #3
 80140a0:	f043 0302 	orr.w	r3, r3, #2
 80140a4:	81a3      	strh	r3, [r4, #12]
 80140a6:	e7e3      	b.n	8014070 <__smakebuf_r+0xc>
 80140a8:	89a3      	ldrh	r3, [r4, #12]
 80140aa:	6020      	str	r0, [r4, #0]
 80140ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140b0:	81a3      	strh	r3, [r4, #12]
 80140b2:	9b00      	ldr	r3, [sp, #0]
 80140b4:	6163      	str	r3, [r4, #20]
 80140b6:	9b01      	ldr	r3, [sp, #4]
 80140b8:	6120      	str	r0, [r4, #16]
 80140ba:	b15b      	cbz	r3, 80140d4 <__smakebuf_r+0x70>
 80140bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140c0:	4630      	mov	r0, r6
 80140c2:	f000 f84d 	bl	8014160 <_isatty_r>
 80140c6:	b128      	cbz	r0, 80140d4 <__smakebuf_r+0x70>
 80140c8:	89a3      	ldrh	r3, [r4, #12]
 80140ca:	f023 0303 	bic.w	r3, r3, #3
 80140ce:	f043 0301 	orr.w	r3, r3, #1
 80140d2:	81a3      	strh	r3, [r4, #12]
 80140d4:	89a3      	ldrh	r3, [r4, #12]
 80140d6:	431d      	orrs	r5, r3
 80140d8:	81a5      	strh	r5, [r4, #12]
 80140da:	e7cf      	b.n	801407c <__smakebuf_r+0x18>

080140dc <_raise_r>:
 80140dc:	291f      	cmp	r1, #31
 80140de:	b538      	push	{r3, r4, r5, lr}
 80140e0:	4604      	mov	r4, r0
 80140e2:	460d      	mov	r5, r1
 80140e4:	d904      	bls.n	80140f0 <_raise_r+0x14>
 80140e6:	2316      	movs	r3, #22
 80140e8:	6003      	str	r3, [r0, #0]
 80140ea:	f04f 30ff 	mov.w	r0, #4294967295
 80140ee:	bd38      	pop	{r3, r4, r5, pc}
 80140f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80140f2:	b112      	cbz	r2, 80140fa <_raise_r+0x1e>
 80140f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80140f8:	b94b      	cbnz	r3, 801410e <_raise_r+0x32>
 80140fa:	4620      	mov	r0, r4
 80140fc:	f000 f852 	bl	80141a4 <_getpid_r>
 8014100:	462a      	mov	r2, r5
 8014102:	4601      	mov	r1, r0
 8014104:	4620      	mov	r0, r4
 8014106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801410a:	f000 b839 	b.w	8014180 <_kill_r>
 801410e:	2b01      	cmp	r3, #1
 8014110:	d00a      	beq.n	8014128 <_raise_r+0x4c>
 8014112:	1c59      	adds	r1, r3, #1
 8014114:	d103      	bne.n	801411e <_raise_r+0x42>
 8014116:	2316      	movs	r3, #22
 8014118:	6003      	str	r3, [r0, #0]
 801411a:	2001      	movs	r0, #1
 801411c:	e7e7      	b.n	80140ee <_raise_r+0x12>
 801411e:	2400      	movs	r4, #0
 8014120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014124:	4628      	mov	r0, r5
 8014126:	4798      	blx	r3
 8014128:	2000      	movs	r0, #0
 801412a:	e7e0      	b.n	80140ee <_raise_r+0x12>

0801412c <raise>:
 801412c:	4b02      	ldr	r3, [pc, #8]	; (8014138 <raise+0xc>)
 801412e:	4601      	mov	r1, r0
 8014130:	6818      	ldr	r0, [r3, #0]
 8014132:	f7ff bfd3 	b.w	80140dc <_raise_r>
 8014136:	bf00      	nop
 8014138:	20000e50 	.word	0x20000e50

0801413c <_fstat_r>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	4d07      	ldr	r5, [pc, #28]	; (801415c <_fstat_r+0x20>)
 8014140:	2300      	movs	r3, #0
 8014142:	4604      	mov	r4, r0
 8014144:	4608      	mov	r0, r1
 8014146:	4611      	mov	r1, r2
 8014148:	602b      	str	r3, [r5, #0]
 801414a:	f7ed fd26 	bl	8001b9a <_fstat>
 801414e:	1c43      	adds	r3, r0, #1
 8014150:	d102      	bne.n	8014158 <_fstat_r+0x1c>
 8014152:	682b      	ldr	r3, [r5, #0]
 8014154:	b103      	cbz	r3, 8014158 <_fstat_r+0x1c>
 8014156:	6023      	str	r3, [r4, #0]
 8014158:	bd38      	pop	{r3, r4, r5, pc}
 801415a:	bf00      	nop
 801415c:	20003ec8 	.word	0x20003ec8

08014160 <_isatty_r>:
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4d06      	ldr	r5, [pc, #24]	; (801417c <_isatty_r+0x1c>)
 8014164:	2300      	movs	r3, #0
 8014166:	4604      	mov	r4, r0
 8014168:	4608      	mov	r0, r1
 801416a:	602b      	str	r3, [r5, #0]
 801416c:	f7ed fd25 	bl	8001bba <_isatty>
 8014170:	1c43      	adds	r3, r0, #1
 8014172:	d102      	bne.n	801417a <_isatty_r+0x1a>
 8014174:	682b      	ldr	r3, [r5, #0]
 8014176:	b103      	cbz	r3, 801417a <_isatty_r+0x1a>
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	bd38      	pop	{r3, r4, r5, pc}
 801417c:	20003ec8 	.word	0x20003ec8

08014180 <_kill_r>:
 8014180:	b538      	push	{r3, r4, r5, lr}
 8014182:	4d07      	ldr	r5, [pc, #28]	; (80141a0 <_kill_r+0x20>)
 8014184:	2300      	movs	r3, #0
 8014186:	4604      	mov	r4, r0
 8014188:	4608      	mov	r0, r1
 801418a:	4611      	mov	r1, r2
 801418c:	602b      	str	r3, [r5, #0]
 801418e:	f7ed fca5 	bl	8001adc <_kill>
 8014192:	1c43      	adds	r3, r0, #1
 8014194:	d102      	bne.n	801419c <_kill_r+0x1c>
 8014196:	682b      	ldr	r3, [r5, #0]
 8014198:	b103      	cbz	r3, 801419c <_kill_r+0x1c>
 801419a:	6023      	str	r3, [r4, #0]
 801419c:	bd38      	pop	{r3, r4, r5, pc}
 801419e:	bf00      	nop
 80141a0:	20003ec8 	.word	0x20003ec8

080141a4 <_getpid_r>:
 80141a4:	f7ed bc92 	b.w	8001acc <_getpid>

080141a8 <_malloc_usable_size_r>:
 80141a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141ac:	1f18      	subs	r0, r3, #4
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	bfbc      	itt	lt
 80141b2:	580b      	ldrlt	r3, [r1, r0]
 80141b4:	18c0      	addlt	r0, r0, r3
 80141b6:	4770      	bx	lr

080141b8 <_init>:
 80141b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ba:	bf00      	nop
 80141bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141be:	bc08      	pop	{r3}
 80141c0:	469e      	mov	lr, r3
 80141c2:	4770      	bx	lr

080141c4 <_fini>:
 80141c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141c6:	bf00      	nop
 80141c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ca:	bc08      	pop	{r3}
 80141cc:	469e      	mov	lr, r3
 80141ce:	4770      	bx	lr
